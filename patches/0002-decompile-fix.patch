From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Sun, 10 Jan 2021 20:40:08 +0900
Subject: [PATCH] decompile fix


diff --git a/src/main/java/com/mojang/blaze3d/audio/OggAudioStream.java b/src/main/java/com/mojang/blaze3d/audio/OggAudioStream.java
index 8f3f9946dd08ade4b63f84c517eeb2576e7af443..7cb31f32512675d3aeac8ee06266cba30e6d3909 100644
--- a/src/main/java/com/mojang/blaze3d/audio/OggAudioStream.java
+++ b/src/main/java/com/mojang/blaze3d/audio/OggAudioStream.java
@@ -190,7 +190,7 @@ public class OggAudioStream implements AudioStream {
                 memoryStack.close();
             }
 
-            return (boolean)i;
+            return false;
         }
     }
 
diff --git a/src/main/java/com/mojang/blaze3d/font/TrueTypeGlyphProvider.java b/src/main/java/com/mojang/blaze3d/font/TrueTypeGlyphProvider.java
index 42385fa668b0c757c541a88c60348138520a46a9..2565f07d853ea52b8db19ba49aa469951927757f 100644
--- a/src/main/java/com/mojang/blaze3d/font/TrueTypeGlyphProvider.java
+++ b/src/main/java/com/mojang/blaze3d/font/TrueTypeGlyphProvider.java
@@ -94,7 +94,9 @@ public class TrueTypeGlyphProvider implements GlyphProvider {
                             break label62;
                         }
 
-                        var17 = () -> f / this.oversample;
+                        // TODO: don't know what to do
+                        //var17 = () -> f / this.oversample;
+                        var17 = null;
                     } catch (Throwable var15) {
                         if (memoryStack != null) {
                             try {
diff --git a/src/main/java/com/mojang/blaze3d/platform/InputConstants.java b/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
index 9841298f7868f9a4d84c423833799d2c2cd0a254..8ca61929793f4eeca74d5eded037655d35e98fc1 100644
--- a/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
+++ b/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
@@ -196,7 +196,7 @@ public class InputConstants {
 
     public static boolean isRawMouseInputSupported() {
         try {
-            return GLFW_RAW_MOUSE_MOTION_SUPPORTED != null && GLFW_RAW_MOUSE_MOTION_SUPPORTED.invokeExact();
+            return GLFW_RAW_MOUSE_MOTION_SUPPORTED != null && (boolean) GLFW_RAW_MOUSE_MOTION_SUPPORTED.invokeExact();
         } catch (Throwable var1) {
             throw new RuntimeException(var1);
         }
@@ -218,7 +218,7 @@ public class InputConstants {
         try {
             methodHandle = lookup.findStatic(GLFW.class, "glfwRawMouseMotionSupported", methodType);
             MethodHandle methodHandle2 = lookup.findStaticGetter(GLFW.class, "GLFW_RAW_MOUSE_MOTION", Integer.TYPE);
-            i = methodHandle2.invokeExact();
+            i = (int) methodHandle2.invokeExact();
         } catch (NoSuchFieldException | NoSuchMethodException var5) {
         } catch (Throwable var6) {
             throw new RuntimeException(var6);
diff --git a/src/main/java/com/mojang/blaze3d/platform/MacosUtil.java b/src/main/java/com/mojang/blaze3d/platform/MacosUtil.java
index 8057afb69c248ea951c98a175875ba8d53b55125..7b8f00464fcbda01bfede041f84b139266491d7f 100644
--- a/src/main/java/com/mojang/blaze3d/platform/MacosUtil.java
+++ b/src/main/java/com/mojang/blaze3d/platform/MacosUtil.java
@@ -22,7 +22,7 @@ public class MacosUtil {
     }
 
     private static boolean isInKioskMode(NSObject nSObject) {
-        return (nSObject.sendRaw("styleMask", new Object[0]) & 16384L) == 16384L;
+        return ((long) nSObject.sendRaw("styleMask", new Object[0]) & 16384L) == 16384L;
     }
 
     private static void toggleFullscreen(NSObject nSObject) {
diff --git a/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java b/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
index 160a7dfb1eaeec77bb5878612c5bca4a90884427..3303a4f3f5a71713c2a6a9b21d5d1713a01b2efa 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
@@ -58,7 +58,7 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
     }
 
     private static int roundUp(int i) {
-        int i2 = 2097152;
+        int i2 = GROWTH_SIZE;
         if (i == 0) {
             return i2;
         } else {
@@ -384,15 +384,7 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
         return MemoryUtil.memSlice(this.buffer, i, i2 - i);
     }
 
-    public static record DrawState(VertexFormat a, int b, int c, VertexFormat.Mode d, VertexFormat.IndexType e, boolean f, boolean g) {
-        private final VertexFormat format;
-        final int vertexCount;
-        private final int indexCount;
-        private final VertexFormat.Mode mode;
-        private final VertexFormat.IndexType indexType;
-        private final boolean indexOnly;
-        private final boolean sequentialIndex;
-
+    public static record DrawState(VertexFormat format, int vertexCount, int indexCount, VertexFormat.Mode mode, VertexFormat.IndexType indexType, boolean indexOnly, boolean sequentialIndex) {
         public int vertexBufferSize() {
             return this.vertexCount * this.format.getVertexSize();
         }
@@ -420,34 +412,6 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
         public int bufferSize() {
             return this.indexBufferEnd();
         }
-
-        public VertexFormat format() {
-            return this.format;
-        }
-
-        public int vertexCount() {
-            return this.vertexCount;
-        }
-
-        public int indexCount() {
-            return this.indexCount;
-        }
-
-        public VertexFormat.Mode mode() {
-            return this.mode;
-        }
-
-        public VertexFormat.IndexType indexType() {
-            return this.indexType;
-        }
-
-        public boolean indexOnly() {
-            return this.indexOnly;
-        }
-
-        public boolean sequentialIndex() {
-            return this.sequentialIndex;
-        }
     }
 
     public class RenderedBuffer {
diff --git a/src/main/java/com/mojang/blaze3d/vertex/DefaultVertexFormat.java b/src/main/java/com/mojang/blaze3d/vertex/DefaultVertexFormat.java
index 00b8353961e5737884435e1a72f6fef37527c918..81b15d782de7485dba613eb60ee5fc4c090e4388 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/DefaultVertexFormat.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/DefaultVertexFormat.java
@@ -11,18 +11,18 @@ public class DefaultVertexFormat {
     public static final VertexFormatElement ELEMENT_NORMAL = new VertexFormatElement(0, VertexFormatElement.Type.BYTE, VertexFormatElement.Usage.NORMAL, 3);
     public static final VertexFormatElement ELEMENT_PADDING = new VertexFormatElement(0, VertexFormatElement.Type.BYTE, VertexFormatElement.Usage.PADDING, 1);
     public static final VertexFormatElement ELEMENT_UV = ELEMENT_UV0;
-    public static final VertexFormat BLIT_SCREEN = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV", ELEMENT_UV).put("Color", ELEMENT_COLOR).build());
-    public static final VertexFormat BLOCK = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
-    public static final VertexFormat NEW_ENTITY = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV1", ELEMENT_UV1).put("UV2", ELEMENT_UV2).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
-    public static final VertexFormat PARTICLE = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).put("UV2", ELEMENT_UV2).build());
-    public static final VertexFormat POSITION = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).build());
-    public static final VertexFormat POSITION_COLOR = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).build());
-    public static final VertexFormat POSITION_COLOR_NORMAL = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
-    public static final VertexFormat POSITION_COLOR_LIGHTMAP = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV2", ELEMENT_UV2).build());
-    public static final VertexFormat POSITION_TEX = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).build());
-    public static final VertexFormat POSITION_COLOR_TEX = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).build());
-    public static final VertexFormat POSITION_TEX_COLOR = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).build());
-    public static final VertexFormat POSITION_COLOR_TEX_LIGHTMAP = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).build());
-    public static final VertexFormat POSITION_TEX_LIGHTMAP_COLOR = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).put("Color", ELEMENT_COLOR).build());
-    public static final VertexFormat POSITION_TEX_COLOR_NORMAL = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+    public static final VertexFormat BLIT_SCREEN = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV", ELEMENT_UV).put("Color", ELEMENT_COLOR).build());
+    public static final VertexFormat BLOCK = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+    public static final VertexFormat NEW_ENTITY = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV1", ELEMENT_UV1).put("UV2", ELEMENT_UV2).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+    public static final VertexFormat PARTICLE = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).put("UV2", ELEMENT_UV2).build());
+    public static final VertexFormat POSITION = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).build());
+    public static final VertexFormat POSITION_COLOR = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).build());
+    public static final VertexFormat POSITION_COLOR_NORMAL = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+    public static final VertexFormat POSITION_COLOR_LIGHTMAP = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV2", ELEMENT_UV2).build());
+    public static final VertexFormat POSITION_TEX = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).build());
+    public static final VertexFormat POSITION_COLOR_TEX = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).build());
+    public static final VertexFormat POSITION_TEX_COLOR = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).build());
+    public static final VertexFormat POSITION_COLOR_TEX_LIGHTMAP = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).build());
+    public static final VertexFormat POSITION_TEX_LIGHTMAP_COLOR = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).put("Color", ELEMENT_COLOR).build());
+    public static final VertexFormat POSITION_TEX_COLOR_NORMAL = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
 }
\ No newline at end of file
diff --git a/src/main/java/com/mojang/realmsclient/client/FileUpload.java b/src/main/java/com/mojang/realmsclient/client/FileUpload.java
index 698735d764d710d351613726a35f7b7ca54415a4..6de8b02512666a9346ff64abd90d3556f7b16167 100644
--- a/src/main/java/com/mojang/realmsclient/client/FileUpload.java
+++ b/src/main/java/com/mojang/realmsclient/client/FileUpload.java
@@ -159,7 +159,7 @@ public class FileUpload {
     }
 
     private long getRetryDelaySeconds(HttpResponse httpResponse) {
-        return Optional.ofNullable(httpResponse.getFirstHeader("Retry-After")).map(NameValuePair::getValue).map(Long::valueOf).orElse(0L);
+        return Optional.ofNullable(httpResponse.getFirstHeader("Retry-After")).map(org.apache.http.Header::getValue).map(Long::valueOf).orElse(0L);
     }
 
     public boolean isFinished() {
diff --git a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java
index 06727ad242e63d73a0ab33287fac17142bccd2a0..dd8a60fde2746e46395f366160381915efb0af95 100644
--- a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java
+++ b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java
@@ -74,7 +74,7 @@ public class RealmsBrokenWorldScreen extends RealmsScreen {
             boolean flag = i != this.serverData.activeSlot || this.serverData.worldType == RealmsServer.WorldType.MINIGAME;
             Button button;
             if (flag) {
-                button = new Button(this.getFramePositionX(i), row(8), 80, 20, Component.translatable("mco.brokenworld.play"), (button) -> {
+                button = new Button(this.getFramePositionX(i), row(8), 80, 20, Component.translatable("mco.brokenworld.play"), (buttonIn) -> {
                     if (((RealmsWorldOptions)this.serverData.slots.get(i)).empty) {
                         RealmsResetWorldScreen realmsResetWorldScreen = new RealmsResetWorldScreen(this, this.serverData, Component.translatable("mco.configure.world.switch.slot"), Component.translatable("mco.configure.world.switch.slot.subtitle"), 10526880, CommonComponents.GUI_CANCEL, this::doSwitchOrReset, () -> {
                             this.minecraft.setScreen(this);
@@ -89,11 +89,11 @@ public class RealmsBrokenWorldScreen extends RealmsScreen {
 
                 });
             } else {
-                button = new Button(this.getFramePositionX(i), row(8), 80, 20, Component.translatable("mco.brokenworld.download"), (button) -> {
+                button = new Button(this.getFramePositionX(i), row(8), 80, 20, Component.translatable("mco.brokenworld.download"), (buttonIn) -> {
                     Component component = Component.translatable("mco.configure.world.restore.download.question.line1");
                     Component component2 = Component.translatable("mco.configure.world.restore.download.question.line2");
-                    this.minecraft.setScreen(new RealmsLongConfirmationScreen((flag) -> {
-                        if (flag) {
+                    this.minecraft.setScreen(new RealmsLongConfirmationScreen((flagIn) -> {
+                        if (flagIn) {
                             this.downloadWorld(i);
                         } else {
                             this.minecraft.setScreen(this);
@@ -109,7 +109,7 @@ public class RealmsBrokenWorldScreen extends RealmsScreen {
             }
 
             this.addRenderableWidget(button);
-            this.addRenderableWidget(new Button(this.getFramePositionX(i), row(10), 80, 20, Component.translatable("mco.brokenworld.reset"), (button) -> {
+            this.addRenderableWidget(new Button(this.getFramePositionX(i), row(10), 80, 20, Component.translatable("mco.brokenworld.reset"), (buttonIn) -> {
                 RealmsResetWorldScreen realmsResetWorldScreen = new RealmsResetWorldScreen(this, this.serverData, this::doSwitchOrReset, () -> {
                     this.minecraft.setScreen(this);
                     this.doSwitchOrReset();
diff --git a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsSelectWorldTemplateScreen.java b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsSelectWorldTemplateScreen.java
index b4e1dd11f658264ce49346b7ee150c2b898cf01d..d97f1796073031ce7630da1b88b1cbe9dcfd09f8 100644
--- a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsSelectWorldTemplateScreen.java
+++ b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsSelectWorldTemplateScreen.java
@@ -185,43 +185,43 @@ public class RealmsSelectWorldTemplateScreen extends RealmsScreen {
 
     }
 
-    private void fetchTemplatesAsync(final WorldTemplatePaginatedList worldTemplatePaginatedList) {
+    private void fetchTemplatesAsync(final WorldTemplatePaginatedList worldTemplatePaginatedListParam) {
         (new Thread("realms-template-fetcher") {
             public void run() {
-                WorldTemplatePaginatedList worldTemplatePaginatedList = worldTemplatePaginatedList;
-
-                Either<WorldTemplatePaginatedList, String> either;
-                for(RealmsClient realmsClient = RealmsClient.create(); worldTemplatePaginatedList != null; worldTemplatePaginatedList = (WorldTemplatePaginatedList)RealmsSelectWorldTemplateScreen.this.minecraft.submit(() -> {
-                    if (either.right().isPresent()) {
-                        RealmsSelectWorldTemplateScreen.LOGGER.error("Couldn't fetch templates: {}", either.right().get());
-                        if (RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.isEmpty()) {
-                            RealmsSelectWorldTemplateScreen.this.noTemplatesMessage = TextRenderingUtils.decompose(I18n.get("mco.template.select.failure"));
-                        }
-
-                        return null;
-                    } else {
-                        WorldTemplatePaginatedList worldTemplatePaginatedList = (WorldTemplatePaginatedList)either.left().get();
-
-                        for(WorldTemplate worldTemplate : worldTemplatePaginatedList.templates) {
-                            RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.addEntry(worldTemplate);
-                        }
-
-                        if (worldTemplatePaginatedList.templates.isEmpty()) {
+                WorldTemplatePaginatedList worldTemplatePaginatedList = worldTemplatePaginatedListParam;
+
+                RealmsClient realmsClient = RealmsClient.create();
+                while (worldTemplatePaginatedList != null) {
+                    Either<WorldTemplatePaginatedList, String> either = RealmsSelectWorldTemplateScreen.this.fetchTemplates(worldTemplatePaginatedList, realmsClient);
+                    worldTemplatePaginatedList = RealmsSelectWorldTemplateScreen.this.minecraft.submit(() -> {
+                        if (either.right().isPresent()) {
+                            RealmsSelectWorldTemplateScreen.LOGGER.error("Couldn't fetch templates: {}", either.right().get());
                             if (RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.isEmpty()) {
-                                String s = I18n.get("mco.template.select.none", "%link");
-                                TextRenderingUtils.LineSegment lineSegment = TextRenderingUtils.LineSegment.link(I18n.get("mco.template.select.none.linkTitle"), "https://aka.ms/MinecraftRealmsContentCreator");
-                                RealmsSelectWorldTemplateScreen.this.noTemplatesMessage = TextRenderingUtils.decompose(s, lineSegment);
+                                RealmsSelectWorldTemplateScreen.this.noTemplatesMessage = TextRenderingUtils.decompose(I18n.get("mco.template.select.failure"));
                             }
 
                             return null;
                         } else {
-                            return worldTemplatePaginatedList;
+                            WorldTemplatePaginatedList worldTemplatePaginatedListIn = either.left().get();
+
+                            for (WorldTemplate worldTemplate : worldTemplatePaginatedListIn.templates) {
+                                RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.addEntry(worldTemplate);
+                            }
+
+                            if (worldTemplatePaginatedListIn.templates.isEmpty()) {
+                                if (RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.isEmpty()) {
+                                    String s = I18n.get("mco.template.select.none", "%link");
+                                    TextRenderingUtils.LineSegment lineSegment = TextRenderingUtils.LineSegment.link(I18n.get("mco.template.select.none.linkTitle"), "https://aka.ms/MinecraftRealmsContentCreator");
+                                    RealmsSelectWorldTemplateScreen.this.noTemplatesMessage = TextRenderingUtils.decompose(s, lineSegment);
+                                }
+
+                                return null;
+                            } else {
+                                return worldTemplatePaginatedListIn;
+                            }
                         }
-                    }
-                }).join()) {
-                    either = RealmsSelectWorldTemplateScreen.this.fetchTemplates(worldTemplatePaginatedList, realmsClient);
+                    }).join();
                 }
-
             }
         }).start();
     }
diff --git a/src/main/java/net/minecraft/Util.java b/src/main/java/net/minecraft/Util.java
index 791aebc28fb787764aaf9d377b88d5b0edf03f8c..f7cb7bbc3af34c680af9c934398a60e4455cf1a3 100644
--- a/src/main/java/net/minecraft/Util.java
+++ b/src/main/java/net/minecraft/Util.java
@@ -30,6 +30,7 @@ import java.nio.file.Path;
 import java.nio.file.spi.FileSystemProvider;
 import java.security.AccessController;
 import java.security.PrivilegedActionException;
+import java.security.PrivilegedExceptionAction;
 import java.time.Duration;
 import java.time.Instant;
 import java.util.Arrays;
@@ -144,21 +145,21 @@ public class Util {
     }
 
     private static int getMaxThreads() {
-        String s = System.getProperty("max.bg.threads");
+        String s = System.getProperty(MAX_THREADS_SYSTEM_PROPERTY);
         if (s != null) {
             try {
                 int i = Integer.parseInt(s);
-                if (i >= 1 && i <= 255) {
+                if (i >= 1 && i <= DEFAULT_MAX_THREADS) {
                     return i;
                 }
 
-                LOGGER.error("Wrong {} property value '{}'. Should be an integer value between 1 and {}.", new Object[]{"max.bg.threads", s, 255});
+                LOGGER.error("Wrong {} property value '{}'. Should be an integer value between 1 and {}.", new Object[]{"max.bg.threads", s, DEFAULT_MAX_THREADS});
             } catch (NumberFormatException var2) {
-                LOGGER.error("Could not parse {} property value '{}'. Should be an integer value between 1 and {}.", new Object[]{"max.bg.threads", s, 255});
+                LOGGER.error("Could not parse {} property value '{}'. Should be an integer value between 1 and {}.", new Object[]{"max.bg.threads", s, DEFAULT_MAX_THREADS});
             }
         }
 
-        return 255;
+        return DEFAULT_MAX_THREADS;
     }
 
     public static ExecutorService bootstrapExecutor() {
@@ -269,7 +270,7 @@ public class Util {
             String s2 = thread.getName();
             thread.setName(s);
 
-            Object var4;
+            V var4;
             try {
                 var4 = supplier.get();
             } finally {
@@ -363,7 +364,7 @@ public class Util {
     }
 
     public static <K> Strategy<K> identityStrategy() {
-        return Util.IdentityStrategy.INSTANCE;
+        return (Strategy<K>) IdentityStrategy.INSTANCE;
     }
 
     public static <V> CompletableFuture<List<V>> sequence(List<? extends CompletableFuture<V>> list) {
@@ -816,7 +817,7 @@ public class Util {
 
         public void openUrl(URL url) {
             try {
-                Process process = (Process)AccessController.doPrivileged(() -> Runtime.getRuntime().exec(this.getOpenUrlArguments(url)));
+                Process process = (Process)AccessController.doPrivileged((PrivilegedExceptionAction<?>) () -> Runtime.getRuntime().exec(this.getOpenUrlArguments(url)));
 
                 for(String s : IOUtils.readLines(process.getErrorStream())) {
                     Util.LOGGER.error(s);
diff --git a/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java b/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java
index ecefb26e9db36073bef81976ccc80b51f97b8cb0..4ca76c9bb63ffdb0b6aca6c6f6fd115a39a6a22c 100644
--- a/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java
@@ -198,11 +198,11 @@ public class PlayerPredicate implements EntitySubPredicate {
         if (!this.stats.isEmpty()) {
             JsonArray jsonArray = new JsonArray();
             this.stats.forEach((stat, ints) -> {
-                JsonObject jsonObject = new JsonObject();
-                jsonObject.addProperty("type", Registry.STAT_TYPE.getKey(stat.getType()).toString());
-                jsonObject.addProperty("stat", getStatValueId(stat).toString());
-                jsonObject.add("value", ints.serializeToJson());
-                jsonArray.add(jsonObject);
+                JsonObject jsonObjectIn = new JsonObject();
+                jsonObjectIn.addProperty("type", Registry.STAT_TYPE.getKey(stat.getType()).toString());
+                jsonObjectIn.addProperty("stat", getStatValueId(stat).toString());
+                jsonObjectIn.add("value", ints.serializeToJson());
+                jsonArray.add(jsonObjectIn);
             });
             jsonObject.add("stats", jsonArray);
         }
diff --git a/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java b/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java
index 37260d9654e733198d03183dbc764d955befd279..06f47884e6d29f5671228f180587df1a17d1ca64 100644
--- a/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java
@@ -137,7 +137,7 @@ public class StatePropertiesPredicate {
         protected <T extends Comparable<T>> boolean match(StateHolder<?, ?> stateHolder, Property<T> property) {
             T comparable = stateHolder.getValue(property);
             Optional<T> optional = property.getValue(this.value);
-            return optional.isPresent() && comparable.compareTo((Comparable)optional.get()) == 0;
+            return optional.isPresent() && comparable.compareTo(optional.get()) == 0;
         }
 
         public JsonElement toJson() {
@@ -190,14 +190,14 @@ public class StatePropertiesPredicate {
             T comparable = stateHolder.getValue(property);
             if (this.minValue != null) {
                 Optional<T> optional = property.getValue(this.minValue);
-                if (!optional.isPresent() || comparable.compareTo((Comparable)optional.get()) < 0) {
+                if (!optional.isPresent() || comparable.compareTo(optional.get()) < 0) {
                     return false;
                 }
             }
 
             if (this.maxValue != null) {
                 Optional<T> optional2 = property.getValue(this.maxValue);
-                if (!optional2.isPresent() || comparable.compareTo((Comparable)optional2.get()) > 0) {
+                if (!optional2.isPresent() || comparable.compareTo(optional2.get()) > 0) {
                     return false;
                 }
             }
diff --git a/src/main/java/net/minecraft/client/ClientTelemetryManager.java b/src/main/java/net/minecraft/client/ClientTelemetryManager.java
index 0291cfd057281f9bc27a6ef307d6b02081dd02a9..878edfcea87f342356d596006a61538445e77e5a 100644
--- a/src/main/java/net/minecraft/client/ClientTelemetryManager.java
+++ b/src/main/java/net/minecraft/client/ClientTelemetryManager.java
@@ -107,10 +107,7 @@ public class ClientTelemetryManager {
 
     }
 
-    static record PlayerInfo(GameType a, boolean b) {
-        private final GameType gameType;
-        private final boolean hardcore;
-
+    static record PlayerInfo(GameType gameType, boolean hardcore) {
         public int getGameModeId() {
             if (this.hardcore && this.gameType == GameType.SURVIVAL) {
                 return 99;
@@ -136,13 +133,5 @@ public class ClientTelemetryManager {
                 return var10000;
             }
         }
-
-        public GameType gameType() {
-            return this.gameType;
-        }
-
-        public boolean hardcore() {
-            return this.hardcore;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/Minecraft.java b/src/main/java/net/minecraft/client/Minecraft.java
index fd511aeef161061cc0f9e23c43ccdef550c8367d..429f760733d6108d09b320fec9de4341f69edde3 100644
--- a/src/main/java/net/minecraft/client/Minecraft.java
+++ b/src/main/java/net/minecraft/client/Minecraft.java
@@ -513,7 +513,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
                 this.options.fullscreen().set(this.window.isFullscreen());
             }
         } else {
-            StringBuilder stringBuilder = new StringBuilder("Recovering from unsupported resolution (" + this.window.getWidth() + "x" + this.window.getHeight() + ").\nPlease make sure you have up-to-date drivers (see aka.ms/mcdriver for instructions).");
+            StringBuilder stringBuilder = new StringBuilder("Recovering from unsupported resolution (" + this.window.getWidth() + "x" + this.window.getHeight() + ").\n" + UPDATE_DRIVERS_ADVICE);
             if (GlDebug.isDebugEnabled()) {
                 stringBuilder.append("\n\nReported GL debug messages:\n").append(String.join("\n", GlDebug.getLastOpenGlDebugMessages()));
             }
@@ -675,9 +675,9 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
     }
 
     private void createSearchTrees() {
-        this.searchRegistry.register(SearchRegistry.CREATIVE_NAMES, (list) -> new FullTextSearchTree((itemStack) -> itemStack.getTooltipLines((Player)null, TooltipFlag.Default.NORMAL).stream().map((component) -> ChatFormatting.stripFormatting(component.getString()).trim()).filter((s) -> !s.isEmpty()), (itemStack) -> Stream.of(Registry.ITEM.getKey(itemStack.getItem())), list));
-        this.searchRegistry.register(SearchRegistry.CREATIVE_TAGS, (list) -> new IdSearchTree((itemStack) -> itemStack.getTags().map(TagKey::location), list));
-        this.searchRegistry.register(SearchRegistry.RECIPE_COLLECTIONS, (list) -> new FullTextSearchTree((recipeCollection) -> recipeCollection.getRecipes().stream().flatMap((recipe) -> recipe.getResultItem().getTooltipLines((Player)null, TooltipFlag.Default.NORMAL).stream()).map((component) -> ChatFormatting.stripFormatting(component.getString()).trim()).filter((s) -> !s.isEmpty()), (recipeCollection) -> recipeCollection.getRecipes().stream().map((recipe) -> Registry.ITEM.getKey(recipe.getResultItem().getItem())), list));
+        this.searchRegistry.register(SearchRegistry.CREATIVE_NAMES, (list) -> new FullTextSearchTree<>((itemStack) -> itemStack.getTooltipLines((Player)null, TooltipFlag.Default.NORMAL).stream().map((component) -> ChatFormatting.stripFormatting(component.getString()).trim()).filter((s) -> !s.isEmpty()), (itemStack) -> Stream.of(Registry.ITEM.getKey(itemStack.getItem())), list));
+        this.searchRegistry.register(SearchRegistry.CREATIVE_TAGS, (list) -> new IdSearchTree<>((itemStack) -> itemStack.getTags().map(TagKey::location), list));
+        this.searchRegistry.register(SearchRegistry.RECIPE_COLLECTIONS, (list) -> new FullTextSearchTree<>((recipeCollection) -> recipeCollection.getRecipes().stream().flatMap((recipe) -> recipe.getResultItem().getTooltipLines((Player)null, TooltipFlag.Default.NORMAL).stream()).map((component) -> ChatFormatting.stripFormatting(component.getString()).trim()).filter((s) -> !s.isEmpty()), (recipeCollection) -> recipeCollection.getRecipes().stream().map((recipe) -> Registry.ITEM.getKey(recipe.getResultItem().getItem())), list));
     }
 
     private void onFullscreenError(int i, long l) {
@@ -963,7 +963,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
             this.profiler.pop();
             this.profiler.push("tick");
 
-            for(int i2 = 0; i2 < Math.min(10, i); ++i2) {
+            for(int i2 = 0; i2 < Math.min(MAX_TICKS_PER_UPDATE, i); ++i2) {
                 this.profiler.incrementCounter("clientTick");
                 this.tick();
             }
@@ -2134,13 +2134,13 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
             systemReport.setDetail("Resource Packs", (Supplier<String>)(() -> {
                 StringBuilder stringBuilder = new StringBuilder();
 
-                for(String s : options.resourcePacks) {
+                for(String resourcePack : options.resourcePacks) {
                     if (stringBuilder.length() > 0) {
                         stringBuilder.append(", ");
                     }
 
-                    stringBuilder.append(s);
-                    if (options.incompatibleResourcePacks.contains(s)) {
+                    stringBuilder.append(resourcePack);
+                    if (options.incompatibleResourcePacks.contains(resourcePack)) {
                         stringBuilder.append(" (incompatible)");
                     }
                 }
@@ -2162,7 +2162,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
     }
 
     public CompletableFuture<Void> delayTextureReload() {
-        return this.submit(this::reloadResourcePacks).thenCompose((completableFuture) -> completableFuture);
+        return this.submit((Supplier<CompletableFuture<Void>>) this::reloadResourcePacks).thenCompose((completableFuture) -> completableFuture);
     }
 
     public void setCurrentServer(@Nullable ServerData serverData) {
diff --git a/src/main/java/net/minecraft/client/OptionInstance.java b/src/main/java/net/minecraft/client/OptionInstance.java
index 619ece31020ba8d363c6e2708abceece00f330ee..76fd2c7f054c6c434396847f02b54af7bf2fb7a8 100644
--- a/src/main/java/net/minecraft/client/OptionInstance.java
+++ b/src/main/java/net/minecraft/client/OptionInstance.java
@@ -58,7 +58,7 @@ public final class OptionInstance<T> {
     }
 
     public static OptionInstance<Boolean> createBoolean(String s, OptionInstance.TooltipSupplierFactory<Boolean> tooltipSupplierFactory, boolean flag, Consumer<Boolean> consumer) {
-        return new OptionInstance(s, tooltipSupplierFactory, (component, flagx) -> flagx ? CommonComponents.OPTION_ON : CommonComponents.OPTION_OFF, BOOLEAN_VALUES, (T)flag, consumer);
+        return new OptionInstance<>(s, tooltipSupplierFactory, (component, flagx) -> flagx ? CommonComponents.OPTION_ON : CommonComponents.OPTION_OFF, BOOLEAN_VALUES, flag, consumer);
     }
 
     public OptionInstance(String s, OptionInstance.TooltipSupplierFactory<T> tooltipSupplierFactory, OptionInstance.CaptionBasedToString<T> captionBasedToString, OptionInstance.ValueSet<T> valueSet, T object, Consumer<T> consumer) {
@@ -132,13 +132,7 @@ public final class OptionInstance<T> {
         return this.values;
     }
 
-    public static record AltEnum<T>(List<T> a, List<T> b, BooleanSupplier c, OptionInstance.CycleableValueSet.ValueSetter<T> d, Codec<T> e) implements OptionInstance.CycleableValueSet<T> {
-        private final List<T> values;
-        private final List<T> altValues;
-        private final BooleanSupplier altCondition;
-        private final OptionInstance.CycleableValueSet.ValueSetter<T> valueSetter;
-        private final Codec<T> codec;
-
+    public static record AltEnum<T>(List<T> values, List<T> altValues, BooleanSupplier altCondition, OptionInstance.CycleableValueSet.ValueSetter<T> valueSetter, Codec<T> codec) implements OptionInstance.CycleableValueSet<T> {
         public CycleButton.ValueListSupplier<T> valueListSupplier() {
             return CycleButton.ValueListSupplier.create(this.altCondition, this.values, this.altValues);
         }
@@ -146,36 +140,13 @@ public final class OptionInstance<T> {
         public Optional<T> validateValue(T object) {
             return (this.altCondition.getAsBoolean() ? this.altValues : this.values).contains(object) ? Optional.of(object) : Optional.empty();
         }
-
-        public List<T> values() {
-            return this.values;
-        }
-
-        public List<T> altValues() {
-            return this.altValues;
-        }
-
-        public BooleanSupplier altCondition() {
-            return this.altCondition;
-        }
-
-        public OptionInstance.CycleableValueSet.ValueSetter<T> valueSetter() {
-            return this.valueSetter;
-        }
-
-        public Codec<T> codec() {
-            return this.codec;
-        }
     }
 
     public interface CaptionBasedToString<T> {
         Component toString(Component var1, T var2);
     }
 
-    public static record ClampingLazyMaxIntRange(int a, IntSupplier b) implements OptionInstance.IntRangeBase, OptionInstance.SliderableOrCyclableValueSet<Integer> {
-        private final int minInclusive;
-        private final IntSupplier maxSupplier;
-
+    public static record ClampingLazyMaxIntRange(int minInclusive, IntSupplier maxSupplier) implements OptionInstance.IntRangeBase, OptionInstance.SliderableOrCyclableValueSet<Integer> {
         public Optional<Integer> validateValue(Integer integer) {
             return Optional.of(Mth.clamp(integer, this.minInclusive(), this.maxInclusive()));
         }
@@ -199,14 +170,6 @@ public final class OptionInstance<T> {
         public CycleButton.ValueListSupplier<Integer> valueListSupplier() {
             return CycleButton.ValueListSupplier.create(IntStream.range(this.minInclusive, this.maxInclusive() + 1).boxed().toList());
         }
-
-        public int minInclusive() {
-            return this.minInclusive;
-        }
-
-        public IntSupplier maxSupplier() {
-            return this.maxSupplier;
-        }
     }
 
     interface CycleableValueSet<T> extends OptionInstance.ValueSet<T> {
@@ -228,10 +191,7 @@ public final class OptionInstance<T> {
         }
     }
 
-    public static record Enum<T>(List<T> a, Codec<T> b) implements OptionInstance.CycleableValueSet<T> {
-        private final List<T> values;
-        private final Codec<T> codec;
-
+    public static record Enum<T>(List<T> values, Codec<T> codec) implements OptionInstance.CycleableValueSet<T> {
         public Optional<T> validateValue(T object) {
             return this.values.contains(object) ? Optional.of(object) : Optional.empty();
         }
@@ -239,20 +199,9 @@ public final class OptionInstance<T> {
         public CycleButton.ValueListSupplier<T> valueListSupplier() {
             return CycleButton.ValueListSupplier.create(this.values);
         }
-
-        public List<T> values() {
-            return this.values;
-        }
-
-        public Codec<T> codec() {
-            return this.codec;
-        }
     }
 
-    public static record IntRange(int a, int b) implements OptionInstance.IntRangeBase {
-        private final int minInclusive;
-        private final int maxInclusive;
-
+    public static record IntRange(int minInclusive, int maxInclusive) implements OptionInstance.IntRangeBase {
         public Optional<Integer> validateValue(Integer integer) {
             return integer.compareTo(this.minInclusive()) >= 0 && integer.compareTo(this.maxInclusive()) <= 0 ? Optional.of(integer) : Optional.empty();
         }
@@ -286,7 +235,7 @@ public final class OptionInstance<T> {
         default <R> OptionInstance.SliderableValueSet<R> xmap(final IntFunction<? extends R> intFunction, final ToIntFunction<? super R> toIntFunction) {
             return new OptionInstance.SliderableValueSet<R>() {
                 public Optional<R> validateValue(R object) {
-                    return IntRangeBase.this.validateValue((T)Integer.valueOf(toIntFunction.applyAsInt(object))).map(intFunction::apply);
+                    return IntRangeBase.this.validateValue(toIntFunction.applyAsInt(object)).map(intFunction::apply);
                 }
 
                 public double toSliderValue(R object) {
@@ -304,11 +253,7 @@ public final class OptionInstance<T> {
         }
     }
 
-    public static record LazyEnum<T>(Supplier<List<T>> a, Function<T, Optional<T>> b, Codec<T> c) implements OptionInstance.CycleableValueSet<T> {
-        private final Supplier<List<T>> values;
-        private final Function<T, Optional<T>> validateValue;
-        private final Codec<T> codec;
-
+    public static record LazyEnum<T>(Supplier<List<T>> values, Function<T, Optional<T>> validateValue, Codec<T> codec) implements OptionInstance.CycleableValueSet<T> {
         public Optional<T> validateValue(T object) {
             return this.validateValue.apply(object);
         }
@@ -316,18 +261,6 @@ public final class OptionInstance<T> {
         public CycleButton.ValueListSupplier<T> valueListSupplier() {
             return CycleButton.ValueListSupplier.create(this.values.get());
         }
-
-        public Supplier<List<T>> values() {
-            return this.values;
-        }
-
-        public Function<T, Optional<T>> validateValue() {
-            return this.validateValue;
-        }
-
-        public Codec<T> codec() {
-            return this.codec;
-        }
     }
 
     static final class OptionInstanceSliderButton<N> extends AbstractOptionSliderButton implements TooltipAccessor {
diff --git a/src/main/java/net/minecraft/client/Options.java b/src/main/java/net/minecraft/client/Options.java
index ea88db4159b3b49488d3f9f3825a1bd0071584ea..0dfcfd4e37258dac3c7884a5ccff00cdaf6c4272 100644
--- a/src/main/java/net/minecraft/client/Options.java
+++ b/src/main/java/net/minecraft/client/Options.java
@@ -88,7 +88,7 @@ public class Options {
     private final OptionInstance<Boolean> darkMojangStudiosBackground = OptionInstance.createBoolean("options.darkMojangStudiosBackgroundColor", OptionInstance.cachedConstantTooltip(ACCESSIBILITY_TOOLTIP_DARK_MOJANG_BACKGROUND), false);
     private static final Component ACCESSIBILITY_TOOLTIP_HIDE_LIGHTNING_FLASHES = Component.translatable("options.hideLightningFlashes.tooltip");
     private final OptionInstance<Boolean> hideLightningFlash = OptionInstance.createBoolean("options.hideLightningFlashes", OptionInstance.cachedConstantTooltip(ACCESSIBILITY_TOOLTIP_HIDE_LIGHTNING_FLASHES), false);
-    private final OptionInstance<Double> sensitivity = new OptionInstance("options.sensitivity", OptionInstance.noTooltip(), (component, d) -> {
+    private final OptionInstance<Double> sensitivity = new OptionInstance<>("options.sensitivity", OptionInstance.noTooltip(), (component, d) -> {
         if (d == 0.0D) {
             return genericValueLabel(component, Component.translatable("options.sensitivity.min"));
         } else {
@@ -99,10 +99,10 @@ public class Options {
     private final OptionInstance<Integer> renderDistance;
     private final OptionInstance<Integer> simulationDistance;
     private int serverRenderDistance = 0;
-    private final OptionInstance<Double> entityDistanceScaling = new OptionInstance("options.entityDistanceScaling", OptionInstance.noTooltip(), Options::percentValueLabel, (new OptionInstance.IntRange(2, 20)).xmap((i) -> (double)i / 4.0D, (d) -> (int)(d * 4.0D)), Codec.doubleRange(0.5D, 5.0D), 1.0D, (d) -> {
+    private final OptionInstance<Double> entityDistanceScaling = new OptionInstance<>("options.entityDistanceScaling", OptionInstance.noTooltip(), Options::percentValueLabel, (new OptionInstance.IntRange(2, 20)).xmap((i) -> (double)i / 4.0D, (d) -> (int)(d * 4.0D)), Codec.doubleRange(0.5D, 5.0D), 1.0D, (d) -> {
     });
     public static final int UNLIMITED_FRAMERATE_CUTOFF = 260;
-    private final OptionInstance<Integer> framerateLimit = new OptionInstance("options.framerateLimit", OptionInstance.noTooltip(), (component, integer) -> integer == 260 ? genericValueLabel(component, Component.translatable("options.framerateLimit.max")) : genericValueLabel(component, Component.translatable("options.framerate", integer)), (new OptionInstance.IntRange(1, 26)).xmap((i) -> i * 10, (integer) -> integer / 10), Codec.intRange(10, 260), 120, (integer) -> Minecraft.getInstance().getWindow().setFramerateLimit(integer));
+    private final OptionInstance<Integer> framerateLimit = new OptionInstance<>("options.framerateLimit", OptionInstance.noTooltip(), (component, integer) -> integer == 260 ? genericValueLabel(component, Component.translatable("options.framerateLimit.max")) : genericValueLabel(component, Component.translatable("options.framerate", integer)), (new OptionInstance.IntRange(1, 26)).xmap((i) -> i * 10, (integer) -> integer / 10), Codec.intRange(10, 260), 120, (integer) -> Minecraft.getInstance().getWindow().setFramerateLimit(integer));
     private final OptionInstance<CloudStatus> cloudStatus = new OptionInstance<>("options.renderClouds", OptionInstance.noTooltip(), OptionInstance.forOptionEnum(), new OptionInstance.Enum<>(Arrays.asList(CloudStatus.values()), Codec.either(Codec.BOOL, Codec.STRING).xmap((either) -> (CloudStatus)either.map((flag) -> flag ? CloudStatus.FANCY : CloudStatus.OFF, (s) -> {
             CloudStatus var10000;
             switch(s) {
@@ -214,10 +214,10 @@ public class Options {
     public List<String> incompatibleResourcePacks = Lists.newArrayList();
     private final OptionInstance<ChatVisiblity> chatVisibility = new OptionInstance<>("options.chat.visibility", OptionInstance.noTooltip(), OptionInstance.forOptionEnum(), new OptionInstance.Enum<>(Arrays.asList(ChatVisiblity.values()), Codec.INT.xmap(ChatVisiblity::byId, ChatVisiblity::getId)), ChatVisiblity.FULL, (chatVisiblity) -> {
     });
-    private final OptionInstance<Double> chatOpacity = new OptionInstance("options.chat.opacity", OptionInstance.noTooltip(), (component, d) -> percentValueLabel(component, d * 0.9D + 0.1D), OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> Minecraft.getInstance().gui.getChat().rescaleChat());
-    private final OptionInstance<Double> chatLineSpacing = new OptionInstance("options.chat.line_spacing", OptionInstance.noTooltip(), Options::percentValueLabel, OptionInstance.UnitDouble.INSTANCE, 0.0D, (d) -> {
+    private final OptionInstance<Double> chatOpacity = new OptionInstance<>("options.chat.opacity", OptionInstance.noTooltip(), (component, d) -> percentValueLabel(component, d * 0.9D + 0.1D), OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> Minecraft.getInstance().gui.getChat().rescaleChat());
+    private final OptionInstance<Double> chatLineSpacing = new OptionInstance<>("options.chat.line_spacing", OptionInstance.noTooltip(), Options::percentValueLabel, OptionInstance.UnitDouble.INSTANCE, 0.0D, (d) -> {
     });
-    private final OptionInstance<Double> textBackgroundOpacity = new OptionInstance("options.accessibility.text_background_opacity", OptionInstance.noTooltip(), Options::percentValueLabel, OptionInstance.UnitDouble.INSTANCE, 0.5D, (d) -> Minecraft.getInstance().gui.getChat().rescaleChat());
+    private final OptionInstance<Double> textBackgroundOpacity = new OptionInstance<>("options.accessibility.text_background_opacity", OptionInstance.noTooltip(), Options::percentValueLabel, OptionInstance.UnitDouble.INSTANCE, 0.5D, (d) -> Minecraft.getInstance().gui.getChat().rescaleChat());
     @Nullable
     public String fullscreenVideoModeString;
     public boolean hideServerAddress;
@@ -228,26 +228,26 @@ public class Options {
     public int overrideWidth;
     public int overrideHeight;
     public boolean heldItemTooltips = true;
-    private final OptionInstance<Double> chatScale = new OptionInstance("options.chat.scale", OptionInstance.noTooltip(), (component, d) -> (Component)(d == 0.0D ? CommonComponents.optionStatus(component, false) : percentValueLabel(component, d)), OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> Minecraft.getInstance().gui.getChat().rescaleChat());
-    private final OptionInstance<Double> chatWidth = new OptionInstance("options.chat.width", OptionInstance.noTooltip(), (component, d) -> pixelValueLabel(component, ChatComponent.getWidth(d)), OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> Minecraft.getInstance().gui.getChat().rescaleChat());
-    private final OptionInstance<Double> chatHeightUnfocused = new OptionInstance("options.chat.height.unfocused", OptionInstance.noTooltip(), (component, d) -> pixelValueLabel(component, ChatComponent.getHeight(d)), OptionInstance.UnitDouble.INSTANCE, ChatComponent.defaultUnfocusedPct(), (d) -> Minecraft.getInstance().gui.getChat().rescaleChat());
-    private final OptionInstance<Double> chatHeightFocused = new OptionInstance("options.chat.height.focused", OptionInstance.noTooltip(), (component, d) -> pixelValueLabel(component, ChatComponent.getHeight(d)), OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> Minecraft.getInstance().gui.getChat().rescaleChat());
-    private final OptionInstance<Double> chatDelay = new OptionInstance("options.chat.delay_instant", OptionInstance.noTooltip(), (component, d) -> d <= 0.0D ? Component.translatable("options.chat.delay_none") : Component.translatable("options.chat.delay", String.format("%.1f", d)), (new OptionInstance.IntRange(0, 60)).xmap((i) -> (double)i / 10.0D, (d) -> (int)(d * 10.0D)), Codec.doubleRange(0.0D, 6.0D), 0.0D, (d) -> {
+    private final OptionInstance<Double> chatScale = new OptionInstance<>("options.chat.scale", OptionInstance.noTooltip(), (component, d) -> (Component)(d == 0.0D ? CommonComponents.optionStatus(component, false) : percentValueLabel(component, d)), OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> Minecraft.getInstance().gui.getChat().rescaleChat());
+    private final OptionInstance<Double> chatWidth = new OptionInstance<>("options.chat.width", OptionInstance.noTooltip(), (component, d) -> pixelValueLabel(component, ChatComponent.getWidth(d)), OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> Minecraft.getInstance().gui.getChat().rescaleChat());
+    private final OptionInstance<Double> chatHeightUnfocused = new OptionInstance<>("options.chat.height.unfocused", OptionInstance.noTooltip(), (component, d) -> pixelValueLabel(component, ChatComponent.getHeight(d)), OptionInstance.UnitDouble.INSTANCE, ChatComponent.defaultUnfocusedPct(), (d) -> Minecraft.getInstance().gui.getChat().rescaleChat());
+    private final OptionInstance<Double> chatHeightFocused = new OptionInstance<>("options.chat.height.focused", OptionInstance.noTooltip(), (component, d) -> pixelValueLabel(component, ChatComponent.getHeight(d)), OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> Minecraft.getInstance().gui.getChat().rescaleChat());
+    private final OptionInstance<Double> chatDelay = new OptionInstance<>("options.chat.delay_instant", OptionInstance.noTooltip(), (component, d) -> d <= 0.0D ? Component.translatable("options.chat.delay_none") : Component.translatable("options.chat.delay", String.format("%.1f", d)), (new OptionInstance.IntRange(0, 60)).xmap((i) -> (double)i / 10.0D, (d) -> (int)(d * 10.0D)), Codec.doubleRange(0.0D, 6.0D), 0.0D, (d) -> {
     });
-    private final OptionInstance<Integer> mipmapLevels = new OptionInstance("options.mipmapLevels", OptionInstance.noTooltip(), (component, integer) -> (Component)(integer == 0 ? CommonComponents.optionStatus(component, false) : genericValueLabel(component, integer)), new OptionInstance.IntRange(0, 4), 4, (integer) -> {
+    private final OptionInstance<Integer> mipmapLevels = new OptionInstance<>("options.mipmapLevels", OptionInstance.noTooltip(), (component, integer) -> (Component)(integer == 0 ? CommonComponents.optionStatus(component, false) : genericValueLabel(component, integer)), new OptionInstance.IntRange(0, 4), 4, (integer) -> {
     });
-    private final Object2FloatMap<SoundSource> sourceVolumes = Util.make(new Object2FloatOpenHashMap(), (object2FloatOpenHashMap) -> object2FloatOpenHashMap.defaultReturnValue(1.0F));
+    private final Object2FloatMap<SoundSource> sourceVolumes = Util.make(new Object2FloatOpenHashMap<>(), (object2FloatOpenHashMap) -> object2FloatOpenHashMap.defaultReturnValue(1.0F));
     public boolean useNativeTransport = true;
     private final OptionInstance<AttackIndicatorStatus> attackIndicator = new OptionInstance<>("options.attackIndicator", OptionInstance.noTooltip(), OptionInstance.forOptionEnum(), new OptionInstance.Enum<>(Arrays.asList(AttackIndicatorStatus.values()), Codec.INT.xmap(AttackIndicatorStatus::byId, AttackIndicatorStatus::getId)), AttackIndicatorStatus.CROSSHAIR, (attackIndicatorStatus) -> {
     });
     public TutorialSteps tutorialStep = TutorialSteps.MOVEMENT;
     public boolean joinedFirstServer = false;
     public boolean hideBundleTutorial = false;
-    private final OptionInstance<Integer> biomeBlendRadius = new OptionInstance("options.biomeBlendRadius", OptionInstance.noTooltip(), (component, integer) -> {
+    private final OptionInstance<Integer> biomeBlendRadius = new OptionInstance<>("options.biomeBlendRadius", OptionInstance.noTooltip(), (component, integer) -> {
         int i = integer * 2 + 1;
         return genericValueLabel(component, Component.translatable("options.biomeBlendRadius." + i));
     }, new OptionInstance.IntRange(0, 7), 2, (integer) -> Minecraft.getInstance().levelRenderer.allChanged());
-    private final OptionInstance<Double> mouseWheelSensitivity = new OptionInstance("options.mouseWheelSensitivity", OptionInstance.noTooltip(), (component, d) -> genericValueLabel(component, Component.literal(String.format("%.2f", d))), (new OptionInstance.IntRange(-200, 100)).xmap(Options::logMouse, Options::unlogMouse), Codec.doubleRange(logMouse(-200), logMouse(100)), logMouse(0), (d) -> {
+    private final OptionInstance<Double> mouseWheelSensitivity = new OptionInstance<>("options.mouseWheelSensitivity", OptionInstance.noTooltip(), (component, d) -> genericValueLabel(component, Component.literal(String.format("%.2f", d))), (new OptionInstance.IntRange(-200, 100)).xmap(Options::logMouse, Options::unlogMouse), Codec.doubleRange(logMouse(-200), logMouse(100)), logMouse(0), (d) -> {
     });
     private final OptionInstance<Boolean> rawMouseInput = OptionInstance.createBoolean("options.rawMouseInput", true, (flagx) -> {
         Window window = Minecraft.getInstance().getWindow();
@@ -295,7 +295,7 @@ public class Options {
         soundManager.reload();
         soundManager.play(SimpleSoundInstance.forUI(SoundEvents.UI_BUTTON_CLICK, 1.0F));
     });
-    private final OptionInstance<Boolean> backgroundForChatOnly = new OptionInstance("options.accessibility.text_background", OptionInstance.noTooltip(), (component, flagx) -> flagx ? Component.translatable("options.accessibility.text_background.chat") : Component.translatable("options.accessibility.text_background.everywhere"), OptionInstance.BOOLEAN_VALUES, true, (flagx) -> {
+    private final OptionInstance<Boolean> backgroundForChatOnly = new OptionInstance<>("options.accessibility.text_background", OptionInstance.noTooltip(), (component, flagx) -> flagx ? Component.translatable("options.accessibility.text_background.chat") : Component.translatable("options.accessibility.text_background.everywhere"), OptionInstance.BOOLEAN_VALUES, true, (flagx) -> {
     });
     private final OptionInstance<Boolean> touchscreen = OptionInstance.createBoolean("options.touchscreen", false);
     private final OptionInstance<Boolean> fullscreen = OptionInstance.createBoolean("options.fullscreen", false, (flagx) -> {
@@ -309,9 +309,9 @@ public class Options {
     private final OptionInstance<Boolean> bobView = OptionInstance.createBoolean("options.viewBobbing", true);
     private static final Component MOVEMENT_TOGGLE = Component.translatable("options.key.toggle");
     private static final Component MOVEMENT_HOLD = Component.translatable("options.key.hold");
-    private final OptionInstance<Boolean> toggleCrouch = new OptionInstance("key.sneak", OptionInstance.noTooltip(), (component, flagx) -> flagx ? MOVEMENT_TOGGLE : MOVEMENT_HOLD, OptionInstance.BOOLEAN_VALUES, false, (flagx) -> {
+    private final OptionInstance<Boolean> toggleCrouch = new OptionInstance<>("key.sneak", OptionInstance.noTooltip(), (component, flagx) -> flagx ? MOVEMENT_TOGGLE : MOVEMENT_HOLD, OptionInstance.BOOLEAN_VALUES, false, (flagx) -> {
     });
-    private final OptionInstance<Boolean> toggleSprint = new OptionInstance("key.sprint", OptionInstance.noTooltip(), (component, flagx) -> flagx ? MOVEMENT_TOGGLE : MOVEMENT_HOLD, OptionInstance.BOOLEAN_VALUES, false, (flagx) -> {
+    private final OptionInstance<Boolean> toggleSprint = new OptionInstance<>("key.sprint", OptionInstance.noTooltip(), (component, flagx) -> flagx ? MOVEMENT_TOGGLE : MOVEMENT_HOLD, OptionInstance.BOOLEAN_VALUES, false, (flagx) -> {
     });
     public boolean skipMultiplayerWarning;
     public boolean skipRealms32bitWarning;
@@ -358,7 +358,7 @@ public class Options {
     public boolean renderFpsChart;
     public String lastMpIp = "";
     public boolean smoothCamera;
-    private final OptionInstance<Integer> fov = new OptionInstance("options.fov", OptionInstance.noTooltip(), (component, integer) -> {
+    private final OptionInstance<Integer> fov = new OptionInstance<>("options.fov", OptionInstance.noTooltip(), (component, integer) -> {
         Component var10000;
         switch(integer) {
         case 70:
@@ -374,15 +374,15 @@ public class Options {
         return var10000;
     }, new OptionInstance.IntRange(30, 110), Codec.DOUBLE.xmap((d) -> (int)(d * 40.0D + 70.0D), (integer) -> ((double)integer.intValue() - 70.0D) / 40.0D), 70, (integer) -> Minecraft.getInstance().levelRenderer.needsUpdate());
     private static final Component ACCESSIBILITY_TOOLTIP_SCREEN_EFFECT = Component.translatable("options.screenEffectScale.tooltip");
-    private final OptionInstance<Double> screenEffectScale = new OptionInstance("options.screenEffectScale", OptionInstance.cachedConstantTooltip(ACCESSIBILITY_TOOLTIP_SCREEN_EFFECT), (component, d) -> d == 0.0D ? genericValueLabel(component, CommonComponents.OPTION_OFF) : percentValueLabel(component, d), OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> {
+    private final OptionInstance<Double> screenEffectScale = new OptionInstance<>("options.screenEffectScale", OptionInstance.cachedConstantTooltip(ACCESSIBILITY_TOOLTIP_SCREEN_EFFECT), (component, d) -> d == 0.0D ? genericValueLabel(component, CommonComponents.OPTION_OFF) : percentValueLabel(component, d), OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> {
     });
     private static final Component ACCESSIBILITY_TOOLTIP_FOV_EFFECT = Component.translatable("options.fovEffectScale.tooltip");
-    private final OptionInstance<Double> fovEffectScale = new OptionInstance("options.fovEffectScale", OptionInstance.cachedConstantTooltip(ACCESSIBILITY_TOOLTIP_FOV_EFFECT), (component, d) -> d == 0.0D ? genericValueLabel(component, CommonComponents.OPTION_OFF) : percentValueLabel(component, d), OptionInstance.UnitDouble.INSTANCE.xmap(Mth::square, Math::sqrt), Codec.doubleRange(0.0D, 1.0D), 1.0D, (d) -> {
+    private final OptionInstance<Double> fovEffectScale = new OptionInstance<>("options.fovEffectScale", OptionInstance.cachedConstantTooltip(ACCESSIBILITY_TOOLTIP_FOV_EFFECT), (component, d) -> d == 0.0D ? genericValueLabel(component, CommonComponents.OPTION_OFF) : percentValueLabel(component, d), OptionInstance.UnitDouble.INSTANCE.xmap(Mth::square, Math::sqrt), Codec.doubleRange(0.0D, 1.0D), 1.0D, (d) -> {
     });
     private static final Component ACCESSIBILITY_TOOLTIP_DARKNESS_EFFECT = Component.translatable("options.darknessEffectScale.tooltip");
-    private final OptionInstance<Double> darknessEffectScale = new OptionInstance("options.darknessEffectScale", OptionInstance.cachedConstantTooltip(ACCESSIBILITY_TOOLTIP_DARKNESS_EFFECT), (component, d) -> d == 0.0D ? genericValueLabel(component, CommonComponents.OPTION_OFF) : percentValueLabel(component, d), OptionInstance.UnitDouble.INSTANCE.xmap(Mth::square, Math::sqrt), 1.0D, (d) -> {
+    private final OptionInstance<Double> darknessEffectScale = new OptionInstance<>("options.darknessEffectScale", OptionInstance.cachedConstantTooltip(ACCESSIBILITY_TOOLTIP_DARKNESS_EFFECT), (component, d) -> d == 0.0D ? genericValueLabel(component, CommonComponents.OPTION_OFF) : percentValueLabel(component, d), OptionInstance.UnitDouble.INSTANCE.xmap(Mth::square, Math::sqrt), 1.0D, (d) -> {
     });
-    private final OptionInstance<Double> gamma = new OptionInstance("options.gamma", OptionInstance.noTooltip(), (component, d) -> {
+    private final OptionInstance<Double> gamma = new OptionInstance<>("options.gamma", OptionInstance.noTooltip(), (component, d) -> {
         int i = (int)(d * 100.0D);
         if (i == 0) {
             return genericValueLabel(component, Component.translatable("options.gamma.min"));
@@ -393,22 +393,22 @@ public class Options {
         }
     }, OptionInstance.UnitDouble.INSTANCE, 0.5D, (d) -> {
     });
-    private final OptionInstance<Integer> guiScale = new OptionInstance("options.guiScale", OptionInstance.noTooltip(), (component, integer) -> integer == 0 ? Component.translatable("options.guiScale.auto") : Component.literal(Integer.toString(integer)), new OptionInstance.ClampingLazyMaxIntRange(0, () -> {
+    private final OptionInstance<Integer> guiScale = new OptionInstance<>("options.guiScale", OptionInstance.noTooltip(), (component, integer) -> integer == 0 ? Component.translatable("options.guiScale.auto") : Component.literal(Integer.toString(integer)), new OptionInstance.ClampingLazyMaxIntRange(0, () -> {
         Minecraft minecraft = Minecraft.getInstance();
         return !minecraft.isRunning() ? 2147483646 : minecraft.getWindow().calculateScale(0, minecraft.isEnforceUnicode());
     }), 0, (integer) -> {
     });
     private final OptionInstance<ParticleStatus> particles = new OptionInstance<>("options.particles", OptionInstance.noTooltip(), OptionInstance.forOptionEnum(), new OptionInstance.Enum<>(Arrays.asList(ParticleStatus.values()), Codec.INT.xmap(ParticleStatus::byId, ParticleStatus::getId)), ParticleStatus.ALL, (particleStatus) -> {
     });
-    private final OptionInstance<NarratorStatus> narrator = new OptionInstance("options.narrator", OptionInstance.noTooltip(), (component, narratorStatus) -> (Component)(NarratorChatListener.INSTANCE.isActive() ? narratorStatus.getName() : Component.translatable("options.narrator.notavailable")), new OptionInstance.Enum(Arrays.asList(NarratorStatus.values()), Codec.INT.xmap(NarratorStatus::byId, NarratorStatus::getId)), NarratorStatus.OFF, (narratorStatus) -> NarratorChatListener.INSTANCE.updateNarratorStatus(narratorStatus));
+    private final OptionInstance<NarratorStatus> narrator = new OptionInstance<>("options.narrator", OptionInstance.noTooltip(), (component, narratorStatus) -> (Component)(NarratorChatListener.INSTANCE.isActive() ? narratorStatus.getName() : Component.translatable("options.narrator.notavailable")), new OptionInstance.Enum(Arrays.asList(NarratorStatus.values()), Codec.INT.xmap(NarratorStatus::byId, NarratorStatus::getId)), NarratorStatus.OFF, (narratorStatus) -> NarratorChatListener.INSTANCE.updateNarratorStatus(narratorStatus));
     public String languageCode = "en_us";
-    private final OptionInstance<String> soundDevice = new OptionInstance("options.audioDevice", OptionInstance.noTooltip(), (component, s) -> {
+    private final OptionInstance<String> soundDevice = new OptionInstance<>("options.audioDevice", OptionInstance.noTooltip(), (component, s) -> {
         if ("".equals(s)) {
             return Component.translatable("options.audioDevice.default");
         } else {
             return s.startsWith("OpenAL Soft on ") ? Component.literal(s.substring(SoundEngine.OPEN_AL_SOFT_PREFIX_LENGTH)) : Component.literal(s);
         }
-    }, new OptionInstance.LazyEnum(() -> Stream.concat(Stream.of(""), Minecraft.getInstance().getSoundManager().getAvailableSoundDevices().stream()).toList(), (s) -> Minecraft.getInstance().isRunning() && s != "" && !Minecraft.getInstance().getSoundManager().getAvailableSoundDevices().contains(s) ? Optional.empty() : Optional.of(s), Codec.STRING), "", (s) -> {
+    }, new OptionInstance.LazyEnum<>(() -> Stream.concat(Stream.of(""), Minecraft.getInstance().getSoundManager().getAvailableSoundDevices().stream()).toList(), (s) -> Minecraft.getInstance().isRunning() && s != "" && !Minecraft.getInstance().getSoundManager().getAvailableSoundDevices().contains(s) ? Optional.empty() : Optional.of(s), Codec.STRING), "", (s) -> {
         SoundManager soundManager = Minecraft.getInstance().getSoundManager();
         soundManager.reload();
         soundManager.play(SimpleSoundInstance.forUI(SoundEvents.UI_BUTTON_CLICK, 1.0F));
@@ -781,7 +781,7 @@ public class Options {
         }
 
         for(SoundSource soundSource : SoundSource.values()) {
-            this.sourceVolumes.computeFloat(soundSource, (soundSource, f) -> fieldAccess.process("soundCategory_" + soundSource.getName(), f != null ? f : 1.0F));
+            this.sourceVolumes.computeFloat(soundSource, (soundSourceIn, f) -> fieldAccess.process("soundCategory_" + soundSourceIn.getName(), f != null ? f : 1.0F));
         }
 
         for(PlayerModelPart playerModelPart : PlayerModelPart.values()) {
@@ -1105,7 +1105,7 @@ public class Options {
     }
 
     public String dumpOptionsForReport() {
-        Stream<Pair<String, Object>> stream = Stream.builder().add(Pair.of("ao", this.ambientOcclusion.get())).add(Pair.of("biomeBlendRadius", this.biomeBlendRadius.get())).add(Pair.of("enableVsync", this.enableVsync.get())).add(Pair.of("entityDistanceScaling", this.entityDistanceScaling.get())).add(Pair.of("entityShadows", this.entityShadows.get())).add(Pair.of("forceUnicodeFont", this.forceUnicodeFont.get())).add(Pair.of("fov", this.fov.get())).add(Pair.of("fovEffectScale", this.fovEffectScale.get())).add(Pair.of("darknessEffectScale", this.darknessEffectScale.get())).add(Pair.of("prioritizeChunkUpdates", this.prioritizeChunkUpdates.get())).add(Pair.of("fullscreen", this.fullscreen.get())).add(Pair.of("fullscreenResolution", String.valueOf(this.fullscreenVideoModeString))).add(Pair.of("gamma", this.gamma.get())).add(Pair.of("glDebugVerbosity", this.glDebugVerbosity)).add(Pair.of("graphicsMode", this.graphicsMode.get())).add(Pair.of("guiScale", this.guiScale.get())).add(Pair.of("maxFps", this.framerateLimit.get())).add(Pair.of("mipmapLevels", this.mipmapLevels.get())).add(Pair.of("narrator", this.narrator.get())).add(Pair.of("overrideHeight", this.overrideHeight)).add(Pair.of("overrideWidth", this.overrideWidth)).add(Pair.of("particles", this.particles.get())).add(Pair.of("reducedDebugInfo", this.reducedDebugInfo.get())).add(Pair.of("renderClouds", this.cloudStatus.get())).add(Pair.of("renderDistance", this.renderDistance.get())).add(Pair.of("simulationDistance", this.simulationDistance.get())).add(Pair.of("resourcePacks", this.resourcePacks)).add(Pair.of("screenEffectScale", this.screenEffectScale.get())).add(Pair.of("syncChunkWrites", this.syncWrites)).add(Pair.of("useNativeTransport", this.useNativeTransport)).add(Pair.of("soundDevice", this.soundDevice.get())).build();
+        Stream<Pair<String, Object>> stream = Stream.<Pair<String, Object>>builder().add(Pair.of("ao", this.ambientOcclusion.get())).add(Pair.of("biomeBlendRadius", this.biomeBlendRadius.get())).add(Pair.of("enableVsync", this.enableVsync.get())).add(Pair.of("entityDistanceScaling", this.entityDistanceScaling.get())).add(Pair.of("entityShadows", this.entityShadows.get())).add(Pair.of("forceUnicodeFont", this.forceUnicodeFont.get())).add(Pair.of("fov", this.fov.get())).add(Pair.of("fovEffectScale", this.fovEffectScale.get())).add(Pair.of("darknessEffectScale", this.darknessEffectScale.get())).add(Pair.of("prioritizeChunkUpdates", this.prioritizeChunkUpdates.get())).add(Pair.of("fullscreen", this.fullscreen.get())).add(Pair.of("fullscreenResolution", String.valueOf(this.fullscreenVideoModeString))).add(Pair.of("gamma", this.gamma.get())).add(Pair.of("glDebugVerbosity", this.glDebugVerbosity)).add(Pair.of("graphicsMode", this.graphicsMode.get())).add(Pair.of("guiScale", this.guiScale.get())).add(Pair.of("maxFps", this.framerateLimit.get())).add(Pair.of("mipmapLevels", this.mipmapLevels.get())).add(Pair.of("narrator", this.narrator.get())).add(Pair.of("overrideHeight", this.overrideHeight)).add(Pair.of("overrideWidth", this.overrideWidth)).add(Pair.of("particles", this.particles.get())).add(Pair.of("reducedDebugInfo", this.reducedDebugInfo.get())).add(Pair.of("renderClouds", this.cloudStatus.get())).add(Pair.of("renderDistance", this.renderDistance.get())).add(Pair.of("simulationDistance", this.simulationDistance.get())).add(Pair.of("resourcePacks", this.resourcePacks)).add(Pair.of("screenEffectScale", this.screenEffectScale.get())).add(Pair.of("syncChunkWrites", this.syncWrites)).add(Pair.of("useNativeTransport", this.useNativeTransport)).add(Pair.of("soundDevice", this.soundDevice.get())).build();
         return (String)stream.map((pair) -> (String)pair.getFirst() + ": " + pair.getSecond()).collect(Collectors.joining(System.lineSeparator()));
     }
 
diff --git a/src/main/java/net/minecraft/client/PeriodicNotificationManager.java b/src/main/java/net/minecraft/client/PeriodicNotificationManager.java
index 380a9c23a9a02a314a99d10fbc95ed0d29d60d4c..bfa3d46df5a4532c9ca9d93494b2f5990eca9b22 100644
--- a/src/main/java/net/minecraft/client/PeriodicNotificationManager.java
+++ b/src/main/java/net/minecraft/client/PeriodicNotificationManager.java
@@ -28,7 +28,7 @@ import net.minecraft.util.profiling.ProfilerFiller;
 import org.slf4j.Logger;
 
 public class PeriodicNotificationManager extends SimplePreparableReloadListener<Map<String, List<PeriodicNotificationManager.Notification>>> implements AutoCloseable {
-    private static final Codec<Map<String, List<PeriodicNotificationManager.Notification>>> CODEC = Codec.unboundedMap(Codec.STRING, RecordCodecBuilder.create((instance) -> instance.group(Codec.LONG.optionalFieldOf("delay", 0L).forGetter(PeriodicNotificationManager.Notification::delay), Codec.LONG.fieldOf("period").forGetter(PeriodicNotificationManager.Notification::period), Codec.STRING.fieldOf("title").forGetter(PeriodicNotificationManager.Notification::title), Codec.STRING.fieldOf("message").forGetter(PeriodicNotificationManager.Notification::message)).apply(instance, PeriodicNotificationManager.Notification::new)).listOf());
+    private static final Codec<Map<String, List<PeriodicNotificationManager.Notification>>> CODEC = Codec.unboundedMap(Codec.STRING, RecordCodecBuilder.<PeriodicNotificationManager.Notification>create((instance) -> instance.group(Codec.LONG.optionalFieldOf("delay", 0L).forGetter(PeriodicNotificationManager.Notification::delay), Codec.LONG.fieldOf("period").forGetter(PeriodicNotificationManager.Notification::period), Codec.STRING.fieldOf("title").forGetter(PeriodicNotificationManager.Notification::title), Codec.STRING.fieldOf("message").forGetter(PeriodicNotificationManager.Notification::message)).apply(instance, PeriodicNotificationManager.Notification::new)).listOf());
     private static final Logger LOGGER = LogUtils.getLogger();
     private final ResourceLocation notifications;
     private final Object2BooleanFunction<String> selector;
@@ -118,33 +118,12 @@ public class PeriodicNotificationManager extends SimplePreparableReloadListener<
         return list.stream().mapToLong((notification) -> notification.delay).min().orElse(0L);
     }
 
-    public static record Notification(long a, long b, String c, String d) {
-        final long delay;
-        final long period;
-        final String title;
-        final String message;
-
-        public Notification(long l, long l2, String s, String s2) {
-            this.delay = l != 0L ? l : l2;
-            this.period = l2;
-            this.title = s;
-            this.message = s2;
-        }
-
-        public long delay() {
-            return this.delay;
-        }
-
-        public long period() {
-            return this.period;
-        }
-
-        public String title() {
-            return this.title;
-        }
-
-        public String message() {
-            return this.message;
+    public static record Notification(long delay, long period, String title, String message) {
+        public Notification(long delay, long period, String title, String message) {
+            this.delay = delay != 0L ? delay : period;
+            this.period = period;
+            this.title = title;
+            this.message = message;
         }
     }
 
diff --git a/src/main/java/net/minecraft/client/animation/AnimationChannel.java b/src/main/java/net/minecraft/client/animation/AnimationChannel.java
index 3e7014fc69f46577589eadf39b8b18005e6ee001..01b310cd9991f7ddd350b1c46d241aa7ba0ce1d6 100644
--- a/src/main/java/net/minecraft/client/animation/AnimationChannel.java
+++ b/src/main/java/net/minecraft/client/animation/AnimationChannel.java
@@ -4,18 +4,7 @@ import com.mojang.math.Vector3f;
 import net.minecraft.client.model.geom.ModelPart;
 import net.minecraft.util.Mth;
 
-public record AnimationChannel(AnimationChannel.Target a, Keyframe... b) {
-    private final AnimationChannel.Target target;
-    private final Keyframe[] keyframes;
-
-    public AnimationChannel.Target target() {
-        return this.target;
-    }
-
-    public Keyframe[] keyframes() {
-        return this.keyframes;
-    }
-
+public record AnimationChannel(AnimationChannel.Target target, Keyframe... keyframes) {
     public interface Interpolation {
         Vector3f apply(Vector3f var1, float var2, Keyframe[] var3, int var4, int var5, float var6);
     }
diff --git a/src/main/java/net/minecraft/client/animation/AnimationDefinition.java b/src/main/java/net/minecraft/client/animation/AnimationDefinition.java
index 06bb8febbac9d7a885c8113f4502291052732a08..8b59f2810a4057a43f9ad5e0b167c893e261f6d4 100644
--- a/src/main/java/net/minecraft/client/animation/AnimationDefinition.java
+++ b/src/main/java/net/minecraft/client/animation/AnimationDefinition.java
@@ -5,23 +5,7 @@ import java.util.List;
 import java.util.Map;
 import org.apache.commons.compress.utils.Lists;
 
-public record AnimationDefinition(float a, boolean b, Map<String, List<AnimationChannel>> c) {
-    private final float lengthInSeconds;
-    private final boolean looping;
-    private final Map<String, List<AnimationChannel>> boneAnimations;
-
-    public float lengthInSeconds() {
-        return this.lengthInSeconds;
-    }
-
-    public boolean looping() {
-        return this.looping;
-    }
-
-    public Map<String, List<AnimationChannel>> boneAnimations() {
-        return this.boneAnimations;
-    }
-
+public record AnimationDefinition(float lengthInSeconds, boolean looping, Map<String, List<AnimationChannel>> boneAnimations) {
     public static class Builder {
         private final float length;
         private final Map<String, List<AnimationChannel>> animationByBone = Maps.newHashMap();
diff --git a/src/main/java/net/minecraft/client/animation/Keyframe.java b/src/main/java/net/minecraft/client/animation/Keyframe.java
index 0a1d6fb7913883987fe1367389b2b4aad4bfada2..4077b980c25fd6b13edd8369dc524c734ee82df4 100644
--- a/src/main/java/net/minecraft/client/animation/Keyframe.java
+++ b/src/main/java/net/minecraft/client/animation/Keyframe.java
@@ -2,20 +2,5 @@ package net.minecraft.client.animation;
 
 import com.mojang.math.Vector3f;
 
-public record Keyframe(float a, Vector3f b, AnimationChannel.Interpolation c) {
-    private final float timestamp;
-    private final Vector3f target;
-    private final AnimationChannel.Interpolation interpolation;
-
-    public float timestamp() {
-        return this.timestamp;
-    }
-
-    public Vector3f target() {
-        return this.target;
-    }
-
-    public AnimationChannel.Interpolation interpolation() {
-        return this.interpolation;
-    }
+public record Keyframe(float timestamp, Vector3f target, AnimationChannel.Interpolation interpolation) {
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/gui/Font.java b/src/main/java/net/minecraft/client/gui/Font.java
index ab76002a8d1acead635f52cc73ad85d35d3a600e..49d078ac21606ef00c366ef4d589496122f7dce0 100644
--- a/src/main/java/net/minecraft/client/gui/Font.java
+++ b/src/main/java/net/minecraft/client/gui/Font.java
@@ -131,14 +131,14 @@ public class Font {
                     float[] floats = new float[]{f};
                     int i7 = i5;
                     int i8 = i6;
-                    formattedCharSequence.accept((i4x, style, i5) -> {
+                    formattedCharSequence.accept((i4x, style, i5x) -> {
                         boolean flag = style.isBold();
                         FontSet fontSet = this.getFontSet(style.getFont());
-                        GlyphInfo glyphInfo = fontSet.getGlyphInfo(i5);
+                        GlyphInfo glyphInfo = fontSet.getGlyphInfo(i5x);
                         stringRenderOutput.x = floats[0] + (float)i7 * glyphInfo.getShadowOffset();
                         stringRenderOutput.y = f2 + (float)i8 * glyphInfo.getShadowOffset();
                         floats[0] += glyphInfo.getAdvance(flag);
-                        return stringRenderOutput.accept(i4x, style.withColor(i4), i5);
+                        return stringRenderOutput.accept(i4x, style.withColor(i4), i5x);
                     });
                 }
             }
diff --git a/src/main/java/net/minecraft/client/gui/Gui.java b/src/main/java/net/minecraft/client/gui/Gui.java
index 7c7f51bc5c61d6bd4e0d28839349fcade6795054..ee055e180d1c701ca008d3980a7223e77d304da3 100644
--- a/src/main/java/net/minecraft/client/gui/Gui.java
+++ b/src/main/java/net/minecraft/client/gui/Gui.java
@@ -441,7 +441,7 @@ public class Gui extends GuiComponent {
 
             RenderSystem.enableBlend();
             int i = 0;
-            int i2 = 0;
+            int i2In = 0;
             MobEffectTextureManager mobEffectTextureManager = this.minecraft.getMobEffectTextures();
             List<Runnable> list = Lists.newArrayListWithExpectedSize(collection.size());
             RenderSystem.setShaderTexture(0, AbstractContainerScreen.INVENTORY_LOCATION);
@@ -459,8 +459,8 @@ public class Gui extends GuiComponent {
                         ++i;
                         i3 -= 25 * i;
                     } else {
-                        ++i2;
-                        i3 -= 25 * i2;
+                        ++i2In;
+                        i3 -= 25 * i2In;
                         i4 += 26;
                     }
 
diff --git a/src/main/java/net/minecraft/client/gui/chat/ChatPreviewRequests.java b/src/main/java/net/minecraft/client/gui/chat/ChatPreviewRequests.java
index 027232114d6c86917374be611feac8e758695224..c7e132bc52069589e60143c2b835812aa148a5a3 100644
--- a/src/main/java/net/minecraft/client/gui/chat/ChatPreviewRequests.java
+++ b/src/main/java/net/minecraft/client/gui/chat/ChatPreviewRequests.java
@@ -67,10 +67,7 @@ public class ChatPreviewRequests {
         return this.pending != null;
     }
 
-    static record PendingPreview(int a, String b) {
-        private final int id;
-        final String query;
-
+    static record PendingPreview(int id, String query) {
         public boolean matches(int i) {
             return this.id == i;
         }
@@ -78,14 +75,6 @@ public class ChatPreviewRequests {
         public boolean matches(String s) {
             return this.query.equals(s);
         }
-
-        public int id() {
-            return this.id;
-        }
-
-        public String query() {
-            return this.query;
-        }
     }
 
     static class QueryIdGenerator {
diff --git a/src/main/java/net/minecraft/client/gui/chat/ClientChatPreview.java b/src/main/java/net/minecraft/client/gui/chat/ClientChatPreview.java
index e9a85130e8797f7388edbf5a0a4a1d7d844b4e33..cbd354a05aae2dcf2e0167df9ba58b73b889b291 100644
--- a/src/main/java/net/minecraft/client/gui/chat/ClientChatPreview.java
+++ b/src/main/java/net/minecraft/client/gui/chat/ClientChatPreview.java
@@ -97,14 +97,9 @@ public class ClientChatPreview {
         return StringUtils.normalizeSpace(s.trim());
     }
 
-    static record Preview(long a, String b, @Nullable Component c) {
-        private final long receivedTimeStamp;
-        private final String query;
-        @Nullable
-        private final Component response;
-
+    static record Preview(long receivedTimeStamp, String query, @Nullable Component response) {
         public Preview {
-            s = ClientChatPreview.normalizeQuery(s);
+            query = ClientChatPreview.normalizeQuery(query);
         }
 
         public boolean canPull(String s) {
diff --git a/src/main/java/net/minecraft/client/gui/components/CycleButton.java b/src/main/java/net/minecraft/client/gui/components/CycleButton.java
index f094790ef4447d84c2a948e201c6b9501e85de12..9eb94544e403df2278868e6165dece6438ee527f 100644
--- a/src/main/java/net/minecraft/client/gui/components/CycleButton.java
+++ b/src/main/java/net/minecraft/client/gui/components/CycleButton.java
@@ -133,15 +133,15 @@ public class CycleButton<T> extends AbstractButton implements TooltipAccessor {
     }
 
     public static CycleButton.Builder<Boolean> booleanBuilder(Component component, Component component2) {
-        return (new CycleButton.Builder((flag) -> flag ? component : component2)).withValues(BOOLEAN_OPTIONS);
+        return (new CycleButton.Builder<Boolean>((flag) -> flag ? component : component2)).withValues(BOOLEAN_OPTIONS);
     }
 
     public static CycleButton.Builder<Boolean> onOffBuilder() {
-        return (new CycleButton.Builder((flag) -> flag ? CommonComponents.OPTION_ON : CommonComponents.OPTION_OFF)).withValues(BOOLEAN_OPTIONS);
+        return (new CycleButton.Builder<Boolean>((flag) -> flag ? CommonComponents.OPTION_ON : CommonComponents.OPTION_OFF)).withValues(BOOLEAN_OPTIONS);
     }
 
     public static CycleButton.Builder<Boolean> onOffBuilder(boolean flag) {
-        return onOffBuilder().withInitialValue((T)flag);
+        return onOffBuilder().withInitialValue(flag);
     }
 
     public static class Builder<T> {
diff --git a/src/main/java/net/minecraft/client/gui/font/FontManager.java b/src/main/java/net/minecraft/client/gui/font/FontManager.java
index 7c660a4898e5e932c4a54a4fe7ab8d27eddb286e..532aed64c98da5298be79c44b89cbf63411acb71 100644
--- a/src/main/java/net/minecraft/client/gui/font/FontManager.java
+++ b/src/main/java/net/minecraft/client/gui/font/FontManager.java
@@ -108,7 +108,7 @@ public class FontManager implements AutoCloseable {
                     intSet.addAll(glyphProvider2.getSupportedGlyphs());
                 }
 
-                intSet.forEach((ix) -> {
+                intSet.forEach((java.util.function.IntConsumer) (ix) -> {
                     if (ix != 32) {
                         for(GlyphProvider glyphProvider : Lists.reverse(list)) {
                             if (glyphProvider.getGlyph(ix) != null) {
diff --git a/src/main/java/net/minecraft/client/gui/font/FontSet.java b/src/main/java/net/minecraft/client/gui/font/FontSet.java
index 0d62ee2e0fe01b91cd0cb65d5b35170d119cf143..281d27befe71ebd9eb932a270d145f7782b9ebe3 100644
--- a/src/main/java/net/minecraft/client/gui/font/FontSet.java
+++ b/src/main/java/net/minecraft/client/gui/font/FontSet.java
@@ -52,7 +52,7 @@ public class FontSet implements AutoCloseable {
         }
 
         Set<GlyphProvider> set = Sets.newHashSet();
-        intSet.forEach((i) -> {
+        intSet.forEach((java.util.function.IntConsumer) (i) -> {
             for(GlyphProvider glyphProvider : list) {
                 GlyphInfo glyphInfo = glyphProvider.getGlyph(i);
                 if (glyphInfo != null) {
diff --git a/src/main/java/net/minecraft/client/gui/font/providers/BitmapProvider.java b/src/main/java/net/minecraft/client/gui/font/providers/BitmapProvider.java
index 2f4b55d2877619d34e57b83fac6afeb551ead46f..191ff802265ec139fa9b1fcbd2f08cb10fca96a9 100644
--- a/src/main/java/net/minecraft/client/gui/font/providers/BitmapProvider.java
+++ b/src/main/java/net/minecraft/client/gui/font/providers/BitmapProvider.java
@@ -160,16 +160,7 @@ public class BitmapProvider implements GlyphProvider {
         }
     }
 
-    static record Glyph(float a, NativeImage b, int c, int d, int e, int f, int g, int h) implements GlyphInfo {
-        final float scale;
-        final NativeImage image;
-        final int offsetX;
-        final int offsetY;
-        final int width;
-        final int height;
-        private final int advance;
-        final int ascent;
-
+    static record Glyph(float scale, NativeImage image, int offsetX, int offsetY, int width, int height, int advance, int ascent) implements GlyphInfo {
         public float getAdvance() {
             return (float)this.advance;
         }
@@ -201,37 +192,5 @@ public class BitmapProvider implements GlyphProvider {
                 }
             });
         }
-
-        public float scale() {
-            return this.scale;
-        }
-
-        public NativeImage image() {
-            return this.image;
-        }
-
-        public int offsetX() {
-            return this.offsetX;
-        }
-
-        public int offsetY() {
-            return this.offsetY;
-        }
-
-        public int width() {
-            return this.width;
-        }
-
-        public int height() {
-            return this.height;
-        }
-
-        public int advance() {
-            return this.advance;
-        }
-
-        public int ascent() {
-            return this.ascent;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/gui/font/providers/LegacyUnicodeBitmapsProvider.java b/src/main/java/net/minecraft/client/gui/font/providers/LegacyUnicodeBitmapsProvider.java
index eae46d94e874072c49b051b7105d3a42f437b5a0..de0a759246c78795987d4eac9c5eaeebca54eeb2 100644
--- a/src/main/java/net/minecraft/client/gui/font/providers/LegacyUnicodeBitmapsProvider.java
+++ b/src/main/java/net/minecraft/client/gui/font/providers/LegacyUnicodeBitmapsProvider.java
@@ -255,13 +255,7 @@ public class LegacyUnicodeBitmapsProvider implements GlyphProvider {
         }
     }
 
-    static record Glyph(int a, int b, int c, int d, NativeImage e) implements GlyphInfo {
-        final int sourceX;
-        final int sourceY;
-        final int width;
-        final int height;
-        final NativeImage source;
-
+    static record Glyph(int sourceX, int sourceY, int width, int height, NativeImage source) implements GlyphInfo {
         public float getAdvance() {
             return (float)(this.width / 2 + 1);
         }
@@ -297,25 +291,5 @@ public class LegacyUnicodeBitmapsProvider implements GlyphProvider {
                 }
             });
         }
-
-        public int sourceX() {
-            return this.sourceX;
-        }
-
-        public int sourceY() {
-            return this.sourceY;
-        }
-
-        public int width() {
-            return this.width;
-        }
-
-        public int height() {
-            return this.height;
-        }
-
-        public NativeImage source() {
-            return this.source;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/gui/narration/NarrationThunk.java b/src/main/java/net/minecraft/client/gui/narration/NarrationThunk.java
index d3d734743820c9112bf0623da8e86ea779f17679..91996dcd1df45f2b340636b102c194ea29bdbcc6 100644
--- a/src/main/java/net/minecraft/client/gui/narration/NarrationThunk.java
+++ b/src/main/java/net/minecraft/client/gui/narration/NarrationThunk.java
@@ -9,7 +9,7 @@ import net.minecraft.util.Unit;
 public class NarrationThunk<T> {
     private final T contents;
     private final BiConsumer<Consumer<String>, T> converter;
-    public static final NarrationThunk<?> EMPTY = new NarrationThunk((T)Unit.INSTANCE, (consumer, unit) -> {
+    public static final NarrationThunk<?> EMPTY = new NarrationThunk(Unit.INSTANCE, (consumer, unit) -> {
     });
 
     private NarrationThunk(T object, BiConsumer<Consumer<String>, T> biConsumer) {
@@ -18,7 +18,7 @@ public class NarrationThunk<T> {
     }
 
     public static NarrationThunk<?> from(String s) {
-        return new NarrationThunk((T)s, Consumer::accept);
+        return new NarrationThunk<>(s, Consumer::accept);
     }
 
     public static NarrationThunk<?> from(Component component) {
@@ -26,7 +26,7 @@ public class NarrationThunk<T> {
     }
 
     public static NarrationThunk<?> from(List<Component> list) {
-        return new NarrationThunk((T)list, (consumer, list2) -> list.stream().map(Component::getString).forEach(consumer));
+        return new NarrationThunk<>(list, (consumer, list2) -> list.stream().map(Component::getString).forEach(consumer));
     }
 
     public void getText(Consumer<String> consumer) {
diff --git a/src/main/java/net/minecraft/client/gui/narration/ScreenNarrationCollector.java b/src/main/java/net/minecraft/client/gui/narration/ScreenNarrationCollector.java
index 1f88364b9929dc12f05535dd2297844a0f6efc0f..16189cf8f3ea7941c7aab3ee3eade99f03ce01e0 100644
--- a/src/main/java/net/minecraft/client/gui/narration/ScreenNarrationCollector.java
+++ b/src/main/java/net/minecraft/client/gui/narration/ScreenNarrationCollector.java
@@ -7,7 +7,7 @@ import java.util.function.Consumer;
 
 public class ScreenNarrationCollector {
     int generation;
-    final Map<ScreenNarrationCollector.EntryKey, ScreenNarrationCollector.NarrationEntry> entries = Maps.newTreeMap(Comparator.comparing((entryKey) -> entryKey.type).thenComparing((entryKey) -> entryKey.depth));
+    final Map<ScreenNarrationCollector.EntryKey, ScreenNarrationCollector.NarrationEntry> entries = Maps.newTreeMap(Comparator.<EntryKey, NarratedElementType>comparing((entryKey) -> entryKey.type).thenComparing((entryKey) -> entryKey.depth));
 
     public void update(Consumer<NarrationElementOutput> consumer) {
         ++this.generation;
diff --git a/src/main/java/net/minecraft/client/gui/screens/PresetFlatWorldScreen.java b/src/main/java/net/minecraft/client/gui/screens/PresetFlatWorldScreen.java
index a09b012699adcdd4740366ba35dae6bc69b59698..e2fabeb269d335846a67bc25695783d2a42c89ea 100644
--- a/src/main/java/net/minecraft/client/gui/screens/PresetFlatWorldScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/PresetFlatWorldScreen.java
@@ -255,7 +255,7 @@ public class PresetFlatWorldScreen extends Screen {
 
             public Entry(Holder<FlatLevelGeneratorPreset> holder) {
                 this.preset = (FlatLevelGeneratorPreset)holder.value();
-                this.name = (Component)holder.unwrapKey().map((resourceKey) -> Component.translatable(resourceKey.location().toLanguageKey("flat_world_preset"))).orElse(PresetFlatWorldScreen.UNKNOWN_PRESET);
+                this.name = (Component)holder.unwrapKey().<Component>map((resourceKey) -> Component.translatable(resourceKey.location().toLanguageKey("flat_world_preset"))).orElse(PresetFlatWorldScreen.UNKNOWN_PRESET);
             }
 
             public void render(PoseStack poseStack, int i, int i2, int i3, int i4, int i5, int i6, int i7, boolean flag, float f) {
diff --git a/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java b/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
index b4f88ba664cdbad95fd89c280669f1be8a8286aa..a168f1cb6a7e72c6e6bbd986a349f5142ec1d438 100644
--- a/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
@@ -365,31 +365,10 @@ public class TitleScreen extends Screen {
         this.minecraft.setScreen(this);
     }
 
-    static record WarningLabel(Font a, MultiLineLabel b, int c, int d) {
-        private final Font font;
-        private final MultiLineLabel label;
-        private final int x;
-        private final int y;
-
+    static record WarningLabel(Font font, MultiLineLabel label, int x, int y) {
         public void render(PoseStack poseStack, int i) {
             this.label.renderBackgroundCentered(poseStack, this.x, this.y, 9, 2, 1428160512);
             this.label.renderCentered(poseStack, this.x, this.y, 9, 16777215 | i);
         }
-
-        public Font font() {
-            return this.font;
-        }
-
-        public MultiLineLabel label() {
-            return this.label;
-        }
-
-        public int x() {
-            return this.x;
-        }
-
-        public int y() {
-            return this.y;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/gui/screens/VideoSettingsScreen.java b/src/main/java/net/minecraft/client/gui/screens/VideoSettingsScreen.java
index 25ec9eecf1982a3b1de7c68162496e2971925fb0..edf59b3a601bf3b1039dbb85bdbc8f92c425880a 100644
--- a/src/main/java/net/minecraft/client/gui/screens/VideoSettingsScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/VideoSettingsScreen.java
@@ -58,7 +58,7 @@ public class VideoSettingsScreen extends OptionsSubScreen {
             i2 = optional.map(monitor::getVideoModeIndex).orElse(-1);
         }
 
-        OptionInstance<Integer> optionInstance = new OptionInstance("options.fullscreen.resolution", OptionInstance.noTooltip(), (component, integer) -> {
+        OptionInstance<Integer> optionInstance = new OptionInstance<>("options.fullscreen.resolution", OptionInstance.noTooltip(), (component, integer) -> {
             if (monitor == null) {
                 return Component.translatable("options.fullscreen.unavailable");
             } else {
diff --git a/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java b/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
index 4bfcc19bdb9ae2ddd19738dd110ed8addf2a481e..d05113fee36f56d1ef554346a903cb8adc5190d1 100644
--- a/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
@@ -429,11 +429,11 @@ public class StatsScreen extends Screen implements StatsUpdateListener {
                     i = 0;
                     i2 = 0;
                 } else if (ItemStatisticsList.this.blockColumns.contains(ItemStatisticsList.this.sortColumn)) {
-                    StatType<Block> statType = ItemStatisticsList.this.sortColumn;
+                    StatType<Block> statType = (StatType<Block>) ItemStatisticsList.this.sortColumn;
                     i = item instanceof BlockItem ? StatsScreen.this.stats.getValue(statType, ((BlockItem)item).getBlock()) : -1;
                     i2 = item2 instanceof BlockItem ? StatsScreen.this.stats.getValue(statType, ((BlockItem)item2).getBlock()) : -1;
                 } else {
-                    StatType<Item> statType2 = ItemStatisticsList.this.sortColumn;
+                    StatType<Item> statType2 = (StatType<Item>) ItemStatisticsList.this.sortColumn;
                     i = StatsScreen.this.stats.getValue(statType2, item);
                     i2 = StatsScreen.this.stats.getValue(statType2, item2);
                 }
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java
index 1009dcb1484fdb22c75accd690bf9b821769e024..46598002af410a8ab724bf4883abb6c3fe64b769 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java
@@ -31,7 +31,7 @@ public class CommandBlockEditScreen extends AbstractCommandBlockEditScreen {
 
     protected void init() {
         super.init();
-        this.modeButton = this.addRenderableWidget(CycleButton.builder((mode) -> {
+        this.modeButton = this.addRenderableWidget(CycleButton.<CommandBlockEntity.Mode>builder((mode) -> {
             switch(mode) {
             case SEQUENCE:
                 return Component.translatable("advMode.mode.sequence");
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/StructureBlockEditScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/StructureBlockEditScreen.java
index bccfb9130141be3608fa3beae32990216645fa34..012eb89074e59906ead8c8b5ceb9291616d074a7 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/StructureBlockEditScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/StructureBlockEditScreen.java
@@ -123,7 +123,7 @@ public class StructureBlockEditScreen extends Screen {
             }
 
         }));
-        this.addRenderableWidget(CycleButton.builder((structureMode) -> Component.translatable("structure_block.mode." + structureMode.getSerializedName())).withValues(DEFAULT_MODES, ALL_MODES).displayOnlyValue().withInitialValue(this.initialMode).create(this.width / 2 - 4 - 150, 185, 50, 20, Component.literal("MODE"), (cycleButton, structureMode) -> {
+        this.addRenderableWidget(CycleButton.<StructureMode>builder((structureMode) -> Component.translatable("structure_block.mode." + structureMode.getSerializedName())).withValues(DEFAULT_MODES, ALL_MODES).displayOnlyValue().withInitialValue(this.initialMode).create(this.width / 2 - 4 - 150, 185, 50, 20, Component.literal("MODE"), (cycleButton, structureMode) -> {
             this.structure.setMode(structureMode);
             this.updateMode(structureMode);
         }));
diff --git a/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java b/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
index 95783c372c409555bd4547fa29f27e242cbb2f02..94851e50636f38ccce260eb985b761c509547559 100644
--- a/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
@@ -217,8 +217,8 @@ public class PackSelectionScreen extends Screen {
                     label86: {
                         try {
                             if (inputStream != null) {
-                                String s = pack.getId();
-                                ResourceLocation resourceLocation = new ResourceLocation("minecraft", "pack/" + Util.sanitizeName(s, ResourceLocation::validPathChar) + "/" + Hashing.sha1().hashUnencodedChars(s) + "/icon");
+                                String packId = pack.getId();
+                                ResourceLocation resourceLocation = new ResourceLocation("minecraft", "pack/" + Util.sanitizeName(packId, ResourceLocation::validPathChar) + "/" + Hashing.sha1().hashUnencodedChars(packId) + "/icon");
                                 NativeImage nativeImage = NativeImage.read(inputStream);
                                 textureManager.register(resourceLocation, new DynamicTexture(nativeImage));
                                 var8 = resourceLocation;
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java
index 688575d63bf1e1611fd31db74b2c4defe7c01ddc..a0af34388d2b13cacb991392b833277ab5eef9a8 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java
@@ -232,7 +232,7 @@ public class EditGameRulesScreen extends Screen {
                     List<FormattedCharSequence> list;
                     String s3;
                     if (I18n.exists(s2)) {
-                        Builder<FormattedCharSequence> builder = ImmutableList.builder().add(component2.getVisualOrderText());
+                        Builder<FormattedCharSequence> builder = ImmutableList.<FormattedCharSequence>builder().add(component2.getVisualOrderText());
                         Component component4 = Component.translatable(s2);
                         EditGameRulesScreen.this.font.split(component4, 150).forEach(builder::add);
                         list = builder.add(component3.getVisualOrderText()).build();
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldCreationContext.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldCreationContext.java
index 80c87dd3a6a9e0533b45bc6ed0c7562fb395f656..4ea8896e7291db7028121dfd3f00295c810b16a4 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldCreationContext.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldCreationContext.java
@@ -7,12 +7,7 @@ import net.minecraft.core.RegistryAccess;
 import net.minecraft.server.ReloadableServerResources;
 import net.minecraft.world.level.levelgen.WorldGenSettings;
 
-public record WorldCreationContext(WorldGenSettings a, Lifecycle b, RegistryAccess.Frozen c, ReloadableServerResources d) {
-    private final WorldGenSettings worldGenSettings;
-    private final Lifecycle worldSettingsStability;
-    private final RegistryAccess.Frozen registryAccess;
-    private final ReloadableServerResources dataPackResources;
-
+public record WorldCreationContext(WorldGenSettings worldGenSettings, Lifecycle worldSettingsStability, RegistryAccess.Frozen registryAccess, ReloadableServerResources dataPackResources) {
     public WorldCreationContext withSettings(WorldGenSettings worldGenSettings) {
         return new WorldCreationContext(worldGenSettings, this.worldSettingsStability, this.registryAccess, this.dataPackResources);
     }
@@ -27,22 +22,6 @@ public record WorldCreationContext(WorldGenSettings a, Lifecycle b, RegistryAcce
         return this.withSettings(worldGenSettings);
     }
 
-    public WorldGenSettings worldGenSettings() {
-        return this.worldGenSettings;
-    }
-
-    public Lifecycle worldSettingsStability() {
-        return this.worldSettingsStability;
-    }
-
-    public RegistryAccess.Frozen registryAccess() {
-        return this.registryAccess;
-    }
-
-    public ReloadableServerResources dataPackResources() {
-        return this.dataPackResources;
-    }
-
     @FunctionalInterface
     public interface SimpleUpdater extends UnaryOperator<WorldGenSettings> {
     }
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldGenSettingsComponent.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldGenSettingsComponent.java
index 403e05edd80d2e39608db0af4a26290958f6c3ff..ed7f979397d6c6bcb0c14e9ff9ae6180bc108a9c 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldGenSettingsComponent.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldGenSettingsComponent.java
@@ -161,7 +161,7 @@ public class WorldGenSettingsComponent implements Widget {
     }
 
     private static Component describePreset(Holder<WorldPreset> holder) {
-        return (Component)holder.unwrapKey().map((resourceKey) -> Component.translatable(resourceKey.location().toLanguageKey("generator"))).orElse(CUSTOM_WORLD_DESCRIPTION);
+        return (Component)holder.unwrapKey().<Component>map((resourceKey) -> Component.translatable(resourceKey.location().toLanguageKey("generator"))).orElse(CUSTOM_WORLD_DESCRIPTION);
     }
 
     private void importSettings(WorldGenSettings worldGenSettings) {
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
index cd3de5c1ca37d227e3534c80b8c5e3d4db33ddbc..1870c5697304ea309cee9c061982f6f79680758a 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
@@ -391,10 +391,10 @@ public class WorldSelectionList extends ObjectSelectionList<WorldSelectionList.E
                     Component component = Component.translatable(s2, this.summary.getWorldVersionName(), SharedConstants.getCurrentVersion().getName());
                     this.minecraft.setScreen(new BackupConfirmScreen(this.screen, (flag, flag2) -> {
                         if (flag) {
-                            String s = this.summary.getLevelId();
+                            String levelId = this.summary.getLevelId();
 
                             try {
-                                LevelStorageSource.LevelStorageAccess levelStorageAccess = this.minecraft.getLevelSource().createAccess(s);
+                                LevelStorageSource.LevelStorageAccess levelStorageAccess = this.minecraft.getLevelSource().createAccess(levelId);
 
                                 try {
                                     EditWorldScreen.makeBackupAndShowToast(levelStorageAccess);
@@ -414,8 +414,8 @@ public class WorldSelectionList extends ObjectSelectionList<WorldSelectionList.E
                                     levelStorageAccess.close();
                                 }
                             } catch (IOException var9) {
-                                SystemToast.onWorldAccessFailure(this.minecraft, s);
-                                WorldSelectionList.LOGGER.error("Failed to backup level {}", s, var9);
+                                SystemToast.onWorldAccessFailure(this.minecraft, levelId);
+                                WorldSelectionList.LOGGER.error("Failed to backup level {}", levelId, var9);
                             }
                         }
 
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
index 77a00f230400fb1a5d6451dde9b966300c1231d1..f7bfefc02ed41ea5a47ffcb1c746e00871e25c5f 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
@@ -1297,9 +1297,9 @@ public class ClientPacketListener implements ClientGamePacketListener {
 
     private <T> void updateTagsForRegistry(ResourceKey<? extends Registry<? extends T>> resourceKey, TagNetworkSerialization.NetworkPayload networkPayload) {
         if (!networkPayload.isEmpty()) {
-            Registry<T> registry = (Registry)this.registryAccess.registry(resourceKey).orElseThrow(() -> new IllegalStateException("Unknown registry " + resourceKey));
+            Registry<T> registry = this.registryAccess.registry(resourceKey).orElseThrow(() -> new IllegalStateException("Unknown registry " + resourceKey));
             Map<TagKey<T>, List<Holder<T>>> map = new HashMap();
-            TagNetworkSerialization.deserializeTagsFromNetwork(resourceKey, registry, networkPayload, map::put);
+            TagNetworkSerialization.deserializeTagsFromNetwork((ResourceKey<? extends Registry<T>>) resourceKey, registry, networkPayload, map::put);
             registry.bindTags(map);
         }
     }
@@ -1537,10 +1537,10 @@ public class ClientPacketListener implements ClientGamePacketListener {
             } else {
                 this.minecraft.execute(() -> this.minecraft.setScreen(new ConfirmScreen((flag2) -> {
                         this.minecraft.setScreen((Screen)null);
-                        ServerData serverData = this.minecraft.getCurrentServer();
+                        ServerData serverDataIn = this.minecraft.getCurrentServer();
                         if (flag2) {
-                            if (serverData != null) {
-                                serverData.setResourcePackStatus(ServerData.ServerPackStatus.ENABLED);
+                            if (serverDataIn != null) {
+                                serverDataIn.setResourcePackStatus(ServerData.ServerPackStatus.ENABLED);
                             }
 
                             this.send(ServerboundResourcePackPacket.Action.ACCEPTED);
@@ -1549,13 +1549,13 @@ public class ClientPacketListener implements ClientGamePacketListener {
                             this.send(ServerboundResourcePackPacket.Action.DECLINED);
                             if (flag) {
                                 this.connection.disconnect(Component.translatable("multiplayer.requiredTexturePrompt.disconnect"));
-                            } else if (serverData != null) {
-                                serverData.setResourcePackStatus(ServerData.ServerPackStatus.DISABLED);
+                            } else if (serverDataIn != null) {
+                                serverDataIn.setResourcePackStatus(ServerData.ServerPackStatus.DISABLED);
                             }
                         }
 
-                        if (serverData != null) {
-                            ServerList.saveSingleServer(serverData);
+                        if (serverDataIn != null) {
+                            ServerList.saveSingleServer(serverDataIn);
                         }
 
                     }, flag ? Component.translatable("multiplayer.requiredTexturePrompt.line1") : Component.translatable("multiplayer.texturePrompt.line1"), preparePackPrompt(flag ? Component.translatable("multiplayer.requiredTexturePrompt.line2").withStyle(ChatFormatting.YELLOW, ChatFormatting.BOLD) : Component.translatable("multiplayer.texturePrompt.line2"), clientboundResourcePackPacket.getPrompt()), flag ? CommonComponents.GUI_PROCEED : CommonComponents.GUI_YES, (Component)(flag ? Component.translatable("menu.disconnect") : CommonComponents.GUI_NO))));
diff --git a/src/main/java/net/minecraft/client/particle/SculkChargeParticle.java b/src/main/java/net/minecraft/client/particle/SculkChargeParticle.java
index c633481d90ea4d549116c636b7666a9ea965b28a..0b004c62f1c3461c99ca50717fe60e0be76bd730 100644
--- a/src/main/java/net/minecraft/client/particle/SculkChargeParticle.java
+++ b/src/main/java/net/minecraft/client/particle/SculkChargeParticle.java
@@ -28,9 +28,7 @@ public class SculkChargeParticle extends TextureSheetParticle {
         this.setSpriteFromAge(this.sprites);
     }
 
-    public static record Provider(SpriteSet a) implements ParticleProvider<SculkChargeParticleOptions> {
-        private final SpriteSet sprite;
-
+    public static record Provider(SpriteSet sprite) implements ParticleProvider<SculkChargeParticleOptions> {
         public Particle createParticle(SculkChargeParticleOptions sculkChargeParticleOptions, ClientLevel clientLevel, double d, double d2, double d3, double d4, double d5, double d6) {
             SculkChargeParticle sculkChargeParticle = new SculkChargeParticle(clientLevel, d, d2, d3, d4, d5, d6, this.sprite);
             sculkChargeParticle.setAlpha(1.0F);
@@ -40,9 +38,5 @@ public class SculkChargeParticle extends TextureSheetParticle {
             sculkChargeParticle.setLifetime(clientLevel.random.nextInt(12) + 8);
             return sculkChargeParticle;
         }
-
-        public SpriteSet sprite() {
-            return this.sprite;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/particle/SculkChargePopParticle.java b/src/main/java/net/minecraft/client/particle/SculkChargePopParticle.java
index 52db10576dd947e0b3d2de7fa07773d95c8d836b..1a21c035711e66440c5b9e0007a8f7b6ae05df8f 100644
--- a/src/main/java/net/minecraft/client/particle/SculkChargePopParticle.java
+++ b/src/main/java/net/minecraft/client/particle/SculkChargePopParticle.java
@@ -28,9 +28,7 @@ public class SculkChargePopParticle extends TextureSheetParticle {
         this.setSpriteFromAge(this.sprites);
     }
 
-    public static record Provider(SpriteSet a) implements ParticleProvider<SimpleParticleType> {
-        private final SpriteSet sprite;
-
+    public static record Provider(SpriteSet sprite) implements ParticleProvider<SimpleParticleType> {
         public Particle createParticle(SimpleParticleType simpleParticleType, ClientLevel clientLevel, double d, double d2, double d3, double d4, double d5, double d6) {
             SculkChargePopParticle sculkChargePopParticle = new SculkChargePopParticle(clientLevel, d, d2, d3, d4, d5, d6, this.sprite);
             sculkChargePopParticle.setAlpha(1.0F);
@@ -38,9 +36,5 @@ public class SculkChargePopParticle extends TextureSheetParticle {
             sculkChargePopParticle.setLifetime(clientLevel.random.nextInt(4) + 6);
             return sculkChargePopParticle;
         }
-
-        public SpriteSet sprite() {
-            return this.sprite;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java b/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
index bc10df699f8bb1bff2c6545b0fea1c64fdbc999f..f3d0cc2722ccb4cd4f830a0defeb13ce5e4d7969 100644
--- a/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
@@ -93,7 +93,7 @@ public class BlockEntityWithoutLevelRenderer implements ResourceManagerReloadLis
                     } else if (compoundTag.contains("SkullOwner", 8) && !StringUtils.isBlank(compoundTag.getString("SkullOwner"))) {
                         gameProfile = new GameProfile((UUID)null, compoundTag.getString("SkullOwner"));
                         compoundTag.remove("SkullOwner");
-                        SkullBlockEntity.updateGameprofile(gameProfile, (gameProfile) -> compoundTag.put("SkullOwner", NbtUtils.writeGameProfile(new CompoundTag(), gameProfile)));
+                        SkullBlockEntity.updateGameprofile(gameProfile, (gameProfileIn) -> compoundTag.put("SkullOwner", NbtUtils.writeGameProfile(new CompoundTag(), gameProfileIn)));
                     }
                 }
 
diff --git a/src/main/java/net/minecraft/client/renderer/LevelRenderer.java b/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
index 10b40c4f370c32d3ab84c5d240f753042fe90583..3b68ab8885339b61966e900aca7ce4184eb20e25 100644
--- a/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
@@ -934,7 +934,7 @@ public class LevelRenderer implements ResourceManagerReloadListener, AutoCloseab
                         ChunkRenderDispatcher.CompiledChunk compiledChunk = renderChunk.getCompiledChunk();
                         boolean flag3 = false;
 
-                        for(int i2 = 0; i2 < DIRECTIONS.length; ++i2) {
+                        for (int i2 = 0; i2 < DIRECTIONS.length; ++i2) {
                             if (renderChunkInfo.hasSourceDirection(i2) && compiledChunk.facesCanSeeEachother(DIRECTIONS[i2].getOpposite(), direction)) {
                                 flag3 = true;
                                 break;
@@ -946,71 +946,44 @@ public class LevelRenderer implements ResourceManagerReloadListener, AutoCloseab
                         }
                     }
 
+                    boolean flag4 = false;
                     if (flag && flag2) {
-                        BlockPos blockPos3;
-                        byte var10001;
-                        label126: {
-                            label125: {
-                                blockPos3 = renderChunk2.getOrigin();
-                                if (direction.getAxis() == Direction.Axis.X) {
-                                    if (blockPos2.getX() > blockPos3.getX()) {
-                                        break label125;
-                                    }
-                                } else if (blockPos2.getX() < blockPos3.getX()) {
-                                    break label125;
-                                }
-
-                                var10001 = 0;
-                                break label126;
+                        BlockPos blockPos3 = renderChunk2.getOrigin();
+                        int offX = 0;
+                        if (direction.getAxis() == Direction.Axis.X) {
+                            if (blockPos2.getX() > blockPos3.getX()) {
+                                offX = 16;
                             }
-
-                            var10001 = 16;
+                        } else if (blockPos2.getX() < blockPos3.getX()) {
+                            offX = 16;
                         }
 
-                        byte var10002;
-                        label118: {
-                            label117: {
-                                if (direction.getAxis() == Direction.Axis.Y) {
-                                    if (blockPos2.getY() > blockPos3.getY()) {
-                                        break label117;
-                                    }
-                                } else if (blockPos2.getY() < blockPos3.getY()) {
-                                    break label117;
-                                }
-
-                                var10002 = 0;
-                                break label118;
+                        int offY = 0;
+                        if (direction.getAxis() == Direction.Axis.Y) {
+                            if (blockPos2.getY() > blockPos3.getY()) {
+                                offY = 16;
                             }
-
-                            var10002 = 16;
+                        } else if (blockPos2.getY() < blockPos3.getY()) {
+                            offY = 16;
                         }
 
-                        byte var10003;
-                        label110: {
-                            label109: {
-                                if (direction.getAxis() == Direction.Axis.Z) {
-                                    if (blockPos2.getZ() > blockPos3.getZ()) {
-                                        break label109;
-                                    }
-                                } else if (blockPos2.getZ() < blockPos3.getZ()) {
-                                    break label109;
-                                }
-
-                                var10003 = 0;
-                                break label110;
+                        int offZ = 0;
+                        if (direction.getAxis() == Direction.Axis.Z) {
+                            if (blockPos2.getZ() > blockPos3.getZ()) {
+                                offZ = 16;
                             }
-
-                            var10003 = 16;
+                        } else if (blockPos2.getZ() < blockPos3.getZ()) {
+                            offZ = 16;
                         }
 
-                        BlockPos blockPos4 = blockPos3.offset(var10001, var10002, var10003);
-                        Vec3 vec32 = new Vec3((double)blockPos4.getX(), (double)blockPos4.getY(), (double)blockPos4.getZ());
+                        BlockPos blockPos4 = blockPos3.offset(offX, offY, offZ);
+                        Vec3 vec32 = new Vec3((double) blockPos4.getX(), (double) blockPos4.getY(), (double) blockPos4.getZ());
                         Vec3 vec33 = vec3.subtract(vec32).normalize().scale(CEILED_SECTION_DIAGONAL);
-                        boolean flag4 = true;
+                        flag4 = true;
 
-                        while(vec3.subtract(vec32).lengthSqr() > 3600.0D) {
+                        while (vec3.subtract(vec32).lengthSqr() > 3600.0D) {
                             vec32 = vec32.add(vec33);
-                            if (vec32.y > (double)this.level.getMaxBuildHeight() || vec32.y < (double)this.level.getMinBuildHeight()) {
+                            if (vec32.y > (double) this.level.getMaxBuildHeight() || vec32.y < (double) this.level.getMinBuildHeight()) {
                                 break;
                             }
 
@@ -1020,10 +993,7 @@ public class LevelRenderer implements ResourceManagerReloadListener, AutoCloseab
                                 break;
                             }
                         }
-
-                        if (!flag4) {
-                            continue;
-                        }
+                        if (!flag4) continue;
                     }
 
                     LevelRenderer.RenderChunkInfo renderChunkInfo2 = renderInfoMap.get(renderChunk2);
@@ -1789,13 +1759,13 @@ public class LevelRenderer implements ResourceManagerReloadListener, AutoCloseab
                 } else if (this.minecraft.level.effects().skyType() == DimensionSpecialEffects.SkyType.NORMAL) {
                     RenderSystem.disableTexture();
                     Vec3 vec3 = this.level.getSkyColor(this.minecraft.gameRenderer.getMainCamera().getPosition(), f);
-                    float f2 = (float)vec3.x;
+                    float f2In = (float)vec3.x;
                     float f3 = (float)vec3.y;
                     float f4 = (float)vec3.z;
                     FogRenderer.levelFogColor();
                     BufferBuilder bufferBuilder = Tesselator.getInstance().getBuilder();
                     RenderSystem.depthMask(false);
-                    RenderSystem.setShaderColor(f2, f3, f4, 1.0F);
+                    RenderSystem.setShaderColor(f2In, f3, f4, 1.0F);
                     ShaderInstance shaderInstance = RenderSystem.getShader();
                     this.skyBuffer.bind();
                     this.skyBuffer.drawWithShader(poseStack.last().pose(), matrix4f, shaderInstance);
@@ -1890,9 +1860,9 @@ public class LevelRenderer implements ResourceManagerReloadListener, AutoCloseab
                     }
 
                     if (this.level.effects().hasGround()) {
-                        RenderSystem.setShaderColor(f2 * 0.2F + 0.04F, f3 * 0.2F + 0.04F, f4 * 0.6F + 0.1F, 1.0F);
+                        RenderSystem.setShaderColor(f2In * 0.2F + 0.04F, f3 * 0.2F + 0.04F, f4 * 0.6F + 0.1F, 1.0F);
                     } else {
-                        RenderSystem.setShaderColor(f2, f3, f4, 1.0F);
+                        RenderSystem.setShaderColor(f2In, f3, f4, 1.0F);
                     }
 
                     RenderSystem.enableTexture();
diff --git a/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java b/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
index f3330939a90f66566afc5f2f8813f2cfc8f5f547..a8bb5886070ce44644040bd18ae2a66b20b3ccb2 100644
--- a/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
@@ -314,7 +314,7 @@ public class LiquidBlockRenderer {
             floats[1] += 10.0F;
         } else if (f >= 0.0F) {
             floats[0] += f;
-            int var10002 = floats[1]++;
+            floats[1]++;
         }
 
     }
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/multipart/KeyValueCondition.java b/src/main/java/net/minecraft/client/renderer/block/model/multipart/KeyValueCondition.java
index d559ca145678cb3127caffd0d92c2c70be8ea2f3..ebd531cd81b8966d0b738bdb6ce9e56df5be9581 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/multipart/KeyValueCondition.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/multipart/KeyValueCondition.java
@@ -41,7 +41,7 @@ public class KeyValueCondition implements Condition {
                     predicate = this.getBlockStatePredicate(stateDefinition, property, s);
                 } else {
                     List<Predicate<BlockState>> list2 = list.stream().map((sx) -> this.getBlockStatePredicate(stateDefinition, property, sx)).collect(Collectors.toList());
-                    predicate = (blockState) -> list2.stream().anyMatch((predicate) -> predicate.test(blockState));
+                    predicate = (blockState) -> list2.stream().anyMatch((predicateIn) -> predicateIn.test(blockState));
                 }
 
                 return flag ? predicate.negate() : predicate;
diff --git a/src/main/java/net/minecraft/client/renderer/blockentity/BannerRenderer.java b/src/main/java/net/minecraft/client/renderer/blockentity/BannerRenderer.java
index 292d2fa985a05d2f0eafa20f8a17bd6f57da7318..a02f47d81f03fe4cdcce511186c8508d2ba99d21 100644
--- a/src/main/java/net/minecraft/client/renderer/blockentity/BannerRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/blockentity/BannerRenderer.java
@@ -106,7 +106,7 @@ public class BannerRenderer implements BlockEntityRenderer<BannerBlockEntity> {
         for(int i3 = 0; i3 < 17 && i3 < list.size(); ++i3) {
             Pair<Holder<BannerPattern>, DyeColor> pair = list.get(i3);
             float[] floats = ((DyeColor)pair.getSecond()).getTextureDiffuseColors();
-            ((Holder)pair.getFirst()).unwrapKey().map((resourceKey) -> flag ? Sheets.getBannerMaterial(resourceKey) : Sheets.getShieldMaterial(resourceKey)).ifPresent((materialx) -> modelPart.render(poseStack, materialx.buffer(multiBufferSource, RenderType::entityNoOutline), i, i2, floats[0], floats[1], floats[2], 1.0F));
+            pair.getFirst().unwrapKey().map((resourceKey) -> flag ? Sheets.getBannerMaterial(resourceKey) : Sheets.getShieldMaterial(resourceKey)).ifPresent((materialx) -> modelPart.render(poseStack, materialx.buffer(multiBufferSource, RenderType::entityNoOutline), i, i2, floats[0], floats[1], floats[2], 1.0F));
         }
 
     }
diff --git a/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java
index a3b654a02fa1b7452f804e8df6826c1c5bf85ebe..763da7bba70f626190d7f170d4d93849f6260684 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java
@@ -112,17 +112,17 @@ public class ChunkDebugRenderer implements DebugRenderer.SimpleDebugRenderer {
                 if (serverLevel == null) {
                     return ImmutableMap.of();
                 } else {
-                    Builder<ChunkPos, String> builder = ImmutableMap.builder();
+                    Builder<ChunkPos, String> builderIn = ImmutableMap.builder();
                     ServerChunkCache serverChunkCache = serverLevel.getChunkSource();
 
                     for(int i3 = i - 12; i3 <= i + 12; ++i3) {
                         for(int i4 = i2 - 12; i4 <= i2 + 12; ++i4) {
                             ChunkPos chunkPos = new ChunkPos(i3, i4);
-                            builder.put(chunkPos, "Server: " + serverChunkCache.getChunkDebugData(chunkPos));
+                            builderIn.put(chunkPos, "Server: " + serverChunkCache.getChunkDebugData(chunkPos));
                         }
                     }
 
-                    return builder.build();
+                    return builderIn.build();
                 }
             });
         }
diff --git a/src/main/java/net/minecraft/client/renderer/debug/GameEventListenerRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/GameEventListenerRenderer.java
index 35408327ac24754c2e6df107f70a57244b1d416c..be4492e5f6bf76aa3a63ff704b781f442d4abca5 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/GameEventListenerRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/GameEventListenerRenderer.java
@@ -129,26 +129,10 @@ public class GameEventListenerRenderer implements DebugRenderer.SimpleDebugRende
         this.trackedListeners.add(new GameEventListenerRenderer.TrackedListener(positionSource, i));
     }
 
-    static record TrackedGameEvent(long a, GameEvent b, Vec3 c) {
-        private final long timeStamp;
-        final GameEvent gameEvent;
-        final Vec3 position;
-
+    static record TrackedGameEvent(long timeStamp, GameEvent gameEvent, Vec3 position) {
         public boolean isExpired() {
             return Util.getMillis() - this.timeStamp > 3000L;
         }
-
-        public long timeStamp() {
-            return this.timeStamp;
-        }
-
-        public GameEvent gameEvent() {
-            return this.gameEvent;
-        }
-
-        public Vec3 position() {
-            return this.position;
-        }
     }
 
     static class TrackedListener implements GameEventListener {
diff --git a/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
index 132b907e1e6570448624d1cbc4ea98f4daab2e77..52b51021c35d0291e672ca1ca3f0d0c18e4c0747 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
@@ -41,11 +41,11 @@ public class GoalSelectorDebugRenderer implements DebugRenderer.SimpleDebugRende
             for(int i = 0; i < list.size(); ++i) {
                 GoalSelectorDebugRenderer.DebugGoal debugGoal = (GoalSelectorDebugRenderer.DebugGoal)list.get(i);
                 if (blockPos.closerThan(debugGoal.pos, 160.0D)) {
-                    double d = (double)debugGoal.pos.getX() + 0.5D;
-                    double d2 = (double)debugGoal.pos.getY() + 2.0D + (double)i * 0.25D;
-                    double d3 = (double)debugGoal.pos.getZ() + 0.5D;
+                    double dx = (double)debugGoal.pos.getX() + 0.5D;
+                    double d2x = (double)debugGoal.pos.getY() + 2.0D + (double)i * 0.25D;
+                    double d3x = (double)debugGoal.pos.getZ() + 0.5D;
                     int i2 = debugGoal.isRunning ? -16711936 : -3355444;
-                    DebugRenderer.renderFloatingText(debugGoal.name, d, d2, d3, i2);
+                    DebugRenderer.renderFloatingText(debugGoal.name, dx, d2x, d3x, i2);
                 }
             }
 
diff --git a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
index d1333f5bff07b5da4dba7761e81d5c65bd87bab5..0615e0841405526dca032544939567c0e85512ec 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
@@ -86,7 +86,7 @@ public class EntityRenderDispatcher implements ResourceManagerReloadListener {
         if (entity instanceof AbstractClientPlayer) {
             String s = ((AbstractClientPlayer)entity).getModelName();
             EntityRenderer<? extends Player> entityRenderer = (EntityRenderer)this.playerRenderers.get(s);
-            return entityRenderer != null ? entityRenderer : (EntityRenderer)this.playerRenderers.get("default");
+            return entityRenderer != null ? (EntityRenderer<? super T>) entityRenderer : (EntityRenderer)this.playerRenderers.get("default");
         } else {
             return (EntityRenderer)this.renderers.get(entity.getType());
         }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderers.java b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderers.java
index 64b1071862020aed0b31314f84c7a560d3448503..62dae5a5d920c22871a76be03650dae3c518f2d7 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderers.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderers.java
@@ -19,7 +19,7 @@ public class EntityRenderers {
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final String DEFAULT_PLAYER_MODEL = "default";
     private static final Map<EntityType<?>, EntityRendererProvider<?>> PROVIDERS = Maps.newHashMap();
-    private static final Map<String, EntityRendererProvider<AbstractClientPlayer>> PLAYER_PROVIDERS = ImmutableMap.of("default", (EntityRendererProvider<>)(context) -> new PlayerRenderer(context, false), "slim", (EntityRendererProvider<>)(context) -> new PlayerRenderer(context, true));
+    private static final Map<String, EntityRendererProvider<AbstractClientPlayer>> PLAYER_PROVIDERS = ImmutableMap.of("default", (EntityRendererProvider)(context) -> new PlayerRenderer(context, false), "slim", (EntityRendererProvider)(context) -> new PlayerRenderer(context, true));
 
     private static <T extends Entity> void register(EntityType<? extends T> entityType, EntityRendererProvider<T> entityRendererProvider) {
         PROVIDERS.put(entityType, entityRendererProvider);
diff --git a/src/main/java/net/minecraft/client/renderer/entity/layers/VillagerProfessionLayer.java b/src/main/java/net/minecraft/client/renderer/entity/layers/VillagerProfessionLayer.java
index dcbbf29fc0595c577ca512d47756254c362000ff..601fab612d0eac6bb8fba2f96e0dad59b8685d1d 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/layers/VillagerProfessionLayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/layers/VillagerProfessionLayer.java
@@ -56,7 +56,7 @@ public class VillagerProfessionLayer<T extends LivingEntity & VillagerDataHolder
             renderColoredCutoutModel(entityModel, resourceLocation, poseStack, multiBufferSource, i, livingEntity, 1.0F, 1.0F, 1.0F);
             entityModel.hatVisible(true);
             if (villagerProfession != VillagerProfession.NONE && !livingEntity.isBaby()) {
-                ResourceLocation resourceLocation2 = this.getResourceLocation("profession", Registry.VILLAGER_PROFESSION.getKey((T)villagerProfession));
+                ResourceLocation resourceLocation2 = this.getResourceLocation("profession", Registry.VILLAGER_PROFESSION.getKey(villagerProfession));
                 renderColoredCutoutModel(entityModel, resourceLocation2, poseStack, multiBufferSource, i, livingEntity, 1.0F, 1.0F, 1.0F);
                 if (villagerProfession != VillagerProfession.NITWIT) {
                     ResourceLocation resourceLocation3 = this.getResourceLocation("profession_level", (ResourceLocation)LEVEL_LOCATIONS.get(Mth.clamp(villagerData.getLevel(), 1, LEVEL_LOCATIONS.size())));
diff --git a/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java b/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java
index 7ac3160a5c0c7c688a96e15eff0eec6dee816b86..c7e1de2ed533d4327de15aafd45a2eb3fdc997d8 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java
@@ -108,9 +108,9 @@ public class HttpTexture extends SimpleTexture {
                             }
 
                             Minecraft.getInstance().execute(() -> {
-                                NativeImage nativeImage = this.load(inputStream);
-                                if (nativeImage != null) {
-                                    this.loadCallback(nativeImage);
+                                NativeImage nativeImageIn = this.load(inputStream);
+                                if (nativeImageIn != null) {
+                                    this.loadCallback(nativeImageIn);
                                 }
 
                             });
diff --git a/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java b/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java
index ce8671a6ea9284aa8327b11cd165834e87ebffa4..64258228cf8133f66afcb67952e592111ba8546c 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java
@@ -11,7 +11,7 @@ import java.util.function.Consumer;
 import net.minecraft.util.Mth;
 
 public class Stitcher {
-    private static final Comparator<Stitcher.Holder> HOLDER_COMPARATOR = Comparator.comparing((holder) -> -holder.height).thenComparing((holder) -> -holder.width).thenComparing((holder) -> holder.spriteInfo.name());
+    private static final Comparator<Stitcher.Holder> HOLDER_COMPARATOR = Comparator.<Holder, Integer>comparing((holder) -> -holder.height).thenComparing((holder) -> -holder.width).thenComparing((holder) -> holder.spriteInfo.name());
     private final int mipLevel;
     private final Set<Stitcher.Holder> texturesToBeStitched = Sets.newHashSetWithExpectedSize(256);
     private final List<Stitcher.Region> storage = Lists.newArrayListWithCapacity(256);
diff --git a/src/main/java/net/minecraft/client/resources/ClientPackSource.java b/src/main/java/net/minecraft/client/resources/ClientPackSource.java
index 40ffe5b33c73e6be2034e0b34ce40ee8bcf01b46..a917cf4f15b3c16d768a7efee805a086d8c5dc58 100644
--- a/src/main/java/net/minecraft/client/resources/ClientPackSource.java
+++ b/src/main/java/net/minecraft/client/resources/ClientPackSource.java
@@ -147,8 +147,8 @@ public class ClientPackSource implements RepositorySource {
                     LOGGER.warn("Pack application failed: {}, deleting file {}", throwable.getMessage(), file);
                     deleteQuietly(file);
                     Minecraft minecraft = Minecraft.getInstance();
-                    minecraft.execute(() -> minecraft.setScreen(new ConfirmScreen((flag) -> {
-                            if (flag) {
+                    minecraft.execute(() -> minecraft.setScreen(new ConfirmScreen((flagIn) -> {
+                            if (flagIn) {
                                 minecraft.setScreen((Screen)null);
                             } else {
                                 ClientPacketListener clientPacketListener = minecraft.getConnection();
diff --git a/src/main/java/net/minecraft/client/resources/model/ModelBakery.java b/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
index 86610f970ad9c57fcf6e305eb5743ed061bf6600..5e5e868e9b4f4610187e03e107c6372bac8eaa20 100644
--- a/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
+++ b/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
@@ -356,14 +356,14 @@ public class ModelBakery {
                         blockModelDefinition.getVariants().forEach((s, multiVariant) -> {
                             try {
                                 immutableList.stream().filter(predicate(stateDefinition, s)).forEach((blockState) -> {
-                                    Pair<UnbakedModel, Supplier<ModelBakery.ModelGroupKey>> pair2 = map3.put(blockState, Pair.of(multiVariant, () -> ModelBakery.ModelGroupKey.create(blockState, multiVariant, list)));
-                                    if (pair2 != null && pair2.getFirst() != multiPart) {
+                                    Pair<UnbakedModel, Supplier<ModelBakery.ModelGroupKey>> pair3 = map3.put(blockState, Pair.of(multiVariant, () -> ModelBakery.ModelGroupKey.create(blockState, multiVariant, list)));
+                                    if (pair3 != null && pair3.getFirst() != multiPart) {
                                         map3.put(blockState, pair);
-                                        throw new RuntimeException("Overlapping definition with: " + (String)((Entry)blockModelDefinition.getVariants().entrySet().stream().filter((entry) -> entry.getValue() == pair2.getFirst()).findFirst().get()).getKey());
+                                        throw new RuntimeException("Overlapping definition with: " + (String)(blockModelDefinition.getVariants().entrySet().stream().filter((entry) -> entry.getValue() == pair3.getFirst()).findFirst().get()).getKey());
                                     }
                                 });
                             } catch (Exception var12) {
-                                LOGGER.warn("Exception loading blockstate definition: '{}' in resourcepack: '{}' for variant: '{}': {}", new Object[]{resourceLocation4, pair2.getFirst(), s, var12.getMessage()});
+                                LOGGER.warn("Exception loading blockstate definition: '{}' in resourcepack: '{}' for variant: '{}': {}", resourceLocation4, pair2.getFirst(), s, var12.getMessage());
                             }
 
                         });
@@ -385,8 +385,8 @@ public class ModelBakery {
                         this.cacheAndQueueDependencies(modelResourceLocationx, (UnbakedModel)pair2.getFirst());
 
                         try {
-                            ModelBakery.ModelGroupKey modelGroupKey = (ModelBakery.ModelGroupKey)(pair2.getSecond()).get();
-                            (map5.computeIfAbsent(modelGroupKey, (modelGroupKey) -> Sets.newIdentityHashSet())).add(blockState);
+                            ModelBakery.ModelGroupKey modelGroupKeyIn = (ModelBakery.ModelGroupKey)(pair2.getSecond()).get();
+                            (map5.computeIfAbsent(modelGroupKeyIn, (modelGroupKeyInIn) -> Sets.newIdentityHashSet())).add(blockState);
                         } catch (Exception var9) {
                             LOGGER.warn("Exception evaluating model definition: '{}'", modelResourceLocationx, var9);
                         }
diff --git a/src/main/java/net/minecraft/client/searchtree/PlainTextSearchTree.java b/src/main/java/net/minecraft/client/searchtree/PlainTextSearchTree.java
index c1ed7229710f49b605f830a273781c5a5849a74a..c08d4ef9a5a12ecd0d1a0c06a149a4c7fbc4894f 100644
--- a/src/main/java/net/minecraft/client/searchtree/PlainTextSearchTree.java
+++ b/src/main/java/net/minecraft/client/searchtree/PlainTextSearchTree.java
@@ -17,7 +17,7 @@ public interface PlainTextSearchTree<T> {
             SuffixArray<T> suffixArray = new SuffixArray<>();
 
             for(T object : list) {
-                ((Stream)function.apply(object)).forEach((s) -> suffixArray.add(object, s.toLowerCase(Locale.ROOT)));
+                function.apply(object).forEach((s) -> suffixArray.add(object, s.toLowerCase(Locale.ROOT)));
             }
 
             suffixArray.generate();
diff --git a/src/main/java/net/minecraft/client/searchtree/ResourceLocationSearchTree.java b/src/main/java/net/minecraft/client/searchtree/ResourceLocationSearchTree.java
index aec933f9c5a0b16094650758d68bb2e8650b1578..ddbdee3ac8d4e02f0dd763b0a3483b27c38b45bf 100644
--- a/src/main/java/net/minecraft/client/searchtree/ResourceLocationSearchTree.java
+++ b/src/main/java/net/minecraft/client/searchtree/ResourceLocationSearchTree.java
@@ -27,7 +27,7 @@ public interface ResourceLocationSearchTree<T> {
             final SuffixArray<T> suffixArray2 = new SuffixArray<>();
 
             for(T object : list) {
-                ((Stream)function.apply(object)).forEach((resourceLocation) -> {
+                function.apply(object).forEach((resourceLocation) -> {
                     suffixArray.add(object, resourceLocation.getNamespace().toLowerCase(Locale.ROOT));
                     suffixArray2.add(object, resourceLocation.getPath().toLowerCase(Locale.ROOT));
                 });
diff --git a/src/main/java/net/minecraft/client/sounds/SoundEngine.java b/src/main/java/net/minecraft/client/sounds/SoundEngine.java
index 1813d76f7c6b38558ef76bf05f066dff9d725dcd..071f0f82c7b6f2642232c111cff964ab0715e128 100644
--- a/src/main/java/net/minecraft/client/sounds/SoundEngine.java
+++ b/src/main/java/net/minecraft/client/sounds/SoundEngine.java
@@ -117,12 +117,12 @@ public class SoundEngine {
                 this.listener.setGain(f);
             } else {
                 this.instanceToChannel.forEach((soundInstance, channelHandle) -> {
-                    float f = this.calculateVolume(soundInstance);
+                    float volume = this.calculateVolume(soundInstance);
                     channelHandle.execute((channel) -> {
-                        if (f <= 0.0F) {
+                        if (volume <= 0.0F) {
                             channel.stop();
                         } else {
-                            channel.setVolume(f);
+                            channel.setVolume(volume);
                         }
 
                     });
diff --git a/src/main/java/net/minecraft/commands/CommandSigningContext.java b/src/main/java/net/minecraft/commands/CommandSigningContext.java
index c57581b2b587ef068d3926c5c75342bd081a1eb6..c9b2688d8124c752ea76e713ba2b9ea510a945fe 100644
--- a/src/main/java/net/minecraft/commands/CommandSigningContext.java
+++ b/src/main/java/net/minecraft/commands/CommandSigningContext.java
@@ -15,12 +15,7 @@ public interface CommandSigningContext {
         return false;
     }
 
-    public static record SignedArguments(UUID b, Instant c, ArgumentSignatures d, boolean e) implements CommandSigningContext {
-        private final UUID sender;
-        private final Instant timeStamp;
-        private final ArgumentSignatures argumentSignatures;
-        private final boolean signedPreview;
-
+    public static record SignedArguments(UUID sender, Instant timeStamp, ArgumentSignatures argumentSignatures, boolean signedPreview) implements CommandSigningContext {
         public MessageSignature getArgumentSignature(String s) {
             Crypt.SaltSignaturePair saltSignaturePair = this.argumentSignatures.get(s);
             return saltSignaturePair != null ? new MessageSignature(this.sender, this.timeStamp, saltSignaturePair) : MessageSignature.unsigned();
@@ -29,21 +24,5 @@ public interface CommandSigningContext {
         public boolean signedArgumentPreview(String s) {
             return this.signedPreview;
         }
-
-        public UUID sender() {
-            return this.sender;
-        }
-
-        public Instant timeStamp() {
-            return this.timeStamp;
-        }
-
-        public ArgumentSignatures argumentSignatures() {
-            return this.argumentSignatures;
-        }
-
-        public boolean signedPreview() {
-            return this.signedPreview;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index bdbe66b2566d7dfdf28aa2969f9cc412a284ea02..de29ef1f06ce19d796db6aa7b03a62156660d1df 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -273,7 +273,7 @@ public class Commands {
     private void fillUsableCommands(CommandNode<CommandSourceStack> commandNode, CommandNode<SharedSuggestionProvider> commandNode2, CommandSourceStack commandSourceStack, Map<CommandNode<CommandSourceStack>, CommandNode<SharedSuggestionProvider>> map) {
         for(CommandNode<CommandSourceStack> commandNode3 : commandNode.getChildren()) {
             if (commandNode3.canUse(commandSourceStack)) {
-                ArgumentBuilder<SharedSuggestionProvider, ?> argumentBuilder = commandNode3.createBuilder();
+                ArgumentBuilder<SharedSuggestionProvider, ?> argumentBuilder = (ArgumentBuilder) commandNode3.createBuilder();
                 argumentBuilder.requires((sharedSuggestionProvider) -> true);
                 if (argumentBuilder.getCommand() != null) {
                     argumentBuilder.executes((commandContext) -> 0);
diff --git a/src/main/java/net/minecraft/commands/arguments/ArgumentSignatures.java b/src/main/java/net/minecraft/commands/arguments/ArgumentSignatures.java
index 2360e287cc59398d2463a733dec28bff25e0f553..3e67fa8ad8f05afcb88ff016058adf47bb19e5a6 100644
--- a/src/main/java/net/minecraft/commands/arguments/ArgumentSignatures.java
+++ b/src/main/java/net/minecraft/commands/arguments/ArgumentSignatures.java
@@ -14,9 +14,7 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.Component;
 import net.minecraft.util.Crypt;
 
-public record ArgumentSignatures(long a, Map<String, byte[]> b) {
-    private final long salt;
-    private final Map<String, byte[]> signatures;
+public record ArgumentSignatures(long salt, Map<String, byte[]> signatures) {
     private static final int MAX_ARGUMENT_COUNT = 8;
     private static final int MAX_ARGUMENT_NAME_LENGTH = 16;
 
@@ -50,9 +48,9 @@ public record ArgumentSignatures(long a, Map<String, byte[]> b) {
                 ArgumentType var8 = argumentCommandNode.getType();
                 if (var8 instanceof SignedArgument) {
                     SignedArgument<?> signedArgument = (SignedArgument)var8;
-                    ParsedArgument<?, ?> parsedArgument = (ParsedArgument)commandContextBuilder2.getArguments().get(argumentCommandNode.getName());
-                    if (parsedArgument != null) {
-                        map.put(argumentCommandNode.getName(), getPlainComponentUnchecked(signedArgument, parsedArgument));
+                    ParsedArgument<?, ?> parsedArgumentIn = commandContextBuilder2.getArguments().get(argumentCommandNode.getName());
+                    if (parsedArgumentIn != null) {
+                        map.put(argumentCommandNode.getName(), getPlainComponentUnchecked(signedArgument, parsedArgumentIn));
                     }
                 }
             }
diff --git a/src/main/java/net/minecraft/commands/arguments/EntityArgument.java b/src/main/java/net/minecraft/commands/arguments/EntityArgument.java
index 7a6398da7bd7d607181c0fcb7d4d4652816529a2..c09e448f49172e90540c23cc960adb03c331f7cb 100644
--- a/src/main/java/net/minecraft/commands/arguments/EntityArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/EntityArgument.java
@@ -114,9 +114,9 @@ public class EntityArgument implements ArgumentType<EntitySelector> {
         Object stringReader = commandContext.getSource();
         if (stringReader instanceof SharedSuggestionProvider) {
             SharedSuggestionProvider sharedSuggestionProvider = (SharedSuggestionProvider)stringReader;
-            StringReader stringReader = new StringReader(suggestionsBuilder.getInput());
-            stringReader.setCursor(suggestionsBuilder.getStart());
-            EntitySelectorParser entitySelectorParser = new EntitySelectorParser(stringReader, sharedSuggestionProvider.hasPermission(2));
+            StringReader stringReaderIn = new StringReader(suggestionsBuilder.getInput());
+            stringReaderIn.setCursor(suggestionsBuilder.getStart());
+            EntitySelectorParser entitySelectorParser = new EntitySelectorParser(stringReaderIn, sharedSuggestionProvider.hasPermission(2));
 
             try {
                 entitySelectorParser.parse();
diff --git a/src/main/java/net/minecraft/commands/arguments/MessageArgument.java b/src/main/java/net/minecraft/commands/arguments/MessageArgument.java
index 0853dbc390223680f750399c110bb1581ec36687..60f755e25ca6343298e5fe9f8c135725bcbd1a04 100644
--- a/src/main/java/net/minecraft/commands/arguments/MessageArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/MessageArgument.java
@@ -74,12 +74,7 @@ public class MessageArgument implements SignedArgument<MessageArgument.Message>
         });
     }
 
-    public static record ChatMessage(String a, Component b, MessageSignature c, boolean d) {
-        private final String plain;
-        private final Component formatted;
-        private final MessageSignature signature;
-        private final boolean signedPreview;
-
+    public static record ChatMessage(String plain, Component formatted, MessageSignature signature, boolean signedPreview) {
         public CompletableFuture<FilteredText<PlayerChatMessage>> resolve(CommandSourceStack commandSourceStack) {
             CompletableFuture<FilteredText<PlayerChatMessage>> completableFuture = this.filterComponent(commandSourceStack, this.formatted).thenComposeAsync((filteredText) -> {
                 ChatDecorator chatDecorator = commandSourceStack.getServer().getChatDecorator();
@@ -116,22 +111,6 @@ public class MessageArgument implements SignedArgument<MessageArgument.Message>
             ServerPlayer serverPlayer = commandSourceStack.getPlayer();
             return serverPlayer != null ? serverPlayer.getTextFilter().processStreamComponent(component) : CompletableFuture.completedFuture(FilteredText.<Component>passThrough(component));
         }
-
-        public String plain() {
-            return this.plain;
-        }
-
-        public Component formatted() {
-            return this.formatted;
-        }
-
-        public MessageSignature signature() {
-            return this.signature;
-        }
-
-        public boolean signedPreview() {
-            return this.signedPreview;
-        }
     }
 
     public static class Message {
diff --git a/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java b/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
index 0d3c409223fc0139deb6c4d0b1142e7f917ed69e..38afd3d4f6223097fb3b9f973fa0d24ad0781e28 100644
--- a/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
@@ -56,7 +56,7 @@ public class ObjectiveArgument implements ArgumentType<String> {
             return SharedSuggestionProvider.suggest(commandSourceStack.getServer().getScoreboard().getObjectiveNames(), suggestionsBuilder);
         } else if (object instanceof SharedSuggestionProvider) {
             SharedSuggestionProvider sharedSuggestionProvider = (SharedSuggestionProvider)object;
-            return sharedSuggestionProvider.customSuggestion(commandContext);
+            return sharedSuggestionProvider.customSuggestion((CommandContext<SharedSuggestionProvider>) commandContext);
         } else {
             return Suggestions.empty();
         }
diff --git a/src/main/java/net/minecraft/commands/arguments/OperationArgument.java b/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
index 7c915adeb05404ba3820a064663dceca0621d64d..ed508bfe97b5bad04ac20c5b4fd2826eec03e7dc 100644
--- a/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
@@ -52,7 +52,7 @@ public class OperationArgument implements ArgumentType<OperationArgument.Operati
     }
 
     private static OperationArgument.Operation getOperation(String s) throws CommandSyntaxException {
-        return (OperationArgument.Operation)(s.equals("><") ? (score, score2) -> {
+        return (OperationArgument.Operation)(s.equals("><") ? (Operation) (score, score2) -> {
             int i = score.getScore();
             score.setScore(score2.getScore());
             score2.setScore(i);
diff --git a/src/main/java/net/minecraft/commands/arguments/ResourceOrTagLocationArgument.java b/src/main/java/net/minecraft/commands/arguments/ResourceOrTagLocationArgument.java
index 30cf92bc7b6f19eba9f21b7c8ef9376923531687..3cdaf7b268ee6dd077cb35b3714cb306ab065f6f 100644
--- a/src/main/java/net/minecraft/commands/arguments/ResourceOrTagLocationArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/ResourceOrTagLocationArgument.java
@@ -110,9 +110,7 @@ public class ResourceOrTagLocationArgument<T> implements ArgumentType<ResourceOr
         }
     }
 
-    static record ResourceResult<T>(ResourceKey<T> a) implements ResourceOrTagLocationArgument.Result<T> {
-        private final ResourceKey<T> key;
-
+    static record ResourceResult<T>(ResourceKey<T> key) implements ResourceOrTagLocationArgument.Result<T> {
         public Either<ResourceKey<T>, TagKey<T>> unwrap() {
             return Either.left(this.key);
         }
@@ -128,10 +126,6 @@ public class ResourceOrTagLocationArgument<T> implements ArgumentType<ResourceOr
         public String asPrintable() {
             return this.key.location().toString();
         }
-
-        public ResourceKey<T> key() {
-            return this.key;
-        }
     }
 
     public interface Result<T> extends Predicate<Holder<T>> {
@@ -142,9 +136,7 @@ public class ResourceOrTagLocationArgument<T> implements ArgumentType<ResourceOr
         String asPrintable();
     }
 
-    static record TagResult<T>(TagKey<T> a) implements ResourceOrTagLocationArgument.Result<T> {
-        private final TagKey<T> key;
-
+    static record TagResult<T>(TagKey<T> key) implements ResourceOrTagLocationArgument.Result<T> {
         public Either<ResourceKey<T>, TagKey<T>> unwrap() {
             return Either.right(this.key);
         }
@@ -160,9 +152,5 @@ public class ResourceOrTagLocationArgument<T> implements ArgumentType<ResourceOr
         public String asPrintable() {
             return "#" + this.key.location();
         }
-
-        public TagKey<T> key() {
-            return this.key;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java b/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
index c0dcd3621b4a01a7ab19ab04a304e3d16c1cc232..8675d313f70c13bc79cda3d68a7f61f2c1ddc955 100644
--- a/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
+++ b/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
@@ -248,9 +248,8 @@ public class BlockStateParser {
 
     private static <T extends Comparable<T>> SuggestionsBuilder addSuggestions(SuggestionsBuilder suggestionsBuilder, Property<T> property) {
         for(T comparable : property.getPossibleValues()) {
-            if (comparable instanceof Integer) {
-                Integer integer = (Integer)comparable;
-                suggestionsBuilder.suggest(integer);
+            if (comparable instanceof Integer i) {
+                suggestionsBuilder.suggest(i);
             } else {
                 suggestionsBuilder.suggest(property.getName(comparable));
             }
@@ -491,8 +490,8 @@ public class BlockStateParser {
     private <T extends Comparable<T>> void setValue(Property<T> property, String s, int i) throws CommandSyntaxException {
         Optional<T> optional = property.getValue(s);
         if (optional.isPresent()) {
-            this.state = this.state.setValue(property, (Comparable)optional.get());
-            this.properties.put(property, (Comparable)optional.get());
+            this.state = this.state.setValue(property, optional.get());
+            this.properties.put(property, optional.get());
         } else {
             this.reader.setCursor(i);
             throw ERROR_INVALID_VALUE.createWithContext(this.reader, this.id.toString(), property.getName(), s);
@@ -526,43 +525,9 @@ public class BlockStateParser {
         stringBuilder.append(property.getName((T)comparable));
     }
 
-    public static record BlockResult(BlockState a, Map<Property<?>, Comparable<?>> b, @Nullable CompoundTag c) {
-        private final BlockState blockState;
-        private final Map<Property<?>, Comparable<?>> properties;
-        @Nullable
-        private final CompoundTag nbt;
-
-        public BlockState blockState() {
-            return this.blockState;
-        }
-
-        public Map<Property<?>, Comparable<?>> properties() {
-            return this.properties;
-        }
-
-        @Nullable
-        public CompoundTag nbt() {
-            return this.nbt;
-        }
+    public static record BlockResult(BlockState blockState, Map<Property<?>, Comparable<?>> properties, @Nullable CompoundTag nbt) {
     }
 
-    public static record TagResult(HolderSet<Block> a, Map<String, String> b, @Nullable CompoundTag c) {
-        private final HolderSet<Block> tag;
-        private final Map<String, String> vagueProperties;
-        @Nullable
-        private final CompoundTag nbt;
-
-        public HolderSet<Block> tag() {
-            return this.tag;
-        }
-
-        public Map<String, String> vagueProperties() {
-            return this.vagueProperties;
-        }
-
-        @Nullable
-        public CompoundTag nbt() {
-            return this.nbt;
-        }
+    public static record TagResult(HolderSet<Block> tag, Map<String, String> vagueProperties, @Nullable CompoundTag nbt) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/commands/arguments/item/ItemInput.java b/src/main/java/net/minecraft/commands/arguments/item/ItemInput.java
index 13f29a52ea0fef5b50a5f902c7ae8177da2859ea..f15dd217a2753c6c988200972125a4a43b9bb9c0 100644
--- a/src/main/java/net/minecraft/commands/arguments/item/ItemInput.java
+++ b/src/main/java/net/minecraft/commands/arguments/item/ItemInput.java
@@ -54,6 +54,6 @@ public class ItemInput implements Predicate<ItemStack> {
     }
 
     private String getItemName() {
-        return this.item.unwrapKey().map(ResourceKey::location).orElseGet(() -> "unknown[" + this.item + "]").toString();
+        return this.item.unwrapKey().map(ResourceKey::location).map(Object::toString).orElseGet(() -> "unknown[" + this.item + "]");
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/commands/arguments/item/ItemParser.java b/src/main/java/net/minecraft/commands/arguments/item/ItemParser.java
index 709186f438ec04c743c33f2d9127e327dddd8c08..78051ce6a925868d12d2ecfeddd72bdb5ae2688f 100644
--- a/src/main/java/net/minecraft/commands/arguments/item/ItemParser.java
+++ b/src/main/java/net/minecraft/commands/arguments/item/ItemParser.java
@@ -157,33 +157,9 @@ public class ItemParser {
         return this.suggestItem(suggestionsBuilder);
     }
 
-    public static record ItemResult(Holder<Item> a, @Nullable CompoundTag b) {
-        private final Holder<Item> item;
-        @Nullable
-        private final CompoundTag nbt;
-
-        public Holder<Item> item() {
-            return this.item;
-        }
-
-        @Nullable
-        public CompoundTag nbt() {
-            return this.nbt;
-        }
+    public static record ItemResult(Holder<Item> item, @Nullable CompoundTag nbt) {
     }
 
-    public static record TagResult(HolderSet<Item> a, @Nullable CompoundTag b) {
-        private final HolderSet<Item> tag;
-        @Nullable
-        private final CompoundTag nbt;
-
-        public HolderSet<Item> tag() {
-            return this.tag;
-        }
-
-        @Nullable
-        public CompoundTag nbt() {
-            return this.nbt;
-        }
+    public static record TagResult(HolderSet<Item> tag, @Nullable CompoundTag nbt) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/commands/synchronization/ArgumentTypeInfos.java b/src/main/java/net/minecraft/commands/synchronization/ArgumentTypeInfos.java
index 35d664b35cca376bfbd328786e1c690c5c0c74c5..b1673c5ca51429c33f32bdd032f471e9ef78c934 100644
--- a/src/main/java/net/minecraft/commands/synchronization/ArgumentTypeInfos.java
+++ b/src/main/java/net/minecraft/commands/synchronization/ArgumentTypeInfos.java
@@ -112,8 +112,8 @@ public class ArgumentTypeInfos {
         register(registry, "entity_summon", EntitySummonArgument.class, SingletonArgumentInfo.contextFree(EntitySummonArgument::id));
         register(registry, "dimension", DimensionArgument.class, SingletonArgumentInfo.contextFree(DimensionArgument::dimension));
         register(registry, "time", TimeArgument.class, SingletonArgumentInfo.contextFree(TimeArgument::time));
-        register(registry, "resource_or_tag", fixClassType(ResourceOrTagLocationArgument.class), new ResourceOrTagLocationArgument.Info());
-        register(registry, "resource", fixClassType(ResourceKeyArgument.class), new ResourceKeyArgument.Info());
+        register(registry, "resource_or_tag", fixClassType(ResourceOrTagLocationArgument.class), new ResourceOrTagLocationArgument.Info<>());
+        register(registry, "resource", fixClassType(ResourceKeyArgument.class), new ResourceKeyArgument.Info<>());
         register(registry, "template_mirror", TemplateMirrorArgument.class, SingletonArgumentInfo.contextFree(TemplateMirrorArgument::templateMirror));
         register(registry, "template_rotation", TemplateRotationArgument.class, SingletonArgumentInfo.contextFree(TemplateRotationArgument::templateRotation));
         if (SharedConstants.IS_RUNNING_IN_IDE) {
@@ -125,7 +125,7 @@ public class ArgumentTypeInfos {
     }
 
     private static <T extends ArgumentType<?>> Class<T> fixClassType(Class<? super T> clazz) {
-        return clazz;
+        return (Class<T>) clazz;
     }
 
     public static boolean isClassRecognized(Class<?> clazz) {
@@ -133,11 +133,11 @@ public class ArgumentTypeInfos {
     }
 
     public static <A extends ArgumentType<?>> ArgumentTypeInfo<A, ?> byClass(A argumentType) {
-        ArgumentTypeInfo<?, ?> argumentTypeInfo = (ArgumentTypeInfo)BY_CLASS.get(argumentType.getClass());
+        ArgumentTypeInfo<?, ?> argumentTypeInfo = BY_CLASS.get(argumentType.getClass());
         if (argumentTypeInfo == null) {
             throw new IllegalArgumentException("Unrecognized argument type %s (%s)".formatted(argumentType, argumentType.getClass()));
         } else {
-            return argumentTypeInfo;
+            return (ArgumentTypeInfo<A, ?>) argumentTypeInfo;
         }
     }
 
diff --git a/src/main/java/net/minecraft/commands/synchronization/SingletonArgumentInfo.java b/src/main/java/net/minecraft/commands/synchronization/SingletonArgumentInfo.java
index 93be3e51469990d43da832cc9828a411264b4620..6a25bab5148c462bca61cf2ee1f1d64a4c596189 100644
--- a/src/main/java/net/minecraft/commands/synchronization/SingletonArgumentInfo.java
+++ b/src/main/java/net/minecraft/commands/synchronization/SingletonArgumentInfo.java
@@ -15,7 +15,7 @@ public class SingletonArgumentInfo<A extends ArgumentType<?>> implements Argumen
     }
 
     public static <T extends ArgumentType<?>> SingletonArgumentInfo<T> contextFree(Supplier<T> supplier) {
-        return new SingletonArgumentInfo<>((commandBuildContext) -> (ArgumentType)supplier.get());
+        return new SingletonArgumentInfo<>((commandBuildContext) -> supplier.get());
     }
 
     public static <T extends ArgumentType<?>> SingletonArgumentInfo<T> contextAware(Function<CommandBuildContext, T> function) {
diff --git a/src/main/java/net/minecraft/commands/synchronization/SuggestionProviders.java b/src/main/java/net/minecraft/commands/synchronization/SuggestionProviders.java
index 6e48ccd57b8142874abf9e6ee35b88dcc382814a..8664c20ee0dd33a3a469a9ca1e7e28929c28836b 100644
--- a/src/main/java/net/minecraft/commands/synchronization/SuggestionProviders.java
+++ b/src/main/java/net/minecraft/commands/synchronization/SuggestionProviders.java
@@ -29,7 +29,7 @@ public class SuggestionProviders {
             throw new IllegalArgumentException("A command suggestion provider is already registered with the name " + resourceLocation);
         } else {
             PROVIDERS_BY_NAME.put(resourceLocation, suggestionProvider);
-            return new SuggestionProviders.Wrapper(resourceLocation, suggestionProvider);
+            return (SuggestionProvider<S>) new Wrapper(resourceLocation, suggestionProvider);
         }
     }
 
diff --git a/src/main/java/net/minecraft/core/BlockPos.java b/src/main/java/net/minecraft/core/BlockPos.java
index cefc5ed15c483f8e217095164d667ea7efaee79f..d4f108f465caa6e4905feedc949ec5cf4f3cb217 100644
--- a/src/main/java/net/minecraft/core/BlockPos.java
+++ b/src/main/java/net/minecraft/core/BlockPos.java
@@ -238,11 +238,11 @@ public class BlockPos extends Vec3i {
             };
     }
 
-    public static Iterable<BlockPos> withinManhattan(BlockPos blockPos, int i, int i2, int i3) {
-        int i4 = i + i2 + i3;
-        int i5 = blockPos.getX();
-        int i6 = blockPos.getY();
-        int i7 = blockPos.getZ();
+    public static Iterable<BlockPos> withinManhattan(BlockPos blockPos, int originZ, int maxDepth, int reachX) {
+        int reachY = originZ + maxDepth + reachX;
+        int reachZ = blockPos.getX();
+        int originX = blockPos.getY();
+        int originY = blockPos.getZ();
         return () -> new AbstractIterator<BlockPos>() {
                 private final BlockPos.MutableBlockPos cursor = new BlockPos.MutableBlockPos();
                 private int currentDepth;
@@ -255,7 +255,7 @@ public class BlockPos extends Vec3i {
                 protected BlockPos computeNext() {
                     if (this.zMirror) {
                         this.zMirror = false;
-                        this.cursor.setZ(i7 - (this.cursor.getZ() - i7));
+                        this.cursor.setZ(originY - (this.cursor.getZ() - originY));
                         return this.cursor;
                     } else {
                         BlockPos blockPos;
@@ -264,24 +264,24 @@ public class BlockPos extends Vec3i {
                                 ++this.x;
                                 if (this.x > this.maxX) {
                                     ++this.currentDepth;
-                                    if (this.currentDepth > i4) {
+                                    if (this.currentDepth > reachY) {
                                         return (BlockPos)this.endOfData();
                                     }
 
-                                    this.maxX = Math.min(i, this.currentDepth);
+                                    this.maxX = Math.min(originZ, this.currentDepth);
                                     this.x = -this.maxX;
                                 }
 
-                                this.maxY = Math.min(i2, this.currentDepth - Math.abs(this.x));
+                                this.maxY = Math.min(maxDepth, this.currentDepth - Math.abs(this.x));
                                 this.y = -this.maxY;
                             }
 
                             int i = this.x;
                             int i2 = this.y;
                             int i3 = this.currentDepth - Math.abs(i) - Math.abs(i2);
-                            if (i3 <= i3) {
+                            if (i3 <= reachZ) {
                                 this.zMirror = i3 != 0;
-                                blockPos = this.cursor.set(i5 + i, i6 + i2, i7 + i3);
+                                blockPos = this.cursor.set(reachZ + i, originX + i2, originY + i3);
                             }
                         }
 
@@ -325,10 +325,10 @@ public class BlockPos extends Vec3i {
         return StreamSupport.stream(betweenClosed(i, i2, i3, i4, i5, i6).spliterator(), false);
     }
 
-    public static Iterable<BlockPos> betweenClosed(int i, int i2, int i3, int i4, int i5, int i6) {
-        int i7 = i4 - i + 1;
-        int i8 = i5 - i2 + 1;
-        int i9 = i6 - i3 + 1;
+    public static Iterable<BlockPos> betweenClosed(int end, int width, int height, int minX, int minY, int minZ) {
+        int i7 = minX - end + 1;
+        int i8 = minY - width + 1;
+        int i9 = minZ - height + 1;
         int i10 = i7 * i8 * i9;
         return () -> new AbstractIterator<BlockPos>() {
                 private final BlockPos.MutableBlockPos cursor = new BlockPos.MutableBlockPos();
@@ -343,7 +343,7 @@ public class BlockPos extends Vec3i {
                         int i3 = i2 % i8;
                         int i4 = i2 / i8;
                         ++this.index;
-                        return this.cursor.set(i + i, i2 + i3, i3 + i4);
+                        return this.cursor.set(end + i, width + i3, height + i4);
                     }
                 }
             };
diff --git a/src/main/java/net/minecraft/core/Holder.java b/src/main/java/net/minecraft/core/Holder.java
index ee7fb2b93ce99281e9a4ec30659ccf66bcabc07e..54eff2a92c61da5281d152a6d870b56972967852 100644
--- a/src/main/java/net/minecraft/core/Holder.java
+++ b/src/main/java/net/minecraft/core/Holder.java
@@ -39,12 +39,10 @@ public interface Holder<T> {
     }
 
     static <T> Holder<T> hackyErase(Holder<? extends T> holder) {
-        return holder;
+        return (Holder<T>) holder;
     }
 
-    public static record Direct<T>(T a) implements Holder<T> {
-        private final T value;
-
+    public static record Direct<T>(T value) implements Holder<T> {
         public boolean isBound() {
             return true;
         }
@@ -88,10 +86,6 @@ public interface Holder<T> {
         public Stream<TagKey<T>> tags() {
             return Stream.of();
         }
-
-        public T value() {
-            return this.value;
-        }
     }
 
     public static enum Kind {
diff --git a/src/main/java/net/minecraft/core/MappedRegistry.java b/src/main/java/net/minecraft/core/MappedRegistry.java
index 6dbbaf818fd73419da3981c5faf34161e131fa42..6c88563d3072997869992403598a4cd426f44b6a 100644
--- a/src/main/java/net/minecraft/core/MappedRegistry.java
+++ b/src/main/java/net/minecraft/core/MappedRegistry.java
@@ -164,7 +164,7 @@ public class MappedRegistry<T> extends WritableRegistry<T> {
 
     @Nullable
     public T get(@Nullable ResourceKey<T> resourceKey) {
-        return getValueFromNullable((Holder.Reference)this.byKey.get(resourceKey));
+        return getValueFromNullable(this.byKey.get(resourceKey));
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/core/NonNullList.java b/src/main/java/net/minecraft/core/NonNullList.java
index c2190c60e178443cd0a49d4cf42b0febebc2f346..4460f34e2589d9987affa1f40e0ba4c7e2ba3c4d 100644
--- a/src/main/java/net/minecraft/core/NonNullList.java
+++ b/src/main/java/net/minecraft/core/NonNullList.java
@@ -25,7 +25,7 @@ public class NonNullList<E> extends AbstractList<E> {
         Validate.notNull(object);
         Object[] objects = new Object[i];
         Arrays.fill(objects, object);
-        return new NonNullList<>(Arrays.asList(objects), object);
+        return new NonNullList(Arrays.asList(objects), object);
     }
 
     @SafeVarargs
diff --git a/src/main/java/net/minecraft/core/Registry.java b/src/main/java/net/minecraft/core/Registry.java
index 2acab62b3911d250bd1cfe6835de2e9c29e01c28..d9f97f457796e34f5f3211cbdc92014008ba03d6 100644
--- a/src/main/java/net/minecraft/core/Registry.java
+++ b/src/main/java/net/minecraft/core/Registry.java
@@ -30,6 +30,7 @@ import net.minecraft.network.chat.ChatType;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.Bootstrap;
+import net.minecraft.server.packs.resources.Resource;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.stats.StatType;
@@ -201,7 +202,7 @@ public abstract class Registry<T> implements Keyable, IdMap<T> {
     public static final Registry<ArgumentTypeInfo<?, ?>> COMMAND_ARGUMENT_TYPE = registerSimple(COMMAND_ARGUMENT_TYPE_REGISTRY, ArgumentTypeInfos::bootstrap);
     public static final Registry<StatType<?>> STAT_TYPE = registerSimple(STAT_TYPE_REGISTRY, (registry) -> Stats.ITEM_USED);
     public static final DefaultedRegistry<VillagerType> VILLAGER_TYPE = registerDefaulted(VILLAGER_TYPE_REGISTRY, "plains", (registry) -> VillagerType.PLAINS);
-    public static final DefaultedRegistry<VillagerProfession> VILLAGER_PROFESSION = registerDefaulted(VILLAGER_PROFESSION_REGISTRY, "none", (registry) -> (T)VillagerProfession.NONE);
+    public static final DefaultedRegistry<VillagerProfession> VILLAGER_PROFESSION = registerDefaulted(VILLAGER_PROFESSION_REGISTRY, "none", (registry) -> VillagerProfession.NONE);
     public static final Registry<PoiType> POINT_OF_INTEREST_TYPE = registerSimple(POINT_OF_INTEREST_TYPE_REGISTRY, PoiTypes::bootstrap);
     public static final DefaultedRegistry<MemoryModuleType<?>> MEMORY_MODULE_TYPE = registerDefaulted(MEMORY_MODULE_TYPE_REGISTRY, "dummy", (registry) -> MemoryModuleType.DUMMY);
     public static final DefaultedRegistry<SensorType<?>> SENSOR_TYPE = registerDefaulted(SENSOR_TYPE_REGISTRY, "dummy", (registry) -> SensorType.DUMMY);
@@ -274,9 +275,9 @@ public abstract class Registry<T> implements Keyable, IdMap<T> {
     public static final Registry<StructurePoolElementType<?>> STRUCTURE_POOL_ELEMENT = registerSimple(STRUCTURE_POOL_ELEMENT_REGISTRY, (registry) -> StructurePoolElementType.EMPTY);
     public static final ResourceKey<Registry<ChatType>> CHAT_TYPE_REGISTRY = createRegistryKey("chat_type");
     public static final ResourceKey<Registry<CatVariant>> CAT_VARIANT_REGISTRY = createRegistryKey("cat_variant");
-    public static final Registry<CatVariant> CAT_VARIANT = registerSimple(CAT_VARIANT_REGISTRY, (registry) -> (T)CatVariant.BLACK);
+    public static final Registry<CatVariant> CAT_VARIANT = registerSimple(CAT_VARIANT_REGISTRY, (registry) -> CatVariant.BLACK);
     public static final ResourceKey<Registry<FrogVariant>> FROG_VARIANT_REGISTRY = createRegistryKey("frog_variant");
-    public static final Registry<FrogVariant> FROG_VARIANT = registerSimple(FROG_VARIANT_REGISTRY, (registry) -> (T)FrogVariant.TEMPERATE);
+    public static final Registry<FrogVariant> FROG_VARIANT = registerSimple(FROG_VARIANT_REGISTRY, (registry) -> FrogVariant.TEMPERATE);
     public static final ResourceKey<Registry<BannerPattern>> BANNER_PATTERN_REGISTRY = createRegistryKey("banner_pattern");
     public static final Registry<BannerPattern> BANNER_PATTERN = registerSimple(BANNER_PATTERN_REGISTRY, BannerPatterns::bootstrap);
     public static final ResourceKey<Registry<Instrument>> INSTRUMENT_REGISTRY = createRegistryKey("instrument");
@@ -333,7 +334,7 @@ public abstract class Registry<T> implements Keyable, IdMap<T> {
     private static <T, R extends WritableRegistry<T>> R internalRegister(ResourceKey<? extends Registry<T>> resourceKey, R writableRegistry, Registry.RegistryBootstrap<T> registryBootstrap, Lifecycle lifecycle) {
         ResourceLocation resourceLocation = resourceKey.location();
         LOADERS.put(resourceLocation, () -> registryBootstrap.run(writableRegistry));
-        WRITABLE_REGISTRY.register(resourceKey, writableRegistry, lifecycle);
+        WRITABLE_REGISTRY.register((ResourceKey) resourceKey, writableRegistry, lifecycle);
         return writableRegistry;
     }
 
@@ -497,7 +498,7 @@ public abstract class Registry<T> implements Keyable, IdMap<T> {
             }
 
             public Iterator<Holder<T>> iterator() {
-                return Registry.this.holders().map((reference) -> reference).iterator();
+                return Registry.this.holders().map((reference) -> (Holder<T>) reference).iterator();
             }
         };
     }
diff --git a/src/main/java/net/minecraft/core/RegistryAccess.java b/src/main/java/net/minecraft/core/RegistryAccess.java
index 3d6bb802b588fc9e9f54bdb29f85772e86763a8f..6f20e27b33bc6a12c230f92cb5da0b163eb31c59 100644
--- a/src/main/java/net/minecraft/core/RegistryAccess.java
+++ b/src/main/java/net/minecraft/core/RegistryAccess.java
@@ -72,16 +72,16 @@ public interface RegistryAccess {
     <E> Optional<Registry<E>> ownedRegistry(ResourceKey<? extends Registry<? extends E>> var1);
 
     default <E> Registry<E> ownedRegistryOrThrow(ResourceKey<? extends Registry<? extends E>> resourceKey) {
-        return (Registry)this.ownedRegistry(resourceKey).orElseThrow(() -> new IllegalStateException("Missing registry: " + resourceKey));
+        return this.ownedRegistry(resourceKey).orElseThrow(() -> new IllegalStateException("Missing registry: " + resourceKey));
     }
 
     default <E> Optional<? extends Registry<E>> registry(ResourceKey<? extends Registry<? extends E>> resourceKey) {
         Optional<? extends Registry<E>> optional = this.ownedRegistry(resourceKey);
-        return optional.isPresent() ? optional : Registry.REGISTRY.getOptional(resourceKey.location());
+        return optional.isPresent() ? optional : (Optional<? extends Registry<E>>) Registry.REGISTRY.getOptional(resourceKey.location());
     }
 
     default <E> Registry<E> registryOrThrow(ResourceKey<? extends Registry<? extends E>> resourceKey) {
-        return (Registry)this.registry(resourceKey).orElseThrow(() -> new IllegalStateException("Missing registry: " + resourceKey));
+        return this.registry(resourceKey).orElseThrow(() -> new IllegalStateException("Missing registry: " + resourceKey));
     }
 
     private static <E> void put(Builder<ResourceKey<? extends Registry<?>>, RegistryAccess.RegistryData<?>> builder, ResourceKey<? extends Registry<E>> resourceKey, Codec<E> codec) {
@@ -112,13 +112,13 @@ public interface RegistryAccess {
 
     private static <E> Codec<RegistryAccess> makeNetworkCodec() {
         Codec<ResourceKey<? extends Registry<E>>> codec = ResourceLocation.CODEC.xmap(ResourceKey::createRegistryKey, ResourceKey::location);
-        Codec<Registry<E>> codec2 = codec.partialDispatch("type", (registry) -> DataResult.success(registry.key()), (resourceKey) -> getNetworkCodec(resourceKey).map((codec) -> RegistryCodecs.networkCodec(resourceKey, Lifecycle.experimental(), codec)));
+        Codec<Registry<E>> codec2 = codec.partialDispatch("type", (registry) -> DataResult.success(registry.key()), (resourceKey) -> getNetworkCodec(resourceKey).map((codecIn) -> RegistryCodecs.networkCodec(resourceKey, Lifecycle.experimental(), codecIn)));
         UnboundedMapCodec<? extends ResourceKey<? extends Registry<?>>, ? extends Registry<?>> unboundedMapCodec = Codec.unboundedMap(codec, codec2);
         return captureMap(unboundedMapCodec);
     }
 
     private static <K extends ResourceKey<? extends Registry<?>>, V extends Registry<?>> Codec<RegistryAccess> captureMap(UnboundedMapCodec<K, V> unboundedMapCodec) {
-        return unboundedMapCodec.xmap(RegistryAccess.ImmutableRegistryAccess::new, (registryAccess) -> registryAccess.ownedNetworkableRegistries().collect(ImmutableMap.toImmutableMap((registryEntry) -> registryEntry.key(), (registryEntry) -> registryEntry.value())));
+        return unboundedMapCodec.xmap(RegistryAccess.ImmutableRegistryAccess::new, (registryAccess) -> registryAccess.ownedNetworkableRegistries().collect(ImmutableMap.<RegistryEntry<?>, K, V>toImmutableMap((registryEntry) -> (K) registryEntry.key(), (registryEntry) -> (V) registryEntry.value())));
     }
 
     private Stream<RegistryAccess.RegistryEntry<?>> ownedNetworkableRegistries() {
@@ -126,7 +126,7 @@ public interface RegistryAccess {
     }
 
     private static <E> DataResult<? extends Codec<E>> getNetworkCodec(ResourceKey<? extends Registry<E>> resourceKey) {
-        return Optional.ofNullable((RegistryAccess.RegistryData)REGISTRIES.get(resourceKey)).map((registryData) -> registryData.networkCodec()).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown or not serializable registry: " + resourceKey));
+        return (DataResult) Optional.ofNullable(REGISTRIES.get(resourceKey)).map((registryData) -> registryData.networkCodec()).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown or not serializable registry: " + resourceKey));
     }
 
     private static Map<ResourceKey<? extends Registry<?>>, ? extends WritableRegistry<?>> createFreshRegistries() {
@@ -140,8 +140,7 @@ public interface RegistryAccess {
     static RegistryAccess.Frozen fromRegistryOfRegistries(final Registry<? extends Registry<?>> registry) {
         return new RegistryAccess.Frozen() {
             public <T> Optional<Registry<T>> ownedRegistry(ResourceKey<? extends Registry<? extends T>> resourceKey) {
-                Registry<Registry<T>> registry = registry;
-                return registry.getOptional(resourceKey);
+                return registry.getOptional((ResourceKey) resourceKey);
             }
 
             public Stream<RegistryAccess.RegistryEntry<?>> ownedRegistries() {
@@ -199,7 +198,7 @@ public interface RegistryAccess {
     }
 
     static <E> WritableRegistry<?> createRegistry(ResourceKey<? extends Registry<?>> resourceKey) {
-        return new MappedRegistry<>(resourceKey, Lifecycle.stable(), (Function<?, Holder.Reference<?>>)null);
+        return new MappedRegistry<>((ResourceKey) resourceKey, Lifecycle.stable(), (Function) null);
     }
 
     default RegistryAccess.Frozen freeze() {
@@ -236,34 +235,13 @@ public interface RegistryAccess {
         }
     }
 
-    public static record RegistryData<E>(ResourceKey<? extends Registry<E>> a, Codec<E> b, @Nullable Codec<E> c) {
-        private final ResourceKey<? extends Registry<E>> key;
-        private final Codec<E> codec;
-        @Nullable
-        private final Codec<E> networkCodec;
-
+    public static record RegistryData<E>(ResourceKey<? extends Registry<E>> key, Codec<E> codec, @Nullable Codec<E> networkCodec) {
         public boolean sendToClient() {
             return this.networkCodec != null;
         }
-
-        public ResourceKey<? extends Registry<E>> key() {
-            return this.key;
-        }
-
-        public Codec<E> codec() {
-            return this.codec;
-        }
-
-        @Nullable
-        public Codec<E> networkCodec() {
-            return this.networkCodec;
-        }
     }
 
-    public static record RegistryEntry<T>(ResourceKey<? extends Registry<T>> a, Registry<T> b) {
-        final ResourceKey<? extends Registry<T>> key;
-        final Registry<T> value;
-
+    public static record RegistryEntry<T>(ResourceKey<? extends Registry<T>> key, Registry<T> value) {
         private static <T, R extends Registry<? extends T>> RegistryAccess.RegistryEntry<T> fromMapEntry(Entry<? extends ResourceKey<? extends Registry<?>>, R> entry) {
             return fromUntyped((ResourceKey)entry.getKey(), (Registry)entry.getValue());
         }
@@ -273,20 +251,12 @@ public interface RegistryAccess {
         }
 
         private static <T> RegistryAccess.RegistryEntry<T> fromUntyped(ResourceKey<? extends Registry<?>> resourceKey, Registry<?> registry) {
-            return new RegistryAccess.RegistryEntry<>(resourceKey, registry);
+            return new RegistryAccess.RegistryEntry<>((ResourceKey) resourceKey, registry);
         }
 
         private RegistryAccess.RegistryEntry<T> freeze() {
             return new RegistryAccess.RegistryEntry<>(this.key, this.value.freeze());
         }
-
-        public ResourceKey<? extends Registry<T>> key() {
-            return this.key;
-        }
-
-        public Registry<T> value() {
-            return this.value;
-        }
     }
 
     public interface Writable extends RegistryAccess {
diff --git a/src/main/java/net/minecraft/core/RegistryCodecs.java b/src/main/java/net/minecraft/core/RegistryCodecs.java
index 51478ace9b0d90aa89c44aacd0fadabd21b264e3..e600e95f0be2c0b3bb4c8e3c824cd3311e971fcc 100644
--- a/src/main/java/net/minecraft/core/RegistryCodecs.java
+++ b/src/main/java/net/minecraft/core/RegistryCodecs.java
@@ -95,21 +95,6 @@ public class RegistryCodecs {
         return HolderSetCodec.create(resourceKey, RegistryFixedCodec.create(resourceKey), flag);
     }
 
-    static record RegistryEntry<T>(ResourceKey<T> a, int b, T c) {
-        private final ResourceKey<T> key;
-        private final int id;
-        private final T value;
-
-        public ResourceKey<T> key() {
-            return this.key;
-        }
-
-        public int id() {
-            return this.id;
-        }
-
-        public T value() {
-            return this.value;
-        }
+    static record RegistryEntry<T>(ResourceKey<T> key, int id, T value) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/core/particles/SculkChargeParticleOptions.java b/src/main/java/net/minecraft/core/particles/SculkChargeParticleOptions.java
index 052d143391f64011d3faa8ea22869d2870320692..2029922ed079cfaf9c6e5a027834417d824add51 100644
--- a/src/main/java/net/minecraft/core/particles/SculkChargeParticleOptions.java
+++ b/src/main/java/net/minecraft/core/particles/SculkChargeParticleOptions.java
@@ -8,8 +8,7 @@ import java.util.Locale;
 import net.minecraft.core.Registry;
 import net.minecraft.network.FriendlyByteBuf;
 
-public record SculkChargeParticleOptions(float c) implements ParticleOptions {
-    private final float roll;
+public record SculkChargeParticleOptions(float roll) implements ParticleOptions {
     public static final Codec<SculkChargeParticleOptions> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("roll").forGetter((sculkChargeParticleOptions) -> sculkChargeParticleOptions.roll)).apply(instance, SculkChargeParticleOptions::new));
     public static final ParticleOptions.Deserializer<SculkChargeParticleOptions> DESERIALIZER = new ParticleOptions.Deserializer<SculkChargeParticleOptions>() {
         public SculkChargeParticleOptions fromCommand(ParticleType<SculkChargeParticleOptions> particleType, StringReader stringReader) throws CommandSyntaxException {
@@ -34,8 +33,4 @@ public record SculkChargeParticleOptions(float c) implements ParticleOptions {
     public String writeToString() {
         return String.format(Locale.ROOT, "%s %.2f", Registry.PARTICLE_TYPE.getKey(this.getType()), this.roll);
     }
-
-    public float roll() {
-        return this.roll;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/data/BuiltinRegistries.java b/src/main/java/net/minecraft/data/BuiltinRegistries.java
index 2b88b3b71c4194d1f0cf8da44c30ad7ac2ed1e1f..351f3278954bbdae6c4824af0cc58991396b009f 100644
--- a/src/main/java/net/minecraft/data/BuiltinRegistries.java
+++ b/src/main/java/net/minecraft/data/BuiltinRegistries.java
@@ -63,7 +63,7 @@ public class BuiltinRegistries {
     public static final Registry<WorldPreset> WORLD_PRESET = registerSimple(Registry.WORLD_PRESET_REGISTRY, WorldPresets::bootstrap);
     public static final Registry<FlatLevelGeneratorPreset> FLAT_LEVEL_GENERATOR_PRESET = registerSimple(Registry.FLAT_LEVEL_GENERATOR_PRESET_REGISTRY, FlatLevelGeneratorPresets::bootstrap);
     public static final Registry<ChatType> CHAT_TYPE = registerSimple(Registry.CHAT_TYPE_REGISTRY, ChatType::bootstrap);
-    public static final RegistryAccess ACCESS;
+    public static final RegistryAccess ACCESS = RegistryAccess.fromRegistryOfRegistries(REGISTRY);
 
     private static <T> Registry<T> registerSimple(ResourceKey<? extends Registry<T>> resourceKey, BuiltinRegistries.RegistryBootstrap<T> registryBootstrap) {
         return registerSimple(resourceKey, Lifecycle.stable(), registryBootstrap);
@@ -76,12 +76,12 @@ public class BuiltinRegistries {
     private static <T, R extends WritableRegistry<T>> R internalRegister(ResourceKey<? extends Registry<T>> resourceKey, R writableRegistry, BuiltinRegistries.RegistryBootstrap<T> registryBootstrap, Lifecycle lifecycle) {
         ResourceLocation resourceLocation = resourceKey.location();
         LOADERS.put(resourceLocation, () -> registryBootstrap.run(writableRegistry));
-        WRITABLE_REGISTRY.register(resourceKey, writableRegistry, lifecycle);
+        WRITABLE_REGISTRY.register((ResourceKey) resourceKey, writableRegistry, lifecycle);
         return writableRegistry;
     }
 
     public static <V extends T, T> Holder<V> registerExact(Registry<T> registry, String s, V object) {
-        return register(registry, new ResourceLocation(s), (T)object);
+        return register((Registry) registry, new ResourceLocation(s), (T)object);
     }
 
     public static <T> Holder<T> register(Registry<T> registry, String s, T object) {
@@ -107,7 +107,6 @@ public class BuiltinRegistries {
 
         });
         Registry.checkRegistry(WRITABLE_REGISTRY);
-        ACCESS = RegistryAccess.fromRegistryOfRegistries(REGISTRY);
     }
 
     @FunctionalInterface
diff --git a/src/main/java/net/minecraft/data/HashCache.java b/src/main/java/net/minecraft/data/HashCache.java
index 54092f8216d428a7faaad7f2978f5bb09fffb650..92a6f0426c62a7d66b796b16523cab3464218874 100644
--- a/src/main/java/net/minecraft/data/HashCache.java
+++ b/src/main/java/net/minecraft/data/HashCache.java
@@ -166,10 +166,7 @@ public class HashCache {
         }
     }
 
-    static record ProviderCache(String a, Map<Path, HashCode> b) {
-        final String version;
-        private final Map<Path, HashCode> data;
-
+    static record ProviderCache(String version, Map<Path, HashCode> data) {
         ProviderCache(String s) {
             this(s, new HashMap());
         }
@@ -261,13 +258,5 @@ public class HashCache {
             }
 
         }
-
-        public String version() {
-            return this.version;
-        }
-
-        public Map<Path, HashCode> data() {
-            return this.data;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/data/info/RegistryDumpReport.java b/src/main/java/net/minecraft/data/info/RegistryDumpReport.java
index 4ffc4b2056675935c35fa9b53b64e5abc0c85f58..a2a6636891e5d07794bc0b803cf2372461f95727 100644
--- a/src/main/java/net/minecraft/data/info/RegistryDumpReport.java
+++ b/src/main/java/net/minecraft/data/info/RegistryDumpReport.java
@@ -32,14 +32,14 @@ public class RegistryDumpReport implements DataProvider {
             jsonObject.addProperty("default", resourceLocation.toString());
         }
 
-        int i = Registry.REGISTRY.getId(registry);
+        int i = ((Registry) Registry.REGISTRY).getId(registry);
         jsonObject.addProperty("protocol_id", i);
         JsonObject jsonObject2 = new JsonObject();
         registry.holders().forEach((reference) -> {
             T object = (T)reference.value();
-            int i = registry.getId(object);
-            JsonObject jsonObject2 = new JsonObject();
-            jsonObject2.addProperty("protocol_id", i);
+            int iIn = registry.getId(object);
+            JsonObject jsonObject2In = new JsonObject();
+            jsonObject2In.addProperty("protocol_id", iIn);
             jsonObject2.add(reference.key().location().toString(), jsonObject2);
         });
         jsonObject.add("entries", jsonObject2);
diff --git a/src/main/java/net/minecraft/data/models/BlockModelGenerators.java b/src/main/java/net/minecraft/data/models/BlockModelGenerators.java
index 2542deca4f40fe659fcdb02097e1dc0cd722ddca..6ffd26122f1755494736fcaad3f869ad2c5b169a 100644
--- a/src/main/java/net/minecraft/data/models/BlockModelGenerators.java
+++ b/src/main/java/net/minecraft/data/models/BlockModelGenerators.java
@@ -71,15 +71,15 @@ public class BlockModelGenerators {
     final BiConsumer<ResourceLocation, Supplier<JsonElement>> modelOutput;
     private final Consumer<Item> skippedAutoModelsOutput;
     final List<Block> nonOrientableTrapdoor = ImmutableList.of(Blocks.OAK_TRAPDOOR, Blocks.DARK_OAK_TRAPDOOR, Blocks.IRON_TRAPDOOR);
-    final Map<Block, BlockModelGenerators.BlockStateGeneratorSupplier> fullBlockModelCustomGenerators = ImmutableMap.builder().put(Blocks.STONE, BlockModelGenerators::createMirroredCubeGenerator).put(Blocks.DEEPSLATE, BlockModelGenerators::createMirroredColumnGenerator).put(Blocks.MUD_BRICKS, BlockModelGenerators::createNorthWestMirroredCubeGenerator).build();
-    final Map<Block, TexturedModel> texturedModels = ImmutableMap.builder().put(Blocks.SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.SANDSTONE)).put(Blocks.RED_SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.RED_SANDSTONE)).put(Blocks.SMOOTH_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.SANDSTONE, "_top"))).put(Blocks.SMOOTH_RED_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.RED_SANDSTONE, "_top"))).put(Blocks.CUT_SANDSTONE, TexturedModel.COLUMN.get(Blocks.SANDSTONE).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_SANDSTONE)))).put(Blocks.CUT_RED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.RED_SANDSTONE).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_RED_SANDSTONE)))).put(Blocks.QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.QUARTZ_BLOCK)).put(Blocks.SMOOTH_QUARTZ, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.QUARTZ_BLOCK, "_bottom"))).put(Blocks.BLACKSTONE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.BLACKSTONE)).put(Blocks.DEEPSLATE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.DEEPSLATE)).put(Blocks.CHISELED_QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.CHISELED_QUARTZ_BLOCK).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_QUARTZ_BLOCK)))).put(Blocks.CHISELED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.CHISELED_SANDSTONE).updateTextures((textureMapping) -> {
+    final Map<Block, BlockModelGenerators.BlockStateGeneratorSupplier> fullBlockModelCustomGenerators = ImmutableMap.<Block, BlockModelGenerators.BlockStateGeneratorSupplier>builder().put(Blocks.STONE, BlockModelGenerators::createMirroredCubeGenerator).put(Blocks.DEEPSLATE, BlockModelGenerators::createMirroredColumnGenerator).put(Blocks.MUD_BRICKS, BlockModelGenerators::createNorthWestMirroredCubeGenerator).build();
+    final Map<Block, TexturedModel> texturedModels = ImmutableMap.<Block, TexturedModel>builder().put(Blocks.SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.SANDSTONE)).put(Blocks.RED_SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.RED_SANDSTONE)).put(Blocks.SMOOTH_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.SANDSTONE, "_top"))).put(Blocks.SMOOTH_RED_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.RED_SANDSTONE, "_top"))).put(Blocks.CUT_SANDSTONE, TexturedModel.COLUMN.get(Blocks.SANDSTONE).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_SANDSTONE)))).put(Blocks.CUT_RED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.RED_SANDSTONE).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_RED_SANDSTONE)))).put(Blocks.QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.QUARTZ_BLOCK)).put(Blocks.SMOOTH_QUARTZ, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.QUARTZ_BLOCK, "_bottom"))).put(Blocks.BLACKSTONE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.BLACKSTONE)).put(Blocks.DEEPSLATE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.DEEPSLATE)).put(Blocks.CHISELED_QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.CHISELED_QUARTZ_BLOCK).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_QUARTZ_BLOCK)))).put(Blocks.CHISELED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.CHISELED_SANDSTONE).updateTextures((textureMapping) -> {
         textureMapping.put(TextureSlot.END, TextureMapping.getBlockTexture(Blocks.SANDSTONE, "_top"));
         textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_SANDSTONE));
     })).put(Blocks.CHISELED_RED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.CHISELED_RED_SANDSTONE).updateTextures((textureMapping) -> {
         textureMapping.put(TextureSlot.END, TextureMapping.getBlockTexture(Blocks.RED_SANDSTONE, "_top"));
         textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_RED_SANDSTONE));
     })).build();
-    static final Map<BlockFamily.Variant, BiConsumer<BlockModelGenerators.BlockFamilyProvider, Block>> SHAPE_CONSUMERS = ImmutableMap.builder().put(BlockFamily.Variant.BUTTON, BlockModelGenerators.BlockFamilyProvider::button).put(BlockFamily.Variant.DOOR, BlockModelGenerators.BlockFamilyProvider::door).put(BlockFamily.Variant.CHISELED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.CRACKED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.FENCE, BlockModelGenerators.BlockFamilyProvider::fence).put(BlockFamily.Variant.FENCE_GATE, BlockModelGenerators.BlockFamilyProvider::fenceGate).put(BlockFamily.Variant.SIGN, BlockModelGenerators.BlockFamilyProvider::sign).put(BlockFamily.Variant.SLAB, BlockModelGenerators.BlockFamilyProvider::slab).put(BlockFamily.Variant.STAIRS, BlockModelGenerators.BlockFamilyProvider::stairs).put(BlockFamily.Variant.PRESSURE_PLATE, BlockModelGenerators.BlockFamilyProvider::pressurePlate).put(BlockFamily.Variant.TRAPDOOR, BlockModelGenerators.BlockFamilyProvider::trapdoor).put(BlockFamily.Variant.WALL, BlockModelGenerators.BlockFamilyProvider::wall).build();
+    static final Map<BlockFamily.Variant, BiConsumer<BlockModelGenerators.BlockFamilyProvider, Block>> SHAPE_CONSUMERS = ImmutableMap.<BlockFamily.Variant, BiConsumer<BlockModelGenerators.BlockFamilyProvider, Block>>builder().put(BlockFamily.Variant.BUTTON, BlockModelGenerators.BlockFamilyProvider::button).put(BlockFamily.Variant.DOOR, BlockModelGenerators.BlockFamilyProvider::door).put(BlockFamily.Variant.CHISELED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.CRACKED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.FENCE, BlockModelGenerators.BlockFamilyProvider::fence).put(BlockFamily.Variant.FENCE_GATE, BlockModelGenerators.BlockFamilyProvider::fenceGate).put(BlockFamily.Variant.SIGN, BlockModelGenerators.BlockFamilyProvider::sign).put(BlockFamily.Variant.SLAB, BlockModelGenerators.BlockFamilyProvider::slab).put(BlockFamily.Variant.STAIRS, BlockModelGenerators.BlockFamilyProvider::stairs).put(BlockFamily.Variant.PRESSURE_PLATE, BlockModelGenerators.BlockFamilyProvider::pressurePlate).put(BlockFamily.Variant.TRAPDOOR, BlockModelGenerators.BlockFamilyProvider::trapdoor).put(BlockFamily.Variant.WALL, BlockModelGenerators.BlockFamilyProvider::wall).build();
     public static final List<Pair<BooleanProperty, Function<ResourceLocation, Variant>>> MULTIFACE_GENERATOR = List.of(Pair.of(BlockStateProperties.NORTH, (resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation)), Pair.of(BlockStateProperties.EAST, (resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true)), Pair.of(BlockStateProperties.SOUTH, (resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180).with(VariantProperties.UV_LOCK, true)), Pair.of(BlockStateProperties.WEST, (resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270).with(VariantProperties.UV_LOCK, true)), Pair.of(BlockStateProperties.UP, (resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation).with(VariantProperties.X_ROT, VariantProperties.Rotation.R270).with(VariantProperties.UV_LOCK, true)), Pair.of(BlockStateProperties.DOWN, (resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation).with(VariantProperties.X_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true)));
 
     private static BlockStateGenerator createMirroredCubeGenerator(Block block, ResourceLocation resourceLocation, TextureMapping textureMapping, BiConsumer<ResourceLocation, Supplier<JsonElement>> biConsumer) {
diff --git a/src/main/java/net/minecraft/data/models/blockstates/Selector.java b/src/main/java/net/minecraft/data/models/blockstates/Selector.java
index 1680f2a0b0d799933a7d099426148fe82dc84293..2b033e63fca12eb331bb130f45cc320b06949242 100644
--- a/src/main/java/net/minecraft/data/models/blockstates/Selector.java
+++ b/src/main/java/net/minecraft/data/models/blockstates/Selector.java
@@ -12,11 +12,11 @@ public final class Selector {
     private final List<Property.Value<?>> values;
 
     public Selector extend(Property.Value<?> value) {
-        return new Selector(ImmutableList.builder().addAll(this.values).add(value).build());
+        return new Selector(ImmutableList.<Property.Value<?>>builder().addAll(this.values).add(value).build());
     }
 
     public Selector extend(Selector selector) {
-        return new Selector(ImmutableList.builder().addAll(this.values).addAll(selector.values).build());
+        return new Selector(ImmutableList.<Property.Value<?>>builder().addAll(this.values).addAll(selector.values).build());
     }
 
     private Selector(List<Property.Value<?>> list) {
diff --git a/src/main/java/net/minecraft/data/models/blockstates/VariantProperties.java b/src/main/java/net/minecraft/data/models/blockstates/VariantProperties.java
index 0175fa79e75a6dda6df00ee4f7bcb5d7c762fcc4..1d56e9173bf839b376659f8f24faa785be44ee58 100644
--- a/src/main/java/net/minecraft/data/models/blockstates/VariantProperties.java
+++ b/src/main/java/net/minecraft/data/models/blockstates/VariantProperties.java
@@ -4,11 +4,11 @@ import com.google.gson.JsonPrimitive;
 import net.minecraft.resources.ResourceLocation;
 
 public class VariantProperties {
-    public static final VariantProperty<VariantProperties.Rotation> X_ROT = new VariantProperty("x", (rotation) -> new JsonPrimitive(rotation.value));
-    public static final VariantProperty<VariantProperties.Rotation> Y_ROT = new VariantProperty("y", (rotation) -> new JsonPrimitive(rotation.value));
+    public static final VariantProperty<VariantProperties.Rotation> X_ROT = new VariantProperty<>("x", (rotation) -> new JsonPrimitive(rotation.value));
+    public static final VariantProperty<VariantProperties.Rotation> Y_ROT = new VariantProperty<>("y", (rotation) -> new JsonPrimitive(rotation.value));
     public static final VariantProperty<ResourceLocation> MODEL = new VariantProperty<>("model", (resourceLocation) -> new JsonPrimitive(resourceLocation.toString()));
-    public static final VariantProperty<Boolean> UV_LOCK = new VariantProperty("uvlock", JsonPrimitive::new);
-    public static final VariantProperty<Integer> WEIGHT = new VariantProperty("weight", JsonPrimitive::new);
+    public static final VariantProperty<Boolean> UV_LOCK = new VariantProperty<>("uvlock", JsonPrimitive::new);
+    public static final VariantProperty<Integer> WEIGHT = new VariantProperty<>("weight", JsonPrimitive::new);
 
     public static enum Rotation {
         R0(0),
diff --git a/src/main/java/net/minecraft/data/models/model/ModelTemplate.java b/src/main/java/net/minecraft/data/models/model/ModelTemplate.java
index a90953b62ef3168e4f49cab6eb1fa3ce1f4ee2ad..68ea7b9aedb81b9d9087c7457274bac8a9253168 100644
--- a/src/main/java/net/minecraft/data/models/model/ModelTemplate.java
+++ b/src/main/java/net/minecraft/data/models/model/ModelTemplate.java
@@ -42,10 +42,10 @@ public class ModelTemplate {
         Map<TextureSlot, ResourceLocation> map = this.createMap(textureMapping);
         biConsumer.accept(resourceLocation, () -> {
             JsonObject jsonObject = new JsonObject();
-            this.model.ifPresent((resourceLocation) -> jsonObject.addProperty("parent", resourceLocation.toString()));
+            this.model.ifPresent((resourceLocationIn) -> jsonObject.addProperty("parent", resourceLocationIn.toString()));
             if (!map.isEmpty()) {
                 JsonObject jsonObject2 = new JsonObject();
-                map.forEach((textureSlot, resourceLocation) -> jsonObject2.addProperty(textureSlot.getId(), resourceLocation.toString()));
+                map.forEach((textureSlot, resourceLocationIn) -> jsonObject2.addProperty(textureSlot.getId(), resourceLocationIn.toString()));
                 jsonObject.add("textures", jsonObject2);
             }
 
@@ -55,6 +55,6 @@ public class ModelTemplate {
     }
 
     private Map<TextureSlot, ResourceLocation> createMap(TextureMapping textureMapping) {
-        return Streams.concat(new Stream[]{this.requiredSlots.stream(), textureMapping.getForced()}).collect(ImmutableMap.toImmutableMap(Function.identity(), textureMapping::get));
+        return (Map<TextureSlot, ResourceLocation>) Streams.concat(new Stream[]{this.requiredSlots.stream(), textureMapping.getForced()}).collect(ImmutableMap.toImmutableMap(Function.identity(), textureMapping::get));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/data/recipes/RecipeProvider.java b/src/main/java/net/minecraft/data/recipes/RecipeProvider.java
index f686abecd224cdd37e7873ab469ce7ce11994f2f..6b22f1835ea37da875fb1110124a6e9b01e53bc3 100644
--- a/src/main/java/net/minecraft/data/recipes/RecipeProvider.java
+++ b/src/main/java/net/minecraft/data/recipes/RecipeProvider.java
@@ -54,7 +54,7 @@ public class RecipeProvider implements DataProvider {
     private static final ImmutableList<ItemLike> EMERALD_SMELTABLES = ImmutableList.of(Items.EMERALD_ORE, Items.DEEPSLATE_EMERALD_ORE);
     private final DataGenerator.PathProvider recipePathProvider;
     private final DataGenerator.PathProvider advancementPathProvider;
-    private static final Map<BlockFamily.Variant, BiFunction<ItemLike, ItemLike, RecipeBuilder>> shapeBuilders = ImmutableMap.builder().put(BlockFamily.Variant.BUTTON, (itemLike, itemLike2) -> buttonBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CHISELED, (itemLike, itemLike2) -> chiseledBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CUT, (itemLike, itemLike2) -> cutBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.DOOR, (itemLike, itemLike2) -> doorBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.FENCE, (itemLike, itemLike2) -> fenceBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.FENCE_GATE, (itemLike, itemLike2) -> fenceGateBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.SIGN, (itemLike, itemLike2) -> signBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.SLAB, (itemLike, itemLike2) -> slabBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.STAIRS, (itemLike, itemLike2) -> stairBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.PRESSURE_PLATE, (itemLike, itemLike2) -> pressurePlateBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.POLISHED, (itemLike, itemLike2) -> polishedBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.TRAPDOOR, (itemLike, itemLike2) -> trapdoorBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.WALL, (itemLike, itemLike2) -> wallBuilder(itemLike, Ingredient.of(itemLike2))).build();
+    private static final Map<BlockFamily.Variant, BiFunction<ItemLike, ItemLike, RecipeBuilder>> shapeBuilders = ImmutableMap.<BlockFamily.Variant, BiFunction<ItemLike, ItemLike, RecipeBuilder>>builder().put(BlockFamily.Variant.BUTTON, (itemLike, itemLike2) -> buttonBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CHISELED, (itemLike, itemLike2) -> chiseledBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CUT, (itemLike, itemLike2) -> cutBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.DOOR, (itemLike, itemLike2) -> doorBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.FENCE, (itemLike, itemLike2) -> fenceBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.FENCE_GATE, (itemLike, itemLike2) -> fenceGateBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.SIGN, (itemLike, itemLike2) -> signBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.SLAB, (itemLike, itemLike2) -> slabBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.STAIRS, (itemLike, itemLike2) -> stairBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.PRESSURE_PLATE, (itemLike, itemLike2) -> pressurePlateBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.POLISHED, (itemLike, itemLike2) -> polishedBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.TRAPDOOR, (itemLike, itemLike2) -> trapdoorBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.WALL, (itemLike, itemLike2) -> wallBuilder(itemLike, Ingredient.of(itemLike2))).build();
 
     public RecipeProvider(DataGenerator dataGenerator) {
         this.recipePathProvider = dataGenerator.createPathProvider(DataGenerator.Target.DATA_PACK, "recipes");
@@ -1136,7 +1136,7 @@ public class RecipeProvider implements DataProvider {
     }
 
     private static void waxRecipes(Consumer<FinishedRecipe> consumer) {
-        ((BiMap)HoneycombItem.WAXABLES.get()).forEach((block, block2) -> ShapelessRecipeBuilder.shapeless(block2).requires(block).requires(Items.HONEYCOMB).group(getItemName(block2)).unlockedBy(getHasName(block), has(block)).save(consumer, getConversionRecipeName(block2, Items.HONEYCOMB)));
+        HoneycombItem.WAXABLES.get().forEach((block, block2) -> ShapelessRecipeBuilder.shapeless(block2).requires(block).requires(Items.HONEYCOMB).group(getItemName(block2)).unlockedBy(getHasName(block), has(block)).save(consumer, getConversionRecipeName(block2, Items.HONEYCOMB)));
     }
 
     private static void generateRecipes(Consumer<FinishedRecipe> consumer, BlockFamily blockFamily) {
diff --git a/src/main/java/net/minecraft/data/structures/SnbtToNbt.java b/src/main/java/net/minecraft/data/structures/SnbtToNbt.java
index 6828640e2a8273503212dd8561c018a42a112f5f..bdaf8ebc4c6aa2672b06dd7f1424be0638061e33 100644
--- a/src/main/java/net/minecraft/data/structures/SnbtToNbt.java
+++ b/src/main/java/net/minecraft/data/structures/SnbtToNbt.java
@@ -132,7 +132,7 @@ public class SnbtToNbt implements DataProvider {
             try {
                 NbtToSnbt.writeSnbt(CachedOutput.NO_CACHE, path2, taskResult.snbtPayload);
             } catch (IOException var7) {
-                LOGGER.error("Couldn't write structure SNBT {} at {}", new Object[]{taskResult.name, path2, var7});
+                LOGGER.error("Couldn't write structure SNBT {} at {}", taskResult.name, path2, var7);
             }
         }
 
@@ -141,7 +141,7 @@ public class SnbtToNbt implements DataProvider {
         try {
             cachedOutput.writeIfNeeded(path3, taskResult.payload, taskResult.hash);
         } catch (IOException var6) {
-            LOGGER.error("Couldn't write structure {} at {}", new Object[]{taskResult.name, path3, var6});
+            LOGGER.error("Couldn't write structure {} at {}", taskResult.name, path3, var6);
         }
 
     }
@@ -157,28 +157,6 @@ public class SnbtToNbt implements DataProvider {
         }
     }
 
-    static record TaskResult(String a, byte[] b, @Nullable String c, HashCode d) {
-        final String name;
-        final byte[] payload;
-        @Nullable
-        final String snbtPayload;
-        final HashCode hash;
-
-        public String name() {
-            return this.name;
-        }
-
-        public byte[] payload() {
-            return this.payload;
-        }
-
-        @Nullable
-        public String snbtPayload() {
-            return this.snbtPayload;
-        }
-
-        public HashCode hash() {
-            return this.hash;
-        }
+    static record TaskResult(String name, byte[] payload, @Nullable String snbtPayload, HashCode hash) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/data/worldgen/placement/PlacementUtils.java b/src/main/java/net/minecraft/data/worldgen/placement/PlacementUtils.java
index 084dafa080380f276e708b906d7136fcc5521e0d..beb2709c9b96322ea033b65bb70882a87b0bbce6 100644
--- a/src/main/java/net/minecraft/data/worldgen/placement/PlacementUtils.java
+++ b/src/main/java/net/minecraft/data/worldgen/placement/PlacementUtils.java
@@ -73,7 +73,7 @@ public class PlacementUtils {
     }
 
     public static <FC extends FeatureConfiguration, F extends Feature<FC>> Holder<PlacedFeature> inlinePlaced(F feature, FC featureConfiguration, PlacementModifier... placementModifiers) {
-        return inlinePlaced(Holder.direct(new ConfiguredFeature(feature, featureConfiguration)), placementModifiers);
+        return inlinePlaced(Holder.direct(new ConfiguredFeature<>(feature, featureConfiguration)), placementModifiers);
     }
 
     public static <FC extends FeatureConfiguration, F extends Feature<FC>> Holder<PlacedFeature> onlyWhenEmpty(F feature, FC featureConfiguration) {
diff --git a/src/main/java/net/minecraft/data/worldgen/placement/VegetationPlacements.java b/src/main/java/net/minecraft/data/worldgen/placement/VegetationPlacements.java
index 04122cfbd662724f737e5d509b0ef2c8378314a4..545b5cc32808967ec1147bfd9c19a752faccda1b 100644
--- a/src/main/java/net/minecraft/data/worldgen/placement/VegetationPlacements.java
+++ b/src/main/java/net/minecraft/data/worldgen/placement/VegetationPlacements.java
@@ -123,7 +123,7 @@ public class VegetationPlacements {
     }
 
     private static Builder<PlacementModifier> treePlacementBase(PlacementModifier placementModifier) {
-        return ImmutableList.builder().add(placementModifier).add(InSquarePlacement.spread()).add(TREE_THRESHOLD).add(PlacementUtils.HEIGHTMAP_OCEAN_FLOOR).add(BiomeFilter.biome());
+        return ImmutableList.<PlacementModifier>builder().add(placementModifier).add(InSquarePlacement.spread()).add(TREE_THRESHOLD).add(PlacementUtils.HEIGHTMAP_OCEAN_FLOOR).add(BiomeFilter.biome());
     }
 
     public static List<PlacementModifier> treePlacement(PlacementModifier placementModifier) {
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java b/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java
index 9737a8e7d6eb47221a9c72808942b7359059df05..c5df8bcdf9ad4db8ae05f7cfd46c72b3bf923fd3 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java
@@ -31,8 +31,8 @@ public class GameTestBatchRunner {
         this.testTicker = gameTestTicker;
         this.testsPerRow = i;
         this.batches = collection.stream().map((gameTestBatch) -> {
-            Collection<GameTestInfo> collection = gameTestBatch.getTestFunctions().stream().map((testFunction) -> new GameTestInfo(testFunction, rotation, serverLevel)).collect(ImmutableList.toImmutableList());
-            return Pair.of(gameTestBatch, collection);
+            Collection<GameTestInfo> collectionIn = gameTestBatch.getTestFunctions().stream().map((testFunction) -> new GameTestInfo(testFunction, rotation, serverLevel)).collect(ImmutableList.toImmutableList());
+            return Pair.of(gameTestBatch, collectionIn);
         }).collect(ImmutableList.toImmutableList());
         this.allTestInfos = this.batches.stream().flatMap((pair) -> (pair.getSecond()).stream()).collect(ImmutableList.toImmutableList());
     }
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java b/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java
index 6cd79453b0c7c1af7b2abee7f7848a9258095ea3..1264dc78c8b4a7f32e85d35aad09c2f9d20cf26d 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java
@@ -51,7 +51,7 @@ public class GameTestRegistry {
         T annotation = method.getAnnotation(clazz);
         if (annotation != null) {
             String s = (String)function.apply(annotation);
-            Consumer<ServerLevel> consumer = map.putIfAbsent(s, turnMethodIntoConsumer(method));
+            Consumer<ServerLevel> consumer = map.putIfAbsent(s, (Consumer<ServerLevel>) turnMethodIntoConsumer(method));
             if (consumer != null) {
                 throw new RuntimeException("Hey, there should only be one " + clazz + " method per batch. Batch '" + s + "' has more than one!");
             }
@@ -101,7 +101,7 @@ public class GameTestRegistry {
     private static Collection<TestFunction> useTestGeneratorMethod(Method method) {
         try {
             Object object = method.getDeclaringClass().newInstance();
-            return method.invoke(object);
+            return (Collection<TestFunction>) method.invoke(object);
         } catch (ReflectiveOperationException var2) {
             throw new RuntimeException(var2);
         }
@@ -115,7 +115,7 @@ public class GameTestRegistry {
         String s4 = gameTest.template().isEmpty() ? s3 : s2 + "." + gameTest.template();
         String s5 = gameTest.batch();
         Rotation rotation = StructureUtils.getRotationForRotationSteps(gameTest.rotationSteps());
-        return new TestFunction(s5, s3, s4, rotation, gameTest.timeoutTicks(), gameTest.setupTicks(), gameTest.required(), gameTest.requiredSuccesses(), gameTest.attempts(), turnMethodIntoConsumer(method));
+        return new TestFunction(s5, s3, s4, rotation, gameTest.timeoutTicks(), gameTest.setupTicks(), gameTest.required(), gameTest.requiredSuccesses(), gameTest.attempts(), (Consumer<GameTestHelper>) turnMethodIntoConsumer(method));
     }
 
     private static Consumer<?> turnMethodIntoConsumer(Method method) {
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java b/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java
index 2ead86691ef5d6df54092762bae1203a3975a9a3..a9abc4457cdf4b25660d2778818face49ca0d3ab 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java
@@ -48,8 +48,8 @@ public class GameTestRunner {
             Consumer<ServerLevel> consumer = GameTestRegistry.getBeforeBatchFunction(s);
             Consumer<ServerLevel> consumer2 = GameTestRegistry.getAfterBatchFunction(s);
             MutableInt mutableInt = new MutableInt();
-            Collection<TestFunction> collection = entry.getValue();
-            return Streams.stream(Iterables.partition(collection, 100)).map((list) -> new GameTestBatch(s + ":" + mutableInt.incrementAndGet(), ImmutableList.copyOf(list), consumer, consumer2));
+            Collection<TestFunction> collectionIn = entry.getValue();
+            return Streams.stream(Iterables.partition(collectionIn, 100)).map((list) -> new GameTestBatch(s + ":" + mutableInt.incrementAndGet(), ImmutableList.copyOf(list), consumer, consumer2));
         }).collect(ImmutableList.toImmutableList());
     }
 
@@ -59,9 +59,9 @@ public class GameTestRunner {
         BlockPos blockPos3 = blockPos.offset(i, 0, i);
         BlockPos.betweenClosedStream(blockPos2, blockPos3).filter((blockPosx) -> serverLevel.getBlockState(blockPosx).is(Blocks.STRUCTURE_BLOCK)).forEach((blockPosx) -> {
             StructureBlockEntity structureBlockEntity = (StructureBlockEntity)serverLevel.getBlockEntity(blockPosx);
-            BlockPos blockPos2 = structureBlockEntity.getBlockPos();
+            BlockPos pos = structureBlockEntity.getBlockPos();
             BoundingBox boundingBox = StructureUtils.getStructureBoundingBox(structureBlockEntity);
-            StructureUtils.clearSpaceForStructure(boundingBox, blockPos2.getY(), serverLevel);
+            StructureUtils.clearSpaceForStructure(boundingBox, pos.getY(), serverLevel);
         });
     }
 
diff --git a/src/main/java/net/minecraft/nbt/NbtOps.java b/src/main/java/net/minecraft/nbt/NbtOps.java
index 8ecb1be8754d4ff11ed204c4e8aad7afd77c253f..7076200441c14904b79db40f1a164d284b708ae5 100644
--- a/src/main/java/net/minecraft/nbt/NbtOps.java
+++ b/src/main/java/net/minecraft/nbt/NbtOps.java
@@ -127,19 +127,19 @@ public class NbtOps implements DynamicOps<Tag> {
     private static <T extends Tag> void fillOne(CollectionTag<T> collectionTag, Tag tag, Tag tag2) {
         if (tag instanceof CollectionTag) {
             CollectionTag<?> collectionTag2 = (CollectionTag)tag;
-            collectionTag2.forEach((tagx) -> collectionTag.add(tagx));
+            collectionTag2.forEach((tagx) -> collectionTag.add((T) tagx));
         }
 
-        collectionTag.add(tag2);
+        collectionTag.add((T) tag2);
     }
 
     private static <T extends Tag> void fillMany(CollectionTag<T> collectionTag, Tag tag, List<Tag> list) {
         if (tag instanceof CollectionTag) {
             CollectionTag<?> collectionTag2 = (CollectionTag)tag;
-            collectionTag2.forEach((tagx) -> collectionTag.add(tagx));
+            collectionTag2.forEach((tagx) -> collectionTag.add((T) tagx));
         }
 
-        list.forEach((tagx) -> collectionTag.add(tagx));
+        list.forEach((tagx) -> collectionTag.add((T) tagx));
     }
 
     public DataResult<Tag> mergeToList(Tag tag, Tag tag2) {
@@ -191,11 +191,11 @@ public class NbtOps implements DynamicOps<Tag> {
 
             List<Tag> list = Lists.newArrayList();
             mapLike.entries().forEach((pair) -> {
-                Tag tag = (Tag)pair.getFirst();
-                if (!(tag instanceof StringTag)) {
-                    list.add(tag);
+                Tag tagIn = (Tag)pair.getFirst();
+                if (!(tagIn instanceof StringTag)) {
+                    list.add(tagIn);
                 } else {
-                    compoundTag.put(tag.getAsString(), (Tag)pair.getSecond());
+                    compoundTag.put(tagIn.getAsString(), (Tag)pair.getSecond());
                 }
             });
             return !list.isEmpty() ? DataResult.error("some keys are not strings: " + list, compoundTag) : DataResult.success(compoundTag);
@@ -267,7 +267,7 @@ public class NbtOps implements DynamicOps<Tag> {
     }
 
     public DataResult<ByteBuffer> getByteBuffer(Tag tag) {
-        return tag instanceof ByteArrayTag ? DataResult.success(ByteBuffer.wrap(((ByteArrayTag)tag).getAsByteArray())) : super.getByteBuffer(tag);
+        return tag instanceof ByteArrayTag ? DataResult.success(ByteBuffer.wrap(((ByteArrayTag)tag).getAsByteArray())) : DynamicOps.super.getByteBuffer(tag);
     }
 
     public Tag createByteList(ByteBuffer byteBuffer) {
@@ -275,7 +275,7 @@ public class NbtOps implements DynamicOps<Tag> {
     }
 
     public DataResult<IntStream> getIntStream(Tag tag) {
-        return tag instanceof IntArrayTag ? DataResult.success(Arrays.stream(((IntArrayTag)tag).getAsIntArray())) : super.getIntStream(tag);
+        return tag instanceof IntArrayTag ? DataResult.success(Arrays.stream(((IntArrayTag)tag).getAsIntArray())) : DynamicOps.super.getIntStream(tag);
     }
 
     public Tag createIntList(IntStream intStream) {
@@ -283,7 +283,7 @@ public class NbtOps implements DynamicOps<Tag> {
     }
 
     public DataResult<LongStream> getLongStream(Tag tag) {
-        return tag instanceof LongArrayTag ? DataResult.success(Arrays.stream(((LongArrayTag)tag).getAsLongArray())) : super.getLongStream(tag);
+        return tag instanceof LongArrayTag ? DataResult.success(Arrays.stream(((LongArrayTag)tag).getAsLongArray())) : DynamicOps.super.getLongStream(tag);
     }
 
     public Tag createLongList(LongStream longStream) {
diff --git a/src/main/java/net/minecraft/nbt/NbtUtils.java b/src/main/java/net/minecraft/nbt/NbtUtils.java
index e6c3bd81fc751ba2abfe50ef2202141b78794125..92cc8ae7d39ab482637156edad5431c0bdbe8d59 100644
--- a/src/main/java/net/minecraft/nbt/NbtUtils.java
+++ b/src/main/java/net/minecraft/nbt/NbtUtils.java
@@ -41,8 +41,8 @@ import net.minecraft.world.level.material.FluidState;
 import org.slf4j.Logger;
 
 public final class NbtUtils {
-    private static final Comparator<ListTag> YXZ_LISTTAG_INT_COMPARATOR = Comparator.comparingInt((listTag) -> listTag.getInt(1)).thenComparingInt((listTag) -> listTag.getInt(0)).thenComparingInt((listTag) -> listTag.getInt(2));
-    private static final Comparator<ListTag> YXZ_LISTTAG_DOUBLE_COMPARATOR = Comparator.comparingDouble((listTag) -> listTag.getDouble(1)).thenComparingDouble((listTag) -> listTag.getDouble(0)).thenComparingDouble((listTag) -> listTag.getDouble(2));
+    private static final Comparator<ListTag> YXZ_LISTTAG_INT_COMPARATOR = Comparator.<ListTag>comparingInt((listTag) -> listTag.getInt(1)).thenComparingInt((listTag) -> listTag.getInt(0)).thenComparingInt((listTag) -> listTag.getInt(2));
+    private static final Comparator<ListTag> YXZ_LISTTAG_DOUBLE_COMPARATOR = Comparator.<ListTag>comparingDouble((listTag) -> listTag.getDouble(1)).thenComparingDouble((listTag) -> listTag.getDouble(0)).thenComparingDouble((listTag) -> listTag.getDouble(2));
     public static final String SNBT_DATA_TAG = "data";
     private static final char PROPERTIES_START = '{';
     private static final char PROPERTIES_END = '}';
@@ -234,7 +234,7 @@ public final class NbtUtils {
     private static <S extends StateHolder<?, S>, T extends Comparable<T>> S setValueHelper(S stateHolder, Property<T> property, String s, CompoundTag compoundTag, CompoundTag compoundTag2) {
         Optional<T> optional = property.getValue(compoundTag.getString(s));
         if (optional.isPresent()) {
-            return stateHolder.setValue(property, (Comparable)optional.get());
+            return stateHolder.setValue(property, optional.get());
         } else {
             LOGGER.warn("Unable to read property: {} with value: {} for blockstate: {}", new Object[]{s, compoundTag.getString(s), compoundTag2.toString()});
             return stateHolder;
@@ -519,13 +519,13 @@ public final class NbtUtils {
             ListTag listTag4 = new ListTag();
             ListTag listTag5 = compoundTag.getList("palettes", 9);
             listTag5.stream().map(ListTag.class::cast).forEach((listTag3x) -> {
-                CompoundTag compoundTag = new CompoundTag();
+                CompoundTag compoundTagIn = new CompoundTag();
 
                 for(int i = 0; i < listTag3x.size(); ++i) {
-                    compoundTag.putString(listTag3.getString(i), packBlockState(listTag3x.getCompound(i)));
+                    compoundTagIn.putString(listTag3.getString(i), packBlockState(listTag3x.getCompound(i)));
                 }
 
-                listTag4.add(compoundTag);
+                listTag4.add(compoundTagIn);
             });
             compoundTag.put("palettes", listTag4);
         }
@@ -603,8 +603,8 @@ public final class NbtUtils {
             CompoundTag compoundTag2 = new CompoundTag();
             if (i + 2 <= s.length()) {
                 String s3 = s.substring(i + 1, s.indexOf(125, i));
-                COMMA_SPLITTER.split(s3).forEach((s2) -> {
-                    List<String> list = COLON_SPLITTER.splitToList(s2);
+                COMMA_SPLITTER.split(s3).forEach((s2x) -> {
+                    List<String> list = COLON_SPLITTER.splitToList(s2x);
                     if (list.size() == 2) {
                         compoundTag2.putString((String)list.get(0), (String)list.get(1));
                     } else {
diff --git a/src/main/java/net/minecraft/nbt/TagParser.java b/src/main/java/net/minecraft/nbt/TagParser.java
index 10d9922df5c020dae53da384ba8f35e5e4e44996..d8f42522a5de480ef8373b1fa5cfa7c436adde53 100644
--- a/src/main/java/net/minecraft/nbt/TagParser.java
+++ b/src/main/java/net/minecraft/nbt/TagParser.java
@@ -235,11 +235,11 @@ public class TagParser {
                 }
 
                 if (tagType2 == ByteTag.TYPE) {
-                    list.add(((NumericTag)tag).getAsByte());
+                    list.add((T) (Object) ((NumericTag)tag).getAsByte());
                 } else if (tagType2 == LongTag.TYPE) {
-                    list.add(((NumericTag)tag).getAsLong());
+                    list.add((T) (Object) ((NumericTag)tag).getAsLong());
                 } else {
-                    list.add(((NumericTag)tag).getAsInt());
+                    list.add((T) (Object) ((NumericTag)tag).getAsInt());
                 }
 
                 if (this.hasElementSeparator()) {
diff --git a/src/main/java/net/minecraft/nbt/visitors/FieldSelector.java b/src/main/java/net/minecraft/nbt/visitors/FieldSelector.java
index 66a5befce7ed81f1fedd8ccbea4924349a3d85f7..a41772d129801ebeb808640894977a0ca7270853 100644
--- a/src/main/java/net/minecraft/nbt/visitors/FieldSelector.java
+++ b/src/main/java/net/minecraft/nbt/visitors/FieldSelector.java
@@ -3,11 +3,7 @@ package net.minecraft.nbt.visitors;
 import java.util.List;
 import net.minecraft.nbt.TagType;
 
-public record FieldSelector(List<String> a, TagType<?> b, String c) {
-    private final List<String> path;
-    private final TagType<?> type;
-    private final String name;
-
+public record FieldSelector(List<String> path, TagType<?> type, String name) {
     public FieldSelector(TagType<?> type, String name) {
         this(List.of(), type, name);
     }
@@ -19,16 +15,4 @@ public record FieldSelector(List<String> a, TagType<?> b, String c) {
     public FieldSelector(String firstPath, String secondPath, TagType<?> type, String name) {
         this(List.of(firstPath, secondPath), type, name);
     }
-
-    public List<String> path() {
-        return this.path;
-    }
-
-    public TagType<?> type() {
-        return this.type;
-    }
-
-    public String name() {
-        return this.name;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/nbt/visitors/FieldTree.java b/src/main/java/net/minecraft/nbt/visitors/FieldTree.java
index f489b40e83e14e2718eea8425c7098e47315a00e..cd81e798a1b9f2888e0644ed4ad4f942c427b505 100644
--- a/src/main/java/net/minecraft/nbt/visitors/FieldTree.java
+++ b/src/main/java/net/minecraft/nbt/visitors/FieldTree.java
@@ -4,11 +4,7 @@ import java.util.HashMap;
 import java.util.Map;
 import net.minecraft.nbt.TagType;
 
-public record FieldTree(int a, Map<String, TagType<?>> b, Map<String, FieldTree> c) {
-    private final int depth;
-    private final Map<String, TagType<?>> selectedFields;
-    private final Map<String, FieldTree> fieldsToRecurse;
-
+public record FieldTree(int depth, Map<String, TagType<?>> selectedFields, Map<String, FieldTree> fieldsToRecurse) {
     private FieldTree(int depth) {
         this(depth, new HashMap(), new HashMap());
     }
@@ -29,16 +25,4 @@ public record FieldTree(int a, Map<String, TagType<?>> b, Map<String, FieldTree>
     public boolean isSelected(TagType<?> tagType, String s) {
         return tagType.equals(this.selectedFields().get(s));
     }
-
-    public int depth() {
-        return this.depth;
-    }
-
-    public Map<String, TagType<?>> selectedFields() {
-        return this.selectedFields;
-    }
-
-    public Map<String, FieldTree> fieldsToRecurse() {
-        return this.fieldsToRecurse;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/ConnectionProtocol.java b/src/main/java/net/minecraft/network/ConnectionProtocol.java
index 017d65da6442ef07025b71366b1e8848243d4cf5..5b3610cf386b10b12c4d7f8d6c08346df450bc70 100644
--- a/src/main/java/net/minecraft/network/ConnectionProtocol.java
+++ b/src/main/java/net/minecraft/network/ConnectionProtocol.java
@@ -16,6 +16,7 @@ import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.network.protocol.game.ClientGamePacketListener;
 import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
 import net.minecraft.network.protocol.game.ClientboundAddExperienceOrbPacket;
 import net.minecraft.network.protocol.game.ClientboundAddPlayerPacket;
@@ -119,6 +120,7 @@ import net.minecraft.network.protocol.game.ClientboundUpdateAttributesPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateRecipesPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateTagsPacket;
+import net.minecraft.network.protocol.game.ServerGamePacketListener;
 import net.minecraft.network.protocol.game.ServerboundAcceptTeleportationPacket;
 import net.minecraft.network.protocol.game.ServerboundBlockEntityTagQuery;
 import net.minecraft.network.protocol.game.ServerboundChangeDifficultyPacket;
@@ -167,26 +169,31 @@ import net.minecraft.network.protocol.game.ServerboundTeleportToEntityPacket;
 import net.minecraft.network.protocol.game.ServerboundUseItemOnPacket;
 import net.minecraft.network.protocol.game.ServerboundUseItemPacket;
 import net.minecraft.network.protocol.handshake.ClientIntentionPacket;
+import net.minecraft.network.protocol.handshake.ServerHandshakePacketListener;
+import net.minecraft.network.protocol.login.ClientLoginPacketListener;
 import net.minecraft.network.protocol.login.ClientboundCustomQueryPacket;
 import net.minecraft.network.protocol.login.ClientboundGameProfilePacket;
 import net.minecraft.network.protocol.login.ClientboundHelloPacket;
 import net.minecraft.network.protocol.login.ClientboundLoginCompressionPacket;
 import net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket;
+import net.minecraft.network.protocol.login.ServerLoginPacketListener;
 import net.minecraft.network.protocol.login.ServerboundCustomQueryPacket;
 import net.minecraft.network.protocol.login.ServerboundHelloPacket;
 import net.minecraft.network.protocol.login.ServerboundKeyPacket;
+import net.minecraft.network.protocol.status.ClientStatusPacketListener;
 import net.minecraft.network.protocol.status.ClientboundPongResponsePacket;
 import net.minecraft.network.protocol.status.ClientboundStatusResponsePacket;
+import net.minecraft.network.protocol.status.ServerStatusPacketListener;
 import net.minecraft.network.protocol.status.ServerboundPingRequestPacket;
 import net.minecraft.network.protocol.status.ServerboundStatusRequestPacket;
 import net.minecraft.util.VisibleForDebug;
 import org.slf4j.Logger;
 
 public enum ConnectionProtocol {
-    HANDSHAKING(-1, protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ClientIntentionPacket.class, ClientIntentionPacket::new))),
-    PLAY(0, protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ClientboundAddEntityPacket.class, ClientboundAddEntityPacket::new).addPacket(ClientboundAddExperienceOrbPacket.class, ClientboundAddExperienceOrbPacket::new).addPacket(ClientboundAddPlayerPacket.class, ClientboundAddPlayerPacket::new).addPacket(ClientboundAnimatePacket.class, ClientboundAnimatePacket::new).addPacket(ClientboundAwardStatsPacket.class, ClientboundAwardStatsPacket::new).addPacket(ClientboundBlockChangedAckPacket.class, ClientboundBlockChangedAckPacket::new).addPacket(ClientboundBlockDestructionPacket.class, ClientboundBlockDestructionPacket::new).addPacket(ClientboundBlockEntityDataPacket.class, ClientboundBlockEntityDataPacket::new).addPacket(ClientboundBlockEventPacket.class, ClientboundBlockEventPacket::new).addPacket(ClientboundBlockUpdatePacket.class, ClientboundBlockUpdatePacket::new).addPacket(ClientboundBossEventPacket.class, ClientboundBossEventPacket::new).addPacket(ClientboundChangeDifficultyPacket.class, ClientboundChangeDifficultyPacket::new).addPacket(ClientboundChatPreviewPacket.class, ClientboundChatPreviewPacket::new).addPacket(ClientboundClearTitlesPacket.class, ClientboundClearTitlesPacket::new).addPacket(ClientboundCommandSuggestionsPacket.class, ClientboundCommandSuggestionsPacket::new).addPacket(ClientboundCommandsPacket.class, ClientboundCommandsPacket::new).addPacket(ClientboundContainerClosePacket.class, ClientboundContainerClosePacket::new).addPacket(ClientboundContainerSetContentPacket.class, ClientboundContainerSetContentPacket::new).addPacket(ClientboundContainerSetDataPacket.class, ClientboundContainerSetDataPacket::new).addPacket(ClientboundContainerSetSlotPacket.class, ClientboundContainerSetSlotPacket::new).addPacket(ClientboundCooldownPacket.class, ClientboundCooldownPacket::new).addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new).addPacket(ClientboundCustomSoundPacket.class, ClientboundCustomSoundPacket::new).addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new).addPacket(ClientboundEntityEventPacket.class, ClientboundEntityEventPacket::new).addPacket(ClientboundExplodePacket.class, ClientboundExplodePacket::new).addPacket(ClientboundForgetLevelChunkPacket.class, ClientboundForgetLevelChunkPacket::new).addPacket(ClientboundGameEventPacket.class, ClientboundGameEventPacket::new).addPacket(ClientboundHorseScreenOpenPacket.class, ClientboundHorseScreenOpenPacket::new).addPacket(ClientboundInitializeBorderPacket.class, ClientboundInitializeBorderPacket::new).addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new).addPacket(ClientboundLevelChunkWithLightPacket.class, ClientboundLevelChunkWithLightPacket::new).addPacket(ClientboundLevelEventPacket.class, ClientboundLevelEventPacket::new).addPacket(ClientboundLevelParticlesPacket.class, ClientboundLevelParticlesPacket::new).addPacket(ClientboundLightUpdatePacket.class, ClientboundLightUpdatePacket::new).addPacket(ClientboundLoginPacket.class, ClientboundLoginPacket::new).addPacket(ClientboundMapItemDataPacket.class, ClientboundMapItemDataPacket::new).addPacket(ClientboundMerchantOffersPacket.class, ClientboundMerchantOffersPacket::new).addPacket(ClientboundMoveEntityPacket.Pos.class, ClientboundMoveEntityPacket.Pos::read).addPacket(ClientboundMoveEntityPacket.PosRot.class, ClientboundMoveEntityPacket.PosRot::read).addPacket(ClientboundMoveEntityPacket.Rot.class, ClientboundMoveEntityPacket.Rot::read).addPacket(ClientboundMoveVehiclePacket.class, ClientboundMoveVehiclePacket::new).addPacket(ClientboundOpenBookPacket.class, ClientboundOpenBookPacket::new).addPacket(ClientboundOpenScreenPacket.class, ClientboundOpenScreenPacket::new).addPacket(ClientboundOpenSignEditorPacket.class, ClientboundOpenSignEditorPacket::new).addPacket(ClientboundPingPacket.class, ClientboundPingPacket::new).addPacket(ClientboundPlaceGhostRecipePacket.class, ClientboundPlaceGhostRecipePacket::new).addPacket(ClientboundPlayerAbilitiesPacket.class, ClientboundPlayerAbilitiesPacket::new).addPacket(ClientboundPlayerChatPacket.class, ClientboundPlayerChatPacket::new).addPacket(ClientboundPlayerCombatEndPacket.class, ClientboundPlayerCombatEndPacket::new).addPacket(ClientboundPlayerCombatEnterPacket.class, ClientboundPlayerCombatEnterPacket::new).addPacket(ClientboundPlayerCombatKillPacket.class, ClientboundPlayerCombatKillPacket::new).addPacket(ClientboundPlayerInfoPacket.class, ClientboundPlayerInfoPacket::new).addPacket(ClientboundPlayerLookAtPacket.class, ClientboundPlayerLookAtPacket::new).addPacket(ClientboundPlayerPositionPacket.class, ClientboundPlayerPositionPacket::new).addPacket(ClientboundRecipePacket.class, ClientboundRecipePacket::new).addPacket(ClientboundRemoveEntitiesPacket.class, ClientboundRemoveEntitiesPacket::new).addPacket(ClientboundRemoveMobEffectPacket.class, ClientboundRemoveMobEffectPacket::new).addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new).addPacket(ClientboundRespawnPacket.class, ClientboundRespawnPacket::new).addPacket(ClientboundRotateHeadPacket.class, ClientboundRotateHeadPacket::new).addPacket(ClientboundSectionBlocksUpdatePacket.class, ClientboundSectionBlocksUpdatePacket::new).addPacket(ClientboundSelectAdvancementsTabPacket.class, ClientboundSelectAdvancementsTabPacket::new).addPacket(ClientboundServerDataPacket.class, ClientboundServerDataPacket::new).addPacket(ClientboundSetActionBarTextPacket.class, ClientboundSetActionBarTextPacket::new).addPacket(ClientboundSetBorderCenterPacket.class, ClientboundSetBorderCenterPacket::new).addPacket(ClientboundSetBorderLerpSizePacket.class, ClientboundSetBorderLerpSizePacket::new).addPacket(ClientboundSetBorderSizePacket.class, ClientboundSetBorderSizePacket::new).addPacket(ClientboundSetBorderWarningDelayPacket.class, ClientboundSetBorderWarningDelayPacket::new).addPacket(ClientboundSetBorderWarningDistancePacket.class, ClientboundSetBorderWarningDistancePacket::new).addPacket(ClientboundSetCameraPacket.class, ClientboundSetCameraPacket::new).addPacket(ClientboundSetCarriedItemPacket.class, ClientboundSetCarriedItemPacket::new).addPacket(ClientboundSetChunkCacheCenterPacket.class, ClientboundSetChunkCacheCenterPacket::new).addPacket(ClientboundSetChunkCacheRadiusPacket.class, ClientboundSetChunkCacheRadiusPacket::new).addPacket(ClientboundSetDefaultSpawnPositionPacket.class, ClientboundSetDefaultSpawnPositionPacket::new).addPacket(ClientboundSetDisplayChatPreviewPacket.class, ClientboundSetDisplayChatPreviewPacket::new).addPacket(ClientboundSetDisplayObjectivePacket.class, ClientboundSetDisplayObjectivePacket::new).addPacket(ClientboundSetEntityDataPacket.class, ClientboundSetEntityDataPacket::new).addPacket(ClientboundSetEntityLinkPacket.class, ClientboundSetEntityLinkPacket::new).addPacket(ClientboundSetEntityMotionPacket.class, ClientboundSetEntityMotionPacket::new).addPacket(ClientboundSetEquipmentPacket.class, ClientboundSetEquipmentPacket::new).addPacket(ClientboundSetExperiencePacket.class, ClientboundSetExperiencePacket::new).addPacket(ClientboundSetHealthPacket.class, ClientboundSetHealthPacket::new).addPacket(ClientboundSetObjectivePacket.class, ClientboundSetObjectivePacket::new).addPacket(ClientboundSetPassengersPacket.class, ClientboundSetPassengersPacket::new).addPacket(ClientboundSetPlayerTeamPacket.class, ClientboundSetPlayerTeamPacket::new).addPacket(ClientboundSetScorePacket.class, ClientboundSetScorePacket::new).addPacket(ClientboundSetSimulationDistancePacket.class, ClientboundSetSimulationDistancePacket::new).addPacket(ClientboundSetSubtitleTextPacket.class, ClientboundSetSubtitleTextPacket::new).addPacket(ClientboundSetTimePacket.class, ClientboundSetTimePacket::new).addPacket(ClientboundSetTitleTextPacket.class, ClientboundSetTitleTextPacket::new).addPacket(ClientboundSetTitlesAnimationPacket.class, ClientboundSetTitlesAnimationPacket::new).addPacket(ClientboundSoundEntityPacket.class, ClientboundSoundEntityPacket::new).addPacket(ClientboundSoundPacket.class, ClientboundSoundPacket::new).addPacket(ClientboundStopSoundPacket.class, ClientboundStopSoundPacket::new).addPacket(ClientboundSystemChatPacket.class, ClientboundSystemChatPacket::new).addPacket(ClientboundTabListPacket.class, ClientboundTabListPacket::new).addPacket(ClientboundTagQueryPacket.class, ClientboundTagQueryPacket::new).addPacket(ClientboundTakeItemEntityPacket.class, ClientboundTakeItemEntityPacket::new).addPacket(ClientboundTeleportEntityPacket.class, ClientboundTeleportEntityPacket::new).addPacket(ClientboundUpdateAdvancementsPacket.class, ClientboundUpdateAdvancementsPacket::new).addPacket(ClientboundUpdateAttributesPacket.class, ClientboundUpdateAttributesPacket::new).addPacket(ClientboundUpdateMobEffectPacket.class, ClientboundUpdateMobEffectPacket::new).addPacket(ClientboundUpdateRecipesPacket.class, ClientboundUpdateRecipesPacket::new).addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ServerboundAcceptTeleportationPacket.class, ServerboundAcceptTeleportationPacket::new).addPacket(ServerboundBlockEntityTagQuery.class, ServerboundBlockEntityTagQuery::new).addPacket(ServerboundChangeDifficultyPacket.class, ServerboundChangeDifficultyPacket::new).addPacket(ServerboundChatCommandPacket.class, ServerboundChatCommandPacket::new).addPacket(ServerboundChatPacket.class, ServerboundChatPacket::new).addPacket(ServerboundChatPreviewPacket.class, ServerboundChatPreviewPacket::new).addPacket(ServerboundClientCommandPacket.class, ServerboundClientCommandPacket::new).addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new).addPacket(ServerboundCommandSuggestionPacket.class, ServerboundCommandSuggestionPacket::new).addPacket(ServerboundContainerButtonClickPacket.class, ServerboundContainerButtonClickPacket::new).addPacket(ServerboundContainerClickPacket.class, ServerboundContainerClickPacket::new).addPacket(ServerboundContainerClosePacket.class, ServerboundContainerClosePacket::new).addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new).addPacket(ServerboundEditBookPacket.class, ServerboundEditBookPacket::new).addPacket(ServerboundEntityTagQuery.class, ServerboundEntityTagQuery::new).addPacket(ServerboundInteractPacket.class, ServerboundInteractPacket::new).addPacket(ServerboundJigsawGeneratePacket.class, ServerboundJigsawGeneratePacket::new).addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new).addPacket(ServerboundLockDifficultyPacket.class, ServerboundLockDifficultyPacket::new).addPacket(ServerboundMovePlayerPacket.Pos.class, ServerboundMovePlayerPacket.Pos::read).addPacket(ServerboundMovePlayerPacket.PosRot.class, ServerboundMovePlayerPacket.PosRot::read).addPacket(ServerboundMovePlayerPacket.Rot.class, ServerboundMovePlayerPacket.Rot::read).addPacket(ServerboundMovePlayerPacket.StatusOnly.class, ServerboundMovePlayerPacket.StatusOnly::read).addPacket(ServerboundMoveVehiclePacket.class, ServerboundMoveVehiclePacket::new).addPacket(ServerboundPaddleBoatPacket.class, ServerboundPaddleBoatPacket::new).addPacket(ServerboundPickItemPacket.class, ServerboundPickItemPacket::new).addPacket(ServerboundPlaceRecipePacket.class, ServerboundPlaceRecipePacket::new).addPacket(ServerboundPlayerAbilitiesPacket.class, ServerboundPlayerAbilitiesPacket::new).addPacket(ServerboundPlayerActionPacket.class, ServerboundPlayerActionPacket::new).addPacket(ServerboundPlayerCommandPacket.class, ServerboundPlayerCommandPacket::new).addPacket(ServerboundPlayerInputPacket.class, ServerboundPlayerInputPacket::new).addPacket(ServerboundPongPacket.class, ServerboundPongPacket::new).addPacket(ServerboundRecipeBookChangeSettingsPacket.class, ServerboundRecipeBookChangeSettingsPacket::new).addPacket(ServerboundRecipeBookSeenRecipePacket.class, ServerboundRecipeBookSeenRecipePacket::new).addPacket(ServerboundRenameItemPacket.class, ServerboundRenameItemPacket::new).addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new).addPacket(ServerboundSeenAdvancementsPacket.class, ServerboundSeenAdvancementsPacket::new).addPacket(ServerboundSelectTradePacket.class, ServerboundSelectTradePacket::new).addPacket(ServerboundSetBeaconPacket.class, ServerboundSetBeaconPacket::new).addPacket(ServerboundSetCarriedItemPacket.class, ServerboundSetCarriedItemPacket::new).addPacket(ServerboundSetCommandBlockPacket.class, ServerboundSetCommandBlockPacket::new).addPacket(ServerboundSetCommandMinecartPacket.class, ServerboundSetCommandMinecartPacket::new).addPacket(ServerboundSetCreativeModeSlotPacket.class, ServerboundSetCreativeModeSlotPacket::new).addPacket(ServerboundSetJigsawBlockPacket.class, ServerboundSetJigsawBlockPacket::new).addPacket(ServerboundSetStructureBlockPacket.class, ServerboundSetStructureBlockPacket::new).addPacket(ServerboundSignUpdatePacket.class, ServerboundSignUpdatePacket::new).addPacket(ServerboundSwingPacket.class, ServerboundSwingPacket::new).addPacket(ServerboundTeleportToEntityPacket.class, ServerboundTeleportToEntityPacket::new).addPacket(ServerboundUseItemOnPacket.class, ServerboundUseItemOnPacket::new).addPacket(ServerboundUseItemPacket.class, ServerboundUseItemPacket::new))),
-    STATUS(1, protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ServerboundStatusRequestPacket.class, ServerboundStatusRequestPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new)).addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ClientboundStatusResponsePacket.class, ClientboundStatusResponsePacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new))),
-    LOGIN(2, protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ClientboundLoginDisconnectPacket.class, ClientboundLoginDisconnectPacket::new).addPacket(ClientboundHelloPacket.class, ClientboundHelloPacket::new).addPacket(ClientboundGameProfilePacket.class, ClientboundGameProfilePacket::new).addPacket(ClientboundLoginCompressionPacket.class, ClientboundLoginCompressionPacket::new).addPacket(ClientboundCustomQueryPacket.class, ClientboundCustomQueryPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ServerboundHelloPacket.class, ServerboundHelloPacket::new).addPacket(ServerboundKeyPacket.class, ServerboundKeyPacket::new).addPacket(ServerboundCustomQueryPacket.class, ServerboundCustomQueryPacket::new)));
+    HANDSHAKING(-1, protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerHandshakePacketListener>()).addPacket(ClientIntentionPacket.class, ClientIntentionPacket::new))),
+    PLAY(0, protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientGamePacketListener>()).addPacket(ClientboundAddEntityPacket.class, ClientboundAddEntityPacket::new).addPacket(ClientboundAddExperienceOrbPacket.class, ClientboundAddExperienceOrbPacket::new).addPacket(ClientboundAddPlayerPacket.class, ClientboundAddPlayerPacket::new).addPacket(ClientboundAnimatePacket.class, ClientboundAnimatePacket::new).addPacket(ClientboundAwardStatsPacket.class, ClientboundAwardStatsPacket::new).addPacket(ClientboundBlockChangedAckPacket.class, ClientboundBlockChangedAckPacket::new).addPacket(ClientboundBlockDestructionPacket.class, ClientboundBlockDestructionPacket::new).addPacket(ClientboundBlockEntityDataPacket.class, ClientboundBlockEntityDataPacket::new).addPacket(ClientboundBlockEventPacket.class, ClientboundBlockEventPacket::new).addPacket(ClientboundBlockUpdatePacket.class, ClientboundBlockUpdatePacket::new).addPacket(ClientboundBossEventPacket.class, ClientboundBossEventPacket::new).addPacket(ClientboundChangeDifficultyPacket.class, ClientboundChangeDifficultyPacket::new).addPacket(ClientboundChatPreviewPacket.class, ClientboundChatPreviewPacket::new).addPacket(ClientboundClearTitlesPacket.class, ClientboundClearTitlesPacket::new).addPacket(ClientboundCommandSuggestionsPacket.class, ClientboundCommandSuggestionsPacket::new).addPacket(ClientboundCommandsPacket.class, ClientboundCommandsPacket::new).addPacket(ClientboundContainerClosePacket.class, ClientboundContainerClosePacket::new).addPacket(ClientboundContainerSetContentPacket.class, ClientboundContainerSetContentPacket::new).addPacket(ClientboundContainerSetDataPacket.class, ClientboundContainerSetDataPacket::new).addPacket(ClientboundContainerSetSlotPacket.class, ClientboundContainerSetSlotPacket::new).addPacket(ClientboundCooldownPacket.class, ClientboundCooldownPacket::new).addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new).addPacket(ClientboundCustomSoundPacket.class, ClientboundCustomSoundPacket::new).addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new).addPacket(ClientboundEntityEventPacket.class, ClientboundEntityEventPacket::new).addPacket(ClientboundExplodePacket.class, ClientboundExplodePacket::new).addPacket(ClientboundForgetLevelChunkPacket.class, ClientboundForgetLevelChunkPacket::new).addPacket(ClientboundGameEventPacket.class, ClientboundGameEventPacket::new).addPacket(ClientboundHorseScreenOpenPacket.class, ClientboundHorseScreenOpenPacket::new).addPacket(ClientboundInitializeBorderPacket.class, ClientboundInitializeBorderPacket::new).addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new).addPacket(ClientboundLevelChunkWithLightPacket.class, ClientboundLevelChunkWithLightPacket::new).addPacket(ClientboundLevelEventPacket.class, ClientboundLevelEventPacket::new).addPacket(ClientboundLevelParticlesPacket.class, ClientboundLevelParticlesPacket::new).addPacket(ClientboundLightUpdatePacket.class, ClientboundLightUpdatePacket::new).addPacket(ClientboundLoginPacket.class, ClientboundLoginPacket::new).addPacket(ClientboundMapItemDataPacket.class, ClientboundMapItemDataPacket::new).addPacket(ClientboundMerchantOffersPacket.class, ClientboundMerchantOffersPacket::new).addPacket(ClientboundMoveEntityPacket.Pos.class, ClientboundMoveEntityPacket.Pos::read).addPacket(ClientboundMoveEntityPacket.PosRot.class, ClientboundMoveEntityPacket.PosRot::read).addPacket(ClientboundMoveEntityPacket.Rot.class, ClientboundMoveEntityPacket.Rot::read).addPacket(ClientboundMoveVehiclePacket.class, ClientboundMoveVehiclePacket::new).addPacket(ClientboundOpenBookPacket.class, ClientboundOpenBookPacket::new).addPacket(ClientboundOpenScreenPacket.class, ClientboundOpenScreenPacket::new).addPacket(ClientboundOpenSignEditorPacket.class, ClientboundOpenSignEditorPacket::new).addPacket(ClientboundPingPacket.class, ClientboundPingPacket::new).addPacket(ClientboundPlaceGhostRecipePacket.class, ClientboundPlaceGhostRecipePacket::new).addPacket(ClientboundPlayerAbilitiesPacket.class, ClientboundPlayerAbilitiesPacket::new).addPacket(ClientboundPlayerChatPacket.class, ClientboundPlayerChatPacket::new).addPacket(ClientboundPlayerCombatEndPacket.class, ClientboundPlayerCombatEndPacket::new).addPacket(ClientboundPlayerCombatEnterPacket.class, ClientboundPlayerCombatEnterPacket::new).addPacket(ClientboundPlayerCombatKillPacket.class, ClientboundPlayerCombatKillPacket::new).addPacket(ClientboundPlayerInfoPacket.class, ClientboundPlayerInfoPacket::new).addPacket(ClientboundPlayerLookAtPacket.class, ClientboundPlayerLookAtPacket::new).addPacket(ClientboundPlayerPositionPacket.class, ClientboundPlayerPositionPacket::new).addPacket(ClientboundRecipePacket.class, ClientboundRecipePacket::new).addPacket(ClientboundRemoveEntitiesPacket.class, ClientboundRemoveEntitiesPacket::new).addPacket(ClientboundRemoveMobEffectPacket.class, ClientboundRemoveMobEffectPacket::new).addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new).addPacket(ClientboundRespawnPacket.class, ClientboundRespawnPacket::new).addPacket(ClientboundRotateHeadPacket.class, ClientboundRotateHeadPacket::new).addPacket(ClientboundSectionBlocksUpdatePacket.class, ClientboundSectionBlocksUpdatePacket::new).addPacket(ClientboundSelectAdvancementsTabPacket.class, ClientboundSelectAdvancementsTabPacket::new).addPacket(ClientboundServerDataPacket.class, ClientboundServerDataPacket::new).addPacket(ClientboundSetActionBarTextPacket.class, ClientboundSetActionBarTextPacket::new).addPacket(ClientboundSetBorderCenterPacket.class, ClientboundSetBorderCenterPacket::new).addPacket(ClientboundSetBorderLerpSizePacket.class, ClientboundSetBorderLerpSizePacket::new).addPacket(ClientboundSetBorderSizePacket.class, ClientboundSetBorderSizePacket::new).addPacket(ClientboundSetBorderWarningDelayPacket.class, ClientboundSetBorderWarningDelayPacket::new).addPacket(ClientboundSetBorderWarningDistancePacket.class, ClientboundSetBorderWarningDistancePacket::new).addPacket(ClientboundSetCameraPacket.class, ClientboundSetCameraPacket::new).addPacket(ClientboundSetCarriedItemPacket.class, ClientboundSetCarriedItemPacket::new).addPacket(ClientboundSetChunkCacheCenterPacket.class, ClientboundSetChunkCacheCenterPacket::new).addPacket(ClientboundSetChunkCacheRadiusPacket.class, ClientboundSetChunkCacheRadiusPacket::new).addPacket(ClientboundSetDefaultSpawnPositionPacket.class, ClientboundSetDefaultSpawnPositionPacket::new).addPacket(ClientboundSetDisplayChatPreviewPacket.class, ClientboundSetDisplayChatPreviewPacket::new).addPacket(ClientboundSetDisplayObjectivePacket.class, ClientboundSetDisplayObjectivePacket::new).addPacket(ClientboundSetEntityDataPacket.class, ClientboundSetEntityDataPacket::new).addPacket(ClientboundSetEntityLinkPacket.class, ClientboundSetEntityLinkPacket::new).addPacket(ClientboundSetEntityMotionPacket.class, ClientboundSetEntityMotionPacket::new).addPacket(ClientboundSetEquipmentPacket.class, ClientboundSetEquipmentPacket::new).addPacket(ClientboundSetExperiencePacket.class, ClientboundSetExperiencePacket::new).addPacket(ClientboundSetHealthPacket.class, ClientboundSetHealthPacket::new).addPacket(ClientboundSetObjectivePacket.class, ClientboundSetObjectivePacket::new).addPacket(ClientboundSetPassengersPacket.class, ClientboundSetPassengersPacket::new).addPacket(ClientboundSetPlayerTeamPacket.class, ClientboundSetPlayerTeamPacket::new).addPacket(ClientboundSetScorePacket.class, ClientboundSetScorePacket::new).addPacket(ClientboundSetSimulationDistancePacket.class, ClientboundSetSimulationDistancePacket::new).addPacket(ClientboundSetSubtitleTextPacket.class, ClientboundSetSubtitleTextPacket::new).addPacket(ClientboundSetTimePacket.class, ClientboundSetTimePacket::new).addPacket(ClientboundSetTitleTextPacket.class, ClientboundSetTitleTextPacket::new).addPacket(ClientboundSetTitlesAnimationPacket.class, ClientboundSetTitlesAnimationPacket::new).addPacket(ClientboundSoundEntityPacket.class, ClientboundSoundEntityPacket::new).addPacket(ClientboundSoundPacket.class, ClientboundSoundPacket::new).addPacket(ClientboundStopSoundPacket.class, ClientboundStopSoundPacket::new).addPacket(ClientboundSystemChatPacket.class, ClientboundSystemChatPacket::new).addPacket(ClientboundTabListPacket.class, ClientboundTabListPacket::new).addPacket(ClientboundTagQueryPacket.class, ClientboundTagQueryPacket::new).addPacket(ClientboundTakeItemEntityPacket.class, ClientboundTakeItemEntityPacket::new).addPacket(ClientboundTeleportEntityPacket.class, ClientboundTeleportEntityPacket::new).addPacket(ClientboundUpdateAdvancementsPacket.class, ClientboundUpdateAdvancementsPacket::new).addPacket(ClientboundUpdateAttributesPacket.class, ClientboundUpdateAttributesPacket::new).addPacket(ClientboundUpdateMobEffectPacket.class, ClientboundUpdateMobEffectPacket::new).addPacket(ClientboundUpdateRecipesPacket.class, ClientboundUpdateRecipesPacket::new).addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerGamePacketListener>()).addPacket(ServerboundAcceptTeleportationPacket.class, ServerboundAcceptTeleportationPacket::new).addPacket(ServerboundBlockEntityTagQuery.class, ServerboundBlockEntityTagQuery::new).addPacket(ServerboundChangeDifficultyPacket.class, ServerboundChangeDifficultyPacket::new).addPacket(ServerboundChatCommandPacket.class, ServerboundChatCommandPacket::new).addPacket(ServerboundChatPacket.class, ServerboundChatPacket::new).addPacket(ServerboundChatPreviewPacket.class, ServerboundChatPreviewPacket::new).addPacket(ServerboundClientCommandPacket.class, ServerboundClientCommandPacket::new).addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new).addPacket(ServerboundCommandSuggestionPacket.class, ServerboundCommandSuggestionPacket::new).addPacket(ServerboundContainerButtonClickPacket.class, ServerboundContainerButtonClickPacket::new).addPacket(ServerboundContainerClickPacket.class, ServerboundContainerClickPacket::new).addPacket(ServerboundContainerClosePacket.class, ServerboundContainerClosePacket::new).addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new).addPacket(ServerboundEditBookPacket.class, ServerboundEditBookPacket::new).addPacket(ServerboundEntityTagQuery.class, ServerboundEntityTagQuery::new).addPacket(ServerboundInteractPacket.class, ServerboundInteractPacket::new).addPacket(ServerboundJigsawGeneratePacket.class, ServerboundJigsawGeneratePacket::new).addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new).addPacket(ServerboundLockDifficultyPacket.class, ServerboundLockDifficultyPacket::new).addPacket(ServerboundMovePlayerPacket.Pos.class, ServerboundMovePlayerPacket.Pos::read).addPacket(ServerboundMovePlayerPacket.PosRot.class, ServerboundMovePlayerPacket.PosRot::read).addPacket(ServerboundMovePlayerPacket.Rot.class, ServerboundMovePlayerPacket.Rot::read).addPacket(ServerboundMovePlayerPacket.StatusOnly.class, ServerboundMovePlayerPacket.StatusOnly::read).addPacket(ServerboundMoveVehiclePacket.class, ServerboundMoveVehiclePacket::new).addPacket(ServerboundPaddleBoatPacket.class, ServerboundPaddleBoatPacket::new).addPacket(ServerboundPickItemPacket.class, ServerboundPickItemPacket::new).addPacket(ServerboundPlaceRecipePacket.class, ServerboundPlaceRecipePacket::new).addPacket(ServerboundPlayerAbilitiesPacket.class, ServerboundPlayerAbilitiesPacket::new).addPacket(ServerboundPlayerActionPacket.class, ServerboundPlayerActionPacket::new).addPacket(ServerboundPlayerCommandPacket.class, ServerboundPlayerCommandPacket::new).addPacket(ServerboundPlayerInputPacket.class, ServerboundPlayerInputPacket::new).addPacket(ServerboundPongPacket.class, ServerboundPongPacket::new).addPacket(ServerboundRecipeBookChangeSettingsPacket.class, ServerboundRecipeBookChangeSettingsPacket::new).addPacket(ServerboundRecipeBookSeenRecipePacket.class, ServerboundRecipeBookSeenRecipePacket::new).addPacket(ServerboundRenameItemPacket.class, ServerboundRenameItemPacket::new).addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new).addPacket(ServerboundSeenAdvancementsPacket.class, ServerboundSeenAdvancementsPacket::new).addPacket(ServerboundSelectTradePacket.class, ServerboundSelectTradePacket::new).addPacket(ServerboundSetBeaconPacket.class, ServerboundSetBeaconPacket::new).addPacket(ServerboundSetCarriedItemPacket.class, ServerboundSetCarriedItemPacket::new).addPacket(ServerboundSetCommandBlockPacket.class, ServerboundSetCommandBlockPacket::new).addPacket(ServerboundSetCommandMinecartPacket.class, ServerboundSetCommandMinecartPacket::new).addPacket(ServerboundSetCreativeModeSlotPacket.class, ServerboundSetCreativeModeSlotPacket::new).addPacket(ServerboundSetJigsawBlockPacket.class, ServerboundSetJigsawBlockPacket::new).addPacket(ServerboundSetStructureBlockPacket.class, ServerboundSetStructureBlockPacket::new).addPacket(ServerboundSignUpdatePacket.class, ServerboundSignUpdatePacket::new).addPacket(ServerboundSwingPacket.class, ServerboundSwingPacket::new).addPacket(ServerboundTeleportToEntityPacket.class, ServerboundTeleportToEntityPacket::new).addPacket(ServerboundUseItemOnPacket.class, ServerboundUseItemOnPacket::new).addPacket(ServerboundUseItemPacket.class, ServerboundUseItemPacket::new))),
+    STATUS(1, protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerStatusPacketListener>()).addPacket(ServerboundStatusRequestPacket.class, ServerboundStatusRequestPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new)).addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientStatusPacketListener>()).addPacket(ClientboundStatusResponsePacket.class, ClientboundStatusResponsePacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new))),
+    LOGIN(2, protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientLoginPacketListener>()).addPacket(ClientboundLoginDisconnectPacket.class, ClientboundLoginDisconnectPacket::new).addPacket(ClientboundHelloPacket.class, ClientboundHelloPacket::new).addPacket(ClientboundGameProfilePacket.class, ClientboundGameProfilePacket::new).addPacket(ClientboundLoginCompressionPacket.class, ClientboundLoginCompressionPacket::new).addPacket(ClientboundCustomQueryPacket.class, ClientboundCustomQueryPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerLoginPacketListener>()).addPacket(ServerboundHelloPacket.class, ServerboundHelloPacket::new).addPacket(ServerboundKeyPacket.class, ServerboundKeyPacket::new).addPacket(ServerboundCustomQueryPacket.class, ServerboundCustomQueryPacket::new)));
 
     private static final int MIN_PROTOCOL_ID = -1;
     private static final int MAX_PROTOCOL_ID = 2;
diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index 9d40c5d2878e862e899f50f95350ccbc0b9d5bad..69f6ae99400bcfdde52053eaff88f3b314e27cd1 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -181,7 +181,7 @@ public class FriendlyByteBuf extends ByteBuf {
 
     public void writeIntIdList(IntList intList) {
         this.writeVarInt(intList.size());
-        intList.forEach(this::writeVarInt);
+        intList.forEach((java.util.function.IntConsumer) this::writeVarInt);
     }
 
     public <K, V, M extends Map<K, V>> M readMap(IntFunction<M> intFunction, FriendlyByteBuf.Reader<K> reader, FriendlyByteBuf.Reader<V> reader2) {
diff --git a/src/main/java/net/minecraft/network/chat/ChatDecoration.java b/src/main/java/net/minecraft/network/chat/ChatDecoration.java
index 3aeab81296fd3150f9842a72f94cb8d9b05d5e67..412d8fa95d8a217d907d20cec3497803ca8430f0 100644
--- a/src/main/java/net/minecraft/network/chat/ChatDecoration.java
+++ b/src/main/java/net/minecraft/network/chat/ChatDecoration.java
@@ -8,10 +8,7 @@ import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
 import net.minecraft.util.StringRepresentable;
 
-public record ChatDecoration(String b, List<ChatDecoration.Parameter> c, Style d) {
-    private final String translationKey;
-    private final List<ChatDecoration.Parameter> parameters;
-    private final Style style;
+public record ChatDecoration(String translationKey, List<ChatDecoration.Parameter> parameters, Style style) {
     public static final Codec<ChatDecoration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.STRING.fieldOf("translation_key").forGetter(ChatDecoration::translationKey), ChatDecoration.Parameter.CODEC.listOf().fieldOf("parameters").forGetter(ChatDecoration::parameters), Style.FORMATTING_CODEC.fieldOf("style").forGetter(ChatDecoration::style)).apply(instance, ChatDecoration::new));
 
     public static ChatDecoration withSender(String s) {
@@ -43,18 +40,6 @@ public record ChatDecoration(String b, List<ChatDecoration.Parameter> c, Style d
         return components;
     }
 
-    public String translationKey() {
-        return this.translationKey;
-    }
-
-    public List<ChatDecoration.Parameter> parameters() {
-        return this.parameters;
-    }
-
-    public Style style() {
-        return this.style;
-    }
-
     public static enum Parameter implements StringRepresentable {
         SENDER("sender", (component, chatSender) -> chatSender != null ? chatSender.name() : null),
         TEAM_NAME("team_name", (component, chatSender) -> chatSender != null ? chatSender.teamName() : null),
diff --git a/src/main/java/net/minecraft/network/chat/ChatSender.java b/src/main/java/net/minecraft/network/chat/ChatSender.java
index 914d3402171fa1fa63745d3898749e369fc9d14a..0127af4450885267ab30a39976cc7d4ce3ed5504 100644
--- a/src/main/java/net/minecraft/network/chat/ChatSender.java
+++ b/src/main/java/net/minecraft/network/chat/ChatSender.java
@@ -5,12 +5,7 @@ import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.network.FriendlyByteBuf;
 
-public record ChatSender(UUID a, Component b, @Nullable Component c) {
-    private final UUID uuid;
-    private final Component name;
-    @Nullable
-    private final Component teamName;
-
+public record ChatSender(UUID uuid, Component name, @Nullable Component teamName) {
     public ChatSender(UUID uuid, Component component) {
         this(uuid, component, (Component)null);
     }
@@ -32,17 +27,4 @@ public record ChatSender(UUID a, Component b, @Nullable Component c) {
     public ChatSender withTeamName(Component component) {
         return new ChatSender(this.uuid, this.name, component);
     }
-
-    public UUID uuid() {
-        return this.uuid;
-    }
-
-    public Component name() {
-        return this.name;
-    }
-
-    @Nullable
-    public Component teamName() {
-        return this.teamName;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/chat/ChatType.java b/src/main/java/net/minecraft/network/chat/ChatType.java
index 62533bc7508db3139d8f800cfc52e78f6bef6648..9cc516de6e26cb72cef3bbadfb0fed28295dd47a 100644
--- a/src/main/java/net/minecraft/network/chat/ChatType.java
+++ b/src/main/java/net/minecraft/network/chat/ChatType.java
@@ -11,10 +11,7 @@ import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.StringRepresentable;
 
-public record ChatType(Optional<ChatType.TextDisplay> j, Optional<ChatType.TextDisplay> k, Optional<ChatType.Narration> l) {
-    private final Optional<ChatType.TextDisplay> chat;
-    private final Optional<ChatType.TextDisplay> overlay;
-    private final Optional<ChatType.Narration> narration;
+public record ChatType(Optional<ChatType.TextDisplay> chat, Optional<ChatType.TextDisplay> overlay, Optional<ChatType.Narration> narration) {
     public static final Codec<ChatType> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ChatType.TextDisplay.CODEC.optionalFieldOf("chat").forGetter(ChatType::chat), ChatType.TextDisplay.CODEC.optionalFieldOf("overlay").forGetter(ChatType::overlay), ChatType.Narration.CODEC.optionalFieldOf("narration").forGetter(ChatType::narration)).apply(instance, ChatType::new));
     public static final ResourceKey<ChatType> CHAT = create("chat");
     public static final ResourceKey<ChatType> SYSTEM = create("system");
@@ -40,21 +37,7 @@ public record ChatType(Optional<ChatType.TextDisplay> j, Optional<ChatType.TextD
         return BuiltinRegistries.register(registry, TELLRAW_COMMAND, new ChatType(Optional.of(ChatType.TextDisplay.undecorated()), Optional.empty(), Optional.of(ChatType.Narration.undecorated(ChatType.Narration.Priority.CHAT))));
     }
 
-    public Optional<ChatType.TextDisplay> chat() {
-        return this.chat;
-    }
-
-    public Optional<ChatType.TextDisplay> overlay() {
-        return this.overlay;
-    }
-
-    public Optional<ChatType.Narration> narration() {
-        return this.narration;
-    }
-
-    public static record Narration(Optional<ChatDecoration> b, ChatType.Narration.Priority c) {
-        private final Optional<ChatDecoration> decoration;
-        private final ChatType.Narration.Priority priority;
+    public static record Narration(Optional<ChatDecoration> decoration, ChatType.Narration.Priority priority) {
         public static final Codec<ChatType.Narration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ChatDecoration.CODEC.optionalFieldOf("decoration").forGetter(ChatType.Narration::decoration), ChatType.Narration.Priority.CODEC.fieldOf("priority").forGetter(ChatType.Narration::priority)).apply(instance, ChatType.Narration::new));
 
         public static ChatType.Narration undecorated(ChatType.Narration.Priority priority) {
@@ -100,8 +83,7 @@ public record ChatType(Optional<ChatType.TextDisplay> j, Optional<ChatType.TextD
         }
     }
 
-    public static record TextDisplay(Optional<ChatDecoration> b) {
-        private final Optional<ChatDecoration> decoration;
+    public static record TextDisplay(Optional<ChatDecoration> decoration) {
         public static final Codec<ChatType.TextDisplay> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ChatDecoration.CODEC.optionalFieldOf("decoration").forGetter(ChatType.TextDisplay::decoration)).apply(instance, ChatType.TextDisplay::new));
 
         public static ChatType.TextDisplay undecorated() {
diff --git a/src/main/java/net/minecraft/network/chat/ComponentUtils.java b/src/main/java/net/minecraft/network/chat/ComponentUtils.java
index 089e0b2c94a3a1764d079312474a57131d0db8cc..0debe2329df9cd586c47eac9bde5353f0690f404 100644
--- a/src/main/java/net/minecraft/network/chat/ComponentUtils.java
+++ b/src/main/java/net/minecraft/network/chat/ComponentUtils.java
@@ -81,7 +81,7 @@ public class ComponentUtils {
         if (collection.isEmpty()) {
             return CommonComponents.EMPTY;
         } else if (collection.size() == 1) {
-            return (Component)function.apply((Comparable)collection.iterator().next());
+            return (Component)function.apply(collection.iterator().next());
         } else {
             List<T> list = Lists.newArrayList(collection);
             list.sort(Comparable::compareTo);
@@ -136,8 +136,8 @@ public class ComponentUtils {
             ComponentContents s = component.getContents();
             if (s instanceof TranslatableContents) {
                 TranslatableContents translatableContents = (TranslatableContents)s;
-                String s = translatableContents.getKey();
-                return Language.getInstance().has(s);
+                String key = translatableContents.getKey();
+                return Language.getInstance().has(key);
             }
         }
 
diff --git a/src/main/java/net/minecraft/network/chat/MessageSignature.java b/src/main/java/net/minecraft/network/chat/MessageSignature.java
index 4676a5c9302f972da6dfe435caa4f7957bc4364c..61c0906afb53c9fe49b6908183ed230037ad7cf4 100644
--- a/src/main/java/net/minecraft/network/chat/MessageSignature.java
+++ b/src/main/java/net/minecraft/network/chat/MessageSignature.java
@@ -11,11 +11,7 @@ import net.minecraft.util.Crypt;
 import net.minecraft.util.SignatureUpdater;
 import net.minecraft.util.SignatureValidator;
 
-public record MessageSignature(UUID a, Instant b, Crypt.SaltSignaturePair c) {
-    private final UUID sender;
-    private final Instant timeStamp;
-    private final Crypt.SaltSignaturePair saltSignature;
-
+public record MessageSignature(UUID sender, Instant timeStamp, Crypt.SaltSignaturePair saltSignature) {
     public static MessageSignature unsigned() {
         return new MessageSignature(Util.NIL_UUID, Instant.now(), Crypt.SaltSignaturePair.EMPTY);
     }
@@ -50,16 +46,4 @@ public record MessageSignature(UUID a, Instant b, Crypt.SaltSignaturePair c) {
     public boolean isValid(UUID uuid) {
         return this.isValid() && uuid.equals(this.sender);
     }
-
-    public UUID sender() {
-        return this.sender;
-    }
-
-    public Instant timeStamp() {
-        return this.timeStamp;
-    }
-
-    public Crypt.SaltSignaturePair saltSignature() {
-        return this.saltSignature;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/chat/MessageSigner.java b/src/main/java/net/minecraft/network/chat/MessageSigner.java
index 3bf611a2f482e604fb3c6d316793604c9419ac32..d907249f068603dba1a6c92dd26c987110c2b53b 100644
--- a/src/main/java/net/minecraft/network/chat/MessageSigner.java
+++ b/src/main/java/net/minecraft/network/chat/MessageSigner.java
@@ -7,11 +7,7 @@ import net.minecraft.util.Crypt;
 import net.minecraft.util.SignatureUpdater;
 import net.minecraft.util.Signer;
 
-public record MessageSigner(UUID a, Instant b, long c) {
-    private final UUID sender;
-    private final Instant timeStamp;
-    private final long salt;
-
+public record MessageSigner(UUID sender, Instant timeStamp, long salt) {
     public static MessageSigner create(UUID uuid) {
         return new MessageSigner(uuid, Instant.now(), Crypt.SaltSupplier.getLong());
     }
@@ -24,16 +20,4 @@ public record MessageSigner(UUID a, Instant b, long c) {
     public MessageSignature sign(Signer signer, String s) throws SignatureException {
         return this.sign(signer, Component.literal(s));
     }
-
-    public UUID sender() {
-        return this.sender;
-    }
-
-    public Instant timeStamp() {
-        return this.timeStamp;
-    }
-
-    public long salt() {
-        return this.salt;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/chat/PlayerChatMessage.java b/src/main/java/net/minecraft/network/chat/PlayerChatMessage.java
index 142bd163e86d782953d0f8604c71f9c33476eeab..4e802dd50fb2778475412bcc7120c3b7e777b01a 100644
--- a/src/main/java/net/minecraft/network/chat/PlayerChatMessage.java
+++ b/src/main/java/net/minecraft/network/chat/PlayerChatMessage.java
@@ -7,11 +7,7 @@ import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.network.FilteredText;
 import net.minecraft.world.entity.player.ProfilePublicKey;
 
-public record PlayerChatMessage(Component a, MessageSignature b, Optional<Component> c) {
-    private final Component signedContent;
-    private final MessageSignature signature;
-    private final Optional<Component> unsignedContent;
-
+public record PlayerChatMessage(Component signedContent, MessageSignature signature, Optional<Component> unsignedContent) {
     public static PlayerChatMessage signed(Component component, MessageSignature messageSignature) {
         return new PlayerChatMessage(component, messageSignature, Optional.empty());
     }
diff --git a/src/main/java/net/minecraft/network/chat/Style.java b/src/main/java/net/minecraft/network/chat/Style.java
index debeea389130e907edb152e3b561f9bde92df161..e53fd771187aca84b11d7723664ebadd0245c45e 100644
--- a/src/main/java/net/minecraft/network/chat/Style.java
+++ b/src/main/java/net/minecraft/network/chat/Style.java
@@ -306,17 +306,17 @@ public class Style {
             }
         }
 
-        Collector 1Collector = new Collector();
-        1Collector.addValueString("color", this.color);
-        1Collector.addFlagString("bold", this.bold);
-        1Collector.addFlagString("italic", this.italic);
-        1Collector.addFlagString("underlined", this.underlined);
-        1Collector.addFlagString("strikethrough", this.strikethrough);
-        1Collector.addFlagString("obfuscated", this.obfuscated);
-        1Collector.addValueString("clickEvent", this.clickEvent);
-        1Collector.addValueString("hoverEvent", this.hoverEvent);
-        1Collector.addValueString("insertion", this.insertion);
-        1Collector.addValueString("font", this.font);
+        Collector collector = new Collector();
+        collector.addValueString("color", this.color);
+        collector.addFlagString("bold", this.bold);
+        collector.addFlagString("italic", this.italic);
+        collector.addFlagString("underlined", this.underlined);
+        collector.addFlagString("strikethrough", this.strikethrough);
+        collector.addFlagString("obfuscated", this.obfuscated);
+        collector.addValueString("clickEvent", this.clickEvent);
+        collector.addValueString("hoverEvent", this.hoverEvent);
+        collector.addValueString("insertion", this.insertion);
+        collector.addValueString("font", this.font);
         stringBuilder.append("}");
         return stringBuilder.toString();
     }
diff --git a/src/main/java/net/minecraft/network/chat/contents/BlockDataSource.java b/src/main/java/net/minecraft/network/chat/contents/BlockDataSource.java
index ad7a7ba53531f09364be7b48aa7b4a6824d0af89..59599c6b8cd413c24e221fd028f1ee5019123d6c 100644
--- a/src/main/java/net/minecraft/network/chat/contents/BlockDataSource.java
+++ b/src/main/java/net/minecraft/network/chat/contents/BlockDataSource.java
@@ -12,11 +12,7 @@ import net.minecraft.nbt.CompoundTag;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.block.entity.BlockEntity;
 
-public record BlockDataSource(String a, @Nullable Coordinates b) implements DataSource {
-    private final String posPattern;
-    @Nullable
-    private final Coordinates compiledPos;
-
+public record BlockDataSource(String posPattern, @Nullable Coordinates compiledPos) implements DataSource {
     public BlockDataSource(String s) {
         this(s, compilePos(s));
     }
diff --git a/src/main/java/net/minecraft/network/chat/contents/EntityDataSource.java b/src/main/java/net/minecraft/network/chat/contents/EntityDataSource.java
index 7b8795276adb7ca1e1d23831dfd0630950718639..6fbc1261a4ba2721752c956a20a1c688d2b64a37 100644
--- a/src/main/java/net/minecraft/network/chat/contents/EntityDataSource.java
+++ b/src/main/java/net/minecraft/network/chat/contents/EntityDataSource.java
@@ -12,11 +12,7 @@ import net.minecraft.commands.arguments.selector.EntitySelectorParser;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.world.entity.Entity;
 
-public record EntityDataSource(String a, @Nullable EntitySelector b) implements DataSource {
-    private final String selectorPattern;
-    @Nullable
-    private final EntitySelector compiledSelector;
-
+public record EntityDataSource(String selectorPattern, @Nullable EntitySelector compiledSelector) implements DataSource {
     public EntityDataSource(String s) {
         this(s, compileSelector(s));
     }
@@ -62,13 +58,4 @@ public record EntityDataSource(String a, @Nullable EntitySelector b) implements
     public int hashCode() {
         return this.selectorPattern.hashCode();
     }
-
-    public String selectorPattern() {
-        return this.selectorPattern;
-    }
-
-    @Nullable
-    public EntitySelector compiledSelector() {
-        return this.compiledSelector;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/chat/contents/LiteralContents.java b/src/main/java/net/minecraft/network/chat/contents/LiteralContents.java
index ff2de14aff002c3c28716d264b1a0a71556dea56..417ef61467070920410a8e82a4163b9ecf7430e7 100644
--- a/src/main/java/net/minecraft/network/chat/contents/LiteralContents.java
+++ b/src/main/java/net/minecraft/network/chat/contents/LiteralContents.java
@@ -5,9 +5,7 @@ import net.minecraft.network.chat.ComponentContents;
 import net.minecraft.network.chat.FormattedText;
 import net.minecraft.network.chat.Style;
 
-public record LiteralContents(String b) implements ComponentContents {
-    private final String text;
-
+public record LiteralContents(String text) implements ComponentContents {
     public <T> Optional<T> visit(FormattedText.ContentConsumer<T> contentConsumer) {
         return contentConsumer.accept(this.text);
     }
@@ -19,8 +17,4 @@ public record LiteralContents(String b) implements ComponentContents {
     public String toString() {
         return "literal{" + this.text + "}";
     }
-
-    public String text() {
-        return this.text;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/chat/contents/StorageDataSource.java b/src/main/java/net/minecraft/network/chat/contents/StorageDataSource.java
index 403cd2160ae7b3fbb98e9cf4d50d9b7b2a0a19de..b0e9f6fd8eca0afd5351d051f87f8671bbf5ca7e 100644
--- a/src/main/java/net/minecraft/network/chat/contents/StorageDataSource.java
+++ b/src/main/java/net/minecraft/network/chat/contents/StorageDataSource.java
@@ -5,9 +5,7 @@ import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.resources.ResourceLocation;
 
-public record StorageDataSource(ResourceLocation a) implements DataSource {
-    private final ResourceLocation id;
-
+public record StorageDataSource(ResourceLocation id) implements DataSource {
     public Stream<CompoundTag> getData(CommandSourceStack commandSourceStack) {
         CompoundTag compoundTag = commandSourceStack.getServer().getCommandStorage().get(this.id);
         return Stream.of(compoundTag);
@@ -16,8 +14,4 @@ public record StorageDataSource(ResourceLocation a) implements DataSource {
     public String toString() {
         return "storage=" + this.id;
     }
-
-    public ResourceLocation id() {
-        return this.id;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockChangedAckPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockChangedAckPacket.java
index 6de5daee6472719fb5871e29835de8730a5dbd39..0ef27550137baa8a0412f8b64db16402c6c68749 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockChangedAckPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockChangedAckPacket.java
@@ -3,9 +3,7 @@ package net.minecraft.network.protocol.game;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 
-public record ClientboundBlockChangedAckPacket(int a) implements Packet<ClientGamePacketListener> {
-    private final int sequence;
-
+public record ClientboundBlockChangedAckPacket(int sequence) implements Packet<ClientGamePacketListener> {
     public ClientboundBlockChangedAckPacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readVarInt());
     }
@@ -17,8 +15,4 @@ public record ClientboundBlockChangedAckPacket(int a) implements Packet<ClientGa
     public void handle(ClientGamePacketListener clientGamePacketListener) {
         clientGamePacketListener.handleBlockChangedAck(this);
     }
-
-    public int sequence() {
-        return this.sequence;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundChatPreviewPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundChatPreviewPacket.java
index eda870cc3d33cfe0d71eb8e202314433372c693b..990d806b6a69c2e2b0974b7b4389f69ceae93713 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundChatPreviewPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundChatPreviewPacket.java
@@ -5,11 +5,7 @@ import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.Packet;
 import org.jetbrains.annotations.Nullable;
 
-public record ClientboundChatPreviewPacket(int a, @Nullable Component b) implements Packet<ClientGamePacketListener> {
-    private final int queryId;
-    @Nullable
-    private final Component preview;
-
+public record ClientboundChatPreviewPacket(int queryId, @Nullable Component preview) implements Packet<ClientGamePacketListener> {
     public ClientboundChatPreviewPacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readInt(), friendlyByteBuf.readNullable(FriendlyByteBuf::readComponent));
     }
@@ -26,13 +22,4 @@ public record ClientboundChatPreviewPacket(int a, @Nullable Component b) impleme
     public void handle(ClientGamePacketListener clientGamePacketListener) {
         clientGamePacketListener.handleChatPreview(this);
     }
-
-    public int queryId() {
-        return this.queryId;
-    }
-
-    @Nullable
-    public Component preview() {
-        return this.preview;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java
index 97e91a88615fb09931da39be508a55799df1e01f..7dc7663d8e82ce2445bfc284d228be77377df504 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java
@@ -37,7 +37,7 @@ public class ClientboundCommandSuggestionsPacket implements Packet<ClientGamePac
         friendlyByteBuf.writeVarInt(this.suggestions.getRange().getLength());
         friendlyByteBuf.writeCollection(this.suggestions.getList(), (friendlyByteBufx, suggestion) -> {
             friendlyByteBufx.writeUtf(suggestion.getText());
-            friendlyByteBufx.writeNullable(suggestion.getTooltip(), (friendlyByteBuf, message) -> friendlyByteBuf.writeComponent(ComponentUtils.fromMessage(message)));
+            friendlyByteBufx.writeNullable(suggestion.getTooltip(), (friendlyByteBufIn, message) -> friendlyByteBufIn.writeComponent(ComponentUtils.fromMessage(message)));
         });
     }
 
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLoginPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLoginPacket.java
index 501f6651da3389f0df82b319b14239dbb0e29188..8e11c40f075f49bd97df2d7d45fe727ce193e560 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLoginPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLoginPacket.java
@@ -14,26 +14,24 @@ import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.dimension.DimensionType;
 
-public record ClientboundLoginPacket(int a, boolean b, GameType c, @Nullable GameType d, Set<ResourceKey<Level>> e, RegistryAccess.Frozen f, ResourceKey<DimensionType> g, ResourceKey<Level> h, long i, int j, int k, int l, boolean m, boolean n, boolean o, boolean p, Optional<GlobalPos> q) implements Packet<ClientGamePacketListener> {
-    private final int playerId;
-    private final boolean hardcore;
-    private final GameType gameType;
-    @Nullable
-    private final GameType previousGameType;
-    private final Set<ResourceKey<Level>> levels;
-    private final RegistryAccess.Frozen registryHolder;
-    private final ResourceKey<DimensionType> dimensionType;
-    private final ResourceKey<Level> dimension;
-    private final long seed;
-    private final int maxPlayers;
-    private final int chunkRadius;
-    private final int simulationDistance;
-    private final boolean reducedDebugInfo;
-    private final boolean showDeathScreen;
-    private final boolean isDebug;
-    private final boolean isFlat;
-    private final Optional<GlobalPos> lastDeathLocation;
-
+public record ClientboundLoginPacket(
+        int playerId,
+        boolean hardcore,
+        GameType gameType,
+        @Nullable GameType previousGameType,
+        Set<ResourceKey<Level>> levels,
+        RegistryAccess.Frozen registryHolder,
+        ResourceKey<DimensionType> dimensionType,
+        ResourceKey<Level> dimension,
+        long seed,
+        int maxPlayers,
+        int chunkRadius,
+        int simulationDistance,
+        boolean reducedDebugInfo,
+        boolean showDeathScreen,
+        boolean isDebug,
+        boolean isFlat,
+        Optional<GlobalPos> lastDeathLocation) implements Packet<ClientGamePacketListener> {
     public ClientboundLoginPacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readInt(), friendlyByteBuf.readBoolean(), GameType.byId(friendlyByteBuf.readByte()), GameType.byNullableId(friendlyByteBuf.readByte()), friendlyByteBuf.readCollection(Sets::newHashSetWithExpectedSize, (friendlyByteBufx) -> friendlyByteBufx.readResourceKey(Registry.DIMENSION_REGISTRY)), friendlyByteBuf.<RegistryAccess>readWithCodec(RegistryAccess.NETWORK_CODEC).freeze(), friendlyByteBuf.readResourceKey(Registry.DIMENSION_TYPE_REGISTRY), friendlyByteBuf.readResourceKey(Registry.DIMENSION_REGISTRY), friendlyByteBuf.readLong(), friendlyByteBuf.readVarInt(), friendlyByteBuf.readVarInt(), friendlyByteBuf.readVarInt(), friendlyByteBuf.readBoolean(), friendlyByteBuf.readBoolean(), friendlyByteBuf.readBoolean(), friendlyByteBuf.readBoolean(), friendlyByteBuf.readOptional(FriendlyByteBuf::readGlobalPos));
     }
@@ -61,73 +59,4 @@ public record ClientboundLoginPacket(int a, boolean b, GameType c, @Nullable Gam
     public void handle(ClientGamePacketListener clientGamePacketListener) {
         clientGamePacketListener.handleLogin(this);
     }
-
-    public int playerId() {
-        return this.playerId;
-    }
-
-    public boolean hardcore() {
-        return this.hardcore;
-    }
-
-    public GameType gameType() {
-        return this.gameType;
-    }
-
-    @Nullable
-    public GameType previousGameType() {
-        return this.previousGameType;
-    }
-
-    public Set<ResourceKey<Level>> levels() {
-        return this.levels;
-    }
-
-    public RegistryAccess.Frozen registryHolder() {
-        return this.registryHolder;
-    }
-
-    public ResourceKey<DimensionType> dimensionType() {
-        return this.dimensionType;
-    }
-
-    public ResourceKey<Level> dimension() {
-        return this.dimension;
-    }
-
-    public long seed() {
-        return this.seed;
-    }
-
-    public int maxPlayers() {
-        return this.maxPlayers;
-    }
-
-    public int chunkRadius() {
-        return this.chunkRadius;
-    }
-
-    public int simulationDistance() {
-        return this.simulationDistance;
-    }
-
-    public boolean reducedDebugInfo() {
-        return this.reducedDebugInfo;
-    }
-
-    public boolean showDeathScreen() {
-        return this.showDeathScreen;
-    }
-
-    public boolean isDebug() {
-        return this.isDebug;
-    }
-
-    public boolean isFlat() {
-        return this.isFlat;
-    }
-
-    public Optional<GlobalPos> lastDeathLocation() {
-        return this.lastDeathLocation;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundMapItemDataPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundMapItemDataPacket.java
index 96e03f2b2de55baa5fae0859d1909978f060ce67..f1dd80f2b65c792b1390aea5f15eb833a21e5adf 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundMapItemDataPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundMapItemDataPacket.java
@@ -31,12 +31,12 @@ public class ClientboundMapItemDataPacket implements Packet<ClientGamePacketList
         this.mapId = friendlyByteBuf.readVarInt();
         this.scale = friendlyByteBuf.readByte();
         this.locked = friendlyByteBuf.readBoolean();
-        this.decorations = friendlyByteBuf.readNullable((friendlyByteBufx) -> friendlyByteBufx.readList((friendlyByteBuf) -> {
-                MapDecoration.Type type = friendlyByteBuf.readEnum(MapDecoration.Type.class);
-                byte b = friendlyByteBuf.readByte();
-                byte b2 = friendlyByteBuf.readByte();
-                byte b3 = (byte)(friendlyByteBuf.readByte() & 15);
-                Component component = friendlyByteBuf.readNullable(FriendlyByteBuf::readComponent);
+        this.decorations = friendlyByteBuf.readNullable((friendlyByteBufx) -> friendlyByteBufx.readList((friendlyByteBufIn) -> {
+                MapDecoration.Type type = friendlyByteBufIn.readEnum(MapDecoration.Type.class);
+                byte b = friendlyByteBufIn.readByte();
+                byte b2 = friendlyByteBufIn.readByte();
+                byte b3 = (byte)(friendlyByteBufIn.readByte() & 15);
+                Component component = friendlyByteBufIn.readNullable(FriendlyByteBuf::readComponent);
                 return new MapDecoration(type, b, b2, b3, component);
             }));
         int i = friendlyByteBuf.readUnsignedByte();
@@ -56,12 +56,12 @@ public class ClientboundMapItemDataPacket implements Packet<ClientGamePacketList
         friendlyByteBuf.writeVarInt(this.mapId);
         friendlyByteBuf.writeByte(this.scale);
         friendlyByteBuf.writeBoolean(this.locked);
-        friendlyByteBuf.writeNullable(this.decorations, (friendlyByteBufx, list) -> friendlyByteBufx.writeCollection(list, (friendlyByteBuf, mapDecoration) -> {
-                friendlyByteBuf.writeEnum(mapDecoration.getType());
-                friendlyByteBuf.writeByte(mapDecoration.getX());
-                friendlyByteBuf.writeByte(mapDecoration.getY());
-                friendlyByteBuf.writeByte(mapDecoration.getRot() & 15);
-                friendlyByteBuf.writeNullable(mapDecoration.getName(), FriendlyByteBuf::writeComponent);
+        friendlyByteBuf.writeNullable(this.decorations, (friendlyByteBufx, list) -> friendlyByteBufx.writeCollection(list, (friendlyByteBufIn, mapDecoration) -> {
+                friendlyByteBufIn.writeEnum(mapDecoration.getType());
+                friendlyByteBufIn.writeByte(mapDecoration.getX());
+                friendlyByteBufIn.writeByte(mapDecoration.getY());
+                friendlyByteBufIn.writeByte(mapDecoration.getRot() & 15);
+                friendlyByteBufIn.writeNullable(mapDecoration.getName(), FriendlyByteBuf::writeComponent);
             }));
         if (this.colorPatch != null) {
             friendlyByteBuf.writeByte(this.colorPatch.width);
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerChatPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerChatPacket.java
index 968c07eaa66db201d9098a4bbdb82fe4a8828a5a..f230de302dc496e672f5ccfde9df2fe1f047def4 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerChatPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerChatPacket.java
@@ -14,13 +14,7 @@ import net.minecraft.network.chat.PlayerChatMessage;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.util.Crypt;
 
-public record ClientboundPlayerChatPacket(Component a, Optional<Component> b, int c, ChatSender d, Instant e, Crypt.SaltSignaturePair f) implements Packet<ClientGamePacketListener> {
-    private final Component signedContent;
-    private final Optional<Component> unsignedContent;
-    private final int typeId;
-    private final ChatSender sender;
-    private final Instant timeStamp;
-    private final Crypt.SaltSignaturePair saltSignature;
+public record ClientboundPlayerChatPacket(Component signedContent, Optional<Component> unsignedContent, int typeId, ChatSender sender, Instant timeStamp, Crypt.SaltSignaturePair saltSignature) implements Packet<ClientGamePacketListener> {
     private static final Duration MESSAGE_EXPIRES_AFTER = ServerboundChatPacket.MESSAGE_EXPIRES_AFTER.plus(Duration.ofMinutes(2L));
 
     public ClientboundPlayerChatPacket(FriendlyByteBuf friendlyByteBuf) {
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetDisplayChatPreviewPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetDisplayChatPreviewPacket.java
index 9e929a891d0dc0d10c20c5ed13e1c0fb9949efb6..4c75ebe9346193cfe242a7fc69104624cf77f879 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetDisplayChatPreviewPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetDisplayChatPreviewPacket.java
@@ -3,9 +3,7 @@ package net.minecraft.network.protocol.game;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 
-public record ClientboundSetDisplayChatPreviewPacket(boolean a) implements Packet<ClientGamePacketListener> {
-    private final boolean enabled;
-
+public record ClientboundSetDisplayChatPreviewPacket(boolean enabled) implements Packet<ClientGamePacketListener> {
     public ClientboundSetDisplayChatPreviewPacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readBoolean());
     }
@@ -17,8 +15,4 @@ public record ClientboundSetDisplayChatPreviewPacket(boolean a) implements Packe
     public void handle(ClientGamePacketListener clientGamePacketListener) {
         clientGamePacketListener.handleSetDisplayChatPreview(this);
     }
-
-    public boolean enabled() {
-        return this.enabled;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetSimulationDistancePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetSimulationDistancePacket.java
index d1e274a389d246fe225627e8539428d646ad0d94..5bf2f4e4978a98178802dd71471ecb37685424df 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetSimulationDistancePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetSimulationDistancePacket.java
@@ -3,9 +3,7 @@ package net.minecraft.network.protocol.game;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 
-public record ClientboundSetSimulationDistancePacket(int a) implements Packet<ClientGamePacketListener> {
-    private final int simulationDistance;
-
+public record ClientboundSetSimulationDistancePacket(int simulationDistance) implements Packet<ClientGamePacketListener> {
     public ClientboundSetSimulationDistancePacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readVarInt());
     }
@@ -17,8 +15,4 @@ public record ClientboundSetSimulationDistancePacket(int a) implements Packet<Cl
     public void handle(ClientGamePacketListener clientGamePacketListener) {
         clientGamePacketListener.handleSetSimulationDistance(this);
     }
-
-    public int simulationDistance() {
-        return this.simulationDistance;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSystemChatPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSystemChatPacket.java
index edfc7d6519d31428df4c48728f49491324daf14a..59eb2a71cf6f010aaeff548d8a3666dc686bff78 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSystemChatPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSystemChatPacket.java
@@ -7,10 +7,7 @@ import net.minecraft.network.chat.ChatType;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.Packet;
 
-public record ClientboundSystemChatPacket(Component a, int b) implements Packet<ClientGamePacketListener> {
-    private final Component content;
-    private final int typeId;
-
+public record ClientboundSystemChatPacket(Component content, int typeId) implements Packet<ClientGamePacketListener> {
     public ClientboundSystemChatPacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readComponent(), friendlyByteBuf.readVarInt());
     }
@@ -31,12 +28,4 @@ public record ClientboundSystemChatPacket(Component a, int b) implements Packet<
     public ChatType resolveType(Registry<ChatType> registry) {
         return (ChatType)Objects.requireNonNull((ChatType)registry.byId(this.typeId), "Invalid chat type");
     }
-
-    public Component content() {
-        return this.content;
-    }
-
-    public int typeId() {
-        return this.typeId;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java
index c387a395af335f2bb7395f068165c4d6b2ac5786..5ad7fd0596c3738dd03a2166ce94b4c39515114a 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java
@@ -31,7 +31,7 @@ public class ClientboundUpdateAttributesPacket implements Packet<ClientGamePacke
             ResourceLocation resourceLocation = friendlyByteBufx.readResourceLocation();
             Attribute attribute = Registry.ATTRIBUTE.get(resourceLocation);
             double d = friendlyByteBufx.readDouble();
-            List<AttributeModifier> list = friendlyByteBufx.readList((friendlyByteBuf) -> new AttributeModifier(friendlyByteBuf.readUUID(), "Unknown synced attribute modifier", friendlyByteBuf.readDouble(), AttributeModifier.Operation.fromValue(friendlyByteBuf.readByte())));
+            List<AttributeModifier> list = friendlyByteBufx.readList((friendlyByteBufIn) -> new AttributeModifier(friendlyByteBufIn.readUUID(), "Unknown synced attribute modifier", friendlyByteBufIn.readDouble(), AttributeModifier.Operation.fromValue(friendlyByteBufIn.readByte())));
             return new ClientboundUpdateAttributesPacket.AttributeSnapshot(attribute, d, list);
         });
     }
@@ -41,10 +41,10 @@ public class ClientboundUpdateAttributesPacket implements Packet<ClientGamePacke
         friendlyByteBuf.writeCollection(this.attributes, (friendlyByteBufx, attributeSnapshot) -> {
             friendlyByteBufx.writeResourceLocation(Registry.ATTRIBUTE.getKey(attributeSnapshot.getAttribute()));
             friendlyByteBufx.writeDouble(attributeSnapshot.getBase());
-            friendlyByteBufx.writeCollection(attributeSnapshot.getModifiers(), (friendlyByteBuf, attributeModifier) -> {
-                friendlyByteBuf.writeUUID(attributeModifier.getId());
-                friendlyByteBuf.writeDouble(attributeModifier.getAmount());
-                friendlyByteBuf.writeByte(attributeModifier.getOperation().toValue());
+            friendlyByteBufx.writeCollection(attributeSnapshot.getModifiers(), (friendlyByteBufIn, attributeModifier) -> {
+                friendlyByteBufIn.writeUUID(attributeModifier.getId());
+                friendlyByteBufIn.writeDouble(attributeModifier.getAmount());
+                friendlyByteBufIn.writeByte(attributeModifier.getOperation().toValue());
             });
         });
     }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
index 6b2cffc664aa6729b92e3a4e229684540e692597..af60d0c1be5f61278c34ec3613b6bf49eddfac51 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
@@ -42,6 +42,6 @@ public class ClientboundUpdateRecipesPacket implements Packet<ClientGamePacketLi
     public static <T extends Recipe<?>> void toNetwork(FriendlyByteBuf friendlyByteBuf, T recipe) {
         friendlyByteBuf.writeResourceLocation(Registry.RECIPE_SERIALIZER.getKey(recipe.getSerializer()));
         friendlyByteBuf.writeResourceLocation(recipe.getId());
-        recipe.getSerializer().toNetwork(friendlyByteBuf, recipe);
+        ((RecipeSerializer) recipe.getSerializer()).toNetwork(friendlyByteBuf, recipe);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundChatCommandPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundChatCommandPacket.java
index 6ea14b2fd85cafed3b1a0f90d32e4733f49c8847..8f124121d42a24b8cd03c91301acb808e7c70523 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundChatCommandPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundChatCommandPacket.java
@@ -8,14 +8,9 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.util.StringUtil;
 
-public record ServerboundChatCommandPacket(String a, Instant b, ArgumentSignatures c, boolean d) implements Packet<ServerGamePacketListener> {
-    private final String command;
-    private final Instant timeStamp;
-    private final ArgumentSignatures argumentSignatures;
-    private final boolean signedPreview;
-
+public record ServerboundChatCommandPacket(String command, Instant timeStamp, ArgumentSignatures argumentSignatures, boolean signedPreview) implements Packet<ServerGamePacketListener> {
     public ServerboundChatCommandPacket {
-        s = StringUtil.trimChatMessage(s);
+        command = StringUtil.trimChatMessage(command);
     }
 
     public ServerboundChatCommandPacket(FriendlyByteBuf friendlyByteBuf) {
@@ -36,20 +31,4 @@ public record ServerboundChatCommandPacket(String a, Instant b, ArgumentSignatur
     public CommandSigningContext signingContext(UUID uuid) {
         return new CommandSigningContext.SignedArguments(uuid, this.timeStamp, this.argumentSignatures, this.signedPreview);
     }
-
-    public String command() {
-        return this.command;
-    }
-
-    public Instant timeStamp() {
-        return this.timeStamp;
-    }
-
-    public ArgumentSignatures argumentSignatures() {
-        return this.argumentSignatures;
-    }
-
-    public boolean signedPreview() {
-        return this.signedPreview;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundChatPreviewPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundChatPreviewPacket.java
index 24115e935b167e1cb2cda795bb769a0879b44299..5e3d2da50b58836183ec2d6d0cac99cec44a7b83 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundChatPreviewPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundChatPreviewPacket.java
@@ -4,12 +4,9 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.util.StringUtil;
 
-public record ServerboundChatPreviewPacket(int a, String b) implements Packet<ServerGamePacketListener> {
-    private final int queryId;
-    private final String query;
-
+public record ServerboundChatPreviewPacket(int queryId, String query) implements Packet<ServerGamePacketListener> {
     public ServerboundChatPreviewPacket {
-        s = StringUtil.trimChatMessage(s);
+        query = StringUtil.trimChatMessage(query);
     }
 
     public ServerboundChatPreviewPacket(FriendlyByteBuf friendlyByteBuf) {
@@ -24,12 +21,4 @@ public record ServerboundChatPreviewPacket(int a, String b) implements Packet<Se
     public void handle(ServerGamePacketListener serverGamePacketListener) {
         serverGamePacketListener.handleChatPreview(this);
     }
-
-    public int queryId() {
-        return this.queryId;
-    }
-
-    public String query() {
-        return this.query;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundClientInformationPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundClientInformationPacket.java
index e2f54ea8246ef0aee1cf30af9226621b07182d03..65f0a5d872d90fe9bdd54147f661c38d2ed3b5ad 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundClientInformationPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundClientInformationPacket.java
@@ -5,15 +5,15 @@ import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.entity.HumanoidArm;
 import net.minecraft.world.entity.player.ChatVisiblity;
 
-public record ServerboundClientInformationPacket(String b, int c, ChatVisiblity d, boolean e, int f, HumanoidArm g, boolean h, boolean i) implements Packet<ServerGamePacketListener> {
-    private final String language;
-    private final int viewDistance;
-    private final ChatVisiblity chatVisibility;
-    private final boolean chatColors;
-    private final int modelCustomisation;
-    private final HumanoidArm mainHand;
-    private final boolean textFilteringEnabled;
-    private final boolean allowsListing;
+public record ServerboundClientInformationPacket(
+        String language,
+        int viewDistance,
+        ChatVisiblity chatVisibility,
+        boolean chatColors,
+        int modelCustomisation,
+        HumanoidArm mainHand,
+        boolean textFilteringEnabled,
+        boolean allowsListing) implements Packet<ServerGamePacketListener> {
     public static final int MAX_LANGUAGE_LENGTH = 16;
 
     public ServerboundClientInformationPacket(FriendlyByteBuf friendlyByteBuf) {
@@ -34,36 +34,4 @@ public record ServerboundClientInformationPacket(String b, int c, ChatVisiblity
     public void handle(ServerGamePacketListener serverGamePacketListener) {
         serverGamePacketListener.handleClientInformation(this);
     }
-
-    public String language() {
-        return this.language;
-    }
-
-    public int viewDistance() {
-        return this.viewDistance;
-    }
-
-    public ChatVisiblity chatVisibility() {
-        return this.chatVisibility;
-    }
-
-    public boolean chatColors() {
-        return this.chatColors;
-    }
-
-    public int modelCustomisation() {
-        return this.modelCustomisation;
-    }
-
-    public HumanoidArm mainHand() {
-        return this.mainHand;
-    }
-
-    public boolean textFilteringEnabled() {
-        return this.textFilteringEnabled;
-    }
-
-    public boolean allowsListing() {
-        return this.allowsListing;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/login/ServerboundHelloPacket.java b/src/main/java/net/minecraft/network/protocol/login/ServerboundHelloPacket.java
index a62dc4d661682a52d6818352d6de2b2b34edc9f5..217ed0b86039958945708f8c0860b6233e32a53c 100644
--- a/src/main/java/net/minecraft/network/protocol/login/ServerboundHelloPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/login/ServerboundHelloPacket.java
@@ -5,10 +5,7 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.entity.player.ProfilePublicKey;
 
-public record ServerboundHelloPacket(String a, Optional<ProfilePublicKey.Data> b) implements Packet<ServerLoginPacketListener> {
-    private final String name;
-    private final Optional<ProfilePublicKey.Data> publicKey;
-
+public record ServerboundHelloPacket(String name, Optional<ProfilePublicKey.Data> publicKey) implements Packet<ServerLoginPacketListener> {
     public ServerboundHelloPacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readUtf(16), friendlyByteBuf.readOptional(ProfilePublicKey.Data::new));
     }
diff --git a/src/main/java/net/minecraft/resources/RegistryLoader.java b/src/main/java/net/minecraft/resources/RegistryLoader.java
index bfd36c656be0a12ed1f9d7c2f679cbfbec045241..92770b14203a4c89f08fe94e1998d275ec6fc994 100644
--- a/src/main/java/net/minecraft/resources/RegistryLoader.java
+++ b/src/main/java/net/minecraft/resources/RegistryLoader.java
@@ -78,10 +78,7 @@ public class RegistryLoader {
         return new RegistryLoader.Bound(writable, this);
     }
 
-    public static record Bound(RegistryAccess.Writable a, RegistryLoader b) {
-        private final RegistryAccess.Writable access;
-        private final RegistryLoader loader;
-
+    public static record Bound(RegistryAccess.Writable access, RegistryLoader loader) {
         public <E> DataResult<? extends Registry<E>> overrideRegistryFromResources(ResourceKey<? extends Registry<E>> resourceKey, Codec<E> codec, DynamicOps<JsonElement> dynamicOps) {
             WritableRegistry<E> writableRegistry = this.access.ownedWritableRegistryOrThrow(resourceKey);
             return this.loader.overrideRegistryFromResources(writableRegistry, resourceKey, codec, dynamicOps);
@@ -91,14 +88,6 @@ public class RegistryLoader {
             WritableRegistry<E> writableRegistry = this.access.ownedWritableRegistryOrThrow(resourceKey);
             return this.loader.overrideElementFromResources(writableRegistry, resourceKey, codec, resourceKey2, dynamicOps);
         }
-
-        public RegistryAccess.Writable access() {
-            return this.access;
-        }
-
-        public RegistryLoader loader() {
-            return this.loader;
-        }
     }
 
     static final class ReadCache<E> {
diff --git a/src/main/java/net/minecraft/resources/RegistryOps.java b/src/main/java/net/minecraft/resources/RegistryOps.java
index 008bf2217680acf83d17883b8a6bcbf75387756b..93c81ad3b73fd17e4192b09881d62b9aaa79fef6 100644
--- a/src/main/java/net/minecraft/resources/RegistryOps.java
+++ b/src/main/java/net/minecraft/resources/RegistryOps.java
@@ -35,7 +35,7 @@ public class RegistryOps<T> extends DelegatingOps<T> {
         super(dynamicOps);
         this.loader = optional;
         this.registryAccess = registryAccess;
-        this.asJson = dynamicOps == JsonOps.INSTANCE ? this : new RegistryOps(JsonOps.INSTANCE, registryAccess, optional);
+        this.asJson = dynamicOps == JsonOps.INSTANCE ? (DynamicOps<JsonElement>) this : new RegistryOps<>(JsonOps.INSTANCE, registryAccess, optional);
     }
 
     public <E> Optional<? extends Registry<E>> registry(ResourceKey<? extends Registry<? extends E>> resourceKey) {
@@ -51,9 +51,9 @@ public class RegistryOps<T> extends DelegatingOps<T> {
     }
 
     public static <E> MapCodec<Registry<E>> retrieveRegistry(ResourceKey<? extends Registry<? extends E>> resourceKey) {
-        return ExtraCodecs.retrieveContext((dynamicOps) -> {
+        return (MapCodec<Registry<E>>) ExtraCodecs.retrieveContext((dynamicOps) -> {
             if (dynamicOps instanceof RegistryOps) {
-                RegistryOps<?> registryOps = (RegistryOps)dynamicOps;
+                RegistryOps<?> registryOps = (RegistryOps<?>) dynamicOps;
                 return registryOps.registry(resourceKey).map((registry) -> DataResult.success(registry, registry.elementsLifecycle())).orElseGet(() -> DataResult.error("Unknown registry: " + resourceKey));
             } else {
                 return DataResult.error("Not a registry ops");
diff --git a/src/main/java/net/minecraft/resources/RegistryResourceAccess.java b/src/main/java/net/minecraft/resources/RegistryResourceAccess.java
index b5d2069a2459ab29883c20b95ce3b59b4a5719ff..108190b318952211da4dc696a4eb6ae88ce04c0d 100644
--- a/src/main/java/net/minecraft/resources/RegistryResourceAccess.java
+++ b/src/main/java/net/minecraft/resources/RegistryResourceAccess.java
@@ -40,7 +40,7 @@ public interface RegistryResourceAccess {
                     String s2 = resourceLocation.getPath();
                     String s3 = s2.substring(s.length() + 1, s2.length() - ".json".length());
                     ResourceKey<E> resourceKey2 = ResourceKey.create(resourceKey, new ResourceLocation(resourceLocation.getNamespace(), s3));
-                    map.put(resourceKey2, (RegistryResourceAccess.EntryThunk<>)(dynamicOps, decoder) -> {
+                    map.put(resourceKey2, (dynamicOps, decoder) -> {
                         try {
                             Reader reader = resource.openAsReader();
 
@@ -151,39 +151,20 @@ public interface RegistryResourceAccess {
             RegistryResourceAccess.InMemoryStorage.Entry entry = (RegistryResourceAccess.InMemoryStorage.Entry)this.entries.get(resourceKey);
             if (entry == null) {
                 DataResult<RegistryResourceAccess.ParsedEntry<E>> dataResult = DataResult.error("Unknown element: " + resourceKey);
-                return Optional.of((RegistryResourceAccess.EntryThunk<>)(dynamicOps, decoder) -> dataResult);
+                return Optional.of((dynamicOps, decoder) -> dataResult);
             } else {
                 return Optional.of(entry::parse);
             }
         }
 
-        static record Entry(JsonElement a, int b, Lifecycle c) {
-            private final JsonElement data;
-            private final int id;
-            private final Lifecycle lifecycle;
-
+        static record Entry(JsonElement data, int id, Lifecycle lifecycle) {
             public <E> DataResult<RegistryResourceAccess.ParsedEntry<E>> parse(DynamicOps<JsonElement> dynamicOps, Decoder<E> decoder) {
-                return decoder.parse(dynamicOps, this.data).setLifecycle(this.lifecycle).map((object) -> RegistryResourceAccess.ParsedEntry.createWithId((int)object, this.id));
-            }
-
-            public JsonElement data() {
-                return this.data;
-            }
-
-            public int id() {
-                return this.id;
-            }
-
-            public Lifecycle lifecycle() {
-                return this.lifecycle;
+                return decoder.parse(dynamicOps, this.data).setLifecycle(this.lifecycle).map((object) -> ParsedEntry.createWithId(object, this.id));
             }
         }
     }
 
-    public static record ParsedEntry<E>(E a, OptionalInt b) {
-        private final E value;
-        private final OptionalInt fixedId;
-
+    public static record ParsedEntry<E>(E value, OptionalInt fixedId) {
         public static <E> RegistryResourceAccess.ParsedEntry<E> createWithoutId(E object) {
             return new RegistryResourceAccess.ParsedEntry<>(object, OptionalInt.empty());
         }
@@ -191,13 +172,5 @@ public interface RegistryResourceAccess {
         public static <E> RegistryResourceAccess.ParsedEntry<E> createWithId(E object, int i) {
             return new RegistryResourceAccess.ParsedEntry<>(object, OptionalInt.of(i));
         }
-
-        public E value() {
-            return this.value;
-        }
-
-        public OptionalInt fixedId() {
-            return this.fixedId;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/resources/ResourceKey.java b/src/main/java/net/minecraft/resources/ResourceKey.java
index ef1c467b1bb7f8dd0108db55508f9a0550a5ce24..9d4a233df3110d03f6c4bdf7aeabe834eb956ca3 100644
--- a/src/main/java/net/minecraft/resources/ResourceKey.java
+++ b/src/main/java/net/minecraft/resources/ResourceKey.java
@@ -43,7 +43,7 @@ public class ResourceKey<T> {
     }
 
     public <E> Optional<ResourceKey<E>> cast(ResourceKey<? extends Registry<E>> resourceKey) {
-        return this.isFor(resourceKey) ? Optional.of(this) : Optional.empty();
+        return this.isFor(resourceKey) ? Optional.of((ResourceKey<E>) this) : Optional.empty();
     }
 
     public ResourceLocation location() {
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index d057a07b5f3b007c0b2fe1ef378f5498b5c4f8e3..3ef4b97f18968f75213c7d3ce9276d91b46e26c9 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -139,10 +139,10 @@ public class Main {
                 DataPackConfig dataPackConfig = (DataPackConfig)Objects.requireNonNullElse(levelStorageAccess.getDataPacks(), DataPackConfig.DEFAULT);
                 WorldLoader.PackConfig packConfig = new WorldLoader.PackConfig(packRepository, dataPackConfig, flag);
                 WorldLoader.InitConfig initConfig = new WorldLoader.InitConfig(packConfig, Commands.CommandSelection.DEDICATED, dedicatedServerSettings.getProperties().functionPermissionLevel);
-                worldStem = (WorldStem)Util.blockUntilDone((executor) -> WorldStem.load(initConfig, (resourceManager, dataPackConfig) -> {
+                worldStem = (WorldStem)Util.blockUntilDone((executor) -> WorldStem.load(initConfig, (resourceManager, dataPackConfigIn) -> {
                         RegistryAccess.Writable writable = RegistryAccess.builtinCopy();
                         DynamicOps<Tag> dynamicOps = RegistryOps.createAndLoad(NbtOps.INSTANCE, writable, resourceManager);
-                        WorldData worldData = levelStorageAccess.getDataTag(dynamicOps, dataPackConfig, writable.allElementsLifecycle());
+                        WorldData worldData = levelStorageAccess.getDataTag(dynamicOps, dataPackConfigIn, writable.allElementsLifecycle());
                         if (worldData != null) {
                             return Pair.of(worldData, writable.freeze());
                         } else {
@@ -153,7 +153,7 @@ public class Main {
                                 worldGenSettings = WorldPresets.demoSettings(writable);
                             } else {
                                 DedicatedServerProperties dedicatedServerProperties = dedicatedServerSettings.getProperties();
-                                levelSettings = new LevelSettings(dedicatedServerProperties.levelName, dedicatedServerProperties.gamemode, dedicatedServerProperties.hardcore, dedicatedServerProperties.difficulty, false, new GameRules(), dataPackConfig);
+                                levelSettings = new LevelSettings(dedicatedServerProperties.levelName, dedicatedServerProperties.gamemode, dedicatedServerProperties.hardcore, dedicatedServerProperties.difficulty, false, new GameRules(), dataPackConfigIn);
                                 worldGenSettings = optionSet.has(optionSpec4) ? dedicatedServerProperties.getWorldGenSettings(writable).withBonusChest() : dedicatedServerProperties.getWorldGenSettings(writable);
                             }
 
@@ -175,17 +175,17 @@ public class Main {
 
             levelStorageAccess.saveDataTag(frozen, worldData);
             final DedicatedServer dedicatedServer = MinecraftServer.spin((threadx) -> {
-                DedicatedServer dedicatedServer = new DedicatedServer(threadx, levelStorageAccess, packRepository, worldStem, dedicatedServerSettings, DataFixers.getDataFixer(), services, LoggerChunkProgressListener::new);
-                dedicatedServer.setSingleplayerProfile(optionSet.has(optionSpec9) ? new GameProfile((UUID)null, (String)optionSet.valueOf(optionSpec9)) : null);
-                dedicatedServer.setPort(optionSet.valueOf(optionSpec12));
-                dedicatedServer.setDemo(optionSet.has(optionSpec3));
-                dedicatedServer.setId((String)optionSet.valueOf(optionSpec13));
-                boolean flag = !optionSet.has(optionSpec) && !optionSet.valuesOf(optionSpec15).contains("nogui");
-                if (flag && !GraphicsEnvironment.isHeadless()) {
-                    dedicatedServer.showGui();
+                DedicatedServer dedicatedServerIn = new DedicatedServer(threadx, levelStorageAccess, packRepository, worldStem, dedicatedServerSettings, DataFixers.getDataFixer(), services, LoggerChunkProgressListener::new);
+                dedicatedServerIn.setSingleplayerProfile(optionSet.has(optionSpec9) ? new GameProfile((UUID)null, (String)optionSet.valueOf(optionSpec9)) : null);
+                dedicatedServerIn.setPort(optionSet.valueOf(optionSpec12));
+                dedicatedServerIn.setDemo(optionSet.has(optionSpec3));
+                dedicatedServerIn.setId((String)optionSet.valueOf(optionSpec13));
+                boolean nogui = !optionSet.has(optionSpec) && !optionSet.valuesOf(optionSpec15).contains("nogui");
+                if (nogui && !GraphicsEnvironment.isHeadless()) {
+                    dedicatedServerIn.showGui();
                 }
 
-                return dedicatedServer;
+                return dedicatedServerIn;
             });
             Thread thread = new Thread("Server Shutdown Thread") {
                 public void run() {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 31b5a845fca90aeabb16b756fca63d0b7aca0ab4..0c44eac4c2cd68753f31555425b38193ed7ddab9 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -737,7 +737,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
     }
 
-    protected void doRunTask(TickTask tickTask) {
+    public void doRunTask(TickTask tickTask) {
         this.getProfiler().incrementCounter("runTask");
         super.doRunTask(tickTask);
     }
@@ -1736,46 +1736,13 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         return ChatDecorator.PLAIN;
     }
 
-    static record ReloadableResources(CloseableResourceManager a, ReloadableServerResources b) implements AutoCloseable {
-        final CloseableResourceManager resourceManager;
-        final ReloadableServerResources managers;
-
+    static record ReloadableResources(CloseableResourceManager resourceManager, ReloadableServerResources managers) implements AutoCloseable {
         public void close() {
             this.resourceManager.close();
         }
-
-        public CloseableResourceManager resourceManager() {
-            return this.resourceManager;
-        }
-
-        public ReloadableServerResources managers() {
-            return this.managers;
-        }
     }
 
-    public static record ServerResourcePackInfo(String a, String b, boolean c, @Nullable Component d) {
-        private final String url;
-        private final String hash;
-        private final boolean isRequired;
-        @Nullable
-        private final Component prompt;
-
-        public String url() {
-            return this.url;
-        }
-
-        public String hash() {
-            return this.hash;
-        }
-
-        public boolean isRequired() {
-            return this.isRequired;
-        }
-
-        @Nullable
-        public Component prompt() {
-            return this.prompt;
-        }
+    public static record ServerResourcePackInfo(String url, String hash, boolean isRequired, @Nullable Component prompt) {
     }
 
     static class TimeProfiler {
diff --git a/src/main/java/net/minecraft/server/ServerFunctionLibrary.java b/src/main/java/net/minecraft/server/ServerFunctionLibrary.java
index 723a370509b593c044ceff305a3b36d24ff3c0d0..b34bfd17cb9091a7239c3fb3cf0d48dda3039089 100644
--- a/src/main/java/net/minecraft/server/ServerFunctionLibrary.java
+++ b/src/main/java/net/minecraft/server/ServerFunctionLibrary.java
@@ -86,7 +86,7 @@ public class ServerFunctionLibrary implements PreparableReloadListener {
         return completableFuture.thenCombine(completableFuture2, Pair::of).thenCompose(preparationBarrier::wait).thenAcceptAsync((pair) -> {
             Map<ResourceLocation, CompletableFuture<CommandFunction>> map = pair.getSecond();
             Builder<ResourceLocation, CommandFunction> builder = ImmutableMap.builder();
-            map.forEach((resourceLocation, completableFuture) -> completableFuture.handle((commandFunction, throwable) -> {
+            map.forEach((resourceLocation, completableFutureIn) -> completableFutureIn.handle((commandFunction, throwable) -> {
                     if (throwable != null) {
                         LOGGER.error("Failed to load function {}", resourceLocation, throwable);
                     } else {
diff --git a/src/main/java/net/minecraft/server/Services.java b/src/main/java/net/minecraft/server/Services.java
index d89665d9bd43f0bd0437e87e36aeb1563e6feb60..1932741cf5e56c912d05cb683190086cd980e923 100644
--- a/src/main/java/net/minecraft/server/Services.java
+++ b/src/main/java/net/minecraft/server/Services.java
@@ -7,11 +7,7 @@ import java.io.File;
 import net.minecraft.server.players.GameProfileCache;
 import net.minecraft.util.SignatureValidator;
 
-public record Services(MinecraftSessionService a, SignatureValidator b, GameProfileRepository c, GameProfileCache d) {
-    private final MinecraftSessionService sessionService;
-    private final SignatureValidator serviceSignatureValidator;
-    private final GameProfileRepository profileRepository;
-    private final GameProfileCache profileCache;
+public record Services(MinecraftSessionService sessionService, SignatureValidator serviceSignatureValidator, GameProfileRepository profileRepository, GameProfileCache profileCache) {
     private static final String USERID_CACHE_FILE = "usercache.json";
 
     public static Services create(YggdrasilAuthenticationService yggdrasilAuthenticationService, File file) {
@@ -21,20 +17,4 @@ public record Services(MinecraftSessionService a, SignatureValidator b, GameProf
         SignatureValidator signatureValidator = SignatureValidator.from(yggdrasilAuthenticationService.getServicesKey());
         return new Services(minecraftSessionService, signatureValidator, gameProfileRepository, gameProfileCache);
     }
-
-    public MinecraftSessionService sessionService() {
-        return this.sessionService;
-    }
-
-    public SignatureValidator serviceSignatureValidator() {
-        return this.serviceSignatureValidator;
-    }
-
-    public GameProfileRepository profileRepository() {
-        return this.profileRepository;
-    }
-
-    public GameProfileCache profileCache() {
-        return this.profileCache;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/WorldLoader.java b/src/main/java/net/minecraft/server/WorldLoader.java
index 60f986e2976933753eaad5698d5b72de4cb49620..b4e3e65cf77e119d707eb638b45c29e673d2233d 100644
--- a/src/main/java/net/minecraft/server/WorldLoader.java
+++ b/src/main/java/net/minecraft/server/WorldLoader.java
@@ -36,47 +36,16 @@ public class WorldLoader {
         }
     }
 
-    public static record InitConfig(WorldLoader.PackConfig a, Commands.CommandSelection b, int c) {
-        final WorldLoader.PackConfig packConfig;
-        private final Commands.CommandSelection commandSelection;
-        private final int functionCompilationLevel;
-
-        public WorldLoader.PackConfig packConfig() {
-            return this.packConfig;
-        }
-
-        public Commands.CommandSelection commandSelection() {
-            return this.commandSelection;
-        }
-
-        public int functionCompilationLevel() {
-            return this.functionCompilationLevel;
-        }
+    public static record InitConfig(WorldLoader.PackConfig packConfig, Commands.CommandSelection commandSelection, int functionCompilationLevel) {
     }
 
-    public static record PackConfig(PackRepository a, DataPackConfig b, boolean c) {
-        private final PackRepository packRepository;
-        private final DataPackConfig initialDataPacks;
-        private final boolean safeMode;
-
+    public static record PackConfig(PackRepository packRepository, DataPackConfig initialDataPacks, boolean safeMode) {
         public Pair<DataPackConfig, CloseableResourceManager> createResourceManager() {
             DataPackConfig dataPackConfig = MinecraftServer.configurePackRepository(this.packRepository, this.initialDataPacks, this.safeMode);
             List<PackResources> list = this.packRepository.openAllSelected();
             CloseableResourceManager closeableResourceManager = new MultiPackResourceManager(PackType.SERVER_DATA, list);
             return Pair.of(dataPackConfig, closeableResourceManager);
         }
-
-        public PackRepository packRepository() {
-            return this.packRepository;
-        }
-
-        public DataPackConfig initialDataPacks() {
-            return this.initialDataPacks;
-        }
-
-        public boolean safeMode() {
-            return this.safeMode;
-        }
     }
 
     @FunctionalInterface
diff --git a/src/main/java/net/minecraft/server/WorldStem.java b/src/main/java/net/minecraft/server/WorldStem.java
index 181da80281ca5107658d1f94993d7dd5a7771ae8..041461582c8cb9cb4f59765556b846d58efd3190 100644
--- a/src/main/java/net/minecraft/server/WorldStem.java
+++ b/src/main/java/net/minecraft/server/WorldStem.java
@@ -6,12 +6,7 @@ import net.minecraft.core.RegistryAccess;
 import net.minecraft.server.packs.resources.CloseableResourceManager;
 import net.minecraft.world.level.storage.WorldData;
 
-public record WorldStem(CloseableResourceManager a, ReloadableServerResources b, RegistryAccess.Frozen c, WorldData d) implements AutoCloseable {
-    private final CloseableResourceManager resourceManager;
-    private final ReloadableServerResources dataPackResources;
-    private final RegistryAccess.Frozen registryAccess;
-    private final WorldData worldData;
-
+public record WorldStem(CloseableResourceManager resourceManager, ReloadableServerResources dataPackResources, RegistryAccess.Frozen registryAccess, WorldData worldData) implements AutoCloseable {
     public static CompletableFuture<WorldStem> load(WorldLoader.InitConfig initConfig, WorldLoader.WorldDataSupplier<WorldData> worldDataSupplier, Executor executor, Executor executor2) {
         return WorldLoader.load(initConfig, worldDataSupplier, WorldStem::new, executor, executor2);
     }
@@ -19,20 +14,4 @@ public record WorldStem(CloseableResourceManager a, ReloadableServerResources b,
     public void close() {
         this.resourceManager.close();
     }
-
-    public CloseableResourceManager resourceManager() {
-        return this.resourceManager;
-    }
-
-    public ReloadableServerResources dataPackResources() {
-        return this.dataPackResources;
-    }
-
-    public RegistryAccess.Frozen registryAccess() {
-        return this.registryAccess;
-    }
-
-    public WorldData worldData() {
-        return this.worldData;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/chase/ChaseClient.java b/src/main/java/net/minecraft/server/chase/ChaseClient.java
index b3caf2e051a265286e12c75485e3467c66d493e2..8b2c7ad1a3a234d91477184a5a7ccc59e2228407 100644
--- a/src/main/java/net/minecraft/server/chase/ChaseClient.java
+++ b/src/main/java/net/minecraft/server/chase/ChaseClient.java
@@ -173,21 +173,5 @@ public class ChaseClient {
         });
     }
 
-    static record TeleportTarget(ResourceKey<Level> a, Vec3 b, Vec2 c) {
-        final ResourceKey<Level> level;
-        final Vec3 pos;
-        final Vec2 rot;
-
-        public ResourceKey<Level> level() {
-            return this.level;
-        }
-
-        public Vec3 pos() {
-            return this.pos;
-        }
-
-        public Vec2 rot() {
-            return this.rot;
-        }
-    }
+    static record TeleportTarget(ResourceKey<Level> level, Vec3 pos, Vec2 rot) {}
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/chase/ChaseServer.java b/src/main/java/net/minecraft/server/chase/ChaseServer.java
index 0419a9ba23af7ba0176f692c8bfc6f3885c2cf50..a2e6d4a710759c812970bb980e83593347dfc1d6 100644
--- a/src/main/java/net/minecraft/server/chase/ChaseServer.java
+++ b/src/main/java/net/minecraft/server/chase/ChaseServer.java
@@ -142,40 +142,9 @@ public class ChaseServer {
         }
     }
 
-    static record PlayerPosition(String a, double b, double c, double d, float e, float f) {
-        private final String dimensionName;
-        private final double x;
-        private final double y;
-        private final double z;
-        private final float yRot;
-        private final float xRot;
-
+    static record PlayerPosition(String dimensionName, double x, double y, double z, float yRot, float xRot) {
         String format() {
             return String.format(Locale.ROOT, "t %s %.2f %.2f %.2f %.2f %.2f\n", this.dimensionName, this.x, this.y, this.z, this.yRot, this.xRot);
         }
-
-        public String dimensionName() {
-            return this.dimensionName;
-        }
-
-        public double x() {
-            return this.x;
-        }
-
-        public double y() {
-            return this.y;
-        }
-
-        public double z() {
-            return this.z;
-        }
-
-        public float yRot() {
-            return this.yRot;
-        }
-
-        public float xRot() {
-            return this.xRot;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/commands/LocateCommand.java b/src/main/java/net/minecraft/server/commands/LocateCommand.java
index 00111cb0437361ff0d8c06a6b07d2b34fb285f59..18ac333c258b345d3b17766f3fc668c37cf7fe44 100644
--- a/src/main/java/net/minecraft/server/commands/LocateCommand.java
+++ b/src/main/java/net/minecraft/server/commands/LocateCommand.java
@@ -82,7 +82,7 @@ public class LocateCommand {
 
     public static int showLocateResult(CommandSourceStack commandSourceStack, ResourceOrTagLocationArgument.Result<?> result, BlockPos blockPos, Pair<BlockPos, ? extends Holder<?>> pair, String s, boolean flag) {
         BlockPos blockPos2 = (BlockPos)pair.getFirst();
-        String s2 = (String)result.unwrap().map((resourceKey) -> resourceKey.location().toString(), (tagKey) -> "#" + tagKey.location() + " (" + (String)((Holder)pair.getSecond()).unwrapKey().map((resourceKey) -> resourceKey.location().toString()).orElse("[unregistered]") + ")");
+        String s2 = (String)result.unwrap().map((resourceKey) -> resourceKey.location().toString(), (tagKey) -> "#" + tagKey.location() + " (" + pair.getSecond().unwrapKey().map((resourceKey) -> resourceKey.location().toString()).orElse("[unregistered]") + ")");
         int i = flag ? Mth.floor(Mth.sqrt((float)blockPos.distSqr(blockPos2))) : Mth.floor(dist(blockPos.getX(), blockPos.getZ(), blockPos2.getX(), blockPos2.getZ()));
         String s3 = flag ? String.valueOf(blockPos2.getY()) : "~";
         Component component = ComponentUtils.wrapInSquareBrackets(Component.translatable("chat.coordinates", blockPos2.getX(), s3, blockPos2.getZ())).withStyle((style) -> style.withColor(ChatFormatting.GREEN).withClickEvent(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, "/tp @s " + blockPos2.getX() + " " + s3 + " " + blockPos2.getZ())).withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, Component.translatable("chat.coordinates.tooltip"))));
diff --git a/src/main/java/net/minecraft/server/commands/data/DataCommands.java b/src/main/java/net/minecraft/server/commands/data/DataCommands.java
index 8927a0169664407f15cb78a9b3ea3c24ddb3d794..dee9015a48f4ed2c598573617b66fe20de8680f0 100644
--- a/src/main/java/net/minecraft/server/commands/data/DataCommands.java
+++ b/src/main/java/net/minecraft/server/commands/data/DataCommands.java
@@ -119,7 +119,7 @@ public class DataCommands {
                 ArgumentBuilder<CommandSourceStack, ?> argumentBuilder2 = Commands.argument("targetPath", NbtPathArgument.nbtPath());
 
                 for(DataCommands.DataProvider dataProvider2 : SOURCE_PROVIDERS) {
-                    biConsumer.accept(argumentBuilder2, (DataCommands.DataManipulatorDecorator)(dataManipulator) -> dataProvider2.wrap(Commands.literal("from"), (argumentBuilder) -> argumentBuilder.executes((commandContext) -> {
+                    biConsumer.accept(argumentBuilder2, (DataCommands.DataManipulatorDecorator)(dataManipulator) -> dataProvider2.wrap(Commands.literal("from"), (argumentBuilderIn) -> argumentBuilderIn.executes((commandContext) -> {
                                 List<Tag> list = Collections.singletonList(dataProvider2.access(commandContext).getData());
                                 return manipulateData(commandContext, dataProvider, dataManipulator, list);
                             }).then(Commands.argument("sourcePath", NbtPathArgument.nbtPath()).executes((commandContext) -> {
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
index 08d5c729b87f962dc72954b3804df8f1d73a1297..51423aa470764ea16c0c10a0480ea9c4f276024d 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
@@ -156,25 +156,21 @@ public class DedicatedServerProperties extends Settings<DedicatedServerPropertie
         return this.worldGenSettings;
     }
 
-    public static record WorldGenProperties(String a, JsonObject b, boolean c, String d) {
-        private final String levelSeed;
-        private final JsonObject generatorSettings;
-        private final boolean generateStructures;
-        private final String levelType;
+    public static record WorldGenProperties(String levelSeed, JsonObject generatorSettings, boolean generateStructures, String levelType) {
         private static final Map<String, ResourceKey<WorldPreset>> LEGACY_PRESET_NAMES = Map.of("default", WorldPresets.NORMAL, "largebiomes", WorldPresets.LARGE_BIOMES);
 
         public WorldGenSettings create(RegistryAccess registryAccess) {
             long l = WorldGenSettings.parseSeed(this.levelSeed()).orElse(RandomSource.create().nextLong());
             Registry<WorldPreset> registry = registryAccess.registryOrThrow(Registry.WORLD_PRESET_REGISTRY);
-            Holder<WorldPreset> holder = (Holder)registry.getHolder(WorldPresets.NORMAL).or(() -> registry.holders().findAny()).orElseThrow(() -> new IllegalStateException("Invalid datapack contents: can't find default preset"));
-            Holder<WorldPreset> holder2 = (Holder)Optional.ofNullable(ResourceLocation.tryParse(this.levelType)).map((resourceLocation) -> ResourceKey.create(Registry.WORLD_PRESET_REGISTRY, resourceLocation)).or(() -> Optional.ofNullable((ResourceKey)LEGACY_PRESET_NAMES.get(this.levelType))).flatMap(registry::getHolder).orElseGet(() -> {
+            Holder<WorldPreset> holder = registry.getHolder(WorldPresets.NORMAL).or(() -> registry.holders().findAny()).orElseThrow(() -> new IllegalStateException("Invalid datapack contents: can't find default preset"));
+            Holder<WorldPreset> holder2 = Optional.ofNullable(ResourceLocation.tryParse(this.levelType)).map((resourceLocation) -> ResourceKey.create(Registry.WORLD_PRESET_REGISTRY, resourceLocation)).or(() -> Optional.ofNullable(LEGACY_PRESET_NAMES.get(this.levelType))).flatMap(registry::getHolder).orElseGet(() -> {
                 DedicatedServerProperties.LOGGER.warn("Failed to parse level-type {}, defaulting to {}", this.levelType, holder.unwrapKey().map((resourceKey) -> resourceKey.location().toString()).orElse("[unnamed]"));
                 return holder;
             });
             WorldGenSettings worldGenSettings = holder2.value().createWorldGenSettings(l, this.generateStructures, false);
             if (holder2.is(WorldPresets.FLAT)) {
                 RegistryOps<JsonElement> registryOps = RegistryOps.create(JsonOps.INSTANCE, registryAccess);
-                Optional<FlatLevelGeneratorSettings> optional = FlatLevelGeneratorSettings.CODEC.parse(new Dynamic(registryOps, this.generatorSettings())).resultOrPartial(DedicatedServerProperties.LOGGER::error);
+                Optional<FlatLevelGeneratorSettings> optional = FlatLevelGeneratorSettings.CODEC.parse(new Dynamic<>(registryOps, this.generatorSettings())).resultOrPartial(DedicatedServerProperties.LOGGER::error);
                 if (optional.isPresent()) {
                     Registry<StructureSet> registry2 = registryAccess.registryOrThrow(Registry.STRUCTURE_SET_REGISTRY);
                     return WorldGenSettings.replaceOverworldGenerator(registryAccess, worldGenSettings, new FlatLevelSource(registry2, (FlatLevelGeneratorSettings)optional.get()));
@@ -183,21 +179,5 @@ public class DedicatedServerProperties extends Settings<DedicatedServerPropertie
 
             return worldGenSettings;
         }
-
-        public String levelSeed() {
-            return this.levelSeed;
-        }
-
-        public JsonObject generatorSettings() {
-            return this.generatorSettings;
-        }
-
-        public boolean generateStructures() {
-            return this.generateStructures;
-        }
-
-        public String levelType() {
-            return this.levelType;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/dedicated/Settings.java b/src/main/java/net/minecraft/server/dedicated/Settings.java
index 945e8be448a1b52511562e4a3b51bb6b8ea49457..ffd4ee5ee4d86096227076a81ed848747c6efabd 100644
--- a/src/main/java/net/minecraft/server/dedicated/Settings.java
+++ b/src/main/java/net/minecraft/server/dedicated/Settings.java
@@ -85,7 +85,7 @@ public abstract class Settings<T extends Settings<T>> {
     private static <V extends Number> Function<String, V> wrapNumberDeserializer(Function<String, V> function) {
         return (s) -> {
             try {
-                return (Number)function.apply(s);
+                return function.apply(s);
             } catch (NumberFormatException var3) {
                 return null;
             }
@@ -129,13 +129,13 @@ public abstract class Settings<T extends Settings<T>> {
         String s2 = this.getStringRaw(s);
         V object2 = (V)MoreObjects.firstNonNull(s2 != null ? function.apply(s2) : null, object);
         this.properties.put(s, function2.apply(object2));
-        return new Settings.MutableValue<>(s, object2, function2);
+        return new Settings.MutableValue(s, object2, function2);
     }
 
     protected <V> V get(String s, Function<String, V> function, UnaryOperator<V> unaryOperator, Function<V, String> function2, V object) {
         return this.get(s, (sx) -> {
-            V object = (V)function.apply(sx);
-            return object != null ? unaryOperator.apply(object) : null;
+            V o = (V)function.apply(sx);
+            return o != null ? unaryOperator.apply(o) : null;
         }, function2, object);
     }
 
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 113f4bcadcff5b04fbda7ce7133af35ac48623d4..e9495b6745ee93aed02034425de72fa13d0d029c 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -290,7 +290,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
         CompletableFuture<List<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> completableFuture2 = Util.sequence(list);
         CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> completableFuture3 = completableFuture2.thenApply((listx) -> {
-            List<ChunkAccess> list2 = Lists.newArrayList();
+            List<ChunkAccess> list2In = Lists.newArrayList();
             int i4 = 0;
 
             for(final Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> either : listx) {
@@ -308,11 +308,11 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                     });
                 }
 
-                list2.add((ChunkAccess)optional.get());
+                list2In.add((ChunkAccess)optional.get());
                 ++i4;
             }
 
-            return Either.left(list2);
+            return Either.left(list2In);
         });
 
         for(ChunkHolder chunkHolder2 : list2) {
@@ -541,9 +541,9 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             if (optional.isPresent()) {
                 ChunkAccess chunkAccess = ChunkSerializer.read(this.level, this.poiManager, chunkPos, (CompoundTag)optional.get());
                 this.markPosition(chunkPos, chunkAccess.getStatus().getChunkType());
-                return Either.left(chunkAccess);
+                return Either.<ChunkAccess, ChunkHolder.ChunkLoadingFailure>left(chunkAccess);
             } else {
-                return Either.left(this.createEmptyChunk(chunkPos));
+                return Either.<ChunkAccess, ChunkHolder.ChunkLoadingFailure>left(this.createEmptyChunk(chunkPos));
             }
         }, this.mainThreadExecutor).exceptionallyAsync((throwable) -> this.handleChunkLoadFailure(throwable, chunkPos), this.mainThreadExecutor);
     }
@@ -587,11 +587,11 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> completableFuture = this.getChunkRangeFuture(chunkPos, chunkStatus.getRange(), (i) -> this.getDependencyStatus(chunkStatus, i));
         this.level.getProfiler().incrementCounter((Supplier<String>)(() -> "chunkGenerate " + chunkStatus.getName()));
         Executor executor = (runnable) -> this.worldgenMailbox.tell(ChunkTaskPriorityQueueSorter.message(chunkHolder, runnable));
-        return completableFuture.thenComposeAsync((either) -> (CompletionStage)either.map((list) -> {
+        return completableFuture.thenComposeAsync((either) -> either.map((list) -> {
                 try {
-                    CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completableFuture = chunkStatus.generate(executor, this.level, this.generator, this.structureTemplateManager, this.lightEngine, (chunkAccess) -> this.protoChunkToFullChunk(chunkHolder), list, false);
+                    CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completableFutureIn = chunkStatus.generate(executor, this.level, this.generator, this.structureTemplateManager, this.lightEngine, (chunkAccess) -> this.protoChunkToFullChunk(chunkHolder), list, false);
                     this.progressListener.onStatusChange(chunkPos, chunkStatus);
-                    return completableFuture;
+                    return completableFutureIn;
                 } catch (Exception var9) {
                     var9.getStackTrace();
                     CrashReport crashReport = CrashReport.forThrowable(var9, "Exception generating new chunk");
@@ -643,7 +643,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                 if (protoChunk instanceof ImposterProtoChunk) {
                     levelChunk = ((ImposterProtoChunk)protoChunk).getWrapped();
                 } else {
-                    levelChunk = new LevelChunk(this.level, protoChunk, (levelChunk) -> postLoadProtoChunk(this.level, protoChunk.getEntities()));
+                    levelChunk = new LevelChunk(this.level, protoChunk, (levelChunkIn) -> postLoadProtoChunk(this.level, protoChunk.getEntities()));
                     chunkHolder.replaceProtoChunk(new ImposterProtoChunk(levelChunk, false));
                 }
 
@@ -950,7 +950,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             }
         }
 
-        int i = SectionPos.blockToSectionCoord(serverPlayer.getBlockX());
+        int iIn = SectionPos.blockToSectionCoord(serverPlayer.getBlockX());
         int i2 = SectionPos.blockToSectionCoord(serverPlayer.getBlockZ());
         SectionPos sectionPos = serverPlayer.getLastSectionPos();
         SectionPos sectionPos2 = SectionPos.of(serverPlayer);
@@ -984,16 +984,16 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
         int i3 = sectionPos.x();
         int i4 = sectionPos.z();
-        if (Math.abs(i3 - i) <= this.viewDistance * 2 && Math.abs(i4 - i2) <= this.viewDistance * 2) {
-            int i5 = Math.min(i, i3) - this.viewDistance - 1;
+        if (Math.abs(i3 - iIn) <= this.viewDistance * 2 && Math.abs(i4 - i2) <= this.viewDistance * 2) {
+            int i5 = Math.min(iIn, i3) - this.viewDistance - 1;
             int i6 = Math.min(i2, i4) - this.viewDistance - 1;
-            int i7 = Math.max(i, i3) + this.viewDistance + 1;
+            int i7 = Math.max(iIn, i3) + this.viewDistance + 1;
             int i8 = Math.max(i2, i4) + this.viewDistance + 1;
 
             for(int i9 = i5; i9 <= i7; ++i9) {
                 for(int i10 = i6; i10 <= i8; ++i10) {
                     boolean flag4 = isChunkInRange(i9, i10, i3, i4, this.viewDistance);
-                    boolean flag5 = isChunkInRange(i9, i10, i, i2, this.viewDistance);
+                    boolean flag5 = isChunkInRange(i9, i10, iIn, i2, this.viewDistance);
                     this.updateChunkTracking(serverPlayer, new ChunkPos(i9, i10), new MutableObject(), flag4, flag5);
                 }
             }
@@ -1008,9 +1008,9 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                 }
             }
 
-            for(int i13 = i - this.viewDistance - 1; i13 <= i + this.viewDistance + 1; ++i13) {
+            for(int i13 = iIn - this.viewDistance - 1; i13 <= iIn + this.viewDistance + 1; ++i13) {
                 for(int i14 = i2 - this.viewDistance - 1; i14 <= i2 + this.viewDistance + 1; ++i14) {
-                    if (isChunkInRange(i13, i14, i, i2, this.viewDistance)) {
+                    if (isChunkInRange(i13, i14, iIn, i2, this.viewDistance)) {
                         boolean flag8 = false;
                         boolean flag9 = true;
                         this.updateChunkTracking(serverPlayer, new ChunkPos(i13, i14), new MutableObject(), false, true);
diff --git a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java
index eec3d990ced630be3e153dda0ba32b2ceb82f489..b42bdefb9648aa7a6ef057b366a6fac11521ab66 100644
--- a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java
+++ b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java
@@ -16,7 +16,7 @@ import net.minecraft.world.level.ChunkPos;
 
 public class ChunkTaskPriorityQueue<T> {
     public static final int PRIORITY_LEVEL_COUNT = ChunkMap.MAX_CHUNK_DISTANCE + 2;
-    private final List<Long2ObjectLinkedOpenHashMap<List<Optional<T>>>> taskQueue = IntStream.range(0, PRIORITY_LEVEL_COUNT).mapToObj((ix) -> new Long2ObjectLinkedOpenHashMap()).collect(Collectors.toList());
+    private final List<Long2ObjectLinkedOpenHashMap<List<Optional<T>>>> taskQueue = IntStream.range(0, PRIORITY_LEVEL_COUNT).mapToObj((ix) -> new Long2ObjectLinkedOpenHashMap<List<Optional<T>>>()).collect(Collectors.toList());
     private volatile int firstQueue = PRIORITY_LEVEL_COUNT;
     private final String name;
     private final LongSet acquired = new LongOpenHashSet();
diff --git a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
index f387b3a28c194ae1c3b08bd1d76145ea285631c9..95f9813ab912e1ff7e9f9a726e4c34af8a1d7515 100644
--- a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
+++ b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
@@ -44,7 +44,7 @@ public class ChunkTaskPriorityQueueSorter implements ChunkHolder.LevelChangeList
     }
 
     public static ChunkTaskPriorityQueueSorter.Message<Runnable> message(Runnable runnable, long l, IntSupplier intSupplier) {
-        return new ChunkTaskPriorityQueueSorter.Message((processorHandle) -> () -> {
+        return new ChunkTaskPriorityQueueSorter.Message<>((processorHandle) -> () -> {
                 runnable.run();
                 processorHandle.tell(Unit.INSTANCE);
             }, l, intSupplier);
@@ -65,12 +65,12 @@ public class ChunkTaskPriorityQueueSorter implements ChunkHolder.LevelChangeList
     public <T> ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<T>> getProcessor(ProcessorHandle<T> processorHandle, boolean flag) {
         return (ProcessorHandle)this.mailbox.ask((processorHandle2) -> new StrictQueue.IntRunnable(0, () -> {
                 this.getQueue(processorHandle);
-                processorHandle2.tell(ProcessorHandle.of("chunk priority sorter around " + processorHandle.name(), (message) -> this.submit(processorHandle, message.task, message.pos, message.level, flag)));
+                processorHandle2.tell(ProcessorHandle.<Message<T>>of("chunk priority sorter around " + processorHandle.name(), (message) -> this.submit(processorHandle, message.task, message.pos, message.level, flag)));
             })).join();
     }
 
     public ProcessorHandle<ChunkTaskPriorityQueueSorter.Release> getReleaseProcessor(ProcessorHandle<Runnable> processorHandle) {
-        return (ProcessorHandle)this.mailbox.ask((processorHandle2) -> new StrictQueue.IntRunnable(0, () -> processorHandle2.tell(ProcessorHandle.of("chunk priority sorter around " + processorHandle.name(), (release) -> this.release(processorHandle, release.pos, release.task, release.clearQueue))))).join();
+        return (ProcessorHandle)this.mailbox.ask((processorHandle2) -> new StrictQueue.IntRunnable(0, () -> processorHandle2.tell(ProcessorHandle.<Release>of("chunk priority sorter around " + processorHandle.name(), (release) -> this.release(processorHandle, release.pos, release.task, release.clearQueue))))).join();
     }
 
     public void onLevelChange(ChunkPos chunkPos, IntSupplier intSupplier, int i, IntConsumer intConsumer) {
@@ -127,9 +127,9 @@ public class ChunkTaskPriorityQueueSorter implements ChunkHolder.LevelChangeList
     private <T> ChunkTaskPriorityQueue<Function<ProcessorHandle<Unit>, T>> getQueue(ProcessorHandle<T> processorHandle) {
         ChunkTaskPriorityQueue<? extends Function<ProcessorHandle<Unit>, ?>> chunkTaskPriorityQueue = (ChunkTaskPriorityQueue)this.queues.get(processorHandle);
         if (chunkTaskPriorityQueue == null) {
-            throw (IllegalArgumentException)Util.pauseInIde((T)(new IllegalArgumentException("No queue for: " + processorHandle)));
+            throw Util.pauseInIde(new IllegalArgumentException("No queue for: " + processorHandle));
         } else {
-            return chunkTaskPriorityQueue;
+            return (ChunkTaskPriorityQueue<Function<ProcessorHandle<Unit>, T>>) chunkTaskPriorityQueue;
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/level/ColumnPos.java b/src/main/java/net/minecraft/server/level/ColumnPos.java
index 2cf93087462cc5e1c8a3e802424bfb5538ed425f..b4d015fc6f5f43b4b03702be262857adc6ca7065 100644
--- a/src/main/java/net/minecraft/server/level/ColumnPos.java
+++ b/src/main/java/net/minecraft/server/level/ColumnPos.java
@@ -3,9 +3,7 @@ package net.minecraft.server.level;
 import net.minecraft.core.SectionPos;
 import net.minecraft.world.level.ChunkPos;
 
-public record ColumnPos(int a, int b) {
-    private final int x;
-    private final int z;
+public record ColumnPos(int x, int z) {
     private static final long COORD_BITS = 32L;
     private static final long COORD_MASK = 4294967295L;
 
@@ -36,12 +34,4 @@ public record ColumnPos(int a, int b) {
     public int hashCode() {
         return ChunkPos.hash(this.x, this.z);
     }
-
-    public int x() {
-        return this.x;
-    }
-
-    public int z() {
-        return this.z;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/level/DistanceManager.java b/src/main/java/net/minecraft/server/level/DistanceManager.java
index 480df96b683442c4662758c56a5b1903f44d7c06..257b47a65a12feea5e8a90cf54602f72e3c1b2dd 100644
--- a/src/main/java/net/minecraft/server/level/DistanceManager.java
+++ b/src/main/java/net/minecraft/server/level/DistanceManager.java
@@ -287,7 +287,7 @@ public abstract class DistanceManager {
                     Entry<SortedArraySet<Ticket<?>>> entry = (Entry)var3.next();
                     ChunkPos chunkPos = new ChunkPos(entry.getLongKey());
 
-                    for(Ticket<?> ticket : (SortedArraySet)entry.getValue()) {
+                    for(Ticket<?> ticket : entry.getValue()) {
                         fileOutputStream.write((chunkPos.x + "\t" + chunkPos.z + "\t" + ticket.getType() + "\t" + ticket.getTicketLevel() + "\t\n").getBytes(StandardCharsets.UTF_8));
                     }
                 }
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index b705e96a879aa780b805e83d3923d93798f92033..ebb4b96a6696c754fa3046eafbce8fd9aa471c95 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -188,7 +188,7 @@ public class ServerChunkCache extends ChunkSource {
             completableFuture = this.getChunkFutureMainThread(i, i2, chunkStatus, flag);
             this.mainThreadProcessor.managedBlock(completableFuture::isDone);
         } else {
-            completableFuture = CompletableFuture.supplyAsync(() -> this.getChunkFutureMainThread(i, i2, chunkStatus, flag), this.mainThreadProcessor).thenCompose((completableFuture) -> completableFuture);
+            completableFuture = CompletableFuture.supplyAsync(() -> this.getChunkFutureMainThread(i, i2, chunkStatus, flag), this.mainThreadProcessor).thenCompose((completableFutureIn) -> completableFutureIn);
         }
 
         return completableFuture;
@@ -489,17 +489,7 @@ public class ServerChunkCache extends ChunkSource {
         this.distanceManager.removeTicketsOnClosing();
     }
 
-    static record ChunkAndHolder(LevelChunk a, ChunkHolder b) {
-        final LevelChunk chunk;
-        final ChunkHolder holder;
-
-        public LevelChunk chunk() {
-            return this.chunk;
-        }
-
-        public ChunkHolder holder() {
-            return this.holder;
-        }
+    static record ChunkAndHolder(LevelChunk chunk, ChunkHolder holder) {
     }
 
     final class MainThreadExecutor extends BlockableEventLoop<Runnable> {
@@ -528,7 +518,7 @@ public class ServerChunkCache extends ChunkSource {
             super.doRunTask(runnable);
         }
 
-        protected boolean pollTask() {
+        public boolean pollTask() {
             if (ServerChunkCache.this.runDistanceManagerUpdates()) {
                 return true;
             } else {
diff --git a/src/main/java/net/minecraft/server/level/ServerEntity.java b/src/main/java/net/minecraft/server/level/ServerEntity.java
index c92ef9b8aa44c0352be3dda9e6612d0d4aac6ce9..150124cada60dfc3455008e359da23dd096f45e7 100644
--- a/src/main/java/net/minecraft/server/level/ServerEntity.java
+++ b/src/main/java/net/minecraft/server/level/ServerEntity.java
@@ -76,9 +76,9 @@ public class ServerEntity {
             this.broadcast.accept(new ClientboundSetPassengersPacket(this.entity));
         }
 
-        Entity i4 = this.entity;
-        if (i4 instanceof ItemFrame) {
-            ItemFrame itemFrame = (ItemFrame)i4;
+        Entity localEntity = this.entity;
+        if (localEntity instanceof ItemFrame) {
+            ItemFrame itemFrame = (ItemFrame)localEntity;
             if (this.tickCount % 10 == 0) {
                 ItemStack itemStack = itemFrame.getItem();
                 if (itemStack.getItem() instanceof MapItem) {
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index eb61302db691be156f906fd831066cbe98db7fd2..df3d2f73a22579e0fbe05fd8cdfe3dd77038be3b 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1415,7 +1415,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 object2IntOpenHashMap.addTo(s, 1);
             }
 
-            return (String)object2IntOpenHashMap.object2IntEntrySet().stream().sorted(Comparator.comparing(Entry::getIntValue).reversed()).limit(5L).map((entry) -> (String)entry.getKey() + ":" + entry.getIntValue()).collect(Collectors.joining(","));
+            return (String)object2IntOpenHashMap.object2IntEntrySet().stream().sorted(Comparator.<Entry<String>, Integer>comparing(Entry::getIntValue).reversed()).limit(5L).map((entry) -> (String)entry.getKey() + ":" + entry.getIntValue()).collect(Collectors.joining(","));
         } catch (Exception var6) {
             return "";
         }
diff --git a/src/main/java/net/minecraft/server/level/Ticket.java b/src/main/java/net/minecraft/server/level/Ticket.java
index e8d64341efcb1f109c88d2ac6043c79b54766425..06deecab338c9cbc67c29e129531fedbd1a62877 100644
--- a/src/main/java/net/minecraft/server/level/Ticket.java
+++ b/src/main/java/net/minecraft/server/level/Ticket.java
@@ -20,7 +20,7 @@ public final class Ticket<T> implements Comparable<Ticket<?>> {
             return i;
         } else {
             int i2 = Integer.compare(System.identityHashCode(this.type), System.identityHashCode(ticket.type));
-            return i2 != 0 ? i2 : this.type.getComparator().compare(this.key, ticket.key);
+            return i2 != 0 ? i2 : this.type.getComparator().compare(this.key, (T) ticket.key);
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/level/TickingTracker.java b/src/main/java/net/minecraft/server/level/TickingTracker.java
index b69f662d756fa09c941882f6507dc0e5123c60d7..954f0f717e1e7fff201531f776905029c8470d42 100644
--- a/src/main/java/net/minecraft/server/level/TickingTracker.java
+++ b/src/main/java/net/minecraft/server/level/TickingTracker.java
@@ -65,9 +65,9 @@ public class TickingTracker extends ChunkTracker {
         while(var3.hasNext()) {
             Entry<SortedArraySet<Ticket<?>>> entry = (Entry)var3.next();
 
-            for(Ticket<?> ticket : (SortedArraySet)entry.getValue()) {
+            for(Ticket<?> ticket : entry.getValue()) {
                 if (ticket.getType() == TicketType.PLAYER) {
-                    list.add(Pair.of(ticket, entry.getLongKey()));
+                    list.add(Pair.of((Ticket<ChunkPos>) ticket, entry.getLongKey()));
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/server/network/FilteredText.java b/src/main/java/net/minecraft/server/network/FilteredText.java
index 11ba01afaf935a8cc2bf9493dfe9e8e848622243..494a0230b21a7c0c7ac52e1a3a8730ce9f2eb239 100644
--- a/src/main/java/net/minecraft/server/network/FilteredText.java
+++ b/src/main/java/net/minecraft/server/network/FilteredText.java
@@ -6,11 +6,8 @@ import net.minecraft.Util;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.server.level.ServerPlayer;
 
-public record FilteredText<T>(T b, @Nullable T c) {
-    private final T raw;
-    @Nullable
-    private final T filtered;
-    public static final FilteredText<String> EMPTY_STRING = passThrough((T)"");
+public record FilteredText<T>(T raw, @Nullable T filtered) {
+    public static final FilteredText<String> EMPTY_STRING = passThrough("");
 
     public static <T> FilteredText<T> passThrough(T object) {
         return new FilteredText<>(object, object);
@@ -46,13 +43,4 @@ public record FilteredText<T>(T b, @Nullable T c) {
         ServerPlayer serverPlayer2 = commandSourceStack.getPlayer();
         return (T)(serverPlayer2 != null ? this.filter(serverPlayer2, serverPlayer) : this.raw);
     }
-
-    public T raw() {
-        return this.raw;
-    }
-
-    @Nullable
-    public T filtered() {
-        return this.filtered;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 56ff2b326959bfe1bb60a298a804916a4c7546f3..35f224dbafe81f1eb1eaf04f9f0e7a1f9175bbcd 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -1533,7 +1533,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
             }
 
             for(int i = 0; i < list.size(); ++i) {
-                FilteredText<Component> filteredText = ((FilteredText)list.get(i)).map(Component::literal);
+                FilteredText<Component> filteredText = list.get(i).map(Component::literal);
                 if (this.player.isTextFilteringEnabled()) {
                     signBlockEntity.setMessage(i, filteredText.filteredOrElse(CommonComponents.EMPTY));
                 } else {
diff --git a/src/main/java/net/minecraft/server/network/TextFilterClient.java b/src/main/java/net/minecraft/server/network/TextFilterClient.java
index e880814c63478404864d30f335b16a2516a5b18b..18822bb69650a4628850eea8b9569d186a164162 100644
--- a/src/main/java/net/minecraft/server/network/TextFilterClient.java
+++ b/src/main/java/net/minecraft/server/network/TextFilterClient.java
@@ -96,38 +96,38 @@ public class TextFilterClient implements AutoCloseable {
                     URL url2 = getEndpoint(uri, jsonObject2, "join", "v1/join");
                     URL url3 = getEndpoint(uri, jsonObject2, "leave", "v1/leave");
                     TextFilterClient.JoinOrLeaveEncoder joinOrLeaveEncoder = (gameProfile) -> {
-                        JsonObject jsonObject = new JsonObject();
-                        jsonObject.addProperty("server", s3);
-                        jsonObject.addProperty("room", s4);
-                        jsonObject.addProperty("user_id", gameProfile.getId().toString());
-                        jsonObject.addProperty("user_display_name", gameProfile.getName());
-                        return jsonObject;
+                        JsonObject jsonObjectIn = new JsonObject();
+                        jsonObjectIn.addProperty("server", s3);
+                        jsonObjectIn.addProperty("room", s4);
+                        jsonObjectIn.addProperty("user_id", gameProfile.getId().toString());
+                        jsonObjectIn.addProperty("user_display_name", gameProfile.getName());
+                        return jsonObjectIn;
                     };
                     TextFilterClient.MessageEncoder messageEncoder;
                     if (flag) {
                         messageEncoder = (gameProfile, s3x) -> {
-                            JsonObject jsonObject = new JsonObject();
-                            jsonObject.addProperty("rule", i);
-                            jsonObject.addProperty("server", s3);
-                            jsonObject.addProperty("room", s4);
-                            jsonObject.addProperty("player", gameProfile.getId().toString());
-                            jsonObject.addProperty("player_display_name", gameProfile.getName());
-                            jsonObject.addProperty("text", s3x);
-                            jsonObject.addProperty("language", "*");
-                            return jsonObject;
+                            JsonObject jsonObjectIn = new JsonObject();
+                            jsonObjectIn.addProperty("rule", i);
+                            jsonObjectIn.addProperty("server", s3);
+                            jsonObjectIn.addProperty("room", s4);
+                            jsonObjectIn.addProperty("player", gameProfile.getId().toString());
+                            jsonObjectIn.addProperty("player_display_name", gameProfile.getName());
+                            jsonObjectIn.addProperty("text", s3x);
+                            jsonObjectIn.addProperty("language", "*");
+                            return jsonObjectIn;
                         };
                     } else {
                         String s6 = String.valueOf(i);
                         messageEncoder = (gameProfile, s4x) -> {
-                            JsonObject jsonObject = new JsonObject();
-                            jsonObject.addProperty("rule_id", s6);
-                            jsonObject.addProperty("category", s3);
-                            jsonObject.addProperty("subcategory", s4);
-                            jsonObject.addProperty("user_id", gameProfile.getId().toString());
-                            jsonObject.addProperty("user_display_name", gameProfile.getName());
-                            jsonObject.addProperty("text", s4x);
-                            jsonObject.addProperty("language", "*");
-                            return jsonObject;
+                            JsonObject jsonObjectIn = new JsonObject();
+                            jsonObjectIn.addProperty("rule_id", s6);
+                            jsonObjectIn.addProperty("category", s3);
+                            jsonObjectIn.addProperty("subcategory", s4);
+                            jsonObjectIn.addProperty("user_id", gameProfile.getId().toString());
+                            jsonObjectIn.addProperty("user_display_name", gameProfile.getName());
+                            jsonObjectIn.addProperty("text", s4x);
+                            jsonObjectIn.addProperty("language", "*");
+                            return jsonObjectIn;
                         };
                     }
 
diff --git a/src/main/java/net/minecraft/server/packs/FolderPackResources.java b/src/main/java/net/minecraft/server/packs/FolderPackResources.java
index a4f82010508faac6dd9fc97ba3e242d39e2e555c..d62ca2a55b5177722aee3a02b65c6c97ef948cc7 100644
--- a/src/main/java/net/minecraft/server/packs/FolderPackResources.java
+++ b/src/main/java/net/minecraft/server/packs/FolderPackResources.java
@@ -5,6 +5,7 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import com.mojang.logging.LogUtils;
 import java.io.File;
+import java.io.FileFilter;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -67,7 +68,7 @@ public class FolderPackResources extends AbstractPackResources {
     public Set<String> getNamespaces(PackType packType) {
         Set<String> set = Sets.newHashSet();
         File file = new File(this.file, packType.getDirectory());
-        File[] files = file.listFiles(DirectoryFileFilter.DIRECTORY);
+        File[] files = file.listFiles((FileFilter) DirectoryFileFilter.DIRECTORY);
         if (files != null) {
             for(File file2 : files) {
                 String s = getRelativePath(file, file2);
diff --git a/src/main/java/net/minecraft/server/packs/VanillaPackResources.java b/src/main/java/net/minecraft/server/packs/VanillaPackResources.java
index a4afba39e91bb8f6ee00822849047801516a87e1..e22d4df2efd8bf6d5953f2e148790698955bb054 100644
--- a/src/main/java/net/minecraft/server/packs/VanillaPackResources.java
+++ b/src/main/java/net/minecraft/server/packs/VanillaPackResources.java
@@ -166,11 +166,11 @@ public class VanillaPackResources implements PackResources {
         Stream<Path> stream = Files.walk(path2.resolve(s2));
 
         try {
-            stream.filter((pathx) -> !pathx.endsWith(".mcmeta") && Files.isRegularFile(pathx, new LinkOption[0])).mapMulti((path2x, consumer) -> {
-                String s2 = path2.relativize(path2x).toString().replaceAll("\\\\", "/");
-                ResourceLocation resourceLocation = ResourceLocation.tryBuild(s, s2);
+            stream.filter((pathx) -> !pathx.endsWith(".mcmeta") && Files.isRegularFile(pathx, new LinkOption[0])).<ResourceLocation>mapMulti((path2x, consumer) -> {
+                String replaced = path2.relativize(path2x).toString().replaceAll("\\\\", "/");
+                ResourceLocation resourceLocation = ResourceLocation.tryBuild(s, replaced);
                 if (resourceLocation == null) {
-                    Util.logAndPauseIfInIde("Invalid path in datapack: %s:%s, ignoring".formatted(s, s2));
+                    Util.logAndPauseIfInIde("Invalid path in datapack: %s:%s, ignoring".formatted(s, replaced));
                 } else {
                     consumer.accept(resourceLocation);
                 }
diff --git a/src/main/java/net/minecraft/server/packs/resources/FallbackResourceManager.java b/src/main/java/net/minecraft/server/packs/resources/FallbackResourceManager.java
index 055adc62ecf94fceaaccbe5e7def0c15bab8c494..545dd6362633a1fabf73cbcc68e87bd90df23b17 100644
--- a/src/main/java/net/minecraft/server/packs/resources/FallbackResourceManager.java
+++ b/src/main/java/net/minecraft/server/packs/resources/FallbackResourceManager.java
@@ -243,21 +243,10 @@ public class FallbackResourceManager implements ResourceManager {
         return new ResourceLocation(resourceLocation.getNamespace(), resourceLocation.getPath() + ".mcmeta");
     }
 
-    static record EntryStack(ResourceLocation a, List<FallbackResourceManager.SinglePackResourceThunkSupplier> b) {
-        private final ResourceLocation metadataLocation;
-        final List<FallbackResourceManager.SinglePackResourceThunkSupplier> entries;
-
+    static record EntryStack(ResourceLocation metadataLocation, List<FallbackResourceManager.SinglePackResourceThunkSupplier> entries) {
         List<Resource> createThunks() {
             return this.entries().stream().map(FallbackResourceManager.SinglePackResourceThunkSupplier::create).toList();
         }
-
-        public ResourceLocation metadataLocation() {
-            return this.metadataLocation;
-        }
-
-        public List<FallbackResourceManager.SinglePackResourceThunkSupplier> entries() {
-            return this.entries;
-        }
     }
 
     static class LeakedResourceWarningInputStream extends FilterInputStream {
@@ -285,13 +274,7 @@ public class FallbackResourceManager implements ResourceManager {
         }
     }
 
-    static record PackEntry(String a, @Nullable PackResources b, @Nullable Predicate<ResourceLocation> c) {
-        final String name;
-        @Nullable
-        final PackResources resources;
-        @Nullable
-        private final Predicate<ResourceLocation> filter;
-
+    static record PackEntry(String name, @Nullable PackResources resources, @Nullable Predicate<ResourceLocation> filter) {
         public void filterAll(Collection<ResourceLocation> collection) {
             if (this.filter != null) {
                 collection.removeIf(this.filter);
@@ -302,20 +285,6 @@ public class FallbackResourceManager implements ResourceManager {
         public boolean isFiltered(ResourceLocation resourceLocation) {
             return this.filter != null && this.filter.test(resourceLocation);
         }
-
-        public String name() {
-            return this.name;
-        }
-
-        @Nullable
-        public PackResources resources() {
-            return this.resources;
-        }
-
-        @Nullable
-        public Predicate<ResourceLocation> filter() {
-            return this.filter;
-        }
     }
 
     class SinglePackResourceThunkSupplier {
diff --git a/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java b/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
index 4ac92b5e4a830d4b5ed2be16dcd428c519daef91..865f2b1eea798d13bffe9cc7e6a4823e93684437 100644
--- a/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
+++ b/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
@@ -23,7 +23,7 @@ public class ProfiledReloadInstance extends SimpleReloadInstance<ProfiledReloadI
             AtomicLong atomicLong2 = new AtomicLong();
             ActiveProfiler activeProfiler = new ActiveProfiler(Util.timeSource, () -> 0, false);
             ActiveProfiler activeProfiler2 = new ActiveProfiler(Util.timeSource, () -> 0, false);
-            CompletableFuture<Void> completableFuture = preparableReloadListener.reload(preparationBarrier, resourceManagerx, activeProfiler, activeProfiler2, (runnable) -> executor2x.execute(() -> {
+            CompletableFuture<Void> completableFutureIn = preparableReloadListener.reload(preparationBarrier, resourceManagerx, activeProfiler, activeProfiler2, (runnable) -> executor2x.execute(() -> {
                     long l = Util.getNanos();
                     runnable.run();
                     atomicLong.addAndGet(Util.getNanos() - l);
@@ -32,7 +32,7 @@ public class ProfiledReloadInstance extends SimpleReloadInstance<ProfiledReloadI
                     runnable.run();
                     atomicLong2.addAndGet(Util.getNanos() - l);
                 }));
-            return completableFuture.thenApplyAsync((void_) -> {
+            return completableFutureIn.thenApplyAsync((void_) -> {
                 LOGGER.debug("Finished reloading " + preparableReloadListener.getName());
                 return new ProfiledReloadInstance.State(preparableReloadListener.getName(), activeProfiler.getResults(), activeProfiler2.getResults(), atomicLong, atomicLong2);
             }, executor2);
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 27be34d33f824d744ad69177c23f7b940dd3d359..2315eee555287dc204684ee922a56fca16e8ac08 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -323,7 +323,7 @@ public abstract class PlayerList {
             if (entity.hasExactlyOnePlayerPassenger()) {
                 LOGGER.debug("Removing player mount");
                 serverPlayer.stopRiding();
-                entity.getPassengersAndSelf().forEach((entity) -> entity.setRemoved(Entity.RemovalReason.UNLOADED_WITH_PLAYER));
+                entity.getPassengersAndSelf().forEach((entityIn) -> entityIn.setRemoved(Entity.RemovalReason.UNLOADED_WITH_PLAYER));
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/players/StoredUserList.java b/src/main/java/net/minecraft/server/players/StoredUserList.java
index ef9d4bea44d2c4b85631abf9be76a088fa2ceed7..72456a6e207afbfa3745fccf94918c6bc6dcaae4 100644
--- a/src/main/java/net/minecraft/server/players/StoredUserList.java
+++ b/src/main/java/net/minecraft/server/players/StoredUserList.java
@@ -142,7 +142,7 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
                     JsonObject jsonObject = GsonHelper.convertToJsonObject(jsonElement, "entry");
                     StoredUserEntry<K> storedUserEntry = this.createEntry(jsonObject);
                     if (storedUserEntry.getUser() != null) {
-                        this.map.put(this.getKeyForUser(storedUserEntry.getUser()), storedUserEntry);
+                        this.map.put(this.getKeyForUser(storedUserEntry.getUser()), (V) storedUserEntry);
                     }
                 }
             } catch (Throwable var8) {
diff --git a/src/main/java/net/minecraft/stats/ServerStatsCounter.java b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
index 590a129d5cdecc77ba00dac541e605a629ddc69f..b322909f942fa78f547a7f678d61056626b67324 100644
--- a/src/main/java/net/minecraft/stats/ServerStatsCounter.java
+++ b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
@@ -106,11 +106,11 @@ public class ServerStatsCounter extends StatsCounter {
                             String s2 = (String)var7.next();
                             if (compoundTag2.contains(s2, 10)) {
                                 Util.ifElse(Registry.STAT_TYPE.getOptional(new ResourceLocation(s2)), (statType) -> {
-                                    CompoundTag compoundTag2 = compoundTag2.getCompound(s2);
+                                    CompoundTag compoundTag2In = compoundTag2.getCompound(s2);
 
-                                    for(String s2 : compoundTag2.getAllKeys()) {
-                                        if (compoundTag2.contains(s2, 99)) {
-                                            Util.ifElse(this.getStat(statType, s2), (stat) -> this.stats.put(stat, compoundTag2.getInt(s2)), () -> LOGGER.warn("Invalid statistic in {}: Don't know what {} is", this.file, s2));
+                                    for(String key : compoundTag2In.getAllKeys()) {
+                                        if (compoundTag2In.contains(key, 99)) {
+                                            Util.ifElse(this.getStat(statType, key), (stat) -> this.stats.put(stat, compoundTag2In.getInt(key)), () -> LOGGER.warn("Invalid statistic in {}: Don't know what {} is", this.file, key));
                                         } else {
                                             LOGGER.warn("Invalid statistic value in {}: Don't know what {} is for key {}", new Object[]{this.file, compoundTag2.get(s2), s2});
                                         }
@@ -175,14 +175,14 @@ public class ServerStatsCounter extends StatsCounter {
             ((JsonObject)map.computeIfAbsent(stat.getType(), (statType) -> new JsonObject())).addProperty(getKey(stat).toString(), entry.getIntValue());
         }
 
-        JsonObject jsonObject = new JsonObject();
+        JsonObject jsonObjectIn = new JsonObject();
 
         for(Entry<StatType<?>, JsonObject> entry2 : map.entrySet()) {
-            jsonObject.add(Registry.STAT_TYPE.getKey((StatType)entry2.getKey()).toString(), (JsonElement)entry2.getValue());
+            jsonObjectIn.add(Registry.STAT_TYPE.getKey((StatType)entry2.getKey()).toString(), (JsonElement)entry2.getValue());
         }
 
         JsonObject jsonObject2 = new JsonObject();
-        jsonObject2.add("stats", jsonObject);
+        jsonObject2.add("stats", jsonObjectIn);
         jsonObject2.addProperty("DataVersion", SharedConstants.getCurrentVersion().getWorldVersion());
         return jsonObject2.toString();
     }
diff --git a/src/main/java/net/minecraft/tags/TagFile.java b/src/main/java/net/minecraft/tags/TagFile.java
index c8cb3020f686c288f81baa778a56acd7cfcb8f69..368cbf520e00978353d640edb6ca705e5f3622dd 100644
--- a/src/main/java/net/minecraft/tags/TagFile.java
+++ b/src/main/java/net/minecraft/tags/TagFile.java
@@ -4,16 +4,6 @@ import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.List;
 
-public record TagFile(List<TagEntry> b, boolean c) {
-    private final List<TagEntry> entries;
-    private final boolean replace;
+public record TagFile(List<TagEntry> entries, boolean replace) {
     public static final Codec<TagFile> CODEC = RecordCodecBuilder.create((instance) -> instance.group(TagEntry.CODEC.listOf().fieldOf("values").forGetter(TagFile::entries), Codec.BOOL.optionalFieldOf("replace", false).forGetter(TagFile::replace)).apply(instance, TagFile::new));
-
-    public List<TagEntry> entries() {
-        return this.entries;
-    }
-
-    public boolean replace() {
-        return this.replace;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/tags/TagKey.java b/src/main/java/net/minecraft/tags/TagKey.java
index a7ae934ad947b802396e0ed6dee6c01d1298a10b..58629501ef492e6e595fe71e2321a6ea20ebd7ec 100644
--- a/src/main/java/net/minecraft/tags/TagKey.java
+++ b/src/main/java/net/minecraft/tags/TagKey.java
@@ -9,9 +9,7 @@ import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 
-public record TagKey<T>(ResourceKey<? extends Registry<T>> a, ResourceLocation b) {
-    private final ResourceKey<? extends Registry<T>> registry;
-    private final ResourceLocation location;
+public record TagKey<T>(ResourceKey<? extends Registry<T>> registry, ResourceLocation location) {
     private static final Interner<TagKey<?>> VALUES = Interners.newWeakInterner();
 
     public static <T> Codec<TagKey<T>> codec(ResourceKey<? extends Registry<T>> resourceKey) {
@@ -31,18 +29,10 @@ public record TagKey<T>(ResourceKey<? extends Registry<T>> a, ResourceLocation b
     }
 
     public <E> Optional<TagKey<E>> cast(ResourceKey<? extends Registry<E>> resourceKey) {
-        return this.isFor(resourceKey) ? Optional.of(this) : Optional.empty();
+        return this.isFor(resourceKey) ? Optional.of((TagKey<E>) this) : Optional.empty();
     }
 
     public String toString() {
         return "TagKey[" + this.registry.location() + " / " + this.location + "]";
     }
-
-    public ResourceKey<? extends Registry<T>> registry() {
-        return this.registry;
-    }
-
-    public ResourceLocation location() {
-        return this.location;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/tags/TagLoader.java b/src/main/java/net/minecraft/tags/TagLoader.java
index 7d2cc4832b75271e3f345bd0751eed9950d3f708..f0f57b91d183f9fb0e5cda7d63949d048f2081f6 100644
--- a/src/main/java/net/minecraft/tags/TagLoader.java
+++ b/src/main/java/net/minecraft/tags/TagLoader.java
@@ -57,7 +57,7 @@ public class TagLoader<T> {
                     try {
                         JsonElement jsonElement = JsonParser.parseReader(reader);
                         List<TagLoader.EntryWithSource> list = map.computeIfAbsent(resourceLocation2, (resourceLocationx) -> new ArrayList());
-                        TagFile tagFile = (TagFile)TagFile.CODEC.parse(new Dynamic(JsonOps.INSTANCE, jsonElement)).getOrThrow(false, LOGGER::error);
+                        TagFile tagFile = (TagFile)TagFile.CODEC.parse(new Dynamic<>(JsonOps.INSTANCE, jsonElement)).getOrThrow(false, LOGGER::error);
                         if (tagFile.replace()) {
                             list.clear();
                         }
@@ -149,20 +149,9 @@ public class TagLoader<T> {
         return this.build(this.load(resourceManager));
     }
 
-    public static record EntryWithSource(TagEntry a, String b) {
-        final TagEntry entry;
-        private final String source;
-
+    public static record EntryWithSource(TagEntry entry, String source) {
         public String toString() {
             return this.entry + " (from " + this.source + ")";
         }
-
-        public TagEntry entry() {
-            return this.entry;
-        }
-
-        public String source() {
-            return this.source;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/tags/TagManager.java b/src/main/java/net/minecraft/tags/TagManager.java
index 358f2c1426da0a8ece5775b546488df7339db557..5b01848f4d793f5b3759043af279c75d135146c9 100644
--- a/src/main/java/net/minecraft/tags/TagManager.java
+++ b/src/main/java/net/minecraft/tags/TagManager.java
@@ -45,16 +45,6 @@ public class TagManager implements PreparableReloadListener {
         return CompletableFuture.supplyAsync(() -> new TagManager.LoadResult<>(resourceKey, tagLoader.loadAndBuild(resourceManager)), executor);
     }
 
-    public static record LoadResult<T>(ResourceKey<? extends Registry<T>> a, Map<ResourceLocation, Collection<Holder<T>>> b) {
-        private final ResourceKey<? extends Registry<T>> key;
-        private final Map<ResourceLocation, Collection<Holder<T>>> tags;
-
-        public ResourceKey<? extends Registry<T>> key() {
-            return this.key;
-        }
-
-        public Map<ResourceLocation, Collection<Holder<T>>> tags() {
-            return this.tags;
-        }
+    public static record LoadResult<T>(ResourceKey<? extends Registry<T>> key, Map<ResourceLocation, Collection<Holder<T>>> tags) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java b/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
index c337a6dc8cc16260f2038439027065ad77839128..487da6925055ec72c437165a15053e8d4fbf6939 100644
--- a/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
+++ b/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
@@ -57,7 +57,7 @@ public class ClassInstanceMultiMap<T> extends AbstractCollection<T> {
             throw new IllegalArgumentException("Don't know how to search for " + clazz);
         } else {
             List<? extends T> list = this.byClass.computeIfAbsent(clazz, (clazzx) -> this.allInstances.stream().filter(clazzx::isInstance).collect(Collectors.toList()));
-            return Collections.unmodifiableCollection(list);
+            return (Collection<S>) Collections.unmodifiableCollection(list);
         }
     }
 
diff --git a/src/main/java/net/minecraft/util/Crypt.java b/src/main/java/net/minecraft/util/Crypt.java
index 871088612e6149d2a1c0e1acc9beadfac6bf5ba1..bf893a8e4ccf6884d7a0d4682d38f7823d416b39 100644
--- a/src/main/java/net/minecraft/util/Crypt.java
+++ b/src/main/java/net/minecraft/util/Crypt.java
@@ -197,9 +197,7 @@ public class Crypt {
         T apply(byte[] var1) throws CryptException;
     }
 
-    public static record SaltSignaturePair(long b, byte[] c) {
-        private final long salt;
-        private final byte[] signature;
+    public static record SaltSignaturePair(long salt, byte[] signature) {
         public static final Crypt.SaltSignaturePair EMPTY = new Crypt.SaltSignaturePair(0L, ByteArrays.EMPTY_ARRAY);
 
         public SaltSignaturePair(FriendlyByteBuf friendlyByteBuf) {
@@ -218,14 +216,6 @@ public class Crypt {
         public byte[] saltAsBytes() {
             return Longs.toByteArray(this.salt);
         }
-
-        public long salt() {
-            return this.salt;
-        }
-
-        public byte[] signature() {
-            return this.signature;
-        }
     }
 
     public static class SaltSupplier {
diff --git a/src/main/java/net/minecraft/util/CubicSpline.java b/src/main/java/net/minecraft/util/CubicSpline.java
index 4b34d6319b5b59b14ed086191220ec8d33e4fd5b..2043e70389baaaa7e9359f9aab503eb7045c2ff3 100644
--- a/src/main/java/net/minecraft/util/CubicSpline.java
+++ b/src/main/java/net/minecraft/util/CubicSpline.java
@@ -20,44 +20,29 @@ public interface CubicSpline<C, I extends ToFloatFunction<C>> extends ToFloatFun
 
     CubicSpline<C, I> mapAll(CubicSpline.CoordinateVisitor<I> var1);
 
+    record Point<C, I extends ToFloatFunction<C>>(float location, CubicSpline<C, I> value, float derivative) {
+    }
+
     static <C, I extends ToFloatFunction<C>> Codec<CubicSpline<C, I>> codec(Codec<I> codec) {
         MutableObject<Codec<CubicSpline<C, I>>> mutableObject = new MutableObject();
         Codec<Point<C, I>> codec2 = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("location").forGetter(Point::location), ExtraCodecs.lazyInitializedCodec(mutableObject::getValue).fieldOf("value").forGetter(Point::value), Codec.FLOAT.fieldOf("derivative").forGetter(Point::derivative)).apply(instance, (f, cubicSpline, f2) -> {
-                record Point<C, I extends ToFloatFunction<C>>(float a, CubicSpline<C, I> b, float c) {
-                    private final float location;
-                    private final CubicSpline<C, I> value;
-                    private final float derivative;
-
-                    public float location() {
-                        return this.location;
-                    }
-
-                    public CubicSpline<C, I> value() {
-                        return this.value;
-                    }
-
-                    public float derivative() {
-                        return this.derivative;
-                    }
-                }
-
                 return new Point(f, cubicSpline, f2);
             }));
-        Codec<CubicSpline.Multipoint<C, I>> codec3 = RecordCodecBuilder.create((instance) -> instance.group(codec.fieldOf("coordinate").forGetter(CubicSpline.Multipoint::coordinate), ExtraCodecs.nonEmptyList(codec2.listOf()).fieldOf("points").forGetter((multipoint) -> IntStream.range(0, multipoint.locations.length).mapToObj((i) -> new Point(multipoint.locations()[i], (CubicSpline)multipoint.values().get(i), multipoint.derivatives()[i])).toList())).apply(instance, (toFloatFunction, list) -> {
+        Codec<CubicSpline.Multipoint<C, I>> codec3 = RecordCodecBuilder.create((instance) -> instance.group(codec.fieldOf("coordinate").forGetter(CubicSpline.Multipoint<C, I>::coordinate), ExtraCodecs.nonEmptyList(codec2.listOf()).fieldOf("points").forGetter((multipoint) -> IntStream.range(0, multipoint.locations.length).mapToObj((i) -> new Point<>(multipoint.locations()[i], multipoint.values().get(i), multipoint.derivatives()[i])).toList())).apply(instance, (toFloatFunction, list) -> {
                 float[] floats = new float[list.size()];
                 com.google.common.collect.ImmutableList.Builder<CubicSpline<C, I>> builder = ImmutableList.builder();
                 float[] floats2 = new float[list.size()];
 
                 for(int i = 0; i < list.size(); ++i) {
-                    Point<C, I> 1Point = (Point)list.get(i);
-                    floats[i] = 1Point.location();
-                    builder.add(1Point.value());
-                    floats2[i] = 1Point.derivative();
+                    Point<C, I> point = (Point)list.get(i);
+                    floats[i] = point.location();
+                    builder.add(point.value());
+                    floats2[i] = point.derivative();
                 }
 
                 return CubicSpline.Multipoint.create((I)toFloatFunction, floats, builder.build(), floats2);
             }));
-        mutableObject.setValue(Codec.either(Codec.FLOAT, codec3).xmap((either) -> (CubicSpline)either.map(CubicSpline.Constant::new, (multipoint) -> multipoint), (cubicSpline) -> {
+        mutableObject.setValue(Codec.either(Codec.FLOAT, codec3).xmap((either) -> either.map(CubicSpline.Constant::new, (multipoint) -> multipoint), (cubicSpline) -> {
             Either var10000;
             if (cubicSpline instanceof CubicSpline.Constant) {
                 CubicSpline.Constant<C, I> constant = (CubicSpline.Constant)cubicSpline;
@@ -100,11 +85,11 @@ public interface CubicSpline<C, I extends ToFloatFunction<C>> extends ToFloatFun
         }
 
         public CubicSpline.Builder<C, I> addPoint(float f, float f2) {
-            return this.addPoint(f, new CubicSpline.Constant<>(this.valueTransformer.apply((C)f2)), 0.0F);
+            return this.addPoint(f, new CubicSpline.Constant<>(this.valueTransformer.apply(f2)), 0.0F);
         }
 
         public CubicSpline.Builder<C, I> addPoint(float f, float f2, float f3) {
-            return this.addPoint(f, new CubicSpline.Constant<>(this.valueTransformer.apply((C)f2)), f3);
+            return this.addPoint(f, new CubicSpline.Constant<>(this.valueTransformer.apply(f2)), f3);
         }
 
         public CubicSpline.Builder<C, I> addPoint(float f, CubicSpline<C, I> cubicSpline) {
@@ -132,9 +117,7 @@ public interface CubicSpline<C, I extends ToFloatFunction<C>> extends ToFloatFun
     }
 
     @VisibleForDebug
-    public static record Constant<C, I extends ToFloatFunction<C>>(float b) implements CubicSpline<C, I> {
-        private final float value;
-
+    public static record Constant<C, I extends ToFloatFunction<C>>(float value) implements CubicSpline<C, I> {
         public float apply(C object) {
             return this.value;
         }
@@ -154,10 +137,6 @@ public interface CubicSpline<C, I extends ToFloatFunction<C>> extends ToFloatFun
         public CubicSpline<C, I> mapAll(CubicSpline.CoordinateVisitor<I> coordinateVisitor) {
             return this;
         }
-
-        public float value() {
-            return this.value;
-        }
     }
 
     public interface CoordinateVisitor<I> {
@@ -165,16 +144,9 @@ public interface CubicSpline<C, I extends ToFloatFunction<C>> extends ToFloatFun
     }
 
     @VisibleForDebug
-    public static record Multipoint<C, I extends ToFloatFunction<C>>(I b, float[] c, List<CubicSpline<C, I>> d, float[] e, float f, float g) implements CubicSpline<C, I> {
-        private final I coordinate;
-        final float[] locations;
-        private final List<CubicSpline<C, I>> values;
-        private final float[] derivatives;
-        private final float minValue;
-        private final float maxValue;
-
+    public static record Multipoint<C, I extends ToFloatFunction<C>>(I coordinate, float[] locations, List<CubicSpline<C, I>> values, float[] derivatives, float minValue, float maxValue) implements CubicSpline<C, I> {
         public Multipoint {
-            validateSizes(floats, list, floats2);
+            validateSizes(locations, values, derivatives);
         }
 
         static <C, I extends ToFloatFunction<C>> CubicSpline.Multipoint<C, I> create(I toFloatFunction, float[] floats, List<CubicSpline<C, I>> list, float[] floats2) {
@@ -289,29 +261,5 @@ public interface CubicSpline<C, I extends ToFloatFunction<C>> extends ToFloatFun
         public CubicSpline<C, I> mapAll(CubicSpline.CoordinateVisitor<I> coordinateVisitor) {
             return create(coordinateVisitor.visit(this.coordinate), this.locations, this.values().stream().map((cubicSpline) -> cubicSpline.mapAll(coordinateVisitor)).toList(), this.derivatives);
         }
-
-        public I coordinate() {
-            return this.coordinate;
-        }
-
-        public float[] locations() {
-            return this.locations;
-        }
-
-        public List<CubicSpline<C, I>> values() {
-            return this.values;
-        }
-
-        public float[] derivatives() {
-            return this.derivatives;
-        }
-
-        public float minValue() {
-            return this.minValue;
-        }
-
-        public float maxValue() {
-            return this.maxValue;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/ExtraCodecs.java b/src/main/java/net/minecraft/util/ExtraCodecs.java
index 1baf7ebc7c5f86273f5de64c490709e49a0a2072..3179375fa96e5c00388ea73ed1f84a5749257db3 100644
--- a/src/main/java/net/minecraft/util/ExtraCodecs.java
+++ b/src/main/java/net/minecraft/util/ExtraCodecs.java
@@ -72,8 +72,8 @@ public class ExtraCodecs {
                 P object2 = (P)listx.get(1);
                 return biFunction.apply(object, object2);
             }), (object) -> ImmutableList.of(function.apply(object), function2.apply(object)));
-        Codec<I> codec3 = RecordCodecBuilder.create((instance) -> instance.group(codec.fieldOf(s).forGetter(Pair::getFirst), codec.fieldOf(s2).forGetter(Pair::getSecond)).apply(instance, Pair::of)).comapFlatMap((pair) -> biFunction.apply(pair.getFirst(), pair.getSecond()), (object) -> Pair.of(function.apply(object), function2.apply(object)));
-        Codec<I> codec4 = (new ExtraCodecs.EitherCodec(codec2, codec3)).xmap((either) -> either.map((object) -> object, (object) -> object), Either::left);
+        Codec<I> codec3 = RecordCodecBuilder.<Pair<P, P>>create((instance) -> instance.group(codec.fieldOf(s).forGetter(Pair::getFirst), codec.fieldOf(s2).forGetter(Pair::getSecond)).apply(instance, Pair::of)).comapFlatMap((pair) -> biFunction.apply(pair.getFirst(), pair.getSecond()), (object) -> Pair.of(function.apply(object), function2.apply(object)));
+        Codec<I> codec4 = (new ExtraCodecs.EitherCodec<>(codec2, codec3)).xmap((either) -> either.map((object) -> object, (object) -> object), Either::left);
         return Codec.either(codec, codec4).comapFlatMap((either) -> either.map((object) -> biFunction.apply(object, object), DataResult::success), (object) -> {
             P object2 = (P)function.apply(object);
             P object3 = (P)function2.apply(object);
@@ -86,7 +86,7 @@ public class ExtraCodecs {
             public <T> DataResult<Pair<A, T>> apply(DynamicOps<T> dynamicOps, T objectx, DataResult<Pair<A, T>> dataResult) {
                 MutableObject<String> mutableObject = new MutableObject();
                 Optional<Pair<A, T>> optional = dataResult.resultOrPartial(mutableObject::setValue);
-                return optional.isPresent() ? dataResult : DataResult.error("(" + (String)mutableObject.getValue() + " -> using default)", Pair.of(object, object));
+                return optional.isPresent() ? dataResult : DataResult.error("(" + (String)mutableObject.getValue() + " -> using default)", Pair.of(object, (T) object));
             }
 
             public <T> DataResult<T> coApply(DynamicOps<T> dynamicOps, A objectx, DataResult<T> dataResult) {
@@ -290,11 +290,9 @@ public class ExtraCodecs {
         }
     }
 
-    static record LazyInitializedCodec<A>(Supplier<Codec<A>> a) implements Codec<A> {
-        private final Supplier<Codec<A>> delegate;
-
+    static record LazyInitializedCodec<A>(Supplier<Codec<A>> delegate) implements Codec<A> {
         LazyInitializedCodec {
-            Supplier<Codec<A>> var2 = Suppliers.memoize(supplier::get);
+            Supplier<Codec<A>> var2 = Suppliers.memoize(delegate::get);
         }
 
         public <T> DataResult<Pair<A, T>> decode(DynamicOps<T> dynamicOps, T object) {
@@ -304,16 +302,9 @@ public class ExtraCodecs {
         public <T> DataResult<T> encode(A object, DynamicOps<T> dynamicOps, T object2) {
             return (this.delegate.get()).encode(object, dynamicOps, object2);
         }
-
-        public Supplier<Codec<A>> delegate() {
-            return this.delegate;
-        }
     }
 
-    public static record TagOrElementLocation(ResourceLocation a, boolean b) {
-        private final ResourceLocation id;
-        private final boolean tag;
-
+    public static record TagOrElementLocation(ResourceLocation id, boolean tag) {
         public String toString() {
             return this.decoratedId();
         }
@@ -321,14 +312,6 @@ public class ExtraCodecs {
         private String decoratedId() {
             return this.tag ? "#" + this.id : this.id.toString();
         }
-
-        public ResourceLocation id() {
-            return this.id;
-        }
-
-        public boolean tag() {
-            return this.tag;
-        }
     }
 
     static final class XorCodec<F, S> implements Codec<Either<F, S>> {
diff --git a/src/main/java/net/minecraft/util/InclusiveRange.java b/src/main/java/net/minecraft/util/InclusiveRange.java
index 9d01785e511de7fbe16f074645e832b086400617..d438b307c8424933b6c0c265d844990c9ee4f0a8 100644
--- a/src/main/java/net/minecraft/util/InclusiveRange.java
+++ b/src/main/java/net/minecraft/util/InclusiveRange.java
@@ -4,13 +4,11 @@ import com.mojang.serialization.Codec;
 import com.mojang.serialization.DataResult;
 import java.util.function.Function;
 
-public record InclusiveRange<T extends Comparable<T>>(T b, T c) {
-    private final T minInclusive;
-    private final T maxInclusive;
+public record InclusiveRange<T extends Comparable<T>>(T minInclusive, T maxInclusive) {
     public static final Codec<InclusiveRange<Integer>> INT = codec(Codec.INT);
 
     public InclusiveRange {
-        if (comparable.compareTo(comparable2) > 0) {
+        if (minInclusive.compareTo(maxInclusive) > 0) {
             throw new IllegalArgumentException("min_inclusive must be less than or equal to max_inclusive");
         }
     }
@@ -45,12 +43,4 @@ public record InclusiveRange<T extends Comparable<T>>(T b, T c) {
     public String toString() {
         return "[" + this.minInclusive + ", " + this.maxInclusive + "]";
     }
-
-    public T minInclusive() {
-        return this.minInclusive;
-    }
-
-    public T maxInclusive() {
-        return this.maxInclusive;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/KeyDispatchDataCodec.java b/src/main/java/net/minecraft/util/KeyDispatchDataCodec.java
index e9a410f2f7c63ccdc8be85f9a8fdcaaa5ab89198..a2ca0a2f94414a97343c84e802c0f136042df78b 100644
--- a/src/main/java/net/minecraft/util/KeyDispatchDataCodec.java
+++ b/src/main/java/net/minecraft/util/KeyDispatchDataCodec.java
@@ -3,9 +3,7 @@ package net.minecraft.util;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.MapCodec;
 
-public record KeyDispatchDataCodec<A>(Codec<A> a) {
-    private final Codec<A> codec;
-
+public record KeyDispatchDataCodec<A>(Codec<A> codec) {
     public static <A> KeyDispatchDataCodec<A> of(Codec<A> codec) {
         return new KeyDispatchDataCodec<>(codec);
     }
@@ -13,8 +11,4 @@ public record KeyDispatchDataCodec<A>(Codec<A> a) {
     public static <A> KeyDispatchDataCodec<A> of(MapCodec<A> mapCodec) {
         return new KeyDispatchDataCodec<>(mapCodec.codec());
     }
-
-    public Codec<A> codec() {
-        return this.codec;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java b/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java
index e3b27a2bc10f1127203ff5874eed5582dc2459ac..69767559a40cee9bd01131d5a041e2d08eb52568 100644
--- a/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java
+++ b/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java
@@ -16,7 +16,7 @@ import javax.annotation.Nullable;
 public class LowerCaseEnumTypeAdapterFactory implements TypeAdapterFactory {
     @Nullable
     public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
-        Class<T> clazz = typeToken.getRawType();
+        Class<T> clazz = (Class<T>) typeToken.getRawType();
         if (!clazz.isEnum()) {
             return null;
         } else {
diff --git a/src/main/java/net/minecraft/util/ModCheck.java b/src/main/java/net/minecraft/util/ModCheck.java
index a9ad5a7797cfcc95f4ccead58755fbcfe9e27e26..3cb67b682ca1ae2232c1a3403efcfb931c1e3720 100644
--- a/src/main/java/net/minecraft/util/ModCheck.java
+++ b/src/main/java/net/minecraft/util/ModCheck.java
@@ -3,10 +3,7 @@ package net.minecraft.util;
 import java.util.function.Supplier;
 import org.apache.commons.lang3.ObjectUtils;
 
-public record ModCheck(ModCheck.Confidence a, String b) {
-    private final ModCheck.Confidence confidence;
-    private final String description;
-
+public record ModCheck(ModCheck.Confidence confidence, String description) {
     public static ModCheck identify(String s, Supplier<String> supplier, String s2, Class<?> clazz) {
         String s3 = (String)supplier.get();
         if (!s.equals(s3)) {
@@ -28,14 +25,6 @@ public record ModCheck(ModCheck.Confidence a, String b) {
         return this.confidence.description + " " + this.description;
     }
 
-    public ModCheck.Confidence confidence() {
-        return this.confidence;
-    }
-
-    public String description() {
-        return this.description;
-    }
-
     public static enum Confidence {
         PROBABLY_NOT("Probably not.", false),
         VERY_LIKELY("Very likely;", true),
diff --git a/src/main/java/net/minecraft/util/StringRepresentable.java b/src/main/java/net/minecraft/util/StringRepresentable.java
index 5de36cff3ecfa67e45b1dbddab60a947bb8f6a86..cac0a559498a3f35e3d6b06d8a88de0f3c820e47 100644
--- a/src/main/java/net/minecraft/util/StringRepresentable.java
+++ b/src/main/java/net/minecraft/util/StringRepresentable.java
@@ -19,10 +19,10 @@ public interface StringRepresentable {
     String getSerializedName();
 
     static <E extends Enum<E> & StringRepresentable> StringRepresentable.EnumCodec<E> fromEnum(Supplier<E[]> supplier) {
-        E[] enums = (Enum[])supplier.get();
+        E[] enums = supplier.get();
         if (enums.length > 16) {
             Map<String, E> map = Arrays.stream(enums).collect(Collectors.toMap((object) -> ((StringRepresentable)object).getSerializedName(), (enum_) -> enum_));
-            return new StringRepresentable.EnumCodec<>(enums, (s) -> s == null ? null : (Enum)map.get(s));
+            return new StringRepresentable.EnumCodec<>(enums, (s) -> s == null ? null : map.get(s));
         } else {
             return new StringRepresentable.EnumCodec<>(enums, (s) -> {
                 for(E enum_ : enums) {
diff --git a/src/main/java/net/minecraft/util/datafix/DataFixers.java b/src/main/java/net/minecraft/util/datafix/DataFixers.java
index d74ea869eabbb2c0d274d3d022aea97356119432..bc4d9a2061b2e6259a201907d3c44180dc880259 100644
--- a/src/main/java/net/minecraft/util/datafix/DataFixers.java
+++ b/src/main/java/net/minecraft/util/datafix/DataFixers.java
@@ -610,17 +610,17 @@ public class DataFixers {
         dataFixerBuilder.addFixer(new AddNewChoices(schema132, "Added Glow Squid", References.ENTITY));
         dataFixerBuilder.addFixer(new AddNewChoices(schema132, "Added Glow Item Frame", References.ENTITY));
         Schema schema133 = dataFixerBuilder.addSchema(2690, SAME_NAMESPACED);
-        ImmutableMap<String, String> immutableMap = ImmutableMap.builder().put("minecraft:weathered_copper_block", "minecraft:oxidized_copper_block").put("minecraft:semi_weathered_copper_block", "minecraft:weathered_copper_block").put("minecraft:lightly_weathered_copper_block", "minecraft:exposed_copper_block").put("minecraft:weathered_cut_copper", "minecraft:oxidized_cut_copper").put("minecraft:semi_weathered_cut_copper", "minecraft:weathered_cut_copper").put("minecraft:lightly_weathered_cut_copper", "minecraft:exposed_cut_copper").put("minecraft:weathered_cut_copper_stairs", "minecraft:oxidized_cut_copper_stairs").put("minecraft:semi_weathered_cut_copper_stairs", "minecraft:weathered_cut_copper_stairs").put("minecraft:lightly_weathered_cut_copper_stairs", "minecraft:exposed_cut_copper_stairs").put("minecraft:weathered_cut_copper_slab", "minecraft:oxidized_cut_copper_slab").put("minecraft:semi_weathered_cut_copper_slab", "minecraft:weathered_cut_copper_slab").put("minecraft:lightly_weathered_cut_copper_slab", "minecraft:exposed_cut_copper_slab").put("minecraft:waxed_semi_weathered_copper", "minecraft:waxed_weathered_copper").put("minecraft:waxed_lightly_weathered_copper", "minecraft:waxed_exposed_copper").put("minecraft:waxed_semi_weathered_cut_copper", "minecraft:waxed_weathered_cut_copper").put("minecraft:waxed_lightly_weathered_cut_copper", "minecraft:waxed_exposed_cut_copper").put("minecraft:waxed_semi_weathered_cut_copper_stairs", "minecraft:waxed_weathered_cut_copper_stairs").put("minecraft:waxed_lightly_weathered_cut_copper_stairs", "minecraft:waxed_exposed_cut_copper_stairs").put("minecraft:waxed_semi_weathered_cut_copper_slab", "minecraft:waxed_weathered_cut_copper_slab").put("minecraft:waxed_lightly_weathered_cut_copper_slab", "minecraft:waxed_exposed_cut_copper_slab").build();
+        ImmutableMap<String, String> immutableMap = ImmutableMap.<String, String>builder().put("minecraft:weathered_copper_block", "minecraft:oxidized_copper_block").put("minecraft:semi_weathered_copper_block", "minecraft:weathered_copper_block").put("minecraft:lightly_weathered_copper_block", "minecraft:exposed_copper_block").put("minecraft:weathered_cut_copper", "minecraft:oxidized_cut_copper").put("minecraft:semi_weathered_cut_copper", "minecraft:weathered_cut_copper").put("minecraft:lightly_weathered_cut_copper", "minecraft:exposed_cut_copper").put("minecraft:weathered_cut_copper_stairs", "minecraft:oxidized_cut_copper_stairs").put("minecraft:semi_weathered_cut_copper_stairs", "minecraft:weathered_cut_copper_stairs").put("minecraft:lightly_weathered_cut_copper_stairs", "minecraft:exposed_cut_copper_stairs").put("minecraft:weathered_cut_copper_slab", "minecraft:oxidized_cut_copper_slab").put("minecraft:semi_weathered_cut_copper_slab", "minecraft:weathered_cut_copper_slab").put("minecraft:lightly_weathered_cut_copper_slab", "minecraft:exposed_cut_copper_slab").put("minecraft:waxed_semi_weathered_copper", "minecraft:waxed_weathered_copper").put("minecraft:waxed_lightly_weathered_copper", "minecraft:waxed_exposed_copper").put("minecraft:waxed_semi_weathered_cut_copper", "minecraft:waxed_weathered_cut_copper").put("minecraft:waxed_lightly_weathered_cut_copper", "minecraft:waxed_exposed_cut_copper").put("minecraft:waxed_semi_weathered_cut_copper_stairs", "minecraft:waxed_weathered_cut_copper_stairs").put("minecraft:waxed_lightly_weathered_cut_copper_stairs", "minecraft:waxed_exposed_cut_copper_stairs").put("minecraft:waxed_semi_weathered_cut_copper_slab", "minecraft:waxed_weathered_cut_copper_slab").put("minecraft:waxed_lightly_weathered_cut_copper_slab", "minecraft:waxed_exposed_cut_copper_slab").build();
         dataFixerBuilder.addFixer(ItemRenameFix.create(schema133, "Renamed copper block items to new oxidized terms", createRenamer(immutableMap)));
         dataFixerBuilder.addFixer(BlockRenameFixWithJigsaw.create(schema133, "Renamed copper blocks to new oxidized terms", createRenamer(immutableMap)));
         Schema schema134 = dataFixerBuilder.addSchema(2691, SAME_NAMESPACED);
-        ImmutableMap<String, String> immutableMap2 = ImmutableMap.builder().put("minecraft:waxed_copper", "minecraft:waxed_copper_block").put("minecraft:oxidized_copper_block", "minecraft:oxidized_copper").put("minecraft:weathered_copper_block", "minecraft:weathered_copper").put("minecraft:exposed_copper_block", "minecraft:exposed_copper").build();
+        ImmutableMap<String, String> immutableMap2 = ImmutableMap.<String, String>builder().put("minecraft:waxed_copper", "minecraft:waxed_copper_block").put("minecraft:oxidized_copper_block", "minecraft:oxidized_copper").put("minecraft:weathered_copper_block", "minecraft:weathered_copper").put("minecraft:exposed_copper_block", "minecraft:exposed_copper").build();
         dataFixerBuilder.addFixer(ItemRenameFix.create(schema134, "Rename copper item suffixes", createRenamer(immutableMap2)));
         dataFixerBuilder.addFixer(BlockRenameFixWithJigsaw.create(schema134, "Rename copper blocks suffixes", createRenamer(immutableMap2)));
         Schema schema135 = dataFixerBuilder.addSchema(2693, SAME_NAMESPACED);
         dataFixerBuilder.addFixer(new AddFlagIfNotPresentFix(schema135, References.WORLD_GEN_SETTINGS, "has_increased_height_already", false));
         Schema schema136 = dataFixerBuilder.addSchema(2696, SAME_NAMESPACED);
-        ImmutableMap<String, String> immutableMap3 = ImmutableMap.builder().put("minecraft:grimstone", "minecraft:deepslate").put("minecraft:grimstone_slab", "minecraft:cobbled_deepslate_slab").put("minecraft:grimstone_stairs", "minecraft:cobbled_deepslate_stairs").put("minecraft:grimstone_wall", "minecraft:cobbled_deepslate_wall").put("minecraft:polished_grimstone", "minecraft:polished_deepslate").put("minecraft:polished_grimstone_slab", "minecraft:polished_deepslate_slab").put("minecraft:polished_grimstone_stairs", "minecraft:polished_deepslate_stairs").put("minecraft:polished_grimstone_wall", "minecraft:polished_deepslate_wall").put("minecraft:grimstone_tiles", "minecraft:deepslate_tiles").put("minecraft:grimstone_tile_slab", "minecraft:deepslate_tile_slab").put("minecraft:grimstone_tile_stairs", "minecraft:deepslate_tile_stairs").put("minecraft:grimstone_tile_wall", "minecraft:deepslate_tile_wall").put("minecraft:grimstone_bricks", "minecraft:deepslate_bricks").put("minecraft:grimstone_brick_slab", "minecraft:deepslate_brick_slab").put("minecraft:grimstone_brick_stairs", "minecraft:deepslate_brick_stairs").put("minecraft:grimstone_brick_wall", "minecraft:deepslate_brick_wall").put("minecraft:chiseled_grimstone", "minecraft:chiseled_deepslate").build();
+        ImmutableMap<String, String> immutableMap3 = ImmutableMap.<String, String>builder().put("minecraft:grimstone", "minecraft:deepslate").put("minecraft:grimstone_slab", "minecraft:cobbled_deepslate_slab").put("minecraft:grimstone_stairs", "minecraft:cobbled_deepslate_stairs").put("minecraft:grimstone_wall", "minecraft:cobbled_deepslate_wall").put("minecraft:polished_grimstone", "minecraft:polished_deepslate").put("minecraft:polished_grimstone_slab", "minecraft:polished_deepslate_slab").put("minecraft:polished_grimstone_stairs", "minecraft:polished_deepslate_stairs").put("minecraft:polished_grimstone_wall", "minecraft:polished_deepslate_wall").put("minecraft:grimstone_tiles", "minecraft:deepslate_tiles").put("minecraft:grimstone_tile_slab", "minecraft:deepslate_tile_slab").put("minecraft:grimstone_tile_stairs", "minecraft:deepslate_tile_stairs").put("minecraft:grimstone_tile_wall", "minecraft:deepslate_tile_wall").put("minecraft:grimstone_bricks", "minecraft:deepslate_bricks").put("minecraft:grimstone_brick_slab", "minecraft:deepslate_brick_slab").put("minecraft:grimstone_brick_stairs", "minecraft:deepslate_brick_stairs").put("minecraft:grimstone_brick_wall", "minecraft:deepslate_brick_wall").put("minecraft:chiseled_grimstone", "minecraft:chiseled_deepslate").build();
         dataFixerBuilder.addFixer(ItemRenameFix.create(schema136, "Renamed grimstone block items to deepslate", createRenamer(immutableMap3)));
         dataFixerBuilder.addFixer(BlockRenameFixWithJigsaw.create(schema136, "Renamed grimstone blocks to deepslate", createRenamer(immutableMap3)));
         Schema schema137 = dataFixerBuilder.addSchema(2700, SAME_NAMESPACED);
@@ -680,9 +680,9 @@ public class DataFixers {
         Schema schema161 = dataFixerBuilder.addSchema(3083, V3083::new);
         dataFixerBuilder.addFixer(new AddNewChoices(schema161, "Added Allay", References.ENTITY));
         Schema schema162 = dataFixerBuilder.addSchema(3084, SAME_NAMESPACED);
-        dataFixerBuilder.addFixer(new SimpleRenameFix(schema162, References.GAME_EVENT_NAME, ImmutableMap.builder().put("minecraft:block_press", "minecraft:block_activate").put("minecraft:block_switch", "minecraft:block_activate").put("minecraft:block_unpress", "minecraft:block_deactivate").put("minecraft:block_unswitch", "minecraft:block_deactivate").put("minecraft:drinking_finish", "minecraft:drink").put("minecraft:elytra_free_fall", "minecraft:elytra_glide").put("minecraft:entity_damaged", "minecraft:entity_damage").put("minecraft:entity_dying", "minecraft:entity_die").put("minecraft:entity_killed", "minecraft:entity_die").put("minecraft:mob_interact", "minecraft:entity_interact").put("minecraft:ravager_roar", "minecraft:entity_roar").put("minecraft:ring_bell", "minecraft:block_change").put("minecraft:shulker_close", "minecraft:container_close").put("minecraft:shulker_open", "minecraft:container_open").put("minecraft:wolf_shaking", "minecraft:entity_shake").build()));
+        dataFixerBuilder.addFixer(new SimpleRenameFix(schema162, References.GAME_EVENT_NAME, ImmutableMap.<String, String>builder().put("minecraft:block_press", "minecraft:block_activate").put("minecraft:block_switch", "minecraft:block_activate").put("minecraft:block_unpress", "minecraft:block_deactivate").put("minecraft:block_unswitch", "minecraft:block_deactivate").put("minecraft:drinking_finish", "minecraft:drink").put("minecraft:elytra_free_fall", "minecraft:elytra_glide").put("minecraft:entity_damaged", "minecraft:entity_damage").put("minecraft:entity_dying", "minecraft:entity_die").put("minecraft:entity_killed", "minecraft:entity_die").put("minecraft:mob_interact", "minecraft:entity_interact").put("minecraft:ravager_roar", "minecraft:entity_roar").put("minecraft:ring_bell", "minecraft:block_change").put("minecraft:shulker_close", "minecraft:container_close").put("minecraft:shulker_open", "minecraft:container_open").put("minecraft:wolf_shaking", "minecraft:entity_shake").build()));
         Schema schema163 = dataFixerBuilder.addSchema(3086, SAME_NAMESPACED);
-        dataFixerBuilder.addFixer(new EntityVariantFix(schema163, "Change cat variant type", References.ENTITY, "minecraft:cat", "CatType", Util.make(new Int2ObjectOpenHashMap(), (int2ObjectOpenHashMap) -> {
+        dataFixerBuilder.addFixer(new EntityVariantFix(schema163, "Change cat variant type", References.ENTITY, "minecraft:cat", "CatType", Util.make(new Int2ObjectOpenHashMap<String>(), (int2ObjectOpenHashMap) -> {
             int2ObjectOpenHashMap.defaultReturnValue("minecraft:tabby");
             int2ObjectOpenHashMap.put(0, "minecraft:tabby");
             int2ObjectOpenHashMap.put(1, "minecraft:black");
@@ -696,10 +696,10 @@ public class DataFixers {
             int2ObjectOpenHashMap.put(9, "minecraft:jellie");
             int2ObjectOpenHashMap.put(10, "minecraft:all_black");
         })::get));
-        ImmutableMap<String, String> immutableMap4 = ImmutableMap.builder().put("textures/entity/cat/tabby.png", "minecraft:tabby").put("textures/entity/cat/black.png", "minecraft:black").put("textures/entity/cat/red.png", "minecraft:red").put("textures/entity/cat/siamese.png", "minecraft:siamese").put("textures/entity/cat/british_shorthair.png", "minecraft:british").put("textures/entity/cat/calico.png", "minecraft:calico").put("textures/entity/cat/persian.png", "minecraft:persian").put("textures/entity/cat/ragdoll.png", "minecraft:ragdoll").put("textures/entity/cat/white.png", "minecraft:white").put("textures/entity/cat/jellie.png", "minecraft:jellie").put("textures/entity/cat/all_black.png", "minecraft:all_black").build();
+        ImmutableMap<String, String> immutableMap4 = ImmutableMap.<String, String>builder().put("textures/entity/cat/tabby.png", "minecraft:tabby").put("textures/entity/cat/black.png", "minecraft:black").put("textures/entity/cat/red.png", "minecraft:red").put("textures/entity/cat/siamese.png", "minecraft:siamese").put("textures/entity/cat/british_shorthair.png", "minecraft:british").put("textures/entity/cat/calico.png", "minecraft:calico").put("textures/entity/cat/persian.png", "minecraft:persian").put("textures/entity/cat/ragdoll.png", "minecraft:ragdoll").put("textures/entity/cat/white.png", "minecraft:white").put("textures/entity/cat/jellie.png", "minecraft:jellie").put("textures/entity/cat/all_black.png", "minecraft:all_black").build();
         dataFixerBuilder.addFixer(new CriteriaRenameFix(schema163, "Migrate cat variant advancement", "minecraft:husbandry/complete_catalogue", (s) -> (String)immutableMap4.getOrDefault(s, s)));
         Schema schema164 = dataFixerBuilder.addSchema(3087, SAME_NAMESPACED);
-        dataFixerBuilder.addFixer(new EntityVariantFix(schema164, "Change frog variant type", References.ENTITY, "minecraft:frog", "Variant", Util.make(new Int2ObjectOpenHashMap(), (int2ObjectOpenHashMap) -> {
+        dataFixerBuilder.addFixer(new EntityVariantFix(schema164, "Change frog variant type", References.ENTITY, "minecraft:frog", "Variant", Util.make(new Int2ObjectOpenHashMap<String>(), (int2ObjectOpenHashMap) -> {
             int2ObjectOpenHashMap.put(0, "minecraft:temperate");
             int2ObjectOpenHashMap.put(1, "minecraft:warm");
             int2ObjectOpenHashMap.put(2, "minecraft:cold");
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java
index 9bb677aeb69b03cf6d397a0a8969cbbeec814817..3c27cf8ee3836c68dc5a68c6df6722cddd5e6a72 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java
@@ -42,10 +42,10 @@ public abstract class AbstractUUIDFix extends DataFix {
 
     protected static Optional<Dynamic<?>> createUUIDFromString(Dynamic<?> dynamic, String s) {
         return dynamic.get(s).result().flatMap((dynamic2) -> {
-            String s = dynamic2.asString((String)null);
-            if (s != null) {
+            String str = dynamic2.asString((String)null);
+            if (str != null) {
                 try {
-                    UUID uuid = UUID.fromString(s);
+                    UUID uuid = UUID.fromString(str);
                     return createUUIDTag(dynamic, uuid.getMostSignificantBits(), uuid.getLeastSignificantBits());
                 } catch (IllegalArgumentException var4) {
                 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java b/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java
index 3ab0439256147535debf786cbe8ee81ccc5015c8..c97af610debc491cb5da67734b752f5a446fe36f 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java
@@ -27,10 +27,10 @@ public class AddNewChoices extends DataFix {
             throw new IllegalStateException("Could not inject: key type is not the same");
         } else {
             return this.fixTypeEverywhere(s, taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> {
-                    if (!taggedChoiceType2.hasType(pair.getFirst())) {
+                    if (!((TaggedChoiceType) taggedChoiceType2).hasType(pair.getFirst())) {
                         throw new IllegalArgumentException(String.format("Unknown type %s in %s ", pair.getFirst(), this.type));
                     } else {
-                        return pair;
+                        return (com.mojang.datafixers.util.Pair) pair;
                     }
                 });
         }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsFix.java
index 168660cdeb3d1bff72d2ff36d3a9f09ec2839400..e583ad6e2a14e268a5f9b14ac757145033891872 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsFix.java
@@ -5,7 +5,7 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class AdvancementsFix extends AdvancementsRenameFix {
-    private static final Map<String, String> RENAMES = ImmutableMap.builder().put("minecraft:recipes/brewing/speckled_melon", "minecraft:recipes/brewing/glistering_melon_slice").put("minecraft:recipes/building_blocks/black_stained_hardened_clay", "minecraft:recipes/building_blocks/black_terracotta").put("minecraft:recipes/building_blocks/blue_stained_hardened_clay", "minecraft:recipes/building_blocks/blue_terracotta").put("minecraft:recipes/building_blocks/brown_stained_hardened_clay", "minecraft:recipes/building_blocks/brown_terracotta").put("minecraft:recipes/building_blocks/cyan_stained_hardened_clay", "minecraft:recipes/building_blocks/cyan_terracotta").put("minecraft:recipes/building_blocks/gray_stained_hardened_clay", "minecraft:recipes/building_blocks/gray_terracotta").put("minecraft:recipes/building_blocks/green_stained_hardened_clay", "minecraft:recipes/building_blocks/green_terracotta").put("minecraft:recipes/building_blocks/light_blue_stained_hardened_clay", "minecraft:recipes/building_blocks/light_blue_terracotta").put("minecraft:recipes/building_blocks/light_gray_stained_hardened_clay", "minecraft:recipes/building_blocks/light_gray_terracotta").put("minecraft:recipes/building_blocks/lime_stained_hardened_clay", "minecraft:recipes/building_blocks/lime_terracotta").put("minecraft:recipes/building_blocks/magenta_stained_hardened_clay", "minecraft:recipes/building_blocks/magenta_terracotta").put("minecraft:recipes/building_blocks/orange_stained_hardened_clay", "minecraft:recipes/building_blocks/orange_terracotta").put("minecraft:recipes/building_blocks/pink_stained_hardened_clay", "minecraft:recipes/building_blocks/pink_terracotta").put("minecraft:recipes/building_blocks/purple_stained_hardened_clay", "minecraft:recipes/building_blocks/purple_terracotta").put("minecraft:recipes/building_blocks/red_stained_hardened_clay", "minecraft:recipes/building_blocks/red_terracotta").put("minecraft:recipes/building_blocks/white_stained_hardened_clay", "minecraft:recipes/building_blocks/white_terracotta").put("minecraft:recipes/building_blocks/yellow_stained_hardened_clay", "minecraft:recipes/building_blocks/yellow_terracotta").put("minecraft:recipes/building_blocks/acacia_wooden_slab", "minecraft:recipes/building_blocks/acacia_slab").put("minecraft:recipes/building_blocks/birch_wooden_slab", "minecraft:recipes/building_blocks/birch_slab").put("minecraft:recipes/building_blocks/dark_oak_wooden_slab", "minecraft:recipes/building_blocks/dark_oak_slab").put("minecraft:recipes/building_blocks/jungle_wooden_slab", "minecraft:recipes/building_blocks/jungle_slab").put("minecraft:recipes/building_blocks/oak_wooden_slab", "minecraft:recipes/building_blocks/oak_slab").put("minecraft:recipes/building_blocks/spruce_wooden_slab", "minecraft:recipes/building_blocks/spruce_slab").put("minecraft:recipes/building_blocks/brick_block", "minecraft:recipes/building_blocks/bricks").put("minecraft:recipes/building_blocks/chiseled_stonebrick", "minecraft:recipes/building_blocks/chiseled_stone_bricks").put("minecraft:recipes/building_blocks/end_bricks", "minecraft:recipes/building_blocks/end_stone_bricks").put("minecraft:recipes/building_blocks/lit_pumpkin", "minecraft:recipes/building_blocks/jack_o_lantern").put("minecraft:recipes/building_blocks/magma", "minecraft:recipes/building_blocks/magma_block").put("minecraft:recipes/building_blocks/melon_block", "minecraft:recipes/building_blocks/melon").put("minecraft:recipes/building_blocks/mossy_stonebrick", "minecraft:recipes/building_blocks/mossy_stone_bricks").put("minecraft:recipes/building_blocks/nether_brick", "minecraft:recipes/building_blocks/nether_bricks").put("minecraft:recipes/building_blocks/pillar_quartz_block", "minecraft:recipes/building_blocks/quartz_pillar").put("minecraft:recipes/building_blocks/red_nether_brick", "minecraft:recipes/building_blocks/red_nether_bricks").put("minecraft:recipes/building_blocks/snow", "minecraft:recipes/building_blocks/snow_block").put("minecraft:recipes/building_blocks/smooth_red_sandstone", "minecraft:recipes/building_blocks/cut_red_sandstone").put("minecraft:recipes/building_blocks/smooth_sandstone", "minecraft:recipes/building_blocks/cut_sandstone").put("minecraft:recipes/building_blocks/stonebrick", "minecraft:recipes/building_blocks/stone_bricks").put("minecraft:recipes/building_blocks/stone_stairs", "minecraft:recipes/building_blocks/cobblestone_stairs").put("minecraft:recipes/building_blocks/string_to_wool", "minecraft:recipes/building_blocks/white_wool_from_string").put("minecraft:recipes/decorations/fence", "minecraft:recipes/decorations/oak_fence").put("minecraft:recipes/decorations/purple_shulker_box", "minecraft:recipes/decorations/shulker_box").put("minecraft:recipes/decorations/slime", "minecraft:recipes/decorations/slime_block").put("minecraft:recipes/decorations/snow_layer", "minecraft:recipes/decorations/snow").put("minecraft:recipes/misc/bone_meal_from_block", "minecraft:recipes/misc/bone_meal_from_bone_block").put("minecraft:recipes/misc/bone_meal_from_bone", "minecraft:recipes/misc/bone_meal").put("minecraft:recipes/misc/gold_ingot_from_block", "minecraft:recipes/misc/gold_ingot_from_gold_block").put("minecraft:recipes/misc/iron_ingot_from_block", "minecraft:recipes/misc/iron_ingot_from_iron_block").put("minecraft:recipes/redstone/fence_gate", "minecraft:recipes/redstone/oak_fence_gate").put("minecraft:recipes/redstone/noteblock", "minecraft:recipes/redstone/note_block").put("minecraft:recipes/redstone/trapdoor", "minecraft:recipes/redstone/oak_trapdoor").put("minecraft:recipes/redstone/wooden_button", "minecraft:recipes/redstone/oak_button").put("minecraft:recipes/redstone/wooden_door", "minecraft:recipes/redstone/oak_door").put("minecraft:recipes/redstone/wooden_pressure_plate", "minecraft:recipes/redstone/oak_pressure_plate").put("minecraft:recipes/transportation/boat", "minecraft:recipes/transportation/oak_boat").put("minecraft:recipes/transportation/golden_rail", "minecraft:recipes/transportation/powered_rail").build();
+    private static final Map<String, String> RENAMES = ImmutableMap.<String, String>builder().put("minecraft:recipes/brewing/speckled_melon", "minecraft:recipes/brewing/glistering_melon_slice").put("minecraft:recipes/building_blocks/black_stained_hardened_clay", "minecraft:recipes/building_blocks/black_terracotta").put("minecraft:recipes/building_blocks/blue_stained_hardened_clay", "minecraft:recipes/building_blocks/blue_terracotta").put("minecraft:recipes/building_blocks/brown_stained_hardened_clay", "minecraft:recipes/building_blocks/brown_terracotta").put("minecraft:recipes/building_blocks/cyan_stained_hardened_clay", "minecraft:recipes/building_blocks/cyan_terracotta").put("minecraft:recipes/building_blocks/gray_stained_hardened_clay", "minecraft:recipes/building_blocks/gray_terracotta").put("minecraft:recipes/building_blocks/green_stained_hardened_clay", "minecraft:recipes/building_blocks/green_terracotta").put("minecraft:recipes/building_blocks/light_blue_stained_hardened_clay", "minecraft:recipes/building_blocks/light_blue_terracotta").put("minecraft:recipes/building_blocks/light_gray_stained_hardened_clay", "minecraft:recipes/building_blocks/light_gray_terracotta").put("minecraft:recipes/building_blocks/lime_stained_hardened_clay", "minecraft:recipes/building_blocks/lime_terracotta").put("minecraft:recipes/building_blocks/magenta_stained_hardened_clay", "minecraft:recipes/building_blocks/magenta_terracotta").put("minecraft:recipes/building_blocks/orange_stained_hardened_clay", "minecraft:recipes/building_blocks/orange_terracotta").put("minecraft:recipes/building_blocks/pink_stained_hardened_clay", "minecraft:recipes/building_blocks/pink_terracotta").put("minecraft:recipes/building_blocks/purple_stained_hardened_clay", "minecraft:recipes/building_blocks/purple_terracotta").put("minecraft:recipes/building_blocks/red_stained_hardened_clay", "minecraft:recipes/building_blocks/red_terracotta").put("minecraft:recipes/building_blocks/white_stained_hardened_clay", "minecraft:recipes/building_blocks/white_terracotta").put("minecraft:recipes/building_blocks/yellow_stained_hardened_clay", "minecraft:recipes/building_blocks/yellow_terracotta").put("minecraft:recipes/building_blocks/acacia_wooden_slab", "minecraft:recipes/building_blocks/acacia_slab").put("minecraft:recipes/building_blocks/birch_wooden_slab", "minecraft:recipes/building_blocks/birch_slab").put("minecraft:recipes/building_blocks/dark_oak_wooden_slab", "minecraft:recipes/building_blocks/dark_oak_slab").put("minecraft:recipes/building_blocks/jungle_wooden_slab", "minecraft:recipes/building_blocks/jungle_slab").put("minecraft:recipes/building_blocks/oak_wooden_slab", "minecraft:recipes/building_blocks/oak_slab").put("minecraft:recipes/building_blocks/spruce_wooden_slab", "minecraft:recipes/building_blocks/spruce_slab").put("minecraft:recipes/building_blocks/brick_block", "minecraft:recipes/building_blocks/bricks").put("minecraft:recipes/building_blocks/chiseled_stonebrick", "minecraft:recipes/building_blocks/chiseled_stone_bricks").put("minecraft:recipes/building_blocks/end_bricks", "minecraft:recipes/building_blocks/end_stone_bricks").put("minecraft:recipes/building_blocks/lit_pumpkin", "minecraft:recipes/building_blocks/jack_o_lantern").put("minecraft:recipes/building_blocks/magma", "minecraft:recipes/building_blocks/magma_block").put("minecraft:recipes/building_blocks/melon_block", "minecraft:recipes/building_blocks/melon").put("minecraft:recipes/building_blocks/mossy_stonebrick", "minecraft:recipes/building_blocks/mossy_stone_bricks").put("minecraft:recipes/building_blocks/nether_brick", "minecraft:recipes/building_blocks/nether_bricks").put("minecraft:recipes/building_blocks/pillar_quartz_block", "minecraft:recipes/building_blocks/quartz_pillar").put("minecraft:recipes/building_blocks/red_nether_brick", "minecraft:recipes/building_blocks/red_nether_bricks").put("minecraft:recipes/building_blocks/snow", "minecraft:recipes/building_blocks/snow_block").put("minecraft:recipes/building_blocks/smooth_red_sandstone", "minecraft:recipes/building_blocks/cut_red_sandstone").put("minecraft:recipes/building_blocks/smooth_sandstone", "minecraft:recipes/building_blocks/cut_sandstone").put("minecraft:recipes/building_blocks/stonebrick", "minecraft:recipes/building_blocks/stone_bricks").put("minecraft:recipes/building_blocks/stone_stairs", "minecraft:recipes/building_blocks/cobblestone_stairs").put("minecraft:recipes/building_blocks/string_to_wool", "minecraft:recipes/building_blocks/white_wool_from_string").put("minecraft:recipes/decorations/fence", "minecraft:recipes/decorations/oak_fence").put("minecraft:recipes/decorations/purple_shulker_box", "minecraft:recipes/decorations/shulker_box").put("minecraft:recipes/decorations/slime", "minecraft:recipes/decorations/slime_block").put("minecraft:recipes/decorations/snow_layer", "minecraft:recipes/decorations/snow").put("minecraft:recipes/misc/bone_meal_from_block", "minecraft:recipes/misc/bone_meal_from_bone_block").put("minecraft:recipes/misc/bone_meal_from_bone", "minecraft:recipes/misc/bone_meal").put("minecraft:recipes/misc/gold_ingot_from_block", "minecraft:recipes/misc/gold_ingot_from_gold_block").put("minecraft:recipes/misc/iron_ingot_from_block", "minecraft:recipes/misc/iron_ingot_from_iron_block").put("minecraft:recipes/redstone/fence_gate", "minecraft:recipes/redstone/oak_fence_gate").put("minecraft:recipes/redstone/noteblock", "minecraft:recipes/redstone/note_block").put("minecraft:recipes/redstone/trapdoor", "minecraft:recipes/redstone/oak_trapdoor").put("minecraft:recipes/redstone/wooden_button", "minecraft:recipes/redstone/oak_button").put("minecraft:recipes/redstone/wooden_door", "minecraft:recipes/redstone/oak_door").put("minecraft:recipes/redstone/wooden_pressure_plate", "minecraft:recipes/redstone/oak_pressure_plate").put("minecraft:recipes/transportation/boat", "minecraft:recipes/transportation/oak_boat").put("minecraft:recipes/transportation/golden_rail", "minecraft:recipes/transportation/powered_rail").build();
 
     public AdvancementsFix(Schema schema, boolean flag) {
         super(schema, flag, "AdvancementsFix", (s) -> (String)RENAMES.getOrDefault(s, s));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java b/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java
index 84e34e10e7adc02746a439c5e5a0455300e4dc4f..daf42bdafcab9dc6d8f79c5fb1ff35a21bccf8cb 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java
@@ -13,7 +13,7 @@ import com.mojang.serialization.Dynamic;
 import java.util.Map;
 
 public class AttributesRename extends DataFix {
-    private static final Map<String, String> RENAMES = ImmutableMap.builder().put("generic.maxHealth", "generic.max_health").put("Max Health", "generic.max_health").put("zombie.spawnReinforcements", "zombie.spawn_reinforcements").put("Spawn Reinforcements Chance", "zombie.spawn_reinforcements").put("horse.jumpStrength", "horse.jump_strength").put("Jump Strength", "horse.jump_strength").put("generic.followRange", "generic.follow_range").put("Follow Range", "generic.follow_range").put("generic.knockbackResistance", "generic.knockback_resistance").put("Knockback Resistance", "generic.knockback_resistance").put("generic.movementSpeed", "generic.movement_speed").put("Movement Speed", "generic.movement_speed").put("generic.flyingSpeed", "generic.flying_speed").put("Flying Speed", "generic.flying_speed").put("generic.attackDamage", "generic.attack_damage").put("generic.attackKnockback", "generic.attack_knockback").put("generic.attackSpeed", "generic.attack_speed").put("generic.armorToughness", "generic.armor_toughness").build();
+    private static final Map<String, String> RENAMES = ImmutableMap.<String, String>builder().put("generic.maxHealth", "generic.max_health").put("Max Health", "generic.max_health").put("zombie.spawnReinforcements", "zombie.spawn_reinforcements").put("Spawn Reinforcements Chance", "zombie.spawn_reinforcements").put("horse.jumpStrength", "horse.jump_strength").put("Jump Strength", "horse.jump_strength").put("generic.followRange", "generic.follow_range").put("Follow Range", "generic.follow_range").put("generic.knockbackResistance", "generic.knockback_resistance").put("Knockback Resistance", "generic.knockback_resistance").put("generic.movementSpeed", "generic.movement_speed").put("Movement Speed", "generic.movement_speed").put("generic.flyingSpeed", "generic.flying_speed").put("Flying Speed", "generic.flying_speed").put("generic.attackDamage", "generic.attack_damage").put("generic.attackKnockback", "generic.attack_knockback").put("generic.attackSpeed", "generic.attack_speed").put("generic.armorToughness", "generic.armor_toughness").build();
 
     public AttributesRename(Schema schema) {
         super(schema, false);
@@ -30,10 +30,10 @@ public class AttributesRename extends DataFix {
     }
 
     private static Typed<?> fixItemStackTag(Typed<?> typed) {
-        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("AttributeModifiers", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamic) -> dynamic.update("AttributeName", AttributesRename::fixName))).map(dynamicx::createList), dynamicx)));
+        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("AttributeModifiers", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamicIn) -> dynamicIn.update("AttributeName", AttributesRename::fixName))).map(dynamicx::createList), dynamicx)));
     }
 
     private static Typed<?> fixEntity(Typed<?> typed) {
-        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Attributes", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamic) -> dynamic.update("Name", AttributesRename::fixName))).map(dynamicx::createList), dynamicx)));
+        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Attributes", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamicIn) -> dynamicIn.update("Name", AttributesRename::fixName))).map(dynamicx::createList), dynamicx)));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BiomeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BiomeFix.java
index 04fec0c98753679661a17c2dd33f8839bb204124..be972e0b8e6bdfe19a4e47dbdc95de7498d0f4fe 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BiomeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BiomeFix.java
@@ -5,7 +5,7 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class BiomeFix extends RenameBiomesFix {
-    public static final Map<String, String> BIOMES = ImmutableMap.builder().put("minecraft:extreme_hills", "minecraft:mountains").put("minecraft:swampland", "minecraft:swamp").put("minecraft:hell", "minecraft:nether_wastes").put("minecraft:sky", "minecraft:the_end").put("minecraft:ice_flats", "minecraft:snowy_tundra").put("minecraft:ice_mountains", "minecraft:snowy_mountains").put("minecraft:mushroom_island", "minecraft:mushroom_fields").put("minecraft:mushroom_island_shore", "minecraft:mushroom_field_shore").put("minecraft:beaches", "minecraft:beach").put("minecraft:forest_hills", "minecraft:wooded_hills").put("minecraft:smaller_extreme_hills", "minecraft:mountain_edge").put("minecraft:stone_beach", "minecraft:stone_shore").put("minecraft:cold_beach", "minecraft:snowy_beach").put("minecraft:roofed_forest", "minecraft:dark_forest").put("minecraft:taiga_cold", "minecraft:snowy_taiga").put("minecraft:taiga_cold_hills", "minecraft:snowy_taiga_hills").put("minecraft:redwood_taiga", "minecraft:giant_tree_taiga").put("minecraft:redwood_taiga_hills", "minecraft:giant_tree_taiga_hills").put("minecraft:extreme_hills_with_trees", "minecraft:wooded_mountains").put("minecraft:savanna_rock", "minecraft:savanna_plateau").put("minecraft:mesa", "minecraft:badlands").put("minecraft:mesa_rock", "minecraft:wooded_badlands_plateau").put("minecraft:mesa_clear_rock", "minecraft:badlands_plateau").put("minecraft:sky_island_low", "minecraft:small_end_islands").put("minecraft:sky_island_medium", "minecraft:end_midlands").put("minecraft:sky_island_high", "minecraft:end_highlands").put("minecraft:sky_island_barren", "minecraft:end_barrens").put("minecraft:void", "minecraft:the_void").put("minecraft:mutated_plains", "minecraft:sunflower_plains").put("minecraft:mutated_desert", "minecraft:desert_lakes").put("minecraft:mutated_extreme_hills", "minecraft:gravelly_mountains").put("minecraft:mutated_forest", "minecraft:flower_forest").put("minecraft:mutated_taiga", "minecraft:taiga_mountains").put("minecraft:mutated_swampland", "minecraft:swamp_hills").put("minecraft:mutated_ice_flats", "minecraft:ice_spikes").put("minecraft:mutated_jungle", "minecraft:modified_jungle").put("minecraft:mutated_jungle_edge", "minecraft:modified_jungle_edge").put("minecraft:mutated_birch_forest", "minecraft:tall_birch_forest").put("minecraft:mutated_birch_forest_hills", "minecraft:tall_birch_hills").put("minecraft:mutated_roofed_forest", "minecraft:dark_forest_hills").put("minecraft:mutated_taiga_cold", "minecraft:snowy_taiga_mountains").put("minecraft:mutated_redwood_taiga", "minecraft:giant_spruce_taiga").put("minecraft:mutated_redwood_taiga_hills", "minecraft:giant_spruce_taiga_hills").put("minecraft:mutated_extreme_hills_with_trees", "minecraft:modified_gravelly_mountains").put("minecraft:mutated_savanna", "minecraft:shattered_savanna").put("minecraft:mutated_savanna_rock", "minecraft:shattered_savanna_plateau").put("minecraft:mutated_mesa", "minecraft:eroded_badlands").put("minecraft:mutated_mesa_rock", "minecraft:modified_wooded_badlands_plateau").put("minecraft:mutated_mesa_clear_rock", "minecraft:modified_badlands_plateau").put("minecraft:warm_deep_ocean", "minecraft:deep_warm_ocean").put("minecraft:lukewarm_deep_ocean", "minecraft:deep_lukewarm_ocean").put("minecraft:cold_deep_ocean", "minecraft:deep_cold_ocean").put("minecraft:frozen_deep_ocean", "minecraft:deep_frozen_ocean").build();
+    public static final Map<String, String> BIOMES = ImmutableMap.<String, String>builder().put("minecraft:extreme_hills", "minecraft:mountains").put("minecraft:swampland", "minecraft:swamp").put("minecraft:hell", "minecraft:nether_wastes").put("minecraft:sky", "minecraft:the_end").put("minecraft:ice_flats", "minecraft:snowy_tundra").put("minecraft:ice_mountains", "minecraft:snowy_mountains").put("minecraft:mushroom_island", "minecraft:mushroom_fields").put("minecraft:mushroom_island_shore", "minecraft:mushroom_field_shore").put("minecraft:beaches", "minecraft:beach").put("minecraft:forest_hills", "minecraft:wooded_hills").put("minecraft:smaller_extreme_hills", "minecraft:mountain_edge").put("minecraft:stone_beach", "minecraft:stone_shore").put("minecraft:cold_beach", "minecraft:snowy_beach").put("minecraft:roofed_forest", "minecraft:dark_forest").put("minecraft:taiga_cold", "minecraft:snowy_taiga").put("minecraft:taiga_cold_hills", "minecraft:snowy_taiga_hills").put("minecraft:redwood_taiga", "minecraft:giant_tree_taiga").put("minecraft:redwood_taiga_hills", "minecraft:giant_tree_taiga_hills").put("minecraft:extreme_hills_with_trees", "minecraft:wooded_mountains").put("minecraft:savanna_rock", "minecraft:savanna_plateau").put("minecraft:mesa", "minecraft:badlands").put("minecraft:mesa_rock", "minecraft:wooded_badlands_plateau").put("minecraft:mesa_clear_rock", "minecraft:badlands_plateau").put("minecraft:sky_island_low", "minecraft:small_end_islands").put("minecraft:sky_island_medium", "minecraft:end_midlands").put("minecraft:sky_island_high", "minecraft:end_highlands").put("minecraft:sky_island_barren", "minecraft:end_barrens").put("minecraft:void", "minecraft:the_void").put("minecraft:mutated_plains", "minecraft:sunflower_plains").put("minecraft:mutated_desert", "minecraft:desert_lakes").put("minecraft:mutated_extreme_hills", "minecraft:gravelly_mountains").put("minecraft:mutated_forest", "minecraft:flower_forest").put("minecraft:mutated_taiga", "minecraft:taiga_mountains").put("minecraft:mutated_swampland", "minecraft:swamp_hills").put("minecraft:mutated_ice_flats", "minecraft:ice_spikes").put("minecraft:mutated_jungle", "minecraft:modified_jungle").put("minecraft:mutated_jungle_edge", "minecraft:modified_jungle_edge").put("minecraft:mutated_birch_forest", "minecraft:tall_birch_forest").put("minecraft:mutated_birch_forest_hills", "minecraft:tall_birch_hills").put("minecraft:mutated_roofed_forest", "minecraft:dark_forest_hills").put("minecraft:mutated_taiga_cold", "minecraft:snowy_taiga_mountains").put("minecraft:mutated_redwood_taiga", "minecraft:giant_spruce_taiga").put("minecraft:mutated_redwood_taiga_hills", "minecraft:giant_spruce_taiga_hills").put("minecraft:mutated_extreme_hills_with_trees", "minecraft:modified_gravelly_mountains").put("minecraft:mutated_savanna", "minecraft:shattered_savanna").put("minecraft:mutated_savanna_rock", "minecraft:shattered_savanna_plateau").put("minecraft:mutated_mesa", "minecraft:eroded_badlands").put("minecraft:mutated_mesa_rock", "minecraft:modified_wooded_badlands_plateau").put("minecraft:mutated_mesa_clear_rock", "minecraft:modified_badlands_plateau").put("minecraft:warm_deep_ocean", "minecraft:deep_warm_ocean").put("minecraft:lukewarm_deep_ocean", "minecraft:deep_lukewarm_ocean").put("minecraft:cold_deep_ocean", "minecraft:deep_cold_ocean").put("minecraft:frozen_deep_ocean", "minecraft:deep_frozen_ocean").build();
 
     public BiomeFix(Schema schema, boolean flag) {
         super(schema, flag, "Biomes fix", BIOMES);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BitStorageAlignFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BitStorageAlignFix.java
index 31344fb9159f61033eabd823aa86a4c249d6098b..bb5ea649d9be4e832af6f5145e5aada2cf352b37 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BitStorageAlignFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BitStorageAlignFix.java
@@ -40,13 +40,13 @@ public class BitStorageAlignFix extends DataFix {
     }
 
     private Typed<?> updateHeightmaps(Typed<?> typed) {
-        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Heightmaps", (dynamic2) -> dynamic2.updateMapValues((pair) -> pair.mapSecond((dynamic2) -> updateBitStorage(dynamic, dynamic2, 256, 9)))));
+        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Heightmaps", (dynamic2) -> dynamic2.updateMapValues((pair) -> pair.mapSecond((dynamicIn2) -> updateBitStorage(dynamic, dynamicIn2, 256, 9)))));
     }
 
     private static Typed<?> updateSections(OpticFinder<?> opticFinder, OpticFinder<?> opticFinder2, OpticFinder<List<Pair<String, Dynamic<?>>>> opticFinder3, Typed<?> typed) {
-        return typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> {
-                int i = typed.getOptional(opticFinder3).map((list) -> Math.max(4, DataFixUtils.ceillog2(list.size()))).orElse(0);
-                return i != 0 && !Mth.isPowerOfTwo(i) ? typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("BlockStates", (dynamic2) -> updateBitStorage(dynamic, dynamic2, 4096, i))) : typed;
+        return typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedIn) -> {
+                int i = typedIn.getOptional(opticFinder3).map((list) -> Math.max(4, DataFixUtils.ceillog2(list.size()))).orElse(0);
+                return i != 0 && !Mth.isPowerOfTwo(i) ? typedIn.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("BlockStates", (dynamic2) -> updateBitStorage(dynamic, dynamic2, 4096, i))) : typedIn;
             }));
     }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java
index c1287656922f0182ea234ae79453b66e1969b3fb..e74a7b50cbdf15015fcb6fc00a21386d9175bcf9 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java
@@ -13,7 +13,7 @@ public class BlockEntityBannerColorFix extends NamedEntityFix {
 
     public Dynamic<?> fixTag(Dynamic<?> dynamic) {
         dynamic = dynamic.update("Base", (dynamicx) -> dynamicx.createInt(15 - dynamicx.asInt(0)));
-        return dynamic.update("Patterns", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().map((stream) -> stream.map((dynamic) -> dynamic.update("Color", (dynamicx) -> dynamicx.createInt(15 - dynamicx.asInt(0))))).map(dynamicx::createList).result(), dynamicx));
+        return dynamic.update("Patterns", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().map((stream) -> stream.map((dynamicIn) -> dynamicIn.update("Color", (dynamicIn2) -> dynamicIn2.createInt(15 - dynamicIn2.asInt(0))))).map(dynamicx::createList).result(), dynamicx));
     }
 
     protected Typed<?> fix(Typed<?> typed) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java
index 5c8781febffe89c501141800da2b160a2d5d93dd..47ccd0ca23170c3cd862478730a8fda33ba1b766 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java
@@ -43,8 +43,8 @@ public class BlockEntityIdFix extends DataFix {
     public TypeRewriteRule makeRule() {
         Type<?> type = this.getInputSchema().getType(References.ITEM_STACK);
         Type<?> type2 = this.getOutputSchema().getType(References.ITEM_STACK);
-        TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
-        TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY);
+        TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
+        TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY);
         return TypeRewriteRule.seq(this.convertUnchecked("item stack block entity name hook converter", type, type2), this.fixTypeEverywhere("BlockEntityIdFix", taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> pair.mapFirst((s) -> (String)ID_MAP.getOrDefault(s, s))));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java
index 3ea9ec7648de70bc3e0c0c6f65418407c1d3b6a9..8c6676f045fb6a5086a71e60fc71a6a2752610bf 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java
@@ -17,7 +17,7 @@ public class BlockEntityUUIDFix extends AbstractUUIDFix {
     }
 
     private Dynamic<?> updateSkull(Dynamic<?> dynamic) {
-        return dynamic.get("Owner").get().map((dynamicx) -> replaceUUIDString(dynamicx, "Id", "Id").orElse(dynamicx)).map((dynamic2) -> dynamic.remove("Owner").set("SkullOwner", dynamic2)).result().orElse(dynamic);
+        return dynamic.get("Owner").get().map((dynamicx) -> replaceUUIDString(dynamicx, "Id", "Id").orElse(dynamicx)).map((dynamic2) -> dynamic.remove("Owner").set("SkullOwner", dynamic2)).result().orElse((Dynamic) dynamic);
     }
 
     private Dynamic<?> updateConduit(Dynamic<?> dynamic) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFixWithJigsaw.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFixWithJigsaw.java
index cc453beff9635ae1389f86d40201d88f0163cb8e..f6891a378a35892a02d295993a0239676f70ce63 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFixWithJigsaw.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFixWithJigsaw.java
@@ -22,10 +22,10 @@ public abstract class BlockRenameFixWithJigsaw extends BlockRenameFix {
         TypeReference typeReference = References.BLOCK_ENTITY;
         String s = "minecraft:jigsaw";
         OpticFinder<?> opticFinder = DSL.namedChoice("minecraft:jigsaw", this.getInputSchema().getChoiceType(typeReference, "minecraft:jigsaw"));
-        TypeRewriteRule typeRewriteRule = this.fixTypeEverywhereTyped(this.name + " for jigsaw state", this.getInputSchema().getType(typeReference), this.getOutputSchema().getType(typeReference), (typed) -> typed.updateTyped(opticFinder, this.getOutputSchema().getChoiceType(typeReference, "minecraft:jigsaw"), (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("final_state", (dynamic2) -> DataFixUtils.orElse(dynamic2.asString().result().map((s) -> {
-                            int i = s.indexOf(91);
-                            int i2 = s.indexOf(123);
-                            int i3 = s.length();
+        TypeRewriteRule typeRewriteRule = this.fixTypeEverywhereTyped(this.name + " for jigsaw state", this.getInputSchema().getType(typeReference), this.getOutputSchema().getType(typeReference), (typed) -> typed.updateTyped(opticFinder, this.getOutputSchema().getChoiceType(typeReference, "minecraft:jigsaw"), (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("final_state", (dynamic2) -> DataFixUtils.orElse(dynamic2.asString().result().map((str) -> {
+                            int i = str.indexOf(91);
+                            int i2 = str.indexOf(123);
+                            int i3 = str.length();
                             if (i > 0) {
                                 i3 = Math.min(i3, i);
                             }
@@ -34,9 +34,9 @@ public abstract class BlockRenameFixWithJigsaw extends BlockRenameFix {
                                 i3 = Math.min(i3, i2);
                             }
 
-                            String s2 = s.substring(0, i3);
+                            String s2 = str.substring(0, i3);
                             String s3 = this.fixBlock(s2);
-                            return s3 + s.substring(i3);
+                            return s3 + str.substring(i3);
                         }).map(dynamic::createString), dynamic2)))));
         return TypeRewriteRule.seq(super.makeRule(), typeRewriteRule);
     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/CavesAndCliffsRenames.java b/src/main/java/net/minecraft/util/datafix/fixes/CavesAndCliffsRenames.java
index d6aa74de191db9769783d9ce280f2ddb1825a592..55e188467327ddd0d720fd3670e2acdfc885e4ea 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/CavesAndCliffsRenames.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/CavesAndCliffsRenames.java
@@ -3,7 +3,7 @@ package net.minecraft.util.datafix.fixes;
 import com.google.common.collect.ImmutableMap;
 
 public final class CavesAndCliffsRenames {
-    public static final ImmutableMap<String, String> RENAMES = ImmutableMap.builder().put("minecraft:badlands_plateau", "minecraft:badlands").put("minecraft:bamboo_jungle_hills", "minecraft:bamboo_jungle").put("minecraft:birch_forest_hills", "minecraft:birch_forest").put("minecraft:dark_forest_hills", "minecraft:dark_forest").put("minecraft:desert_hills", "minecraft:desert").put("minecraft:desert_lakes", "minecraft:desert").put("minecraft:giant_spruce_taiga_hills", "minecraft:old_growth_spruce_taiga").put("minecraft:giant_spruce_taiga", "minecraft:old_growth_spruce_taiga").put("minecraft:giant_tree_taiga_hills", "minecraft:old_growth_pine_taiga").put("minecraft:giant_tree_taiga", "minecraft:old_growth_pine_taiga").put("minecraft:gravelly_mountains", "minecraft:windswept_gravelly_hills").put("minecraft:jungle_edge", "minecraft:sparse_jungle").put("minecraft:jungle_hills", "minecraft:jungle").put("minecraft:modified_badlands_plateau", "minecraft:badlands").put("minecraft:modified_gravelly_mountains", "minecraft:windswept_gravelly_hills").put("minecraft:modified_jungle_edge", "minecraft:sparse_jungle").put("minecraft:modified_jungle", "minecraft:jungle").put("minecraft:modified_wooded_badlands_plateau", "minecraft:wooded_badlands").put("minecraft:mountain_edge", "minecraft:windswept_hills").put("minecraft:mountains", "minecraft:windswept_hills").put("minecraft:mushroom_field_shore", "minecraft:mushroom_fields").put("minecraft:shattered_savanna", "minecraft:windswept_savanna").put("minecraft:shattered_savanna_plateau", "minecraft:windswept_savanna").put("minecraft:snowy_mountains", "minecraft:snowy_plains").put("minecraft:snowy_taiga_hills", "minecraft:snowy_taiga").put("minecraft:snowy_taiga_mountains", "minecraft:snowy_taiga").put("minecraft:snowy_tundra", "minecraft:snowy_plains").put("minecraft:stone_shore", "minecraft:stony_shore").put("minecraft:swamp_hills", "minecraft:swamp").put("minecraft:taiga_hills", "minecraft:taiga").put("minecraft:taiga_mountains", "minecraft:taiga").put("minecraft:tall_birch_forest", "minecraft:old_growth_birch_forest").put("minecraft:tall_birch_hills", "minecraft:old_growth_birch_forest").put("minecraft:wooded_badlands_plateau", "minecraft:wooded_badlands").put("minecraft:wooded_hills", "minecraft:forest").put("minecraft:wooded_mountains", "minecraft:windswept_forest").put("minecraft:lofty_peaks", "minecraft:jagged_peaks").put("minecraft:snowcapped_peaks", "minecraft:frozen_peaks").build();
+    public static final ImmutableMap<String, String> RENAMES = ImmutableMap.<String, String>builder().put("minecraft:badlands_plateau", "minecraft:badlands").put("minecraft:bamboo_jungle_hills", "minecraft:bamboo_jungle").put("minecraft:birch_forest_hills", "minecraft:birch_forest").put("minecraft:dark_forest_hills", "minecraft:dark_forest").put("minecraft:desert_hills", "minecraft:desert").put("minecraft:desert_lakes", "minecraft:desert").put("minecraft:giant_spruce_taiga_hills", "minecraft:old_growth_spruce_taiga").put("minecraft:giant_spruce_taiga", "minecraft:old_growth_spruce_taiga").put("minecraft:giant_tree_taiga_hills", "minecraft:old_growth_pine_taiga").put("minecraft:giant_tree_taiga", "minecraft:old_growth_pine_taiga").put("minecraft:gravelly_mountains", "minecraft:windswept_gravelly_hills").put("minecraft:jungle_edge", "minecraft:sparse_jungle").put("minecraft:jungle_hills", "minecraft:jungle").put("minecraft:modified_badlands_plateau", "minecraft:badlands").put("minecraft:modified_gravelly_mountains", "minecraft:windswept_gravelly_hills").put("minecraft:modified_jungle_edge", "minecraft:sparse_jungle").put("minecraft:modified_jungle", "minecraft:jungle").put("minecraft:modified_wooded_badlands_plateau", "minecraft:wooded_badlands").put("minecraft:mountain_edge", "minecraft:windswept_hills").put("minecraft:mountains", "minecraft:windswept_hills").put("minecraft:mushroom_field_shore", "minecraft:mushroom_fields").put("minecraft:shattered_savanna", "minecraft:windswept_savanna").put("minecraft:shattered_savanna_plateau", "minecraft:windswept_savanna").put("minecraft:snowy_mountains", "minecraft:snowy_plains").put("minecraft:snowy_taiga_hills", "minecraft:snowy_taiga").put("minecraft:snowy_taiga_mountains", "minecraft:snowy_taiga").put("minecraft:snowy_tundra", "minecraft:snowy_plains").put("minecraft:stone_shore", "minecraft:stony_shore").put("minecraft:swamp_hills", "minecraft:swamp").put("minecraft:taiga_hills", "minecraft:taiga").put("minecraft:taiga_mountains", "minecraft:taiga").put("minecraft:tall_birch_forest", "minecraft:old_growth_birch_forest").put("minecraft:tall_birch_hills", "minecraft:old_growth_birch_forest").put("minecraft:wooded_badlands_plateau", "minecraft:wooded_badlands").put("minecraft:wooded_hills", "minecraft:forest").put("minecraft:wooded_mountains", "minecraft:windswept_forest").put("minecraft:lofty_peaks", "minecraft:jagged_peaks").put("minecraft:snowcapped_peaks", "minecraft:frozen_peaks").build();
 
     private CavesAndCliffsRenames() {
     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkBedBlockEntityInjecterFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkBedBlockEntityInjecterFix.java
index b2e42841c2df2ea282a1b940375499103ac6ae8d..bd36d76e52ce6bf90b26e4518f7a50eb5244fb2c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkBedBlockEntityInjecterFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkBedBlockEntityInjecterFix.java
@@ -12,6 +12,8 @@ import com.mojang.datafixers.types.Type;
 import com.mojang.datafixers.types.templates.List.ListType;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.Dynamic;
+
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.function.Function;
@@ -39,11 +41,11 @@ public class ChunkBedBlockEntityInjecterFix extends DataFix {
         OpticFinder<?> opticFinder = DSL.fieldFinder("Level", type);
         OpticFinder<List<TE>> opticFinder2 = DSL.fieldFinder("TileEntities", listType);
         int i = 416;
-        return TypeRewriteRule.seq(this.fixTypeEverywhere("InjectBedBlockEntityType", this.getInputSchema().findChoiceType(References.BLOCK_ENTITY), this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY), (dynamicOps) -> (pair) -> pair), this.fixTypeEverywhereTyped("BedBlockEntityInjecter", this.getOutputSchema().getType(References.CHUNK), (typed) -> {
+        return TypeRewriteRule.seq(this.fixTypeEverywhere("InjectBedBlockEntityType", this.getInputSchema().findChoiceType(References.BLOCK_ENTITY), this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY), (dynamicOps) -> (pair) -> (Pair) pair), this.fixTypeEverywhereTyped("BedBlockEntityInjecter", this.getOutputSchema().getType(References.CHUNK), (typed) -> {
             Typed<?> typed2 = typed.getTyped(opticFinder);
             Dynamic<?> dynamic = typed2.get(DSL.remainderFinder());
-            int i = dynamic.get("xPos").asInt(0);
-            int i2 = dynamic.get("zPos").asInt(0);
+            int xPos = dynamic.get("xPos").asInt(0);
+            int zPos = dynamic.get("zPos").asInt(0);
             List<TE> list = Lists.newArrayList((Iterable)typed2.getOrCreate(opticFinder2));
             List<? extends Dynamic<?>> list2 = dynamic.get("Sections").asList(Function.identity());
 
@@ -53,16 +55,17 @@ public class ChunkBedBlockEntityInjecterFix extends DataFix {
                 Stream<Integer> stream = dynamic2.get("Blocks").asStream().map((dynamicx) -> dynamicx.asInt(0));
                 int i5 = 0;
 
-                for(int i6 : stream::iterator) {
+                for (Iterator<Integer> it = stream.iterator(); it.hasNext(); ) {
+                    int i6 = it.next();
                     if (416 == (i6 & 255) << 4) {
                         int i7 = i5 & 15;
                         int i8 = i5 >> 8 & 15;
                         int i9 = i5 >> 4 & 15;
                         Map<Dynamic<?>, Dynamic<?>> map = Maps.newHashMap();
                         map.put(dynamic2.createString("id"), dynamic2.createString("minecraft:bed"));
-                        map.put(dynamic2.createString("x"), dynamic2.createInt(i7 + (i << 4)));
+                        map.put(dynamic2.createString("x"), dynamic2.createInt(i7 + (xPos << 4)));
                         map.put(dynamic2.createString("y"), dynamic2.createInt(i8 + (i4 << 4)));
-                        map.put(dynamic2.createString("z"), dynamic2.createInt(i9 + (i2 << 4)));
+                        map.put(dynamic2.createString("z"), dynamic2.createInt(i9 + (zPos << 4)));
                         map.put(dynamic2.createString("color"), dynamic2.createShort((short)14));
                         list.add((type2.read(dynamic2.createMap(map)).result().orElseThrow(() -> new IllegalStateException("Could not parse newly created bed block entity."))).getFirst());
                     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkHeightAndBiomeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkHeightAndBiomeFix.java
index af2ae85e0995e3653cacc8f8696194dd8a28302e..f679d7e59073e89702f12bc7896c6c339c35b947 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkHeightAndBiomeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkHeightAndBiomeFix.java
@@ -81,15 +81,15 @@ public class ChunkHeightAndBiomeFix extends DataFix {
                 Dynamic<?>[] dynamics = getBiomeContainers(dynamic, flag, i, mutableBoolean);
                 Dynamic<?> dynamic2 = makePalettedContainer(dynamic.createList(Stream.of(dynamic.createMap(ImmutableMap.of(dynamic.createString("Name"), dynamic.createString("minecraft:air"))))));
                 Set<String> set = Sets.newHashSet();
-                MutableObject<Supplier<ChunkProtoTickListFix.PoorMansPalettedContainer>> mutableObject = new MutableObject(() -> null);
+                MutableObject<Supplier<ChunkProtoTickListFix.PoorMansPalettedContainer>> mutableObject = new MutableObject<>(() -> null);
                 typed2 = typed2.updateTyped(opticFinder2, type4, (typedx) -> {
                     IntSet intSet = new IntOpenHashSet();
                     Dynamic<?> dynamic3 = typedx.write().result().orElseThrow(() -> new IllegalStateException("Malformed Chunk.Level.Sections"));
                     List<Dynamic<?>> list = dynamic3.asStream().map((dynamic2x) -> {
                         int i2 = dynamic2x.get("Y").asInt(0);
-                        Dynamic<?> dynamic3 = DataFixUtils.orElse(dynamic2x.get("Palette").result().flatMap((dynamic2xx) -> {
-                            dynamic2xx.asStream().map((dynamic) -> dynamic.get("Name").asString("minecraft:air")).forEach(set::add);
-                            return dynamic2x.get("BlockStates").result().map((dynamic2) -> makeOptimizedPalettedContainer(dynamic2xx, dynamic2));
+                        Dynamic<?> dynamic3In = DataFixUtils.orElse(dynamic2x.get("Palette").result().flatMap((dynamic2xx) -> {
+                            dynamic2xx.asStream().map((dynamicIn) -> dynamicIn.get("Name").asString("minecraft:air")).forEach(set::add);
+                            return dynamic2x.get("BlockStates").result().map((dynamicIn2) -> makeOptimizedPalettedContainer(dynamic2xx, dynamicIn2));
                         }), dynamic2);
                         Dynamic<?> dynamic4 = dynamic2x;
                         int i3 = i2 - i;
@@ -100,13 +100,13 @@ public class ChunkHeightAndBiomeFix extends DataFix {
                         intSet.add(i2);
                         if (dynamic2x.get("Y").asInt(Integer.MAX_VALUE) == 0) {
                             mutableObject.setValue(() -> {
-                                List<? extends Dynamic<?>> list = dynamic3.get("palette").asList(Function.identity());
-                                long[] longs = dynamic3.get("data").asLongStream().toArray();
-                                return new ChunkProtoTickListFix.PoorMansPalettedContainer(list, longs);
+                                List<? extends Dynamic<?>> listIn = dynamic3In.get("palette").asList(Function.identity());
+                                long[] longs = dynamic3In.get("data").asLongStream().toArray();
+                                return new ChunkProtoTickListFix.PoorMansPalettedContainer(listIn, longs);
                             });
                         }
 
-                        return dynamic4.set("block_states", dynamic3).remove("Palette").remove("BlockStates");
+                        return dynamic4.set("block_states", dynamic3In).remove("Palette").remove("BlockStates");
                     }).collect(Collectors.toCollection(ArrayList::new));
 
                     for(int i2 = 0; i2 < dynamics.length; ++i2) {
@@ -159,12 +159,13 @@ public class ChunkHeightAndBiomeFix extends DataFix {
             mutableBoolean.setValue(true);
 
             for(int i2 = 0; i2 < 24; ++i2) {
-                dynamics[i2] = makeBiomeContainer(dynamic, (i2) -> getOldBiome(ints, i2 * 64 + i2));
+                dynamics[i2] = makeBiomeContainer(dynamic, (i2In) -> getOldBiome(ints, i2In * 64 + i2In));
             }
         } else if (ints != null && ints.length == 1024) {
             for(int i4 = 0; i4 < 16; ++i4) {
                 int i5 = i4 - i;
-                dynamics[i5] = makeBiomeContainer(dynamic, (i2) -> getOldBiome(ints, i4 * 64 + i2));
+                int finalI = i4;
+                dynamics[i5] = makeBiomeContainer(dynamic, (i2) -> getOldBiome(ints, finalI * 64 + i2));
             }
 
             if (flag) {
@@ -250,11 +251,11 @@ public class ChunkHeightAndBiomeFix extends DataFix {
     private static <T> Dynamic<T> shiftUpgradeData(Dynamic<T> dynamic) {
         return dynamic.update("Indices", (dynamicx) -> {
             Map<Dynamic<?>, Dynamic<?>> map = new HashMap();
-            dynamicx.getMapValues().result().ifPresent((map2) -> map2.forEach((dynamic, dynamic2) -> {
+            dynamicx.getMapValues().result().ifPresent((map2) -> map2.forEach((dynamicIn, dynamic2) -> {
                     try {
-                        dynamic.asString().result().map(Integer::parseInt).ifPresent((integer) -> {
+                        dynamicIn.asString().result().map(Integer::parseInt).ifPresent((integer) -> {
                             int i = integer - -4;
-                            map.put(dynamic.createString(Integer.toString(i)), dynamic2);
+                            map.put(dynamicIn.createString(Integer.toString(i)), dynamic2);
                         });
                     } catch (NumberFormatException var4) {
                     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
index dc7e26d4c8b683a1c89ee21f772a930be738ca68..27da60e5847c5fe76ff0fe45487acf5ecb612d4f 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
@@ -562,22 +562,22 @@ public class ChunkPalettedStorageFix extends DataFix {
             this.level = dynamic;
             this.x = dynamic.get("xPos").asInt(0) << 4;
             this.z = dynamic.get("zPos").asInt(0) << 4;
-            dynamic.get("TileEntities").asStreamOpt().result().ifPresent((stream) -> stream.forEach((dynamic) -> {
-                    int i = dynamic.get("x").asInt(0) - this.x & 15;
-                    int i2 = dynamic.get("y").asInt(0);
-                    int i3 = dynamic.get("z").asInt(0) - this.z & 15;
-                    int i4 = i2 << 8 | i3 << 4 | i;
-                    if (this.blockEntities.put(i4, dynamic) != null) {
-                        ChunkPalettedStorageFix.LOGGER.warn("In chunk: {}x{} found a duplicate block entity at position: [{}, {}, {}]", new Object[]{this.x, this.z, i, i2, i3});
-                    }
+            dynamic.get("TileEntities").asStreamOpt().result().ifPresent((stream) -> stream.forEach((dynamicIn) -> {
+                int i = dynamicIn.get("x").asInt(0) - this.x & 15;
+                int i2 = dynamicIn.get("y").asInt(0);
+                int i3 = dynamicIn.get("z").asInt(0) - this.z & 15;
+                int i4 = i2 << 8 | i3 << 4 | i;
+                if (this.blockEntities.put(i4, dynamicIn) != null) {
+                    ChunkPalettedStorageFix.LOGGER.warn("In chunk: {}x{} found a duplicate block entity at position: [{}, {}, {}]", this.x, this.z, i, i2, i3);
+                }
 
-                }));
+            }));
             boolean flag = dynamic.get("convertedFromAlphaFormat").asBoolean(false);
-            dynamic.get("Sections").asStreamOpt().result().ifPresent((stream) -> stream.forEach((dynamic) -> {
-                    ChunkPalettedStorageFix.Section section = new ChunkPalettedStorageFix.Section(dynamic);
-                    this.sides = section.upgrade(this.sides);
-                    this.sections[section.y] = section;
-                }));
+            dynamic.get("Sections").asStreamOpt().result().ifPresent((stream) -> stream.forEach((dynamicIn) -> {
+                ChunkPalettedStorageFix.Section section = new ChunkPalettedStorageFix.Section(dynamicIn);
+                this.sides = section.upgrade(this.sides);
+                this.sections[section.y] = section;
+            }));
 
             for(ChunkPalettedStorageFix.Section section : this.sections) {
                 if (section != null) {
@@ -587,211 +587,211 @@ public class ChunkPalettedStorageFix extends DataFix {
                         java.util.Map.Entry<Integer, IntList> entry = (java.util.Map.Entry)var7.next();
                         int i = section.y << 12;
                         switch(entry.getKey()) {
-                        case 2:
-                            IntListIterator var30 = ((IntList)entry.getValue()).iterator();
-
-                            while(var30.hasNext()) {
-                                int i2 = var30.next();
-                                i2 |= i;
-                                Dynamic<?> dynamic2 = this.getBlock(i2);
-                                if ("minecraft:grass_block".equals(ChunkPalettedStorageFix.getName(dynamic2))) {
-                                    String s = ChunkPalettedStorageFix.getName(this.getBlock(relative(i2, ChunkPalettedStorageFix.Direction.UP)));
-                                    if ("minecraft:snow".equals(s) || "minecraft:snow_layer".equals(s)) {
-                                        this.setBlock(i2, ChunkPalettedStorageFix.SNOWY_GRASS);
+                            case 2:
+                                IntListIterator var30 = ((IntList)entry.getValue()).iterator();
+
+                                while(var30.hasNext()) {
+                                    int i2 = var30.next();
+                                    i2 |= i;
+                                    Dynamic<?> dynamic2 = this.getBlock(i2);
+                                    if ("minecraft:grass_block".equals(ChunkPalettedStorageFix.getName(dynamic2))) {
+                                        String s = ChunkPalettedStorageFix.getName(this.getBlock(relative(i2, ChunkPalettedStorageFix.Direction.UP)));
+                                        if ("minecraft:snow".equals(s) || "minecraft:snow_layer".equals(s)) {
+                                            this.setBlock(i2, ChunkPalettedStorageFix.SNOWY_GRASS);
+                                        }
                                     }
                                 }
-                            }
-                            break;
-                        case 3:
-                            IntListIterator var29 = ((IntList)entry.getValue()).iterator();
-
-                            while(var29.hasNext()) {
-                                int i3 = var29.next();
-                                i3 |= i;
-                                Dynamic<?> dynamic3 = this.getBlock(i3);
-                                if ("minecraft:podzol".equals(ChunkPalettedStorageFix.getName(dynamic3))) {
-                                    String s2 = ChunkPalettedStorageFix.getName(this.getBlock(relative(i3, ChunkPalettedStorageFix.Direction.UP)));
-                                    if ("minecraft:snow".equals(s2) || "minecraft:snow_layer".equals(s2)) {
-                                        this.setBlock(i3, ChunkPalettedStorageFix.SNOWY_PODZOL);
+                                break;
+                            case 3:
+                                IntListIterator var29 = ((IntList)entry.getValue()).iterator();
+
+                                while(var29.hasNext()) {
+                                    int i3 = var29.next();
+                                    i3 |= i;
+                                    Dynamic<?> dynamic3 = this.getBlock(i3);
+                                    if ("minecraft:podzol".equals(ChunkPalettedStorageFix.getName(dynamic3))) {
+                                        String s2 = ChunkPalettedStorageFix.getName(this.getBlock(relative(i3, ChunkPalettedStorageFix.Direction.UP)));
+                                        if ("minecraft:snow".equals(s2) || "minecraft:snow_layer".equals(s2)) {
+                                            this.setBlock(i3, ChunkPalettedStorageFix.SNOWY_PODZOL);
+                                        }
                                     }
                                 }
-                            }
-                            break;
-                        case 25:
-                            IntListIterator var28 = ((IntList)entry.getValue()).iterator();
-
-                            while(var28.hasNext()) {
-                                int i5 = var28.next();
-                                i5 |= i;
-                                Dynamic<?> dynamic5 = this.removeBlockEntity(i5);
-                                if (dynamic5 != null) {
-                                    String s4 = Boolean.toString(dynamic5.get("powered").asBoolean(false)) + (byte)Math.min(Math.max(dynamic5.get("note").asInt(0), 0), 24);
-                                    this.setBlock(i5, ChunkPalettedStorageFix.NOTE_BLOCK_MAP.getOrDefault(s4, ChunkPalettedStorageFix.NOTE_BLOCK_MAP.get("false0")));
+                                break;
+                            case 25:
+                                IntListIterator var28 = ((IntList)entry.getValue()).iterator();
+
+                                while(var28.hasNext()) {
+                                    int i5 = var28.next();
+                                    i5 |= i;
+                                    Dynamic<?> dynamic5 = this.removeBlockEntity(i5);
+                                    if (dynamic5 != null) {
+                                        String s4 = Boolean.toString(dynamic5.get("powered").asBoolean(false)) + (byte)Math.min(Math.max(dynamic5.get("note").asInt(0), 0), 24);
+                                        this.setBlock(i5, ChunkPalettedStorageFix.NOTE_BLOCK_MAP.getOrDefault(s4, ChunkPalettedStorageFix.NOTE_BLOCK_MAP.get("false0")));
+                                    }
                                 }
-                            }
-                            break;
-                        case 26:
-                            IntListIterator var27 = ((IntList)entry.getValue()).iterator();
-
-                            while(var27.hasNext()) {
-                                int i6 = var27.next();
-                                i6 |= i;
-                                Dynamic<?> dynamic6 = this.getBlockEntity(i6);
-                                Dynamic<?> dynamic7 = this.getBlock(i6);
-                                if (dynamic6 != null) {
-                                    int i7 = dynamic6.get("color").asInt(0);
-                                    if (i7 != 14 && i7 >= 0 && i7 < 16) {
-                                        String s5 = ChunkPalettedStorageFix.getProperty(dynamic7, "facing") + ChunkPalettedStorageFix.getProperty(dynamic7, "occupied") + ChunkPalettedStorageFix.getProperty(dynamic7, "part") + i7;
-                                        if (ChunkPalettedStorageFix.BED_BLOCK_MAP.containsKey(s5)) {
-                                            this.setBlock(i6, ChunkPalettedStorageFix.BED_BLOCK_MAP.get(s5));
+                                break;
+                            case 26:
+                                IntListIterator var27 = ((IntList)entry.getValue()).iterator();
+
+                                while(var27.hasNext()) {
+                                    int i6 = var27.next();
+                                    i6 |= i;
+                                    Dynamic<?> dynamic6 = this.getBlockEntity(i6);
+                                    Dynamic<?> dynamic7 = this.getBlock(i6);
+                                    if (dynamic6 != null) {
+                                        int i7 = dynamic6.get("color").asInt(0);
+                                        if (i7 != 14 && i7 >= 0 && i7 < 16) {
+                                            String s5 = ChunkPalettedStorageFix.getProperty(dynamic7, "facing") + ChunkPalettedStorageFix.getProperty(dynamic7, "occupied") + ChunkPalettedStorageFix.getProperty(dynamic7, "part") + i7;
+                                            if (ChunkPalettedStorageFix.BED_BLOCK_MAP.containsKey(s5)) {
+                                                this.setBlock(i6, ChunkPalettedStorageFix.BED_BLOCK_MAP.get(s5));
+                                            }
                                         }
                                     }
                                 }
-                            }
-                            break;
-                        case 64:
-                        case 71:
-                        case 193:
-                        case 194:
-                        case 195:
-                        case 196:
-                        case 197:
-                            IntListIterator var26 = ((IntList)entry.getValue()).iterator();
-
-                            while(var26.hasNext()) {
-                                int i13 = var26.next();
-                                i13 |= i;
-                                Dynamic<?> dynamic13 = this.getBlock(i13);
-                                if (ChunkPalettedStorageFix.getName(dynamic13).endsWith("_door")) {
-                                    Dynamic<?> dynamic14 = this.getBlock(i13);
-                                    if ("lower".equals(ChunkPalettedStorageFix.getProperty(dynamic14, "half"))) {
-                                        int i14 = relative(i13, ChunkPalettedStorageFix.Direction.UP);
-                                        Dynamic<?> dynamic15 = this.getBlock(i14);
-                                        String s13 = ChunkPalettedStorageFix.getName(dynamic14);
-                                        if (s13.equals(ChunkPalettedStorageFix.getName(dynamic15))) {
-                                            String s14 = ChunkPalettedStorageFix.getProperty(dynamic14, "facing");
-                                            String s15 = ChunkPalettedStorageFix.getProperty(dynamic14, "open");
-                                            String s16 = flag ? "left" : ChunkPalettedStorageFix.getProperty(dynamic15, "hinge");
-                                            String s17 = flag ? "false" : ChunkPalettedStorageFix.getProperty(dynamic15, "powered");
-                                            this.setBlock(i13, ChunkPalettedStorageFix.DOOR_MAP.get(s13 + s14 + "lower" + s16 + s15 + s17));
-                                            this.setBlock(i14, ChunkPalettedStorageFix.DOOR_MAP.get(s13 + s14 + "upper" + s16 + s15 + s17));
+                                break;
+                            case 64:
+                            case 71:
+                            case 193:
+                            case 194:
+                            case 195:
+                            case 196:
+                            case 197:
+                                IntListIterator var26 = ((IntList)entry.getValue()).iterator();
+
+                                while(var26.hasNext()) {
+                                    int i13 = var26.next();
+                                    i13 |= i;
+                                    Dynamic<?> dynamic13 = this.getBlock(i13);
+                                    if (ChunkPalettedStorageFix.getName(dynamic13).endsWith("_door")) {
+                                        Dynamic<?> dynamic14 = this.getBlock(i13);
+                                        if ("lower".equals(ChunkPalettedStorageFix.getProperty(dynamic14, "half"))) {
+                                            int i14 = relative(i13, ChunkPalettedStorageFix.Direction.UP);
+                                            Dynamic<?> dynamic15 = this.getBlock(i14);
+                                            String s13 = ChunkPalettedStorageFix.getName(dynamic14);
+                                            if (s13.equals(ChunkPalettedStorageFix.getName(dynamic15))) {
+                                                String s14 = ChunkPalettedStorageFix.getProperty(dynamic14, "facing");
+                                                String s15 = ChunkPalettedStorageFix.getProperty(dynamic14, "open");
+                                                String s16 = flag ? "left" : ChunkPalettedStorageFix.getProperty(dynamic15, "hinge");
+                                                String s17 = flag ? "false" : ChunkPalettedStorageFix.getProperty(dynamic15, "powered");
+                                                this.setBlock(i13, ChunkPalettedStorageFix.DOOR_MAP.get(s13 + s14 + "lower" + s16 + s15 + s17));
+                                                this.setBlock(i14, ChunkPalettedStorageFix.DOOR_MAP.get(s13 + s14 + "upper" + s16 + s15 + s17));
+                                            }
                                         }
                                     }
                                 }
-                            }
-                            break;
-                        case 86:
-                            IntListIterator var25 = ((IntList)entry.getValue()).iterator();
-
-                            while(var25.hasNext()) {
-                                int i10 = var25.next();
-                                i10 |= i;
-                                Dynamic<?> dynamic10 = this.getBlock(i10);
-                                if ("minecraft:carved_pumpkin".equals(ChunkPalettedStorageFix.getName(dynamic10))) {
-                                    String s7 = ChunkPalettedStorageFix.getName(this.getBlock(relative(i10, ChunkPalettedStorageFix.Direction.DOWN)));
-                                    if ("minecraft:grass_block".equals(s7) || "minecraft:dirt".equals(s7)) {
-                                        this.setBlock(i10, ChunkPalettedStorageFix.PUMPKIN);
+                                break;
+                            case 86:
+                                IntListIterator var25 = ((IntList)entry.getValue()).iterator();
+
+                                while(var25.hasNext()) {
+                                    int i10 = var25.next();
+                                    i10 |= i;
+                                    Dynamic<?> dynamic10 = this.getBlock(i10);
+                                    if ("minecraft:carved_pumpkin".equals(ChunkPalettedStorageFix.getName(dynamic10))) {
+                                        String s7 = ChunkPalettedStorageFix.getName(this.getBlock(relative(i10, ChunkPalettedStorageFix.Direction.DOWN)));
+                                        if ("minecraft:grass_block".equals(s7) || "minecraft:dirt".equals(s7)) {
+                                            this.setBlock(i10, ChunkPalettedStorageFix.PUMPKIN);
+                                        }
                                     }
                                 }
-                            }
-                            break;
-                        case 110:
-                            IntListIterator var24 = ((IntList)entry.getValue()).iterator();
-
-                            while(var24.hasNext()) {
-                                int i4 = var24.next();
-                                i4 |= i;
-                                Dynamic<?> dynamic4 = this.getBlock(i4);
-                                if ("minecraft:mycelium".equals(ChunkPalettedStorageFix.getName(dynamic4))) {
-                                    String s3 = ChunkPalettedStorageFix.getName(this.getBlock(relative(i4, ChunkPalettedStorageFix.Direction.UP)));
-                                    if ("minecraft:snow".equals(s3) || "minecraft:snow_layer".equals(s3)) {
-                                        this.setBlock(i4, ChunkPalettedStorageFix.SNOWY_MYCELIUM);
+                                break;
+                            case 110:
+                                IntListIterator var24 = ((IntList)entry.getValue()).iterator();
+
+                                while(var24.hasNext()) {
+                                    int i4 = var24.next();
+                                    i4 |= i;
+                                    Dynamic<?> dynamic4 = this.getBlock(i4);
+                                    if ("minecraft:mycelium".equals(ChunkPalettedStorageFix.getName(dynamic4))) {
+                                        String s3 = ChunkPalettedStorageFix.getName(this.getBlock(relative(i4, ChunkPalettedStorageFix.Direction.UP)));
+                                        if ("minecraft:snow".equals(s3) || "minecraft:snow_layer".equals(s3)) {
+                                            this.setBlock(i4, ChunkPalettedStorageFix.SNOWY_MYCELIUM);
+                                        }
                                     }
                                 }
-                            }
-                            break;
-                        case 140:
-                            IntListIterator var23 = ((IntList)entry.getValue()).iterator();
-
-                            while(var23.hasNext()) {
-                                int i11 = var23.next();
-                                i11 |= i;
-                                Dynamic<?> dynamic11 = this.removeBlockEntity(i11);
-                                if (dynamic11 != null) {
-                                    String s8 = dynamic11.get("Item").asString("") + dynamic11.get("Data").asInt(0);
-                                    this.setBlock(i11, ChunkPalettedStorageFix.FLOWER_POT_MAP.getOrDefault(s8, ChunkPalettedStorageFix.FLOWER_POT_MAP.get("minecraft:air0")));
-                                }
-                            }
-                            break;
-                        case 144:
-                            IntListIterator var22 = ((IntList)entry.getValue()).iterator();
-
-                            while(var22.hasNext()) {
-                                int i12 = var22.next();
-                                i12 |= i;
-                                Dynamic<?> dynamic12 = this.getBlockEntity(i12);
-                                if (dynamic12 != null) {
-                                    String s9 = String.valueOf(dynamic12.get("SkullType").asInt(0));
-                                    String s10 = ChunkPalettedStorageFix.getProperty(this.getBlock(i12), "facing");
-                                    String s12;
-                                    if (!"up".equals(s10) && !"down".equals(s10)) {
-                                        s12 = s9 + s10;
-                                    } else {
-                                        s12 = s9 + String.valueOf(dynamic12.get("Rot").asInt(0));
+                                break;
+                            case 140:
+                                IntListIterator var23 = ((IntList)entry.getValue()).iterator();
+
+                                while(var23.hasNext()) {
+                                    int i11 = var23.next();
+                                    i11 |= i;
+                                    Dynamic<?> dynamic11 = this.removeBlockEntity(i11);
+                                    if (dynamic11 != null) {
+                                        String s8 = dynamic11.get("Item").asString("") + dynamic11.get("Data").asInt(0);
+                                        this.setBlock(i11, ChunkPalettedStorageFix.FLOWER_POT_MAP.getOrDefault(s8, ChunkPalettedStorageFix.FLOWER_POT_MAP.get("minecraft:air0")));
                                     }
+                                }
+                                break;
+                            case 144:
+                                IntListIterator var22 = ((IntList)entry.getValue()).iterator();
+
+                                while(var22.hasNext()) {
+                                    int i12 = var22.next();
+                                    i12 |= i;
+                                    Dynamic<?> dynamic12 = this.getBlockEntity(i12);
+                                    if (dynamic12 != null) {
+                                        String s9 = String.valueOf(dynamic12.get("SkullType").asInt(0));
+                                        String s10 = ChunkPalettedStorageFix.getProperty(this.getBlock(i12), "facing");
+                                        String s12;
+                                        if (!"up".equals(s10) && !"down".equals(s10)) {
+                                            s12 = s9 + s10;
+                                        } else {
+                                            s12 = s9 + String.valueOf(dynamic12.get("Rot").asInt(0));
+                                        }
 
-                                    dynamic12.remove("SkullType");
-                                    dynamic12.remove("facing");
-                                    dynamic12.remove("Rot");
-                                    this.setBlock(i12, ChunkPalettedStorageFix.SKULL_MAP.getOrDefault(s12, ChunkPalettedStorageFix.SKULL_MAP.get("0north")));
+                                        dynamic12.remove("SkullType");
+                                        dynamic12.remove("facing");
+                                        dynamic12.remove("Rot");
+                                        this.setBlock(i12, ChunkPalettedStorageFix.SKULL_MAP.getOrDefault(s12, ChunkPalettedStorageFix.SKULL_MAP.get("0north")));
+                                    }
                                 }
-                            }
-                            break;
-                        case 175:
-                            IntListIterator var21 = ((IntList)entry.getValue()).iterator();
-
-                            while(var21.hasNext()) {
-                                int i15 = var21.next();
-                                i15 |= i;
-                                Dynamic<?> dynamic16 = this.getBlock(i15);
-                                if ("upper".equals(ChunkPalettedStorageFix.getProperty(dynamic16, "half"))) {
-                                    Dynamic<?> dynamic17 = this.getBlock(relative(i15, ChunkPalettedStorageFix.Direction.DOWN));
-                                    String s18 = ChunkPalettedStorageFix.getName(dynamic17);
-                                    if ("minecraft:sunflower".equals(s18)) {
-                                        this.setBlock(i15, ChunkPalettedStorageFix.UPPER_SUNFLOWER);
-                                    } else if ("minecraft:lilac".equals(s18)) {
-                                        this.setBlock(i15, ChunkPalettedStorageFix.UPPER_LILAC);
-                                    } else if ("minecraft:tall_grass".equals(s18)) {
-                                        this.setBlock(i15, ChunkPalettedStorageFix.UPPER_TALL_GRASS);
-                                    } else if ("minecraft:large_fern".equals(s18)) {
-                                        this.setBlock(i15, ChunkPalettedStorageFix.UPPER_LARGE_FERN);
-                                    } else if ("minecraft:rose_bush".equals(s18)) {
-                                        this.setBlock(i15, ChunkPalettedStorageFix.UPPER_ROSE_BUSH);
-                                    } else if ("minecraft:peony".equals(s18)) {
-                                        this.setBlock(i15, ChunkPalettedStorageFix.UPPER_PEONY);
+                                break;
+                            case 175:
+                                IntListIterator var21 = ((IntList)entry.getValue()).iterator();
+
+                                while(var21.hasNext()) {
+                                    int i15 = var21.next();
+                                    i15 |= i;
+                                    Dynamic<?> dynamic16 = this.getBlock(i15);
+                                    if ("upper".equals(ChunkPalettedStorageFix.getProperty(dynamic16, "half"))) {
+                                        Dynamic<?> dynamic17 = this.getBlock(relative(i15, ChunkPalettedStorageFix.Direction.DOWN));
+                                        String s18 = ChunkPalettedStorageFix.getName(dynamic17);
+                                        if ("minecraft:sunflower".equals(s18)) {
+                                            this.setBlock(i15, ChunkPalettedStorageFix.UPPER_SUNFLOWER);
+                                        } else if ("minecraft:lilac".equals(s18)) {
+                                            this.setBlock(i15, ChunkPalettedStorageFix.UPPER_LILAC);
+                                        } else if ("minecraft:tall_grass".equals(s18)) {
+                                            this.setBlock(i15, ChunkPalettedStorageFix.UPPER_TALL_GRASS);
+                                        } else if ("minecraft:large_fern".equals(s18)) {
+                                            this.setBlock(i15, ChunkPalettedStorageFix.UPPER_LARGE_FERN);
+                                        } else if ("minecraft:rose_bush".equals(s18)) {
+                                            this.setBlock(i15, ChunkPalettedStorageFix.UPPER_ROSE_BUSH);
+                                        } else if ("minecraft:peony".equals(s18)) {
+                                            this.setBlock(i15, ChunkPalettedStorageFix.UPPER_PEONY);
+                                        }
                                     }
                                 }
-                            }
-                            break;
-                        case 176:
-                        case 177:
-                            IntListIterator var10 = ((IntList)entry.getValue()).iterator();
-
-                            while(var10.hasNext()) {
-                                int i8 = var10.next();
-                                i8 |= i;
-                                Dynamic<?> dynamic8 = this.getBlockEntity(i8);
-                                Dynamic<?> dynamic9 = this.getBlock(i8);
-                                if (dynamic8 != null) {
-                                    int i9 = dynamic8.get("Base").asInt(0);
-                                    if (i9 != 15 && i9 >= 0 && i9 < 16) {
-                                        String s6 = ChunkPalettedStorageFix.getProperty(dynamic9, entry.getKey() == 176 ? "rotation" : "facing") + "_" + i9;
-                                        if (ChunkPalettedStorageFix.BANNER_BLOCK_MAP.containsKey(s6)) {
-                                            this.setBlock(i8, ChunkPalettedStorageFix.BANNER_BLOCK_MAP.get(s6));
+                                break;
+                            case 176:
+                            case 177:
+                                IntListIterator var10 = ((IntList)entry.getValue()).iterator();
+
+                                while(var10.hasNext()) {
+                                    int i8 = var10.next();
+                                    i8 |= i;
+                                    Dynamic<?> dynamic8 = this.getBlockEntity(i8);
+                                    Dynamic<?> dynamic9 = this.getBlock(i8);
+                                    if (dynamic8 != null) {
+                                        int i9 = dynamic8.get("Base").asInt(0);
+                                        if (i9 != 15 && i9 >= 0 && i9 < 16) {
+                                            String s6 = ChunkPalettedStorageFix.getProperty(dynamic9, entry.getKey() == 176 ? "rotation" : "facing") + "_" + i9;
+                                            if (ChunkPalettedStorageFix.BANNER_BLOCK_MAP.containsKey(s6)) {
+                                                this.setBlock(i8, ChunkPalettedStorageFix.BANNER_BLOCK_MAP.get(s6));
+                                            }
                                         }
                                     }
                                 }
-                            }
                         }
                     }
                 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkProtoTickListFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkProtoTickListFix.java
index fde49a4e077b72007a3cc1dc7de3ea57a39798f0..7d6237b1a6c8a7b20130f29e37674dfcd2d569af 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkProtoTickListFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkProtoTickListFix.java
@@ -47,23 +47,23 @@ public class ChunkProtoTickListFix extends DataFix {
                 Dynamic<?> dynamic = typedx.get(DSL.remainderFinder());
                 MutableInt mutableInt = new MutableInt();
                 Int2ObjectMap<Supplier<ChunkProtoTickListFix.PoorMansPalettedContainer>> int2ObjectMap = new Int2ObjectArrayMap();
-                typedx.getOptionalTyped(opticFinder2).ifPresent((typed) -> typed.getAllTyped(opticFinder3).forEach((typedx) -> {
-                        Dynamic<?> dynamic = typedx.get(DSL.remainderFinder());
-                        int i = dynamic.get("Y").asInt(Integer.MAX_VALUE);
+                typedx.getOptionalTyped(opticFinder2).ifPresent((typedIn) -> typedIn.getAllTyped(opticFinder3).forEach((typedIn2) -> {
+                        Dynamic<?> dynamicIn = typedIn2.get(DSL.remainderFinder());
+                        int i = dynamicIn.get("Y").asInt(Integer.MAX_VALUE);
                         if (i != Integer.MAX_VALUE) {
-                            if (typedx.getOptionalTyped(opticFinder5).isPresent()) {
+                            if (typedIn2.getOptionalTyped(opticFinder5).isPresent()) {
                                 mutableInt.setValue(Math.min(i, mutableInt.getValue()));
                             }
 
-                            typedx.getOptionalTyped(opticFinder4).ifPresent((typed) -> int2ObjectMap.put(i, Suppliers.memoize(() -> {
-                                    List<? extends Dynamic<?>> list = typed.getOptionalTyped(opticFinder6).map((typedx) -> typedx.write().result().map((dynamic) -> dynamic.asList(Function.identity())).orElse(Collections.emptyList())).orElse(Collections.emptyList());
-                                    long[] longs = (typed.get(DSL.remainderFinder())).get("data").asLongStream().toArray();
+                            typedIn2.getOptionalTyped(opticFinder4).ifPresent((typedIn3) -> int2ObjectMap.put(i, Suppliers.memoize(() -> {
+                                    List<? extends Dynamic<?>> list = typedIn3.getOptionalTyped(opticFinder6).map((typedIn4) -> typedIn4.write().result().map((dynamicIn2) -> dynamicIn2.asList(Function.identity())).orElse(Collections.emptyList())).orElse(Collections.emptyList());
+                                    long[] longs = (typedIn3.get(DSL.remainderFinder())).get("data").asLongStream().toArray();
                                     return new ChunkProtoTickListFix.PoorMansPalettedContainer(list, longs);
                                 })));
                         }
                     }));
                 byte b = mutableInt.getValue().byteValue();
-                typedx = typedx.update(DSL.remainderFinder(), (dynamicx) -> dynamicx.update("yPos", (dynamic) -> dynamic.createByte(b)));
+                typedx = typedx.update(DSL.remainderFinder(), (dynamicx) -> dynamicx.update("yPos", (dynamicIn) -> dynamicIn.createByte(b)));
                 if (!typedx.getOptionalTyped(opticFinder7).isPresent() && !dynamic.get("fluid_ticks").result().isPresent()) {
                     int i = dynamic.get("xPos").asInt(0);
                     int i2 = dynamic.get("zPos").asInt(0);
@@ -119,7 +119,7 @@ public class ChunkProtoTickListFix extends DataFix {
         int i6 = i4 >>> 4 & 15;
         int i7 = i4 >>> 8 & 15;
         String s = (String)function.apply(supplier != null ? ((ChunkProtoTickListFix.PoorMansPalettedContainer)supplier.get()).get(i5, i6, i7) : null);
-        return dynamic.createMap(ImmutableMap.builder().put(dynamic.createString("i"), dynamic.createString(s)).put(dynamic.createString("x"), dynamic.createInt(i * 16 + i5)).put(dynamic.createString("y"), dynamic.createInt(i2 * 16 + i6)).put(dynamic.createString("z"), dynamic.createInt(i3 * 16 + i7)).put(dynamic.createString("t"), dynamic.createInt(0)).put(dynamic.createString("p"), dynamic.createInt(0)).build());
+        return dynamic.createMap(ImmutableMap.<Dynamic<?>, Dynamic<?>>builder().put(dynamic.createString("i"), dynamic.createString(s)).put(dynamic.createString("x"), dynamic.createInt(i * 16 + i5)).put(dynamic.createString("y"), dynamic.createInt(i2 * 16 + i6)).put(dynamic.createString("z"), dynamic.createInt(i3 * 16 + i7)).put(dynamic.createString("t"), dynamic.createInt(0)).put(dynamic.createString("p"), dynamic.createInt(0)).build());
     }
 
     public static final class PoorMansPalettedContainer {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStatusFix2.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStatusFix2.java
index ab7931e277bfef1a6dfcb1acdb8995e8a951622b..28aebc40b4a980e0817e54882b915fe225251242 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStatusFix2.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStatusFix2.java
@@ -12,7 +12,7 @@ import java.util.Map;
 import java.util.Objects;
 
 public class ChunkStatusFix2 extends DataFix {
-    private static final Map<String, String> RENAMES_AND_DOWNGRADES = ImmutableMap.builder().put("structure_references", "empty").put("biomes", "empty").put("base", "surface").put("carved", "carvers").put("liquid_carved", "liquid_carvers").put("decorated", "features").put("lighted", "light").put("mobs_spawned", "spawn").put("finalized", "heightmaps").put("fullchunk", "full").build();
+    private static final Map<String, String> RENAMES_AND_DOWNGRADES = ImmutableMap.<String, String>builder().put("structure_references", "empty").put("biomes", "empty").put("base", "surface").put("carved", "carvers").put("liquid_carved", "liquid_carvers").put("decorated", "features").put("lighted", "light").put("mobs_spawned", "spawn").put("finalized", "heightmaps").put("fullchunk", "full").build();
 
     public ChunkStatusFix2(Schema schema, boolean flag) {
         super(schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java
index fd900527afb969760c70feda9885d5b7cc050dcb..d9f5eeba5c135a2512ea2737aad81407e8e7029e 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java
@@ -11,7 +11,7 @@ import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.Dynamic;
 
 public class ChunkStructuresTemplateRenameFix extends DataFix {
-    private static final ImmutableMap<String, Pair<String, ImmutableMap<String, String>>> RENAMES = ImmutableMap.builder().put("EndCity", Pair.of("ECP", ImmutableMap.builder().put("second_floor", "second_floor_1").put("third_floor", "third_floor_1").put("third_floor_c", "third_floor_2").build())).put("Mansion", Pair.of("WMP", ImmutableMap.builder().put("carpet_south", "carpet_south_1").put("carpet_west", "carpet_west_1").put("indoors_door", "indoors_door_1").put("indoors_wall", "indoors_wall_1").build())).put("Igloo", Pair.of("Iglu", ImmutableMap.builder().put("minecraft:igloo/igloo_bottom", "minecraft:igloo/bottom").put("minecraft:igloo/igloo_middle", "minecraft:igloo/middle").put("minecraft:igloo/igloo_top", "minecraft:igloo/top").build())).put("Ocean_Ruin", Pair.of("ORP", ImmutableMap.builder().put("minecraft:ruin/big_ruin1_brick", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_ruin2_brick", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_ruin3_brick", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_ruin8_brick", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_ruin1_cracked", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_ruin2_cracked", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_ruin3_cracked", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_ruin8_cracked", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_ruin1_mossy", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_ruin2_mossy", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_ruin3_mossy", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_ruin8_mossy", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_ruin_warm4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_ruin_warm5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_ruin_warm6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_ruin_warm7", "minecraft:underwater_ruin/big_warm_7").put("minecraft:ruin/ruin1_brick", "minecraft:underwater_ruin/brick_1").put("minecraft:ruin/ruin2_brick", "minecraft:underwater_ruin/brick_2").put("minecraft:ruin/ruin3_brick", "minecraft:underwater_ruin/brick_3").put("minecraft:ruin/ruin4_brick", "minecraft:underwater_ruin/brick_4").put("minecraft:ruin/ruin5_brick", "minecraft:underwater_ruin/brick_5").put("minecraft:ruin/ruin6_brick", "minecraft:underwater_ruin/brick_6").put("minecraft:ruin/ruin7_brick", "minecraft:underwater_ruin/brick_7").put("minecraft:ruin/ruin8_brick", "minecraft:underwater_ruin/brick_8").put("minecraft:ruin/ruin1_cracked", "minecraft:underwater_ruin/cracked_1").put("minecraft:ruin/ruin2_cracked", "minecraft:underwater_ruin/cracked_2").put("minecraft:ruin/ruin3_cracked", "minecraft:underwater_ruin/cracked_3").put("minecraft:ruin/ruin4_cracked", "minecraft:underwater_ruin/cracked_4").put("minecraft:ruin/ruin5_cracked", "minecraft:underwater_ruin/cracked_5").put("minecraft:ruin/ruin6_cracked", "minecraft:underwater_ruin/cracked_6").put("minecraft:ruin/ruin7_cracked", "minecraft:underwater_ruin/cracked_7").put("minecraft:ruin/ruin8_cracked", "minecraft:underwater_ruin/cracked_8").put("minecraft:ruin/ruin1_mossy", "minecraft:underwater_ruin/mossy_1").put("minecraft:ruin/ruin2_mossy", "minecraft:underwater_ruin/mossy_2").put("minecraft:ruin/ruin3_mossy", "minecraft:underwater_ruin/mossy_3").put("minecraft:ruin/ruin4_mossy", "minecraft:underwater_ruin/mossy_4").put("minecraft:ruin/ruin5_mossy", "minecraft:underwater_ruin/mossy_5").put("minecraft:ruin/ruin6_mossy", "minecraft:underwater_ruin/mossy_6").put("minecraft:ruin/ruin7_mossy", "minecraft:underwater_ruin/mossy_7").put("minecraft:ruin/ruin8_mossy", "minecraft:underwater_ruin/mossy_8").put("minecraft:ruin/ruin_warm1", "minecraft:underwater_ruin/warm_1").put("minecraft:ruin/ruin_warm2", "minecraft:underwater_ruin/warm_2").put("minecraft:ruin/ruin_warm3", "minecraft:underwater_ruin/warm_3").put("minecraft:ruin/ruin_warm4", "minecraft:underwater_ruin/warm_4").put("minecraft:ruin/ruin_warm5", "minecraft:underwater_ruin/warm_5").put("minecraft:ruin/ruin_warm6", "minecraft:underwater_ruin/warm_6").put("minecraft:ruin/ruin_warm7", "minecraft:underwater_ruin/warm_7").put("minecraft:ruin/ruin_warm8", "minecraft:underwater_ruin/warm_8").put("minecraft:ruin/big_brick_1", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_brick_2", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_brick_3", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_brick_8", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_mossy_1", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_mossy_2", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_mossy_3", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_mossy_8", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_cracked_1", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_cracked_2", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_cracked_3", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_cracked_8", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_warm_4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_warm_5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_warm_6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_warm_7", "minecraft:underwater_ruin/big_warm_7").build())).build();
+    private static final ImmutableMap<String, Pair<String, ImmutableMap<String, String>>> RENAMES = ImmutableMap.<String, Pair<String, ImmutableMap<String, String>>>builder().put("EndCity", Pair.of("ECP", ImmutableMap.<String, String>builder().put("second_floor", "second_floor_1").put("third_floor", "third_floor_1").put("third_floor_c", "third_floor_2").build())).put("Mansion", Pair.of("WMP", ImmutableMap.<String, String>builder().put("carpet_south", "carpet_south_1").put("carpet_west", "carpet_west_1").put("indoors_door", "indoors_door_1").put("indoors_wall", "indoors_wall_1").build())).put("Igloo", Pair.of("Iglu", ImmutableMap.<String, String>builder().put("minecraft:igloo/igloo_bottom", "minecraft:igloo/bottom").put("minecraft:igloo/igloo_middle", "minecraft:igloo/middle").put("minecraft:igloo/igloo_top", "minecraft:igloo/top").build())).put("Ocean_Ruin", Pair.of("ORP", ImmutableMap.<String, String>builder().put("minecraft:ruin/big_ruin1_brick", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_ruin2_brick", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_ruin3_brick", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_ruin8_brick", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_ruin1_cracked", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_ruin2_cracked", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_ruin3_cracked", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_ruin8_cracked", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_ruin1_mossy", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_ruin2_mossy", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_ruin3_mossy", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_ruin8_mossy", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_ruin_warm4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_ruin_warm5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_ruin_warm6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_ruin_warm7", "minecraft:underwater_ruin/big_warm_7").put("minecraft:ruin/ruin1_brick", "minecraft:underwater_ruin/brick_1").put("minecraft:ruin/ruin2_brick", "minecraft:underwater_ruin/brick_2").put("minecraft:ruin/ruin3_brick", "minecraft:underwater_ruin/brick_3").put("minecraft:ruin/ruin4_brick", "minecraft:underwater_ruin/brick_4").put("minecraft:ruin/ruin5_brick", "minecraft:underwater_ruin/brick_5").put("minecraft:ruin/ruin6_brick", "minecraft:underwater_ruin/brick_6").put("minecraft:ruin/ruin7_brick", "minecraft:underwater_ruin/brick_7").put("minecraft:ruin/ruin8_brick", "minecraft:underwater_ruin/brick_8").put("minecraft:ruin/ruin1_cracked", "minecraft:underwater_ruin/cracked_1").put("minecraft:ruin/ruin2_cracked", "minecraft:underwater_ruin/cracked_2").put("minecraft:ruin/ruin3_cracked", "minecraft:underwater_ruin/cracked_3").put("minecraft:ruin/ruin4_cracked", "minecraft:underwater_ruin/cracked_4").put("minecraft:ruin/ruin5_cracked", "minecraft:underwater_ruin/cracked_5").put("minecraft:ruin/ruin6_cracked", "minecraft:underwater_ruin/cracked_6").put("minecraft:ruin/ruin7_cracked", "minecraft:underwater_ruin/cracked_7").put("minecraft:ruin/ruin8_cracked", "minecraft:underwater_ruin/cracked_8").put("minecraft:ruin/ruin1_mossy", "minecraft:underwater_ruin/mossy_1").put("minecraft:ruin/ruin2_mossy", "minecraft:underwater_ruin/mossy_2").put("minecraft:ruin/ruin3_mossy", "minecraft:underwater_ruin/mossy_3").put("minecraft:ruin/ruin4_mossy", "minecraft:underwater_ruin/mossy_4").put("minecraft:ruin/ruin5_mossy", "minecraft:underwater_ruin/mossy_5").put("minecraft:ruin/ruin6_mossy", "minecraft:underwater_ruin/mossy_6").put("minecraft:ruin/ruin7_mossy", "minecraft:underwater_ruin/mossy_7").put("minecraft:ruin/ruin8_mossy", "minecraft:underwater_ruin/mossy_8").put("minecraft:ruin/ruin_warm1", "minecraft:underwater_ruin/warm_1").put("minecraft:ruin/ruin_warm2", "minecraft:underwater_ruin/warm_2").put("minecraft:ruin/ruin_warm3", "minecraft:underwater_ruin/warm_3").put("minecraft:ruin/ruin_warm4", "minecraft:underwater_ruin/warm_4").put("minecraft:ruin/ruin_warm5", "minecraft:underwater_ruin/warm_5").put("minecraft:ruin/ruin_warm6", "minecraft:underwater_ruin/warm_6").put("minecraft:ruin/ruin_warm7", "minecraft:underwater_ruin/warm_7").put("minecraft:ruin/ruin_warm8", "minecraft:underwater_ruin/warm_8").put("minecraft:ruin/big_brick_1", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_brick_2", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_brick_3", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_brick_8", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_mossy_1", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_mossy_2", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_mossy_3", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_mossy_8", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_cracked_1", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_cracked_2", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_cracked_3", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_cracked_8", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_warm_4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_warm_5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_warm_6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_warm_7", "minecraft:underwater_ruin/big_warm_7").build())).build();
 
     public ChunkStructuresTemplateRenameFix(Schema schema, boolean flag) {
         super(schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/CriteriaRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/CriteriaRenameFix.java
index 0961208ca793a73d6cd5748a66bb8bfe2bf228ac..087fa9ee5edfded7ab221a55195a09b3ae570364 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/CriteriaRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/CriteriaRenameFix.java
@@ -25,6 +25,6 @@ public class CriteriaRenameFix extends DataFix {
     }
 
     private Dynamic<?> fixAdvancements(Dynamic<?> dynamic) {
-        return dynamic.update(this.advancementId, (dynamicx) -> dynamicx.update("criteria", (dynamic) -> dynamic.updateMapValues((pair) -> pair.mapFirst((dynamic) -> DataFixUtils.orElse(dynamic.asString().map((s) -> dynamic.createString((String)this.conversions.apply(s))).result(), dynamic)))));
+        return dynamic.update(this.advancementId, (dynamicx) -> dynamicx.update("criteria", (dynamicIn) -> dynamicIn.updateMapValues((pair) -> pair.mapFirst((dynamicInIn) -> DataFixUtils.orElse(dynamicInIn.asString().map((s) -> dynamicInIn.createString((String)this.conversions.apply(s))).result(), dynamicInIn)))));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/DyeItemRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/DyeItemRenameFix.java
index 4ab4d69d5c574bd93515975ee8dfa8fdaf232f27..e28af5a88e772514f8962487e0a4fabdffd04637 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/DyeItemRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/DyeItemRenameFix.java
@@ -4,5 +4,5 @@ import com.google.common.collect.ImmutableMap;
 import java.util.Map;
 
 public class DyeItemRenameFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:cactus_green", "minecraft:green_dye").put("minecraft:rose_red", "minecraft:red_dye").put("minecraft:dandelion_yellow", "minecraft:yellow_dye").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:cactus_green", "minecraft:green_dye").put("minecraft:rose_red", "minecraft:red_dye").put("minecraft:dandelion_yellow", "minecraft:yellow_dye").build();
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java
index 92158735b92e2909780e3fede25bf1ae8de1e675..af73844c1130dd7ef042bcb7bca4d78dc01e53a8 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java
@@ -319,7 +319,7 @@ public class EntityBlockStateFix extends DataFix {
         Type<Either<Pair<String, Dynamic<?>>, Unit>> type2 = DSL.optional(DSL.field("BlockState", DSL.named(References.BLOCK_STATE.typeName(), DSL.remainderType())));
         Dynamic<?> dynamic = typed.get(DSL.remainderFinder());
         return typed.update(type.finder(), type2, (either) -> {
-            int i = either.map((pair) -> (Integer)((Either)pair.getSecond()).map((integer) -> integer, EntityBlockStateFix::getBlockId), (unit) -> {
+            int i = either.map((pair) -> (Integer)pair.getSecond().map((integer) -> integer, EntityBlockStateFix::getBlockId), (unit) -> {
                 Optional<Number> optional = dynamic.get("TileID").asNumber().result();
                 return (Integer)optional.map(Number::intValue).orElseGet(() -> dynamic.get("Tile").asByte((byte)0) & 255);
             });
@@ -333,7 +333,7 @@ public class EntityBlockStateFix extends DataFix {
         Type<Pair<String, Dynamic<?>>> type2 = DSL.field(s3, DSL.named(References.BLOCK_STATE.typeName(), DSL.remainderType()));
         Dynamic<?> dynamic = typed.getOrCreate(DSL.remainderFinder());
         return typed.update(type.finder(), type2, (pair) -> {
-            int i = ((Either)pair.getSecond()).map((integer) -> integer, EntityBlockStateFix::getBlockId);
+            int i = pair.getSecond().map((integer) -> integer, EntityBlockStateFix::getBlockId);
             int i2 = dynamic.get(s2).asInt(0) & 15;
             return Pair.of(References.BLOCK_STATE.typeName(), BlockStateData.getTag(i << 4 | i2));
         }).set(DSL.remainderFinder(), dynamic.remove(s2));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityCodSalmonFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityCodSalmonFix.java
index 18834f82dd1bbdec870ffb20ff204006625c0c4f..aaf599a4ede02e6640d5ec2112854b0025f3eba7 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityCodSalmonFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityCodSalmonFix.java
@@ -5,8 +5,8 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class EntityCodSalmonFix extends SimplestEntityRenameFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:salmon_mob", "minecraft:salmon").put("minecraft:cod_mob", "minecraft:cod").build();
-    public static final Map<String, String> RENAMED_EGG_IDS = ImmutableMap.builder().put("minecraft:salmon_mob_spawn_egg", "minecraft:salmon_spawn_egg").put("minecraft:cod_mob_spawn_egg", "minecraft:cod_spawn_egg").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:salmon_mob", "minecraft:salmon").put("minecraft:cod_mob", "minecraft:cod").build();
+    public static final Map<String, String> RENAMED_EGG_IDS = ImmutableMap.<String, String>builder().put("minecraft:salmon_mob_spawn_egg", "minecraft:salmon_spawn_egg").put("minecraft:cod_mob_spawn_egg", "minecraft:cod_spawn_egg").build();
 
     public EntityCodSalmonFix(Schema schema, boolean flag) {
         super("EntityCodSalmonFix", schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
index 80d4719f1a85aaebe8ab6358123def4c020a6cae..86b6ad5421f251aca626d20f99b9e853e890b1ce 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
@@ -39,11 +39,11 @@ public class EntityEquipmentToArmorAndHandFix extends DataFix {
                 List<IS> list = optional.get();
                 IS object = (IS)(type.read(dynamic.emptyMap()).result().orElseThrow(() -> new IllegalStateException("Could not parse newly created empty itemstack."))).getFirst();
                 if (!list.isEmpty()) {
-                    either = Either.left(Lists.newArrayList(new Object[]{list.get(0), object}));
+                    either = Either.left(Lists.newArrayList(list.get(0), object));
                 }
 
                 if (list.size() > 1) {
-                    List<IS> list2 = Lists.newArrayList(new Object[]{object, object, object, object});
+                    List<IS> list2 = Lists.newArrayList(object, object, object, object);
 
                     for(int i = 1; i < Math.min(list.size(), 5); ++i) {
                         list2.set(i - 1, list.get(i));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java
index a8fbfef3f6afdadf5545e8062d42db06f4b42250..bf9b029315f830538729572fca53127624f3603e 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java
@@ -93,8 +93,8 @@ public class EntityIdFix extends DataFix {
     }
 
     public TypeRewriteRule makeRule() {
-        TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.ENTITY);
-        TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
         Type<?> type = this.getInputSchema().getType(References.ITEM_STACK);
         Type<?> type2 = this.getOutputSchema().getType(References.ITEM_STACK);
         return TypeRewriteRule.seq(this.convertUnchecked("item stack entity name hook converter", type, type2), this.fixTypeEverywhere("EntityIdFix", taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> pair.mapFirst((s) -> (String)ID_MAP.getOrDefault(s, s))));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java
index 75e58f5058a9ff1d5079b7eacab15b5b51776597..399b21112aadb2309d60237294fe6c72601d46eb 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java
@@ -22,8 +22,8 @@ public class EntityMinecartIdentifiersFix extends DataFix {
     }
 
     public TypeRewriteRule makeRule() {
-        TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.ENTITY);
-        TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
         return this.fixTypeEverywhere("EntityMinecartIdentifiersFix", taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> {
                 if (!Objects.equals(pair.getFirst(), "Minecart")) {
                     return pair;
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityPufferfishRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityPufferfishRenameFix.java
index 453b2647c3cdeebc1d50ef77537ef0af9a9e8293..1d530a7013cd99c3e50bc4968416cbc5c3fccbff 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityPufferfishRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityPufferfishRenameFix.java
@@ -6,7 +6,7 @@ import java.util.Map;
 import java.util.Objects;
 
 public class EntityPufferfishRenameFix extends SimplestEntityRenameFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:puffer_fish_spawn_egg", "minecraft:pufferfish_spawn_egg").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:puffer_fish_spawn_egg", "minecraft:pufferfish_spawn_egg").build();
 
     public EntityPufferfishRenameFix(Schema schema, boolean flag) {
         super("EntityPufferfishRenameFix", schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityRavagerRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityRavagerRenameFix.java
index 477a371e3a3c19aa1387832b89a86bcec2a1513e..a3d6ed68db43948cb432183519b2225abfbd4394 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityRavagerRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityRavagerRenameFix.java
@@ -6,7 +6,7 @@ import java.util.Map;
 import java.util.Objects;
 
 public class EntityRavagerRenameFix extends SimplestEntityRenameFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:illager_beast_spawn_egg", "minecraft:ravager_spawn_egg").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:illager_beast_spawn_egg", "minecraft:ravager_spawn_egg").build();
 
     public EntityRavagerRenameFix(Schema schema, boolean flag) {
         super("EntityRavagerRenameFix", schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java
index c139b1927129ce0d6cde4a4db030b991a7a7a305..602387b1833ef806557776bc3136b891dc0c72e0 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java
@@ -18,8 +18,8 @@ public abstract class EntityRenameFix extends DataFix {
     }
 
     public TypeRewriteRule makeRule() {
-        TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.ENTITY);
-        TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
         return this.fixTypeEverywhere(this.name, taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> {
                 String s = (String)pair.getFirst();
                 Type<?> type = (Type)taggedChoiceType.types().get(s);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java
index 2787bf3945ae8d9f58b38f4062987d09eeabcca8..6cf2aedb2fa7e5d583b9a176f1b9654f064a1e79 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java
@@ -61,7 +61,7 @@ public class EntityRidingToPassengersFix extends DataFix {
                             return optional.orElseThrow(() -> new IllegalStateException("Should always have an entity tree here"));
                         }
 
-                        pair2 = (new Typed(type, dynamicOps, optional2.get())).getOptional(opticFinder).orElseThrow(() -> new IllegalStateException("Should always have an entity here"));
+                        pair2 = (new Typed<>(type, dynamicOps, optional2.get())).getOptional(opticFinder).orElseThrow(() -> new IllegalStateException("Should always have an entity here"));
                     }
                 }), this.writeAndRead("player RootVehicle injecter", type8, type9));
         }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityTheRenameningFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityTheRenameningFix.java
index 99f3abf08cd8d6118a8f05f16c3753ec8c68eb2f..3aa084bfaedb9633727b54fa6001ee407e2bb456 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityTheRenameningFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityTheRenameningFix.java
@@ -5,9 +5,9 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class EntityTheRenameningFix extends SimplestEntityRenameFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:commandblock_minecart", "minecraft:command_block_minecart").put("minecraft:ender_crystal", "minecraft:end_crystal").put("minecraft:snowman", "minecraft:snow_golem").put("minecraft:evocation_illager", "minecraft:evoker").put("minecraft:evocation_fangs", "minecraft:evoker_fangs").put("minecraft:illusion_illager", "minecraft:illusioner").put("minecraft:vindication_illager", "minecraft:vindicator").put("minecraft:villager_golem", "minecraft:iron_golem").put("minecraft:xp_orb", "minecraft:experience_orb").put("minecraft:xp_bottle", "minecraft:experience_bottle").put("minecraft:eye_of_ender_signal", "minecraft:eye_of_ender").put("minecraft:fireworks_rocket", "minecraft:firework_rocket").build();
-    public static final Map<String, String> RENAMED_BLOCKS = ImmutableMap.builder().put("minecraft:portal", "minecraft:nether_portal").put("minecraft:oak_bark", "minecraft:oak_wood").put("minecraft:spruce_bark", "minecraft:spruce_wood").put("minecraft:birch_bark", "minecraft:birch_wood").put("minecraft:jungle_bark", "minecraft:jungle_wood").put("minecraft:acacia_bark", "minecraft:acacia_wood").put("minecraft:dark_oak_bark", "minecraft:dark_oak_wood").put("minecraft:stripped_oak_bark", "minecraft:stripped_oak_wood").put("minecraft:stripped_spruce_bark", "minecraft:stripped_spruce_wood").put("minecraft:stripped_birch_bark", "minecraft:stripped_birch_wood").put("minecraft:stripped_jungle_bark", "minecraft:stripped_jungle_wood").put("minecraft:stripped_acacia_bark", "minecraft:stripped_acacia_wood").put("minecraft:stripped_dark_oak_bark", "minecraft:stripped_dark_oak_wood").put("minecraft:mob_spawner", "minecraft:spawner").build();
-    public static final Map<String, String> RENAMED_ITEMS = ImmutableMap.builder().putAll(RENAMED_BLOCKS).put("minecraft:clownfish", "minecraft:tropical_fish").put("minecraft:chorus_fruit_popped", "minecraft:popped_chorus_fruit").put("minecraft:evocation_illager_spawn_egg", "minecraft:evoker_spawn_egg").put("minecraft:vindication_illager_spawn_egg", "minecraft:vindicator_spawn_egg").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:commandblock_minecart", "minecraft:command_block_minecart").put("minecraft:ender_crystal", "minecraft:end_crystal").put("minecraft:snowman", "minecraft:snow_golem").put("minecraft:evocation_illager", "minecraft:evoker").put("minecraft:evocation_fangs", "minecraft:evoker_fangs").put("minecraft:illusion_illager", "minecraft:illusioner").put("minecraft:vindication_illager", "minecraft:vindicator").put("minecraft:villager_golem", "minecraft:iron_golem").put("minecraft:xp_orb", "minecraft:experience_orb").put("minecraft:xp_bottle", "minecraft:experience_bottle").put("minecraft:eye_of_ender_signal", "minecraft:eye_of_ender").put("minecraft:fireworks_rocket", "minecraft:firework_rocket").build();
+    public static final Map<String, String> RENAMED_BLOCKS = ImmutableMap.<String, String>builder().put("minecraft:portal", "minecraft:nether_portal").put("minecraft:oak_bark", "minecraft:oak_wood").put("minecraft:spruce_bark", "minecraft:spruce_wood").put("minecraft:birch_bark", "minecraft:birch_wood").put("minecraft:jungle_bark", "minecraft:jungle_wood").put("minecraft:acacia_bark", "minecraft:acacia_wood").put("minecraft:dark_oak_bark", "minecraft:dark_oak_wood").put("minecraft:stripped_oak_bark", "minecraft:stripped_oak_wood").put("minecraft:stripped_spruce_bark", "minecraft:stripped_spruce_wood").put("minecraft:stripped_birch_bark", "minecraft:stripped_birch_wood").put("minecraft:stripped_jungle_bark", "minecraft:stripped_jungle_wood").put("minecraft:stripped_acacia_bark", "minecraft:stripped_acacia_wood").put("minecraft:stripped_dark_oak_bark", "minecraft:stripped_dark_oak_wood").put("minecraft:mob_spawner", "minecraft:spawner").build();
+    public static final Map<String, String> RENAMED_ITEMS = ImmutableMap.<String, String>builder().putAll(RENAMED_BLOCKS).put("minecraft:clownfish", "minecraft:tropical_fish").put("minecraft:chorus_fruit_popped", "minecraft:popped_chorus_fruit").put("minecraft:evocation_illager_spawn_egg", "minecraft:evoker_spawn_egg").put("minecraft:vindication_illager_spawn_egg", "minecraft:vindicator_spawn_egg").build();
     private static final String MINECRAFT_BRED = "minecraft:bred_";
 
     public EntityTheRenameningFix(Schema schema, boolean flag) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java
index 3519f81d2b5fe2a381cf3cf38a298ebfd07e175a..a08f9bc5fe0a7666a119e67b4db3b143e39d08e1 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java
@@ -65,9 +65,9 @@ public class EntityUUIDFix extends AbstractUUIDFix {
     }
 
     private static Dynamic<?> updatePiglin(Dynamic<?> dynamic) {
-        return dynamic.update("Brain", (dynamicx) -> dynamicx.update("memories", (dynamic) -> dynamic.update("minecraft:angry_at", (dynamicx) -> replaceUUIDString(dynamicx, "value", "value").orElseGet(() -> {
+        return dynamic.update("Brain", (dynamicx) -> dynamicx.update("memories", (dynamicIn) -> dynamicIn.update("minecraft:angry_at", (dynamicIn2) -> replaceUUIDString(dynamicIn2, "value", "value").orElseGet(() -> {
                         LOGGER.warn("angry_at has no value.");
-                        return dynamicx;
+                        return dynamicIn2;
                     }))));
     }
 
@@ -120,7 +120,7 @@ public class EntityUUIDFix extends AbstractUUIDFix {
     }
 
     public static Dynamic<?> updateLivingEntity(Dynamic<?> dynamic) {
-        return dynamic.update("Attributes", (dynamic2) -> dynamic.createList(dynamic2.asStream().map((dynamicx) -> dynamicx.update("Modifiers", (dynamic2) -> dynamicx.createList(dynamic2.asStream().map((dynamic) -> replaceUUIDLeastMost(dynamic, "UUID", "UUID").orElse(dynamic)))))));
+        return dynamic.update("Attributes", (dynamic2) -> dynamic.createList(dynamic2.asStream().map((dynamicx) -> dynamicx.update("Modifiers", (dynamicIn2) -> dynamicx.createList(dynamicIn2.asStream().map((dynamicIn3) -> replaceUUIDLeastMost(dynamicIn3, "UUID", "UUID").orElse(dynamicIn3)))))));
     }
 
     private static Dynamic<?> updateProjectile(Dynamic<?> dynamic) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityVariantFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityVariantFix.java
index f177a1ea7456c472526cf9f90d5d9e302201cc98..8009dcc7f635780f7331058f22e0128ea51dbe20 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityVariantFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityVariantFix.java
@@ -23,7 +23,7 @@ public class EntityVariantFix extends NamedEntityFix {
     private static <T> Dynamic<T> updateAndRename(Dynamic<T> dynamic, String s, String s2, Function<Dynamic<T>, Dynamic<T>> function) {
         return dynamic.map((object) -> {
             DynamicOps<T> dynamicOps = dynamic.getOps();
-            Function<T, T> function2 = (objectx) -> (function.apply(new Dynamic(dynamicOps, objectx))).getValue();
+            Function<T, T> function2 = (objectx) -> (function.apply(new Dynamic<>(dynamicOps, objectx))).getValue();
             return dynamicOps.get(object, s).map((object2) -> dynamicOps.set(object, s2, function2.apply(object2))).result().orElse(object);
         });
     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java
index 474d047f94a638d026010f7b19ad3b1c14f66e41..86b7ab5bb3b298948ed8578d2eb8fb7dc7f5ff31 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java
@@ -6,7 +6,7 @@ import java.util.Map;
 import java.util.Objects;
 
 public class EntityZombifiedPiglinRenameFix extends SimplestEntityRenameFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:zombie_pigman_spawn_egg", "minecraft:zombified_piglin_spawn_egg").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:zombie_pigman_spawn_egg", "minecraft:zombified_piglin_spawn_egg").build();
 
     public EntityZombifiedPiglinRenameFix(Schema schema) {
         super("EntityZombifiedPiglinRenameFix", schema, true);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ForcePoiRebuild.java b/src/main/java/net/minecraft/util/datafix/fixes/ForcePoiRebuild.java
index 7b3b50ba4d430b200f791b8c41392e9d7b9b0981..731f5c89fba9dd9e5e595e0370ecfe79b30160cb 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ForcePoiRebuild.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ForcePoiRebuild.java
@@ -24,6 +24,6 @@ public class ForcePoiRebuild extends DataFix {
     }
 
     private static <T> Dynamic<T> cap(Dynamic<T> dynamic) {
-        return dynamic.update("Sections", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamic) -> dynamic.remove("Valid"))));
+        return dynamic.update("Sections", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond(((dynamicIn) -> dynamicIn.remove("Valid")))));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java
index 29a0c27bad66157a3b6f92bf08c7c8b40f046826..2f4aeef113caa0aba4e30c3dd29cbd445f4b3c21 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java
@@ -50,8 +50,8 @@ public class FurnaceRecipeFix extends DataFix {
             int i3 = dynamic.get(s2).asInt(0);
             if (i3 > 0) {
                 optional.ifPresent((dynamicx) -> {
-                    Optional<? extends Pair<R, ? extends Dynamic<?>>> optional = type.read(dynamicx).result();
-                    optional.ifPresent((pair) -> list.add(Pair.of(pair.getFirst(), i3)));
+                    Optional<? extends Pair<R, ? extends Dynamic<?>>> optionalIn = type.read(dynamicx).result();
+                    optionalIn.ifPresent((pair) -> list.add(Pair.of(pair.getFirst(), i3)));
                 });
             }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/GossipUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/GossipUUIDFix.java
index 52e51a0a76a5b73f0d9daa7dae770dbf56d26c6f..d496524f3cc41951a463691a7df6a5e43a3fd57a 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/GossipUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/GossipUUIDFix.java
@@ -12,6 +12,6 @@ public class GossipUUIDFix extends NamedEntityFix {
     }
 
     protected Typed<?> fix(Typed<?> typed) {
-        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Gossips", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamic) -> AbstractUUIDFix.replaceUUIDLeastMost(dynamic, "Target", "Target").orElse(dynamic))).map(dynamicx::createList), dynamicx)));
+        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Gossips", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamicIn) -> AbstractUUIDFix.replaceUUIDLeastMost(dynamicIn, "Target", "Target").orElse(dynamicIn))).map(dynamicx::createList), dynamicx)));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java b/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java
index 83e7f2c00601fb69c078a2e5e3eb288b0091a11f..9c32be3cf3f20efbafa565b3d6f593702e324aa5 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java
@@ -23,7 +23,7 @@ public class IglooMetadataRemovalFix extends DataFix {
     }
 
     private static <T> Dynamic<T> removeIglooPieces(Dynamic<T> dynamic) {
-        return dynamic.asStreamOpt().map((stream) -> stream.filter((dynamic) -> !isIglooPiece(dynamic))).map(dynamic::createList).result().orElse(dynamic);
+        return dynamic.asStreamOpt().map((stream) -> stream.filter((dynamicIn) -> !isIglooPiece(dynamicIn))).map(dynamic::createList).result().orElse(dynamic);
     }
 
     private static boolean isIglooPiece(Dynamic<?> dynamic) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemLoreFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemLoreFix.java
index f9968693cae8a91abf865edcd4ec060a1a21bd4d..e935d8483458e48d6a1a6a2f84255f2d5c06e0fc 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemLoreFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemLoreFix.java
@@ -19,7 +19,7 @@ public class ItemLoreFix extends DataFix {
     protected TypeRewriteRule makeRule() {
         Type<?> type = this.getInputSchema().getType(References.ITEM_STACK);
         OpticFinder<?> opticFinder = type.findField("tag");
-        return this.fixTypeEverywhereTyped("Item Lore componentize", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("display", (dynamicx) -> dynamicx.update("Lore", (dynamic) -> DataFixUtils.orElse(dynamic.asStreamOpt().map(ItemLoreFix::fixLoreList).map(dynamic::createList).result(), dynamic))))));
+        return this.fixTypeEverywhereTyped("Item Lore componentize", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("display", (dynamicx) -> dynamicx.update("Lore", (dynamicIn) -> DataFixUtils.orElse(dynamicIn.asStreamOpt().map(ItemLoreFix::fixLoreList).map(dynamicIn::createList).result(), dynamicIn))))));
     }
 
     private static <T> Stream<Dynamic<T>> fixLoreList(Stream<Dynamic<T>> stream) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java
index c407f82326ff631ac1fb1344a41a5a87e6e07d0f..fed9a916b296910074bea760c4ba5991c0df47fe 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java
@@ -61,11 +61,11 @@ public class ItemStackEnchantmentNamesFix extends DataFix {
     }
 
     private Dynamic<?> fixTag(Dynamic<?> dynamic) {
-        Optional<? extends Dynamic<?>> optional = dynamic.get("ench").asStreamOpt().map((stream) -> stream.map((dynamic) -> dynamic.set("id", dynamic.createString((String)MAP.getOrDefault(dynamic.get("id").asInt(0), "null"))))).map(dynamic::createList).result();
+        Optional<? extends Dynamic<?>> optional = dynamic.get("ench").asStreamOpt().map((stream) -> stream.map((dynamicIn) -> dynamicIn.set("id", dynamicIn.createString((String)MAP.getOrDefault(dynamicIn.get("id").asInt(0), "null"))))).map(dynamic::createList).result();
         if (optional.isPresent()) {
             dynamic = dynamic.remove("ench").set("Enchantments", optional.get());
         }
 
-        return dynamic.update("StoredEnchantments", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().map((stream) -> stream.map((dynamic) -> dynamic.set("id", dynamic.createString((String)MAP.getOrDefault(dynamic.get("id").asInt(0), "null"))))).map(dynamicx::createList).result(), dynamicx));
+        return dynamic.update("StoredEnchantments", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().map((stream) -> stream.map((dynamicIn) -> dynamicIn.set("id", dynamicIn.createString((String)MAP.getOrDefault(dynamicIn.get("id").asInt(0), "null"))))).map(dynamicx::createList).result(), dynamicx));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java
index 03b26f4205c7f86a01def56b3d6e294c42ae24e9..28b9a83a73d8305540b47fd1a506a6121da02dae 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java
@@ -19,11 +19,11 @@ public class ItemWrittenBookPagesStrictJsonFix extends DataFix {
     }
 
     public Dynamic<?> fixTag(Dynamic<?> dynamic) {
-        return dynamic.update("pages", (dynamic2) -> DataFixUtils.orElse(dynamic2.asStreamOpt().map((stream) -> stream.map((dynamic) -> {
-                    if (!dynamic.asString().result().isPresent()) {
-                        return dynamic;
+        return dynamic.update("pages", (dynamic2) -> DataFixUtils.orElse(dynamic2.asStreamOpt().map((stream) -> stream.map((dynamicIn) -> {
+                    if (!dynamicIn.asString().result().isPresent()) {
+                        return dynamicIn;
                     } else {
-                        String s = dynamic.asString("");
+                        String s = dynamicIn.asString("");
                         Component component = null;
                         if (!"null".equals(s) && !StringUtils.isEmpty(s)) {
                             if (s.charAt(0) == '"' && s.charAt(s.length() - 1) == '"' || s.charAt(0) == '{' && s.charAt(s.length() - 1) == '}') {
@@ -59,7 +59,7 @@ public class ItemWrittenBookPagesStrictJsonFix extends DataFix {
                             component = CommonComponents.EMPTY;
                         }
 
-                        return dynamic.createString(Component.Serializer.toJson(component));
+                        return dynamicIn.createString(Component.Serializer.toJson(component));
                     }
                 })).map(dynamic::createList).result(), dynamic.emptyList()));
     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java b/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java
index c3c2e1e17d000e76d818807ad112dde8c21347f6..0cb5d6f58b66472a555479a7c66912f43371c10f 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java
@@ -10,7 +10,7 @@ import java.util.Map;
 import java.util.Optional;
 
 public class JigsawRotationFix extends DataFix {
-    private static final Map<String, String> RENAMES = ImmutableMap.builder().put("down", "down_south").put("up", "up_north").put("north", "north_up").put("south", "south_up").put("west", "west_up").put("east", "east_up").build();
+    private static final Map<String, String> RENAMES = ImmutableMap.<String, String>builder().put("down", "down_south").put("up", "up_north").put("north", "north_up").put("south", "south_up").put("west", "west_up").put("east", "east_up").build();
 
     public JigsawRotationFix(Schema schema, boolean flag) {
         super(schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java b/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
index 7183ae5fb148fe4efd42af474ffe16bc437cb277..629cc5e62d2c1d3b4a21851c54f3b66fe0409232 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
@@ -73,10 +73,10 @@ public class LeavesFix extends DataFix {
             OpticFinder<?> opticFinder3 = DSL.typeFinder(type3);
             return this.fixTypeEverywhereTyped("Leaves fix", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> {
                     int[] ints = new int[]{0};
-                    Typed<?> typed2 = typedx.updateTyped(opticFinder2, (typed) -> {
-                        Int2ObjectMap<LeavesFix.LeavesSection> int2ObjectMap = new Int2ObjectOpenHashMap(typed.getAllTyped(opticFinder3).stream().map((typedx) -> new LeavesFix.LeavesSection(typedx, this.getInputSchema())).collect(Collectors.toMap(LeavesFix.Section::getIndex, (leavesSection) -> leavesSection)));
+                    Typed<?> typed2 = typedx.updateTyped(opticFinder2, (typedIn) -> {
+                        Int2ObjectMap<LeavesFix.LeavesSection> int2ObjectMap = new Int2ObjectOpenHashMap(typedIn.getAllTyped(opticFinder3).stream().map((typedIn2) -> new LeavesFix.LeavesSection(typedIn2, this.getInputSchema())).collect(Collectors.toMap(LeavesFix.Section::getIndex, (leavesSection) -> leavesSection)));
                         if (int2ObjectMap.values().stream().allMatch(LeavesFix.Section::isSkippable)) {
-                            return typed;
+                            return typedIn;
                         } else {
                             List<IntSet> list = Lists.newArrayList();
 
@@ -135,7 +135,7 @@ public class LeavesFix extends DataFix {
                                 }
                             }
 
-                            return typed.updateTyped(opticFinder3, (typedx) -> ((LeavesFix.LeavesSection)int2ObjectMap.get((typedx.get(DSL.remainderFinder())).get("Y").asInt(0))).write(typedx));
+                            return typedIn.updateTyped(opticFinder3, (typedIn2) -> ((LeavesFix.LeavesSection)int2ObjectMap.get((typedIn2.get(DSL.remainderFinder())).get("Y").asInt(0))).write(typedIn2));
                         }
                     });
                     if (ints[0] != 0) {
@@ -295,7 +295,7 @@ public class LeavesFix extends DataFix {
                 throw new IllegalStateException("Block state type is not what was expected.");
             } else {
                 Optional<List<Pair<String, Dynamic<?>>>> optional = typed.getOptional(this.paletteFinder);
-                this.palette = optional.map((list) -> list.stream().map(Pair::getSecond).collect(Collectors.toList())).orElse(ImmutableList.of());
+                this.palette = (List) optional.map((list) -> list.stream().map(Pair::getSecond).collect(Collectors.toList())).orElse(ImmutableList.of());
                 Dynamic<?> dynamic = typed.get(DSL.remainderFinder());
                 this.index = dynamic.get("Y").asInt(0);
                 this.readStorage(dynamic);
@@ -314,7 +314,7 @@ public class LeavesFix extends DataFix {
         }
 
         public Typed<?> write(Typed<?> typed) {
-            return this.isSkippable() ? typed : typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.set("BlockStates", dynamic.createLongList(Arrays.stream(this.storage.getRaw())))).set(this.paletteFinder, this.palette.stream().map((dynamic) -> Pair.of(References.BLOCK_STATE.typeName(), dynamic)).collect(Collectors.toList()));
+            return this.isSkippable() ? typed : typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.set("BlockStates", dynamic.createLongList(Arrays.stream(this.storage.getRaw())))).set((OpticFinder) this.paletteFinder, this.palette.stream().map((dynamic) -> Pair.of(References.BLOCK_STATE.typeName(), dynamic)).collect(Collectors.toList()));
         }
 
         public boolean isSkippable() {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java b/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java
index fbe410a9a98f78629775a235198bfb4bb940eb2b..6463d3f3efe1aeb27bb6b941180829a23f82b35e 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java
@@ -59,16 +59,16 @@ public class LevelFlatGeneratorInfoFix extends DataFix {
                 stringBuilder.append((String)StreamSupport.stream(LAYER_SPLITTER.split(s3).spliterator(), false).map((sx) -> {
                     List<String> list = splitter.splitToList(sx);
                     int i2;
-                    String s2;
+                    String s2In;
                     if (list.size() == 2) {
                         i2 = NumberUtils.toInt((String)list.get(0));
-                        s2 = (String)list.get(1);
+                        s2In = (String)list.get(1);
                     } else {
                         i2 = 1;
-                        s2 = (String)list.get(0);
+                        s2In = (String)list.get(0);
                     }
 
-                    List<String> list2 = BLOCK_SPLITTER.splitToList(s2);
+                    List<String> list2 = BLOCK_SPLITTER.splitToList(s2In);
                     int i4 = ((String)list2.get(0)).equals("minecraft") ? 1 : 0;
                     String s4 = (String)list2.get(i4);
                     int i5 = i == 3 ? EntityBlockStateFix.getBlockId("minecraft:" + s4) : NumberUtils.toInt(s4, 0);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/LevelUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/LevelUUIDFix.java
index cfda875528ebd1dbcc4c82b67a5eece8e0076ca0..c6f5290e7d21b49f57277663212aaa64e8f0168c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/LevelUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/LevelUUIDFix.java
@@ -27,13 +27,13 @@ public class LevelUUIDFix extends AbstractUUIDFix {
     }
 
     private Dynamic<?> updateDragonFight(Dynamic<?> dynamic) {
-        return dynamic.update("DimensionData", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamic) -> dynamic.update("DragonFight", (dynamicx) -> replaceUUIDLeastMost(dynamicx, "DragonUUID", "Dragon").orElse(dynamicx)))));
+        return dynamic.update("DimensionData", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamicIn) -> dynamicIn.update("DragonFight", (dynamicIn2) -> replaceUUIDLeastMost(dynamicIn2, "DragonUUID", "Dragon").orElse(dynamicIn2)))));
     }
 
     private Dynamic<?> updateCustomBossEvents(Dynamic<?> dynamic) {
-        return dynamic.update("CustomBossEvents", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamic) -> dynamic.update("Players", (dynamic2) -> dynamic.createList(dynamic2.asStream().map((dynamicx) -> createUUIDFromML(dynamicx).orElseGet(() -> {
+        return dynamic.update("CustomBossEvents", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamicIn) -> dynamicIn.update("Players", (dynamic2) -> dynamicIn.createList(dynamic2.asStream().map((dynamicIn2) -> createUUIDFromML(dynamicIn2).orElseGet(() -> {
                                 LOGGER.warn("CustomBossEvents contains invalid UUIDs.");
-                                return dynamicx;
+                                return dynamicIn2;
                             })))))));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/MissingDimensionFix.java b/src/main/java/net/minecraft/util/datafix/fixes/MissingDimensionFix.java
index d968b56338b5c1fb7489c64edfbbd8085fad9ca3..1acbabaf3703a9308a2756f4bfdecab593c28544 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/MissingDimensionFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/MissingDimensionFix.java
@@ -50,7 +50,7 @@ public class MissingDimensionFix extends DataFix {
             return this.fixTypeEverywhereTyped("MissingDimensionFix", type2, (typed) -> typed.updateTyped(fieldFinder, (typed2) -> typed2.updateTyped(opticFinder, (typed2x) -> {
                         if (!(typed2x.getValue() instanceof List)) {
                             throw new IllegalStateException("List exptected");
-                        } else if ((typed2x.getValue()).isEmpty()) {
+                        } else if (((List)typed2x.getValue()).isEmpty()) {
                             Dynamic<?> dynamic = typed.get(DSL.remainderFinder());
                             Dynamic<?> dynamic2 = this.recreateSettings(dynamic);
                             return DataFixUtils.orElse(compoundListType.readTyped(dynamic2).result().map(Pair::getFirst), typed2x);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/MobSpawnerEntityIdentifiersFix.java b/src/main/java/net/minecraft/util/datafix/fixes/MobSpawnerEntityIdentifiersFix.java
index f46a0e0129201aee7bc227b03d90c9c6a8daf54c..06281588fa5e6fcc640fbea4bfb942d8d26fa1b5 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/MobSpawnerEntityIdentifiersFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/MobSpawnerEntityIdentifiersFix.java
@@ -32,10 +32,10 @@ public class MobSpawnerEntityIdentifiersFix extends DataFix {
 
             Optional<? extends Stream<? extends Dynamic<?>>> optional2 = dynamic.get("SpawnPotentials").asStreamOpt().result();
             if (optional2.isPresent()) {
-                dynamic = dynamic.set("SpawnPotentials", dynamic.createList(((Stream)optional2.get()).map((dynamicx) -> {
-                    Optional<String> optional = dynamicx.get("Type").asString().result();
-                    if (optional.isPresent()) {
-                        Dynamic<?> dynamic2 = (DataFixUtils.orElse(dynamicx.get("Properties").result(), dynamicx.emptyMap())).set("id", dynamicx.createString((String)optional.get()));
+                dynamic = dynamic.set("SpawnPotentials", dynamic.createList((optional2.get()).map((dynamicx) -> {
+                    Optional<String> optionalIn = dynamicx.get("Type").asString().result();
+                    if (optionalIn.isPresent()) {
+                        Dynamic<?> dynamic2 = (DataFixUtils.orElse(dynamicx.get("Properties").result(), dynamicx.emptyMap())).set("id", dynamicx.createString((String)optionalIn.get()));
                         return dynamicx.set("Entity", dynamic2).remove("Type").remove("Properties");
                     } else {
                         return dynamicx;
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/NewVillageFix.java b/src/main/java/net/minecraft/util/datafix/fixes/NewVillageFix.java
index 69695f1d64c4a3da5f758e280bf676ddfb9a2149..5c016485c545b2970ad736777a03f8129f04355f 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/NewVillageFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/NewVillageFix.java
@@ -34,7 +34,7 @@ public class NewVillageFix extends DataFix {
         OpticFinder<?> opticFinder2 = opticFinder.type().findField("Structures");
         OpticFinder<?> opticFinder3 = opticFinder2.type().findField("Starts");
         OpticFinder<List<Pair<String, SF>>> opticFinder4 = compoundListType.finder();
-        return TypeRewriteRule.seq(this.fixTypeEverywhereTyped("NewVillageFix", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> typed.updateTyped(opticFinder3, (typedx) -> typedx.update(opticFinder4, (list) -> list.stream().filter((pair) -> !Objects.equals(pair.getFirst(), "Village")).map((pair) -> pair.mapFirst((s) -> s.equals("New_Village") ? "Village" : s)).collect(Collectors.toList()))).update(DSL.remainderFinder(), (dynamic) -> dynamic.update("References", (dynamicx) -> {
+        return TypeRewriteRule.seq(this.fixTypeEverywhereTyped("NewVillageFix", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedIn) -> typedIn.updateTyped(opticFinder3, (typedIn2) -> typedIn2.update(opticFinder4, (list) -> list.stream().filter((pair) -> !Objects.equals(pair.getFirst(), "Village")).map((pair) -> pair.mapFirst((s) -> s.equals("New_Village") ? "Village" : s)).collect(Collectors.toList()))).update(DSL.remainderFinder(), (dynamic) -> dynamic.update("References", (dynamicx) -> {
                             Optional<? extends Dynamic<?>> optional = dynamicx.get("New_Village").result();
                             return (DataFixUtils.orElse(optional.map((dynamic2) -> dynamicx.remove("New_Village").set("Village", dynamic2)), dynamicx)).remove("Village");
                         }))))), this.fixTypeEverywhereTyped("NewVillageStartFix", type2, (typed) -> typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("id", (dynamicx) -> Objects.equals(NamespacedSchema.ensureNamespaced(dynamicx.asString("")), "minecraft:new_village") ? dynamicx.createString("minecraft:village") : dynamicx))));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyLwjgl3Fix.java b/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyLwjgl3Fix.java
index 62fcad9c9abd9ef77737352ccb57c6085b0bcf7c..9045fe84651448810f62d8a4f40fbcc43f27c4f2 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyLwjgl3Fix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyLwjgl3Fix.java
@@ -158,6 +158,6 @@ public class OptionsKeyLwjgl3Fix extends DataFix {
                         } else {
                             return Pair.of(entry.getKey(), entry.getValue());
                         }
-                    }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)))).result().orElse(dynamic)));
+                    }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)))).result().orElse((Dynamic) dynamic)));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyTranslationFix.java b/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyTranslationFix.java
index 518c64d127f65bbb8f9d1bebfd38ee43bd11ec83..002e4b17d647cbdef70d1e0b275de9a4aa6592b9 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyTranslationFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyTranslationFix.java
@@ -24,6 +24,6 @@ public class OptionsKeyTranslationFix extends DataFix {
                         }
 
                         return Pair.of(entry.getKey(), entry.getValue());
-                    }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)))).result().orElse(dynamic)));
+                    }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)))).result().orElse((Dynamic) dynamic)));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/OverreachingTickFix.java b/src/main/java/net/minecraft/util/datafix/fixes/OverreachingTickFix.java
index 3e5170fa5b84db9e3dd96f6dcf4b3577f2bf24c6..87fcaca84f958f7ace494f3feac556f2fde88882 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/OverreachingTickFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/OverreachingTickFix.java
@@ -25,9 +25,9 @@ public class OverreachingTickFix extends DataFix {
             return typed.update(DSL.remainderFinder(), (dynamic) -> {
                 int i = dynamic.get("xPos").asInt(0);
                 int i2 = dynamic.get("zPos").asInt(0);
-                Optional<? extends Dynamic<?>> optional2 = dynamic.get("fluid_ticks").get().result();
-                dynamic = extractOverreachingTicks(dynamic, i, i2, optional2, "neighbor_block_ticks");
-                return extractOverreachingTicks(dynamic, i, i2, optional2, "neighbor_fluid_ticks");
+                Optional<? extends Dynamic<?>> optional2In = dynamic.get("fluid_ticks").get().result();
+                dynamic = extractOverreachingTicks(dynamic, i, i2, optional2In, "neighbor_block_ticks");
+                return extractOverreachingTicks(dynamic, i, i2, optional2In, "neighbor_fluid_ticks");
             });
         });
     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RecipesFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RecipesFix.java
index cb0fee86cdcf2b29d51c3a95001a903d5b199a71..4a3a0310c3f44e002633d3f72109fdc19c9e947c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RecipesFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RecipesFix.java
@@ -5,7 +5,7 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class RecipesFix extends RecipesRenameFix {
-    private static final Map<String, String> RECIPES = ImmutableMap.builder().put("minecraft:acacia_wooden_slab", "minecraft:acacia_slab").put("minecraft:birch_wooden_slab", "minecraft:birch_slab").put("minecraft:black_stained_hardened_clay", "minecraft:black_terracotta").put("minecraft:blue_stained_hardened_clay", "minecraft:blue_terracotta").put("minecraft:boat", "minecraft:oak_boat").put("minecraft:bone_meal_from_block", "minecraft:bone_meal_from_bone_block").put("minecraft:bone_meal_from_bone", "minecraft:bone_meal").put("minecraft:brick_block", "minecraft:bricks").put("minecraft:brown_stained_hardened_clay", "minecraft:brown_terracotta").put("minecraft:chiseled_stonebrick", "minecraft:chiseled_stone_bricks").put("minecraft:cyan_stained_hardened_clay", "minecraft:cyan_terracotta").put("minecraft:dark_oak_wooden_slab", "minecraft:dark_oak_slab").put("minecraft:end_bricks", "minecraft:end_stone_bricks").put("minecraft:fence_gate", "minecraft:oak_fence_gate").put("minecraft:fence", "minecraft:oak_fence").put("minecraft:golden_rail", "minecraft:powered_rail").put("minecraft:gold_ingot_from_block", "minecraft:gold_ingot_from_gold_block").put("minecraft:gray_stained_hardened_clay", "minecraft:gray_terracotta").put("minecraft:green_stained_hardened_clay", "minecraft:green_terracotta").put("minecraft:iron_ingot_from_block", "minecraft:iron_ingot_from_iron_block").put("minecraft:jungle_wooden_slab", "minecraft:jungle_slab").put("minecraft:light_blue_stained_hardened_clay", "minecraft:light_blue_terracotta").put("minecraft:light_gray_stained_hardened_clay", "minecraft:light_gray_terracotta").put("minecraft:lime_stained_hardened_clay", "minecraft:lime_terracotta").put("minecraft:lit_pumpkin", "minecraft:jack_o_lantern").put("minecraft:magenta_stained_hardened_clay", "minecraft:magenta_terracotta").put("minecraft:magma", "minecraft:magma_block").put("minecraft:melon_block", "minecraft:melon").put("minecraft:mossy_stonebrick", "minecraft:mossy_stone_bricks").put("minecraft:noteblock", "minecraft:note_block").put("minecraft:oak_wooden_slab", "minecraft:oak_slab").put("minecraft:orange_stained_hardened_clay", "minecraft:orange_terracotta").put("minecraft:pillar_quartz_block", "minecraft:quartz_pillar").put("minecraft:pink_stained_hardened_clay", "minecraft:pink_terracotta").put("minecraft:purple_shulker_box", "minecraft:shulker_box").put("minecraft:purple_stained_hardened_clay", "minecraft:purple_terracotta").put("minecraft:red_nether_brick", "minecraft:red_nether_bricks").put("minecraft:red_stained_hardened_clay", "minecraft:red_terracotta").put("minecraft:slime", "minecraft:slime_block").put("minecraft:smooth_red_sandstone", "minecraft:cut_red_sandstone").put("minecraft:smooth_sandstone", "minecraft:cut_sandstone").put("minecraft:snow_layer", "minecraft:snow").put("minecraft:snow", "minecraft:snow_block").put("minecraft:speckled_melon", "minecraft:glistering_melon_slice").put("minecraft:spruce_wooden_slab", "minecraft:spruce_slab").put("minecraft:stonebrick", "minecraft:stone_bricks").put("minecraft:stone_stairs", "minecraft:cobblestone_stairs").put("minecraft:string_to_wool", "minecraft:white_wool_from_string").put("minecraft:trapdoor", "minecraft:oak_trapdoor").put("minecraft:white_stained_hardened_clay", "minecraft:white_terracotta").put("minecraft:wooden_button", "minecraft:oak_button").put("minecraft:wooden_door", "minecraft:oak_door").put("minecraft:wooden_pressure_plate", "minecraft:oak_pressure_plate").put("minecraft:yellow_stained_hardened_clay", "minecraft:yellow_terracotta").build();
+    private static final Map<String, String> RECIPES = ImmutableMap.<String, String>builder().put("minecraft:acacia_wooden_slab", "minecraft:acacia_slab").put("minecraft:birch_wooden_slab", "minecraft:birch_slab").put("minecraft:black_stained_hardened_clay", "minecraft:black_terracotta").put("minecraft:blue_stained_hardened_clay", "minecraft:blue_terracotta").put("minecraft:boat", "minecraft:oak_boat").put("minecraft:bone_meal_from_block", "minecraft:bone_meal_from_bone_block").put("minecraft:bone_meal_from_bone", "minecraft:bone_meal").put("minecraft:brick_block", "minecraft:bricks").put("minecraft:brown_stained_hardened_clay", "minecraft:brown_terracotta").put("minecraft:chiseled_stonebrick", "minecraft:chiseled_stone_bricks").put("minecraft:cyan_stained_hardened_clay", "minecraft:cyan_terracotta").put("minecraft:dark_oak_wooden_slab", "minecraft:dark_oak_slab").put("minecraft:end_bricks", "minecraft:end_stone_bricks").put("minecraft:fence_gate", "minecraft:oak_fence_gate").put("minecraft:fence", "minecraft:oak_fence").put("minecraft:golden_rail", "minecraft:powered_rail").put("minecraft:gold_ingot_from_block", "minecraft:gold_ingot_from_gold_block").put("minecraft:gray_stained_hardened_clay", "minecraft:gray_terracotta").put("minecraft:green_stained_hardened_clay", "minecraft:green_terracotta").put("minecraft:iron_ingot_from_block", "minecraft:iron_ingot_from_iron_block").put("minecraft:jungle_wooden_slab", "minecraft:jungle_slab").put("minecraft:light_blue_stained_hardened_clay", "minecraft:light_blue_terracotta").put("minecraft:light_gray_stained_hardened_clay", "minecraft:light_gray_terracotta").put("minecraft:lime_stained_hardened_clay", "minecraft:lime_terracotta").put("minecraft:lit_pumpkin", "minecraft:jack_o_lantern").put("minecraft:magenta_stained_hardened_clay", "minecraft:magenta_terracotta").put("minecraft:magma", "minecraft:magma_block").put("minecraft:melon_block", "minecraft:melon").put("minecraft:mossy_stonebrick", "minecraft:mossy_stone_bricks").put("minecraft:noteblock", "minecraft:note_block").put("minecraft:oak_wooden_slab", "minecraft:oak_slab").put("minecraft:orange_stained_hardened_clay", "minecraft:orange_terracotta").put("minecraft:pillar_quartz_block", "minecraft:quartz_pillar").put("minecraft:pink_stained_hardened_clay", "minecraft:pink_terracotta").put("minecraft:purple_shulker_box", "minecraft:shulker_box").put("minecraft:purple_stained_hardened_clay", "minecraft:purple_terracotta").put("minecraft:red_nether_brick", "minecraft:red_nether_bricks").put("minecraft:red_stained_hardened_clay", "minecraft:red_terracotta").put("minecraft:slime", "minecraft:slime_block").put("minecraft:smooth_red_sandstone", "minecraft:cut_red_sandstone").put("minecraft:smooth_sandstone", "minecraft:cut_sandstone").put("minecraft:snow_layer", "minecraft:snow").put("minecraft:snow", "minecraft:snow_block").put("minecraft:speckled_melon", "minecraft:glistering_melon_slice").put("minecraft:spruce_wooden_slab", "minecraft:spruce_slab").put("minecraft:stonebrick", "minecraft:stone_bricks").put("minecraft:stone_stairs", "minecraft:cobblestone_stairs").put("minecraft:string_to_wool", "minecraft:white_wool_from_string").put("minecraft:trapdoor", "minecraft:oak_trapdoor").put("minecraft:white_stained_hardened_clay", "minecraft:white_terracotta").put("minecraft:wooden_button", "minecraft:oak_button").put("minecraft:wooden_door", "minecraft:oak_door").put("minecraft:wooden_pressure_plate", "minecraft:oak_pressure_plate").put("minecraft:yellow_stained_hardened_clay", "minecraft:yellow_terracotta").build();
 
     public RecipesFix(Schema schema, boolean flag) {
         super(schema, flag, "Recipes fix", (s) -> (String)RECIPES.getOrDefault(s, s));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameningFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameningFix.java
index 2c1190d423d75f809a88b28c4a472026482b171d..958847faa5883e3435ba9baf4240d7b9dbc58965 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameningFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameningFix.java
@@ -5,7 +5,7 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class RecipesRenameningFix extends RecipesRenameFix {
-    private static final Map<String, String> RECIPES = ImmutableMap.builder().put("minecraft:acacia_bark", "minecraft:acacia_wood").put("minecraft:birch_bark", "minecraft:birch_wood").put("minecraft:dark_oak_bark", "minecraft:dark_oak_wood").put("minecraft:jungle_bark", "minecraft:jungle_wood").put("minecraft:oak_bark", "minecraft:oak_wood").put("minecraft:spruce_bark", "minecraft:spruce_wood").build();
+    private static final Map<String, String> RECIPES = ImmutableMap.<String, String>builder().put("minecraft:acacia_bark", "minecraft:acacia_wood").put("minecraft:birch_bark", "minecraft:birch_wood").put("minecraft:dark_oak_bark", "minecraft:dark_oak_wood").put("minecraft:jungle_bark", "minecraft:jungle_wood").put("minecraft:oak_bark", "minecraft:oak_wood").put("minecraft:spruce_bark", "minecraft:spruce_wood").build();
 
     public RecipesRenameningFix(Schema schema, boolean flag) {
         super(schema, flag, "Recipes renamening fix", (s) -> (String)RECIPES.getOrDefault(s, s));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java
index fe9ccf1b7bfece293d5c3df8a299629e1cdf4e4a..f6715f7bfa1103aed8946ae4c690f94f9b91fc1b 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java
@@ -23,13 +23,13 @@ public class RedstoneWireConnectionsFix extends DataFix {
             String s2 = dynamicx.get("west").asString("none");
             String s3 = dynamicx.get("north").asString("none");
             String s4 = dynamicx.get("south").asString("none");
-            boolean flag = isConnected(s) || isConnected(s2);
+            boolean flagIn = isConnected(s) || isConnected(s2);
             boolean flag2 = isConnected(s3) || isConnected(s4);
             String s5 = !isConnected(s) && !flag2 ? "side" : s;
             String s6 = !isConnected(s2) && !flag2 ? "side" : s2;
-            String s7 = !isConnected(s3) && !flag ? "side" : s3;
-            String s8 = !isConnected(s4) && !flag ? "side" : s4;
-            return dynamicx.update("east", (dynamic) -> dynamic.createString(s5)).update("west", (dynamic) -> dynamic.createString(s6)).update("north", (dynamic) -> dynamic.createString(s7)).update("south", (dynamic) -> dynamic.createString(s8));
+            String s7 = !isConnected(s3) && !flagIn ? "side" : s3;
+            String s8 = !isConnected(s4) && !flagIn ? "side" : s4;
+            return dynamicx.update("east", (dynamicIn) -> dynamicIn.createString(s5)).update("west", (dynamicIn2) -> dynamicIn2.createString(s6)).update("north", (dynamicIn3) -> dynamicIn3.createString(s7)).update("south", (dynamicIn4) -> dynamicIn4.createString(s8));
         });
     }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFansFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFansFix.java
index d3f00a724eed7b30be7715efb72ad96b5b054280..a50273f8c740d3d55567ee0ce7a59f65d68a258c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFansFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFansFix.java
@@ -4,5 +4,5 @@ import com.google.common.collect.ImmutableMap;
 import java.util.Map;
 
 public class RenamedCoralFansFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:tube_coral_fan", "minecraft:tube_coral_wall_fan").put("minecraft:brain_coral_fan", "minecraft:brain_coral_wall_fan").put("minecraft:bubble_coral_fan", "minecraft:bubble_coral_wall_fan").put("minecraft:fire_coral_fan", "minecraft:fire_coral_wall_fan").put("minecraft:horn_coral_fan", "minecraft:horn_coral_wall_fan").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:tube_coral_fan", "minecraft:tube_coral_wall_fan").put("minecraft:brain_coral_fan", "minecraft:brain_coral_wall_fan").put("minecraft:bubble_coral_fan", "minecraft:bubble_coral_wall_fan").put("minecraft:fire_coral_fan", "minecraft:fire_coral_wall_fan").put("minecraft:horn_coral_fan", "minecraft:horn_coral_wall_fan").build();
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFix.java
index c233f609568e42e10939e3d990805a74dcf735e3..defba40c27926c5e9b9a8b6b8c55711495fcc51e 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFix.java
@@ -4,5 +4,5 @@ import com.google.common.collect.ImmutableMap;
 import java.util.Map;
 
 public class RenamedCoralFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:blue_coral", "minecraft:tube_coral_block").put("minecraft:pink_coral", "minecraft:brain_coral_block").put("minecraft:purple_coral", "minecraft:bubble_coral_block").put("minecraft:red_coral", "minecraft:fire_coral_block").put("minecraft:yellow_coral", "minecraft:horn_coral_block").put("minecraft:blue_coral_plant", "minecraft:tube_coral").put("minecraft:pink_coral_plant", "minecraft:brain_coral").put("minecraft:purple_coral_plant", "minecraft:bubble_coral").put("minecraft:red_coral_plant", "minecraft:fire_coral").put("minecraft:yellow_coral_plant", "minecraft:horn_coral").put("minecraft:blue_coral_fan", "minecraft:tube_coral_fan").put("minecraft:pink_coral_fan", "minecraft:brain_coral_fan").put("minecraft:purple_coral_fan", "minecraft:bubble_coral_fan").put("minecraft:red_coral_fan", "minecraft:fire_coral_fan").put("minecraft:yellow_coral_fan", "minecraft:horn_coral_fan").put("minecraft:blue_dead_coral", "minecraft:dead_tube_coral").put("minecraft:pink_dead_coral", "minecraft:dead_brain_coral").put("minecraft:purple_dead_coral", "minecraft:dead_bubble_coral").put("minecraft:red_dead_coral", "minecraft:dead_fire_coral").put("minecraft:yellow_dead_coral", "minecraft:dead_horn_coral").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:blue_coral", "minecraft:tube_coral_block").put("minecraft:pink_coral", "minecraft:brain_coral_block").put("minecraft:purple_coral", "minecraft:bubble_coral_block").put("minecraft:red_coral", "minecraft:fire_coral_block").put("minecraft:yellow_coral", "minecraft:horn_coral_block").put("minecraft:blue_coral_plant", "minecraft:tube_coral").put("minecraft:pink_coral_plant", "minecraft:brain_coral").put("minecraft:purple_coral_plant", "minecraft:bubble_coral").put("minecraft:red_coral_plant", "minecraft:fire_coral").put("minecraft:yellow_coral_plant", "minecraft:horn_coral").put("minecraft:blue_coral_fan", "minecraft:tube_coral_fan").put("minecraft:pink_coral_fan", "minecraft:brain_coral_fan").put("minecraft:purple_coral_fan", "minecraft:bubble_coral_fan").put("minecraft:red_coral_fan", "minecraft:fire_coral_fan").put("minecraft:yellow_coral_fan", "minecraft:horn_coral_fan").put("minecraft:blue_dead_coral", "minecraft:dead_tube_coral").put("minecraft:pink_dead_coral", "minecraft:dead_brain_coral").put("minecraft:purple_dead_coral", "minecraft:dead_bubble_coral").put("minecraft:red_dead_coral", "minecraft:dead_fire_coral").put("minecraft:yellow_dead_coral", "minecraft:dead_horn_coral").build();
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java
index 0b4e8af408be853fd481bd531464aeef99e9cc37..e900319c7cf6a00b2fad77726ba7d8e9d9b14605 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java
@@ -15,9 +15,9 @@ public class SavedDataUUIDFix extends AbstractUUIDFix {
     }
 
     protected TypeRewriteRule makeRule() {
-        return this.fixTypeEverywhereTyped("SavedDataUUIDFix", this.getInputSchema().getType(this.typeReference), (typed) -> typed.updateTyped(typed.getType().findField("data"), (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Raids", (dynamicx) -> dynamicx.createList(dynamicx.asStream().map((dynamic) -> dynamic.update("HeroesOfTheVillage", (dynamicx) -> dynamicx.createList(dynamicx.asStream().map((dynamic) -> createUUIDFromLongs(dynamic, "UUIDMost", "UUIDLeast").orElseGet(() -> {
+        return this.fixTypeEverywhereTyped("SavedDataUUIDFix", this.getInputSchema().getType(this.typeReference), (typed) -> typed.updateTyped(typed.getType().findField("data"), (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Raids", (dynamicx) -> dynamicx.createList(dynamicx.asStream().map((dynamicIn) -> dynamicIn.update("HeroesOfTheVillage", (dynamicIn2) -> dynamicIn2.createList(dynamicIn2.asStream().map((dynamicIn3) -> createUUIDFromLongs(dynamicIn3, "UUIDMost", "UUIDLeast").orElseGet(() -> {
                                         LOGGER.warn("HeroesOfTheVillage contained invalid UUIDs.");
-                                        return dynamic;
+                                        return dynamicIn3;
                                     }))))))))));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
index 38e587bf513c6f0d5ccccb2c518062ca1beb6067..b8069c15c86b2c206bce82789e519e55fca824b6 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
@@ -19,18 +19,18 @@ public abstract class SimplestEntityRenameFix extends DataFix {
     }
 
     public TypeRewriteRule makeRule() {
-        TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.ENTITY);
-        TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
         Type<Pair<String, String>> type = DSL.named(References.ENTITY_NAME.typeName(), NamespacedSchema.namespacedString());
         if (!Objects.equals(this.getOutputSchema().getType(References.ENTITY_NAME), type)) {
             throw new IllegalStateException("Entity name type is not what was expected.");
         } else {
             return TypeRewriteRule.seq(this.fixTypeEverywhere(this.name, taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> pair.mapFirst((s) -> {
                         String s2 = this.rename(s);
-                        Type<?> type = (Type)taggedChoiceType.types().get(s);
+                        Type<?> typeIn = (Type)taggedChoiceType.types().get(s);
                         Type<?> type2 = (Type)taggedChoiceType2.types().get(s2);
-                        if (!type2.equals(type, true, true)) {
-                            throw new IllegalStateException(String.format("Dynamic type check failed: %s not equal to %s", type2, type));
+                        if (!type2.equals(typeIn, true, true)) {
+                            throw new IllegalStateException(String.format("Dynamic type check failed: %s not equal to %s", type2, typeIn));
                         } else {
                             return s2;
                         }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/SpawnerDataFix.java b/src/main/java/net/minecraft/util/datafix/fixes/SpawnerDataFix.java
index aa4662d680f8b34eeb07d3482bf1b2f35462dc90..8a7fb02d27218dad6110b2e667cb3ab423f0d4fb 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/SpawnerDataFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/SpawnerDataFix.java
@@ -33,9 +33,9 @@ public class SpawnerDataFix extends DataFix {
 
     private <T> Typed<T> wrapSpawnPotentialsToWeightedEntries(Type<T> type, Typed<?> typed) {
         DynamicOps<?> dynamicOps = typed.getOps();
-        List<?> list = typed.getValue();
+        List<?> list = (List<?>) typed.getValue();
         List<?> list2 = list.stream().map((object) -> {
-            Pair<Object, Dynamic<?>> pair = object;
+            Pair<Object, Dynamic<?>> pair = (Pair<Object, Dynamic<?>>) object;
             int i = ((Number)(pair.getSecond()).get("Weight").asNumber().result().orElse(1)).intValue();
             Dynamic<?> dynamic = new Dynamic(dynamicOps);
             dynamic = dynamic.set("weight", dynamic.createInt(i));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/StatsCounterFix.java b/src/main/java/net/minecraft/util/datafix/fixes/StatsCounterFix.java
index 722ebc760c66bbb16a685ddc570f7f48f3dacaec..eadeb3095028999e42b011efce4106d98e2e95ca 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/StatsCounterFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/StatsCounterFix.java
@@ -20,13 +20,13 @@ import javax.annotation.Nullable;
 import org.apache.commons.lang3.StringUtils;
 
 public class StatsCounterFix extends DataFix {
-    private static final Set<String> SKIP = ImmutableSet.builder().add("stat.craftItem.minecraft.spawn_egg").add("stat.useItem.minecraft.spawn_egg").add("stat.breakItem.minecraft.spawn_egg").add("stat.pickup.minecraft.spawn_egg").add("stat.drop.minecraft.spawn_egg").build();
-    private static final Map<String, String> CUSTOM_MAP = ImmutableMap.builder().put("stat.leaveGame", "minecraft:leave_game").put("stat.playOneMinute", "minecraft:play_one_minute").put("stat.timeSinceDeath", "minecraft:time_since_death").put("stat.sneakTime", "minecraft:sneak_time").put("stat.walkOneCm", "minecraft:walk_one_cm").put("stat.crouchOneCm", "minecraft:crouch_one_cm").put("stat.sprintOneCm", "minecraft:sprint_one_cm").put("stat.swimOneCm", "minecraft:swim_one_cm").put("stat.fallOneCm", "minecraft:fall_one_cm").put("stat.climbOneCm", "minecraft:climb_one_cm").put("stat.flyOneCm", "minecraft:fly_one_cm").put("stat.diveOneCm", "minecraft:dive_one_cm").put("stat.minecartOneCm", "minecraft:minecart_one_cm").put("stat.boatOneCm", "minecraft:boat_one_cm").put("stat.pigOneCm", "minecraft:pig_one_cm").put("stat.horseOneCm", "minecraft:horse_one_cm").put("stat.aviateOneCm", "minecraft:aviate_one_cm").put("stat.jump", "minecraft:jump").put("stat.drop", "minecraft:drop").put("stat.damageDealt", "minecraft:damage_dealt").put("stat.damageTaken", "minecraft:damage_taken").put("stat.deaths", "minecraft:deaths").put("stat.mobKills", "minecraft:mob_kills").put("stat.animalsBred", "minecraft:animals_bred").put("stat.playerKills", "minecraft:player_kills").put("stat.fishCaught", "minecraft:fish_caught").put("stat.talkedToVillager", "minecraft:talked_to_villager").put("stat.tradedWithVillager", "minecraft:traded_with_villager").put("stat.cakeSlicesEaten", "minecraft:eat_cake_slice").put("stat.cauldronFilled", "minecraft:fill_cauldron").put("stat.cauldronUsed", "minecraft:use_cauldron").put("stat.armorCleaned", "minecraft:clean_armor").put("stat.bannerCleaned", "minecraft:clean_banner").put("stat.brewingstandInteraction", "minecraft:interact_with_brewingstand").put("stat.beaconInteraction", "minecraft:interact_with_beacon").put("stat.dropperInspected", "minecraft:inspect_dropper").put("stat.hopperInspected", "minecraft:inspect_hopper").put("stat.dispenserInspected", "minecraft:inspect_dispenser").put("stat.noteblockPlayed", "minecraft:play_noteblock").put("stat.noteblockTuned", "minecraft:tune_noteblock").put("stat.flowerPotted", "minecraft:pot_flower").put("stat.trappedChestTriggered", "minecraft:trigger_trapped_chest").put("stat.enderchestOpened", "minecraft:open_enderchest").put("stat.itemEnchanted", "minecraft:enchant_item").put("stat.recordPlayed", "minecraft:play_record").put("stat.furnaceInteraction", "minecraft:interact_with_furnace").put("stat.craftingTableInteraction", "minecraft:interact_with_crafting_table").put("stat.chestOpened", "minecraft:open_chest").put("stat.sleepInBed", "minecraft:sleep_in_bed").put("stat.shulkerBoxOpened", "minecraft:open_shulker_box").build();
+    private static final Set<String> SKIP = ImmutableSet.<String>builder().add("stat.craftItem.minecraft.spawn_egg").add("stat.useItem.minecraft.spawn_egg").add("stat.breakItem.minecraft.spawn_egg").add("stat.pickup.minecraft.spawn_egg").add("stat.drop.minecraft.spawn_egg").build();
+    private static final Map<String, String> CUSTOM_MAP = ImmutableMap.<String, String>builder().put("stat.leaveGame", "minecraft:leave_game").put("stat.playOneMinute", "minecraft:play_one_minute").put("stat.timeSinceDeath", "minecraft:time_since_death").put("stat.sneakTime", "minecraft:sneak_time").put("stat.walkOneCm", "minecraft:walk_one_cm").put("stat.crouchOneCm", "minecraft:crouch_one_cm").put("stat.sprintOneCm", "minecraft:sprint_one_cm").put("stat.swimOneCm", "minecraft:swim_one_cm").put("stat.fallOneCm", "minecraft:fall_one_cm").put("stat.climbOneCm", "minecraft:climb_one_cm").put("stat.flyOneCm", "minecraft:fly_one_cm").put("stat.diveOneCm", "minecraft:dive_one_cm").put("stat.minecartOneCm", "minecraft:minecart_one_cm").put("stat.boatOneCm", "minecraft:boat_one_cm").put("stat.pigOneCm", "minecraft:pig_one_cm").put("stat.horseOneCm", "minecraft:horse_one_cm").put("stat.aviateOneCm", "minecraft:aviate_one_cm").put("stat.jump", "minecraft:jump").put("stat.drop", "minecraft:drop").put("stat.damageDealt", "minecraft:damage_dealt").put("stat.damageTaken", "minecraft:damage_taken").put("stat.deaths", "minecraft:deaths").put("stat.mobKills", "minecraft:mob_kills").put("stat.animalsBred", "minecraft:animals_bred").put("stat.playerKills", "minecraft:player_kills").put("stat.fishCaught", "minecraft:fish_caught").put("stat.talkedToVillager", "minecraft:talked_to_villager").put("stat.tradedWithVillager", "minecraft:traded_with_villager").put("stat.cakeSlicesEaten", "minecraft:eat_cake_slice").put("stat.cauldronFilled", "minecraft:fill_cauldron").put("stat.cauldronUsed", "minecraft:use_cauldron").put("stat.armorCleaned", "minecraft:clean_armor").put("stat.bannerCleaned", "minecraft:clean_banner").put("stat.brewingstandInteraction", "minecraft:interact_with_brewingstand").put("stat.beaconInteraction", "minecraft:interact_with_beacon").put("stat.dropperInspected", "minecraft:inspect_dropper").put("stat.hopperInspected", "minecraft:inspect_hopper").put("stat.dispenserInspected", "minecraft:inspect_dispenser").put("stat.noteblockPlayed", "minecraft:play_noteblock").put("stat.noteblockTuned", "minecraft:tune_noteblock").put("stat.flowerPotted", "minecraft:pot_flower").put("stat.trappedChestTriggered", "minecraft:trigger_trapped_chest").put("stat.enderchestOpened", "minecraft:open_enderchest").put("stat.itemEnchanted", "minecraft:enchant_item").put("stat.recordPlayed", "minecraft:play_record").put("stat.furnaceInteraction", "minecraft:interact_with_furnace").put("stat.craftingTableInteraction", "minecraft:interact_with_crafting_table").put("stat.chestOpened", "minecraft:open_chest").put("stat.sleepInBed", "minecraft:sleep_in_bed").put("stat.shulkerBoxOpened", "minecraft:open_shulker_box").build();
     private static final String BLOCK_KEY = "stat.mineBlock";
     private static final String NEW_BLOCK_KEY = "minecraft:mined";
-    private static final Map<String, String> ITEM_KEYS = ImmutableMap.builder().put("stat.craftItem", "minecraft:crafted").put("stat.useItem", "minecraft:used").put("stat.breakItem", "minecraft:broken").put("stat.pickup", "minecraft:picked_up").put("stat.drop", "minecraft:dropped").build();
-    private static final Map<String, String> ENTITY_KEYS = ImmutableMap.builder().put("stat.entityKilledBy", "minecraft:killed_by").put("stat.killEntity", "minecraft:killed").build();
-    private static final Map<String, String> ENTITIES = ImmutableMap.builder().put("Bat", "minecraft:bat").put("Blaze", "minecraft:blaze").put("CaveSpider", "minecraft:cave_spider").put("Chicken", "minecraft:chicken").put("Cow", "minecraft:cow").put("Creeper", "minecraft:creeper").put("Donkey", "minecraft:donkey").put("ElderGuardian", "minecraft:elder_guardian").put("Enderman", "minecraft:enderman").put("Endermite", "minecraft:endermite").put("EvocationIllager", "minecraft:evocation_illager").put("Ghast", "minecraft:ghast").put("Guardian", "minecraft:guardian").put("Horse", "minecraft:horse").put("Husk", "minecraft:husk").put("Llama", "minecraft:llama").put("LavaSlime", "minecraft:magma_cube").put("MushroomCow", "minecraft:mooshroom").put("Mule", "minecraft:mule").put("Ozelot", "minecraft:ocelot").put("Parrot", "minecraft:parrot").put("Pig", "minecraft:pig").put("PolarBear", "minecraft:polar_bear").put("Rabbit", "minecraft:rabbit").put("Sheep", "minecraft:sheep").put("Shulker", "minecraft:shulker").put("Silverfish", "minecraft:silverfish").put("SkeletonHorse", "minecraft:skeleton_horse").put("Skeleton", "minecraft:skeleton").put("Slime", "minecraft:slime").put("Spider", "minecraft:spider").put("Squid", "minecraft:squid").put("Stray", "minecraft:stray").put("Vex", "minecraft:vex").put("Villager", "minecraft:villager").put("VindicationIllager", "minecraft:vindication_illager").put("Witch", "minecraft:witch").put("WitherSkeleton", "minecraft:wither_skeleton").put("Wolf", "minecraft:wolf").put("ZombieHorse", "minecraft:zombie_horse").put("PigZombie", "minecraft:zombie_pigman").put("ZombieVillager", "minecraft:zombie_villager").put("Zombie", "minecraft:zombie").build();
+    private static final Map<String, String> ITEM_KEYS = ImmutableMap.<String, String>builder().put("stat.craftItem", "minecraft:crafted").put("stat.useItem", "minecraft:used").put("stat.breakItem", "minecraft:broken").put("stat.pickup", "minecraft:picked_up").put("stat.drop", "minecraft:dropped").build();
+    private static final Map<String, String> ENTITY_KEYS = ImmutableMap.<String, String>builder().put("stat.entityKilledBy", "minecraft:killed_by").put("stat.killEntity", "minecraft:killed").build();
+    private static final Map<String, String> ENTITIES = ImmutableMap.<String, String>builder().put("Bat", "minecraft:bat").put("Blaze", "minecraft:blaze").put("CaveSpider", "minecraft:cave_spider").put("Chicken", "minecraft:chicken").put("Cow", "minecraft:cow").put("Creeper", "minecraft:creeper").put("Donkey", "minecraft:donkey").put("ElderGuardian", "minecraft:elder_guardian").put("Enderman", "minecraft:enderman").put("Endermite", "minecraft:endermite").put("EvocationIllager", "minecraft:evocation_illager").put("Ghast", "minecraft:ghast").put("Guardian", "minecraft:guardian").put("Horse", "minecraft:horse").put("Husk", "minecraft:husk").put("Llama", "minecraft:llama").put("LavaSlime", "minecraft:magma_cube").put("MushroomCow", "minecraft:mooshroom").put("Mule", "minecraft:mule").put("Ozelot", "minecraft:ocelot").put("Parrot", "minecraft:parrot").put("Pig", "minecraft:pig").put("PolarBear", "minecraft:polar_bear").put("Rabbit", "minecraft:rabbit").put("Sheep", "minecraft:sheep").put("Shulker", "minecraft:shulker").put("Silverfish", "minecraft:silverfish").put("SkeletonHorse", "minecraft:skeleton_horse").put("Skeleton", "minecraft:skeleton").put("Slime", "minecraft:slime").put("Spider", "minecraft:spider").put("Squid", "minecraft:squid").put("Stray", "minecraft:stray").put("Vex", "minecraft:vex").put("Villager", "minecraft:villager").put("VindicationIllager", "minecraft:vindication_illager").put("Witch", "minecraft:witch").put("WitherSkeleton", "minecraft:wither_skeleton").put("Wolf", "minecraft:wolf").put("ZombieHorse", "minecraft:zombie_horse").put("PigZombie", "minecraft:zombie_pigman").put("ZombieVillager", "minecraft:zombie_villager").put("Zombie", "minecraft:zombie").build();
     private static final String NEW_CUSTOM_KEY = "minecraft:custom";
 
     public StatsCounterFix(Schema schema, boolean flag) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/StatsRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/StatsRenameFix.java
index 8237b1eac30fc214bbbe7951286360d86b2a931c..157e31cc84e3aba07fd2a7fc0f42064a71e0c0da 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/StatsRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/StatsRenameFix.java
@@ -35,7 +35,7 @@ public class StatsRenameFix extends DataFix {
         } else {
             OpticFinder<?> opticFinder2 = DSL.namedChoice("minecraft:custom", type3);
             OpticFinder<String> opticFinder3 = DSL.fieldFinder("id", NamespacedSchema.namespacedString());
-            return this.fixTypeEverywhereTyped(this.name, type2, type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> typed.update(opticFinder3, (s) -> (String)this.renames.getOrDefault(s, s)))));
+            return this.fixTypeEverywhereTyped(this.name, type2, type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedIn) -> typedIn.update(opticFinder3, (s) -> (String)this.renames.getOrDefault(s, s)))));
         }
     }
 
@@ -45,6 +45,6 @@ public class StatsRenameFix extends DataFix {
         OpticFinder<?> opticFinder = type2.findField("stats");
         OpticFinder<?> opticFinder2 = opticFinder.type().findField("minecraft:custom");
         OpticFinder<String> opticFinder3 = NamespacedSchema.namespacedString().finder();
-        return this.fixTypeEverywhereTyped(this.name, type2, type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> typed.update(opticFinder3, (s) -> (String)this.renames.getOrDefault(s, s)))));
+        return this.fixTypeEverywhereTyped(this.name, type2, type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedIn) -> typedIn.update(opticFinder3, (s) -> (String)this.renames.getOrDefault(s, s)))));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/StructureSettingsFlattenFix.java b/src/main/java/net/minecraft/util/datafix/fixes/StructureSettingsFlattenFix.java
index c96be79bef782b3931d786e1bab196eba5e013e9..4506362a583e7af1f00dfa87aa6cf461ef52d57b 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/StructureSettingsFlattenFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/StructureSettingsFlattenFix.java
@@ -27,11 +27,11 @@ public class StructureSettingsFlattenFix extends DataFix {
 
     private static Pair<Dynamic<?>, Dynamic<?>> fixDimension(Pair<Dynamic<?>, Dynamic<?>> pair) {
         Dynamic<?> dynamic = pair.getSecond();
-        return Pair.of(pair.getFirst(), dynamic.update("generator", (dynamicx) -> dynamicx.update("settings", (dynamic) -> dynamic.update("structures", StructureSettingsFlattenFix::fixStructures))));
+        return Pair.of(pair.getFirst(), dynamic.update("generator", (dynamicx) -> dynamicx.update("settings", (dynamicIn) -> dynamicIn.update("structures", StructureSettingsFlattenFix::fixStructures))));
     }
 
     private static Dynamic<?> fixStructures(Dynamic<?> dynamic) {
-        Dynamic<?> dynamic2 = dynamic.get("structures").orElseEmptyMap().updateMapValues((pair) -> pair.mapSecond((dynamic2) -> dynamic2.set("type", dynamic.createString("minecraft:random_spread"))));
+        Dynamic<?> dynamic2 = dynamic.get("structures").orElseEmptyMap().updateMapValues((pair) -> pair.mapSecond((dynamic2In) -> dynamic2In.set("type", dynamic.createString("minecraft:random_spread"))));
         return DataFixUtils.orElse(dynamic.get("stronghold").result().map((dynamic3) -> dynamic2.set("minecraft:stronghold", dynamic3.set("type", dynamic.createString("minecraft:concentric_rings")))), dynamic2);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/StructuresBecomeConfiguredFix.java b/src/main/java/net/minecraft/util/datafix/fixes/StructuresBecomeConfiguredFix.java
index 40d1ac05720139d597ac99047bd6948b1272ee77..f6224e1fbfa69aac3be593e41794d05508a33533 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/StructuresBecomeConfiguredFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/StructuresBecomeConfiguredFix.java
@@ -19,7 +19,7 @@ import java.util.Map.Entry;
 import java.util.function.Function;
 
 public class StructuresBecomeConfiguredFix extends DataFix {
-    private static final Map<String, StructuresBecomeConfiguredFix.Conversion> CONVERSION_MAP = ImmutableMap.builder().put("mineshaft", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:badlands", "minecraft:eroded_badlands", "minecraft:wooded_badlands"), "minecraft:mineshaft_mesa"), "minecraft:mineshaft")).put("shipwreck", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:beach", "minecraft:snowy_beach"), "minecraft:shipwreck_beached"), "minecraft:shipwreck")).put("ocean_ruin", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:warm_ocean", "minecraft:lukewarm_ocean", "minecraft:deep_lukewarm_ocean"), "minecraft:ocean_ruin_warm"), "minecraft:ocean_ruin_cold")).put("village", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:desert"), "minecraft:village_desert", List.of("minecraft:savanna"), "minecraft:village_savanna", List.of("minecraft:snowy_plains"), "minecraft:village_snowy", List.of("minecraft:taiga"), "minecraft:village_taiga"), "minecraft:village_plains")).put("ruined_portal", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:desert"), "minecraft:ruined_portal_desert", List.of("minecraft:badlands", "minecraft:eroded_badlands", "minecraft:wooded_badlands", "minecraft:windswept_hills", "minecraft:windswept_forest", "minecraft:windswept_gravelly_hills", "minecraft:savanna_plateau", "minecraft:windswept_savanna", "minecraft:stony_shore", "minecraft:meadow", "minecraft:frozen_peaks", "minecraft:jagged_peaks", "minecraft:stony_peaks", "minecraft:snowy_slopes"), "minecraft:ruined_portal_mountain", List.of("minecraft:bamboo_jungle", "minecraft:jungle", "minecraft:sparse_jungle"), "minecraft:ruined_portal_jungle", List.of("minecraft:deep_frozen_ocean", "minecraft:deep_cold_ocean", "minecraft:deep_ocean", "minecraft:deep_lukewarm_ocean", "minecraft:frozen_ocean", "minecraft:ocean", "minecraft:cold_ocean", "minecraft:lukewarm_ocean", "minecraft:warm_ocean"), "minecraft:ruined_portal_ocean"), "minecraft:ruined_portal")).put("pillager_outpost", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:pillager_outpost")).put("mansion", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:mansion")).put("jungle_pyramid", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:jungle_pyramid")).put("desert_pyramid", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:desert_pyramid")).put("igloo", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:igloo")).put("swamp_hut", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:swamp_hut")).put("stronghold", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:stronghold")).put("monument", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:monument")).put("fortress", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:fortress")).put("endcity", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:end_city")).put("buried_treasure", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:buried_treasure")).put("nether_fossil", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:nether_fossil")).put("bastion_remnant", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:bastion_remnant")).build();
+    private static final Map<String, StructuresBecomeConfiguredFix.Conversion> CONVERSION_MAP = ImmutableMap.<String, Conversion>builder().put("mineshaft", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:badlands", "minecraft:eroded_badlands", "minecraft:wooded_badlands"), "minecraft:mineshaft_mesa"), "minecraft:mineshaft")).put("shipwreck", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:beach", "minecraft:snowy_beach"), "minecraft:shipwreck_beached"), "minecraft:shipwreck")).put("ocean_ruin", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:warm_ocean", "minecraft:lukewarm_ocean", "minecraft:deep_lukewarm_ocean"), "minecraft:ocean_ruin_warm"), "minecraft:ocean_ruin_cold")).put("village", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:desert"), "minecraft:village_desert", List.of("minecraft:savanna"), "minecraft:village_savanna", List.of("minecraft:snowy_plains"), "minecraft:village_snowy", List.of("minecraft:taiga"), "minecraft:village_taiga"), "minecraft:village_plains")).put("ruined_portal", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:desert"), "minecraft:ruined_portal_desert", List.of("minecraft:badlands", "minecraft:eroded_badlands", "minecraft:wooded_badlands", "minecraft:windswept_hills", "minecraft:windswept_forest", "minecraft:windswept_gravelly_hills", "minecraft:savanna_plateau", "minecraft:windswept_savanna", "minecraft:stony_shore", "minecraft:meadow", "minecraft:frozen_peaks", "minecraft:jagged_peaks", "minecraft:stony_peaks", "minecraft:snowy_slopes"), "minecraft:ruined_portal_mountain", List.of("minecraft:bamboo_jungle", "minecraft:jungle", "minecraft:sparse_jungle"), "minecraft:ruined_portal_jungle", List.of("minecraft:deep_frozen_ocean", "minecraft:deep_cold_ocean", "minecraft:deep_ocean", "minecraft:deep_lukewarm_ocean", "minecraft:frozen_ocean", "minecraft:ocean", "minecraft:cold_ocean", "minecraft:lukewarm_ocean", "minecraft:warm_ocean"), "minecraft:ruined_portal_ocean"), "minecraft:ruined_portal")).put("pillager_outpost", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:pillager_outpost")).put("mansion", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:mansion")).put("jungle_pyramid", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:jungle_pyramid")).put("desert_pyramid", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:desert_pyramid")).put("igloo", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:igloo")).put("swamp_hut", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:swamp_hut")).put("stronghold", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:stronghold")).put("monument", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:monument")).put("fortress", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:fortress")).put("endcity", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:end_city")).put("buried_treasure", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:buried_treasure")).put("nether_fossil", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:nether_fossil")).put("bastion_remnant", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:bastion_remnant")).build();
 
     public StructuresBecomeConfiguredFix(Schema schema) {
         super(schema, false);
@@ -100,8 +100,8 @@ public class StructuresBecomeConfiguredFix extends DataFix {
 
     private Optional<String> guessConfiguration(Dynamic<?> dynamic, StructuresBecomeConfiguredFix.Conversion conversion) {
         Object2IntArrayMap<String> object2IntArrayMap = new Object2IntArrayMap();
-        dynamic.get("sections").asList(Function.identity()).forEach((dynamicx) -> dynamicx.get("biomes").get("palette").asList(Function.identity()).forEach((dynamic) -> {
-                String s = (String)conversion.biomeMapping().get(dynamic.asString(""));
+        dynamic.get("sections").asList(Function.identity()).forEach((dynamicx) -> dynamicx.get("biomes").get("palette").asList(Function.identity()).forEach((dynamicIn) -> {
+                String s = (String)conversion.biomeMapping().get(dynamicIn.asString(""));
                 if (s != null) {
                     object2IntArrayMap.mergeInt(s, 1, Integer::sum);
                 }
@@ -110,10 +110,7 @@ public class StructuresBecomeConfiguredFix extends DataFix {
         return object2IntArrayMap.object2IntEntrySet().stream().max(Comparator.comparingInt(it.unimi.dsi.fastutil.objects.Object2IntMap.Entry::getIntValue)).map(Entry::getKey);
     }
 
-    static record Conversion(Map<String, String> a, String b) {
-        private final Map<String, String> biomeMapping;
-        final String fallback;
-
+    static record Conversion(Map<String, String> biomeMapping, String fallback) {
         public static StructuresBecomeConfiguredFix.Conversion trivial(String s) {
             return new StructuresBecomeConfiguredFix.Conversion(Map.of(), s);
         }
@@ -131,13 +128,5 @@ public class StructuresBecomeConfiguredFix extends DataFix {
 
             return builder.build();
         }
-
-        public Map<String, String> biomeMapping() {
-            return this.biomeMapping;
-        }
-
-        public String fallback() {
-            return this.fallback;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/TrappedChestBlockEntityFix.java b/src/main/java/net/minecraft/util/datafix/fixes/TrappedChestBlockEntityFix.java
index 12addbbbcd00cca0462169afc14248eb1f7d98e2..bb463457dfc98fdc5a0766c25acb780fcbc4bc0c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/TrappedChestBlockEntityFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/TrappedChestBlockEntityFix.java
@@ -69,19 +69,19 @@ public class TrappedChestBlockEntityFix extends DataFix {
                             Dynamic<?> dynamic = typedx.get(DSL.remainderFinder());
                             int i3 = dynamic.get("xPos").asInt(0);
                             int i4 = dynamic.get("zPos").asInt(0);
-                            TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
-                            return typedx.updateTyped(opticFinder, (typed) -> typed.updateTyped(taggedChoiceType.finder(), (typedx) -> {
-                                    Dynamic<?> dynamic = typedx.getOrCreate(DSL.remainderFinder());
-                                    int i3 = dynamic.get("x").asInt(0) - (i3 << 4);
-                                    int i4 = dynamic.get("y").asInt(0);
-                                    int i5 = dynamic.get("z").asInt(0) - (i4 << 4);
-                                    return intSet.contains(LeavesFix.getIndex(i3, i4, i5)) ? typedx.update(taggedChoiceType.finder(), (pair) -> pair.mapFirst((s) -> {
+                            TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
+                            return typedx.updateTyped(opticFinder, (typedIn) -> typedIn.updateTyped(taggedChoiceType.finder(), (typedIn2) -> {
+                                    Dynamic<?> dynamicIn = typedIn2.getOrCreate(DSL.remainderFinder());
+                                    int x = dynamicIn.get("x").asInt(0) - (i3 << 4);
+                                    int y = dynamicIn.get("y").asInt(0);
+                                    int z = dynamicIn.get("z").asInt(0) - (i4 << 4);
+                                    return intSet.contains(LeavesFix.getIndex(x, y, z)) ? typedIn2.update(taggedChoiceType.finder(), (pair) -> pair.mapFirst((s) -> {
                                             if (!Objects.equals(s, "minecraft:chest")) {
                                                 LOGGER.warn("Block Entity was expected to be a chest");
                                             }
 
                                             return "minecraft:trapped_chest";
-                                        })) : typedx;
+                                        })) : typedIn2;
                                 }));
                         }
                     })));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java b/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java
index 020f2b6dae6e255960c4743060793a54c66eab5e..938b5e6cfdc7019e3099f3834f7136f720e81682 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java
@@ -37,7 +37,7 @@ public class VillagerRebuildLevelAndXpFix extends DataFix {
                 int i = dynamic.get("VillagerData").get("level").asInt(0);
                 Typed<?> typed2 = typedx;
                 if (i == 0 || i == 1) {
-                    int i2 = typedx.getOptionalTyped(opticFinder2).flatMap((typed) -> typed.getOptionalTyped(opticFinder3)).map((typed) -> typed.getAllTyped(opticFinder4).size()).orElse(0);
+                    int i2 = typedx.getOptionalTyped(opticFinder2).flatMap((typedIn) -> typedIn.getOptionalTyped(opticFinder3)).map((typedIn) -> typedIn.getAllTyped(opticFinder4).size()).orElse(0);
                     i = Mth.clamp(i2 / 2, 1, 5);
                     if (i > 1) {
                         typed2 = addLevel(typedx, i);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/VillagerTradeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/VillagerTradeFix.java
index 815ea87dd01a4ff81becf0803303d6b723fffc1e..c6ef560b029993b909e47fb537452f39b126f3b1 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/VillagerTradeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/VillagerTradeFix.java
@@ -31,7 +31,7 @@ public class VillagerTradeFix extends NamedEntityFix {
             OpticFinder<?> opticFinder6 = type2.findField("sell");
             OpticFinder<Pair<String, String>> opticFinder7 = DSL.fieldFinder("id", DSL.named(References.ITEM_NAME.typeName(), NamespacedSchema.namespacedString()));
             Function<Typed<?>, Typed<?>> function = (typedx) -> this.updateItemStack(opticFinder7, typedx);
-            return typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> typed.updateTyped(opticFinder3, (typedx) -> typedx.updateTyped(opticFinder4, function).updateTyped(opticFinder5, function).updateTyped(opticFinder6, function))));
+            return typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedIn) -> typedIn.updateTyped(opticFinder3, (typedIn2) -> typedIn2.updateTyped(opticFinder4, function).updateTyped(opticFinder5, function).updateTyped(opticFinder6, function))));
         }
     }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsDisallowOldCustomWorldsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsDisallowOldCustomWorldsFix.java
index e8d7b316cd509643bcaf0df3e65b3a4b91d5954e..fb7ca1955342154648f3989d67a7772eb9915dd3 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsDisallowOldCustomWorldsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsDisallowOldCustomWorldsFix.java
@@ -16,7 +16,7 @@ public class WorldGenSettingsDisallowOldCustomWorldsFix extends DataFix {
         OpticFinder<?> opticFinder = type.findField("dimensions");
         return this.fixTypeEverywhereTyped("WorldGenSettingsDisallowOldCustomWorldsFix_" + this.getOutputSchema().getVersionKey(), type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> {
                 typedx.write().map((dynamic) -> dynamic.getMapValues().map((map) -> {
-                        map.forEach((dynamic, dynamic2) -> {
+                        map.forEach((dynamicIn, dynamic2) -> {
                             if (dynamic2.get("type").asString().result().isEmpty()) {
                                 throw new IllegalStateException("Unable load old custom worlds.");
                             }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java
index bd6d5f28c53e57b7f9448622d3e74565b33aa311..4cfd68e37af0e7d3ed16feb9ca083671da550cf8 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java
@@ -33,7 +33,7 @@ public class WorldGenSettingsFix extends DataFix {
     private static final String END_CITY = "minecraft:endcity";
     private static final String WOODLAND_MANSION = "minecraft:mansion";
     private static final String OCEAN_MONUMENT = "minecraft:monument";
-    private static final ImmutableMap<String, WorldGenSettingsFix.StructureFeatureConfiguration> DEFAULTS = ImmutableMap.builder().put("minecraft:village", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 10387312)).put("minecraft:desert_pyramid", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357617)).put("minecraft:igloo", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357618)).put("minecraft:jungle_pyramid", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357619)).put("minecraft:swamp_hut", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357620)).put("minecraft:pillager_outpost", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 165745296)).put("minecraft:monument", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 5, 10387313)).put("minecraft:endcity", new WorldGenSettingsFix.StructureFeatureConfiguration(20, 11, 10387313)).put("minecraft:mansion", new WorldGenSettingsFix.StructureFeatureConfiguration(80, 20, 10387319)).build();
+    private static final ImmutableMap<String, WorldGenSettingsFix.StructureFeatureConfiguration> DEFAULTS = ImmutableMap.<String, WorldGenSettingsFix.StructureFeatureConfiguration>builder().put("minecraft:village", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 10387312)).put("minecraft:desert_pyramid", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357617)).put("minecraft:igloo", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357618)).put("minecraft:jungle_pyramid", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357619)).put("minecraft:swamp_hut", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357620)).put("minecraft:pillager_outpost", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 165745296)).put("minecraft:monument", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 5, 10387313)).put("minecraft:endcity", new WorldGenSettingsFix.StructureFeatureConfiguration(20, 11, 10387313)).put("minecraft:mansion", new WorldGenSettingsFix.StructureFeatureConfiguration(80, 20, 10387319)).build();
 
     public WorldGenSettingsFix(Schema schema) {
         super(schema, true);
@@ -48,7 +48,7 @@ public class WorldGenSettingsFix extends DataFix {
     }
 
     private static <T> Dynamic<T> vanillaBiomeSource(Dynamic<T> dynamic, long l, boolean flag, boolean flag2) {
-        Builder<Dynamic<T>, Dynamic<T>> builder = ImmutableMap.builder().put(dynamic.createString("type"), dynamic.createString("minecraft:vanilla_layered")).put(dynamic.createString("seed"), dynamic.createLong(l)).put(dynamic.createString("large_biomes"), dynamic.createBoolean(flag2));
+        Builder<Dynamic<T>, Dynamic<T>> builder = ImmutableMap.<Dynamic<T>, Dynamic<T>>builder().put(dynamic.createString("type"), dynamic.createString("minecraft:vanilla_layered")).put(dynamic.createString("seed"), dynamic.createLong(l)).put(dynamic.createString("large_biomes"), dynamic.createBoolean(flag2));
         if (flag) {
             builder.put(dynamic.createString("legacy_biome_init_layer"), dynamic.createBoolean(flag));
         }
@@ -143,9 +143,9 @@ public class WorldGenSettingsFix extends DataFix {
             map.put("minecraft:village", (WorldGenSettingsFix.StructureFeatureConfiguration)DEFAULTS.get("minecraft:village"));
         }
 
-        optionalDynamic.get("structures").flatMap(Dynamic::getMapValues).result().ifPresent((map2) -> map2.forEach((dynamic, dynamic2) -> dynamic2.getMapValues().result().ifPresent((map2) -> map2.forEach((dynamic2, dynamic3) -> {
+        optionalDynamic.get("structures").flatMap(Dynamic::getMapValues).result().ifPresent((map2) -> map2.forEach((dynamic, dynamic2) -> dynamic2.getMapValues().result().ifPresent((map2In) -> map2In.forEach((dynamic2In, dynamic3) -> {
                         String s = dynamic.asString("");
-                        String s2 = dynamic2.asString("");
+                        String s2 = dynamic2In.asString("");
                         String s3 = dynamic3.asString("");
                         if ("stronghold".equals(s)) {
                             mutableBoolean.setTrue();
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsHeightAndBiomeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsHeightAndBiomeFix.java
index f3e0ff57a11be7b0d2976db3428b365256e3e8bc..30dddc944504e53261ac9bd930c03a08059f09f8 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsHeightAndBiomeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsHeightAndBiomeFix.java
@@ -33,27 +33,27 @@ public class WorldGenSettingsHeightAndBiomeFix extends DataFix {
             boolean flag2 = optionalDynamic.asBoolean(true);
             return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.remove("has_increased_height_already")).updateTyped(opticFinder, type3, (typedx) -> {
                 Dynamic<?> dynamic = typedx.write().result().orElseThrow(() -> new IllegalStateException("Malformed WorldGenSettings.dimensions"));
-                dynamic = dynamic.update("minecraft:overworld", (dynamicx) -> dynamicx.update("generator", (dynamic) -> {
-                        String s = dynamic.get("type").asString("");
+                dynamic = dynamic.update("minecraft:overworld", (dynamicx) -> dynamicx.update("generator", (dynamicIn) -> {
+                        String s = dynamicIn.get("type").asString("");
                         if ("minecraft:noise".equals(s)) {
                             MutableBoolean mutableBoolean = new MutableBoolean();
-                            dynamic = dynamic.update("biome_source", (dynamicx) -> {
-                                String s = dynamicx.get("type").asString("");
-                                if ("minecraft:vanilla_layered".equals(s) || flag && "minecraft:multi_noise".equals(s)) {
-                                    if (dynamicx.get("large_biomes").asBoolean(false)) {
+                            dynamicIn = dynamicIn.update("biome_source", (dynamicxIn2) -> {
+                                String typeIn = dynamicxIn2.get("type").asString("");
+                                if ("minecraft:vanilla_layered".equals(typeIn) || flag && "minecraft:multi_noise".equals(typeIn)) {
+                                    if (dynamicxIn2.get("large_biomes").asBoolean(false)) {
                                         mutableBoolean.setTrue();
                                     }
 
-                                    return dynamicx.createMap(ImmutableMap.of(dynamicx.createString("preset"), dynamicx.createString("minecraft:overworld"), dynamicx.createString("type"), dynamicx.createString("minecraft:multi_noise")));
+                                    return dynamicxIn2.createMap(ImmutableMap.of(dynamicxIn2.createString("preset"), dynamicxIn2.createString("minecraft:overworld"), dynamicxIn2.createString("type"), dynamicxIn2.createString("minecraft:multi_noise")));
                                 } else {
-                                    return dynamicx;
+                                    return dynamicxIn2;
                                 }
                             });
-                            return mutableBoolean.booleanValue() ? dynamic.update("settings", (dynamicx) -> "minecraft:overworld".equals(dynamicx.asString("")) ? dynamicx.createString("minecraft:large_biomes") : dynamicx) : dynamic;
+                            return mutableBoolean.booleanValue() ? dynamicIn.update("settings", (dynamicxIn3) -> "minecraft:overworld".equals(dynamicxIn3.asString("")) ? dynamicxIn3.createString("minecraft:large_biomes") : dynamicxIn3) : dynamicIn;
                         } else if ("minecraft:flat".equals(s)) {
-                            return flag2 ? dynamic : dynamic.update("settings", (dynamicx) -> dynamicx.update("layers", WorldGenSettingsHeightAndBiomeFix::updateLayers));
+                            return flag2 ? dynamicIn : dynamicIn.update("settings", (dynamicxIn4) -> dynamicxIn4.update("layers", WorldGenSettingsHeightAndBiomeFix::updateLayers));
                         } else {
-                            return dynamic;
+                            return dynamicIn;
                         }
                     }));
                 return (type3.readTyped(dynamic).result().orElseThrow(() -> new IllegalStateException("WorldGenSettingsHeightAndBiomeFix failed."))).getFirst();
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V1451_6.java b/src/main/java/net/minecraft/util/datafix/schemas/V1451_6.java
index 0d2da421f69fb3253a097761e990034616eab28b..0956a7e5fa04296758ed52fb357ceec7db9cb54d 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V1451_6.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V1451_6.java
@@ -46,11 +46,11 @@ public class V1451_6 extends NamespacedSchema {
         public <T> T apply(DynamicOps<T> dynamicOps, T object) {
             Dynamic<T> dynamic = new Dynamic(dynamicOps, object);
             Optional<Dynamic<T>> optional = dynamic.get("CriteriaType").get().get().left().flatMap((dynamic2) -> {
-                Optional<String> optional = dynamic2.get("type").asString().get().left();
-                Optional<String> optional2 = dynamic2.get("id").asString().get().left();
-                if (optional.isPresent() && optional2.isPresent()) {
-                    String s = (String)optional.get();
-                    return s.equals("_special") ? Optional.of(dynamic.createString((String)optional2.get())) : Optional.of(dynamic2.createString(this.packWithDot(s) + ":" + this.packWithDot((String)optional2.get())));
+                Optional<String> typeOptional = dynamic2.get("type").asString().get().left();
+                Optional<String> idOptional = dynamic2.get("id").asString().get().left();
+                if (typeOptional.isPresent() && idOptional.isPresent()) {
+                    String s = (String)typeOptional.get();
+                    return s.equals("_special") ? Optional.of(dynamic.createString((String)idOptional.get())) : Optional.of(dynamic2.createString(this.packWithDot(s) + ":" + this.packWithDot((String)idOptional.get())));
                 } else {
                     return Optional.empty();
                 }
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V704.java b/src/main/java/net/minecraft/util/datafix/schemas/V704.java
index 9cfda62a5341f052d46b97f32927c3c5f1921189..00ba7dd4d61b91cba0866e69d2d016fff678c342 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V704.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V704.java
@@ -138,7 +138,7 @@ public class V704 extends Schema {
     });
     protected static final HookFunction ADD_NAMES = new HookFunction() {
         public <T> T apply(DynamicOps<T> dynamicOps, T object) {
-            return V99.addNames(new Dynamic(dynamicOps, object), V704.ITEM_TO_BLOCKENTITY, "ArmorStand");
+            return V99.addNames(new Dynamic<>(dynamicOps, object), V704.ITEM_TO_BLOCKENTITY, "ArmorStand");
         }
     };
 
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V705.java b/src/main/java/net/minecraft/util/datafix/schemas/V705.java
index 4c5f62c5b60826da77f9e71170d83bd1174c8831..d112911d628e7abffec2805dec315764f27ccc11 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V705.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V705.java
@@ -14,7 +14,7 @@ import net.minecraft.util.datafix.fixes.References;
 public class V705 extends NamespacedSchema {
     protected static final HookFunction ADD_NAMES = new HookFunction() {
         public <T> T apply(DynamicOps<T> dynamicOps, T object) {
-            return V99.addNames(new Dynamic(dynamicOps, object), V704.ITEM_TO_BLOCKENTITY, "minecraft:armor_stand");
+            return V99.addNames(new Dynamic<>(dynamicOps, object), V704.ITEM_TO_BLOCKENTITY, "minecraft:armor_stand");
         }
     };
 
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V99.java b/src/main/java/net/minecraft/util/datafix/schemas/V99.java
index 6bcc80f11b61372632ebd4462e715177bedda178..2d56b6442aa83d9594cc30fc08d2ae9703c417a2 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V99.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V99.java
@@ -54,7 +54,7 @@ public class V99 extends Schema {
     });
     protected static final HookFunction ADD_NAMES = new HookFunction() {
         public <T> T apply(DynamicOps<T> dynamicOps, T object) {
-            return V99.addNames(new Dynamic(dynamicOps, object), V99.ITEM_TO_BLOCKENTITY, "ArmorStand");
+            return V99.addNames(new Dynamic<>(dynamicOps, object), V99.ITEM_TO_BLOCKENTITY, "ArmorStand");
         }
     };
 
@@ -206,14 +206,14 @@ public class V99 extends Schema {
 
     protected static <T> T addNames(Dynamic<T> dynamic, Map<String, String> map, String s) {
         return (T)dynamic.update("tag", (dynamic2) -> dynamic2.update("BlockEntityTag", (dynamic2x) -> {
-                String s = (String)dynamic.get("id").asString().result().map(NamespacedSchema::ensureNamespaced).orElse("minecraft:air");
-                if (!"minecraft:air".equals(s)) {
-                    String s2 = (String)map.get(s);
+                String id = (String)dynamic.get("id").asString().result().map(NamespacedSchema::ensureNamespaced).orElse("minecraft:air");
+                if (!"minecraft:air".equals(id)) {
+                    String s2 = (String)map.get(id);
                     if (s2 != null) {
                         return dynamic2x.set("id", dynamic.createString(s2));
                     }
 
-                    LOGGER.warn("Unable to resolve BlockEntity for ItemStack: {}", s);
+                    LOGGER.warn("Unable to resolve BlockEntity for ItemStack: {}", id);
                 }
 
                 return dynamic2x;
diff --git a/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java b/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java
index deb32d29ab4148510ecb78395d4c34d53184aa23..ab9d6a72ae6bf3604db146988c4ad5b130d05155 100644
--- a/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java
+++ b/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java
@@ -43,7 +43,7 @@ public class FilledProfileResults implements ProfileResults {
         }
     };
     private static final Splitter SPLITTER = Splitter.on('\u001e');
-    private static final Comparator<Entry<String, FilledProfileResults.CounterCollector>> COUNTER_ENTRY_COMPARATOR = Entry.comparingByValue(Comparator.comparingLong((counterCollector) -> counterCollector.totalValue)).reversed();
+    private static final Comparator<Entry<String, FilledProfileResults.CounterCollector>> COUNTER_ENTRY_COMPARATOR = Entry.<String, CounterCollector>comparingByValue(Comparator.comparingLong((counterCollector) -> counterCollector.totalValue)).reversed();
     private final Map<String, ? extends ProfilerPathEntry> entries;
     private final long startTimeNano;
     private final int startTimeTicks;
@@ -124,7 +124,7 @@ public class FilledProfileResults implements ProfileResults {
             Object2LongMap<String> object2LongMap = profilerPathEntry.getCounters();
             if (!object2LongMap.isEmpty()) {
                 List<String> list = SPLITTER.splitToList(s);
-                object2LongMap.forEach((sx, l) -> ((FilledProfileResults.CounterCollector)map.computeIfAbsent(sx, (s) -> new FilledProfileResults.CounterCollector())).addValue(list.iterator(), l));
+                object2LongMap.forEach((sx, l) -> ((FilledProfileResults.CounterCollector)map.computeIfAbsent(sx, (str) -> new FilledProfileResults.CounterCollector())).addValue(list.iterator(), l));
             }
 
         });
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/parse/JfrStatsResult.java b/src/main/java/net/minecraft/util/profiling/jfr/parse/JfrStatsResult.java
index bee39d1566f0d096e38c9a87c76bb1560956874b..1b8ac342f2b7322edfcff227f397c010bebb4e55 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/parse/JfrStatsResult.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/parse/JfrStatsResult.java
@@ -19,81 +19,26 @@ import net.minecraft.util.profiling.jfr.stats.TickTimeStat;
 import net.minecraft.util.profiling.jfr.stats.TimedStatSummary;
 import net.minecraft.world.level.chunk.ChunkStatus;
 
-public record JfrStatsResult(Instant a, Instant b, Duration c, @Nullable Duration d, List<TickTimeStat> e, List<CpuLoadStat> f, GcHeapStat.Summary g, ThreadAllocationStat.Summary h, NetworkPacketSummary i, NetworkPacketSummary j, FileIOStat.Summary k, FileIOStat.Summary l, List<ChunkGenStat> m) {
-    private final Instant recordingStarted;
-    private final Instant recordingEnded;
-    private final Duration recordingDuration;
-    @Nullable
-    private final Duration worldCreationDuration;
-    private final List<TickTimeStat> tickTimes;
-    private final List<CpuLoadStat> cpuLoadStats;
-    private final GcHeapStat.Summary heapSummary;
-    private final ThreadAllocationStat.Summary threadAllocationSummary;
-    private final NetworkPacketSummary receivedPacketsSummary;
-    private final NetworkPacketSummary sentPacketsSummary;
-    private final FileIOStat.Summary fileWrites;
-    private final FileIOStat.Summary fileReads;
-    private final List<ChunkGenStat> chunkGenStats;
-
+public record JfrStatsResult(
+        Instant recordingStarted,
+        Instant recordingEnded,
+        Duration recordingDuration,
+        @Nullable Duration worldCreationDuration,
+        List<TickTimeStat> tickTimes,
+        List<CpuLoadStat> cpuLoadStats,
+        GcHeapStat.Summary heapSummary,
+        ThreadAllocationStat.Summary threadAllocationSummary,
+        NetworkPacketSummary receivedPacketsSummary,
+        NetworkPacketSummary sentPacketsSummary,
+        FileIOStat.Summary fileWrites,
+        FileIOStat.Summary fileReads,
+        List<ChunkGenStat> chunkGenStats) {
     public List<Pair<ChunkStatus, TimedStatSummary<ChunkGenStat>>> chunkGenSummary() {
         Map<ChunkStatus, List<ChunkGenStat>> map = this.chunkGenStats.stream().collect(Collectors.groupingBy(ChunkGenStat::status));
-        return map.entrySet().stream().map((entry) -> Pair.of((ChunkStatus)entry.getKey(), TimedStatSummary.summary(entry.getValue()))).sorted(Comparator.comparing((pair) -> ((TimedStatSummary)pair.getSecond()).totalDuration()).reversed()).toList();
+        return map.entrySet().stream().map((entry) -> Pair.of(entry.getKey(), TimedStatSummary.summary(entry.getValue()))).sorted(Comparator.<Pair<ChunkStatus, TimedStatSummary<ChunkGenStat>>, Duration>comparing((pair) -> pair.getSecond().totalDuration()).reversed()).toList();
     }
 
     public String asJson() {
         return (new JfrResultJsonSerializer()).format(this);
     }
-
-    public Instant recordingStarted() {
-        return this.recordingStarted;
-    }
-
-    public Instant recordingEnded() {
-        return this.recordingEnded;
-    }
-
-    public Duration recordingDuration() {
-        return this.recordingDuration;
-    }
-
-    @Nullable
-    public Duration worldCreationDuration() {
-        return this.worldCreationDuration;
-    }
-
-    public List<TickTimeStat> tickTimes() {
-        return this.tickTimes;
-    }
-
-    public List<CpuLoadStat> cpuLoadStats() {
-        return this.cpuLoadStats;
-    }
-
-    public GcHeapStat.Summary heapSummary() {
-        return this.heapSummary;
-    }
-
-    public ThreadAllocationStat.Summary threadAllocationSummary() {
-        return this.threadAllocationSummary;
-    }
-
-    public NetworkPacketSummary receivedPacketsSummary() {
-        return this.receivedPacketsSummary;
-    }
-
-    public NetworkPacketSummary sentPacketsSummary() {
-        return this.sentPacketsSummary;
-    }
-
-    public FileIOStat.Summary fileWrites() {
-        return this.fileWrites;
-    }
-
-    public FileIOStat.Summary fileReads() {
-        return this.fileReads;
-    }
-
-    public List<ChunkGenStat> chunkGenStats() {
-        return this.chunkGenStats;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/serialize/JfrResultJsonSerializer.java b/src/main/java/net/minecraft/util/profiling/jfr/serialize/JfrResultJsonSerializer.java
index 8118d52f549e7e7716644baa543a038ccc2bf3df..4e1341ce238e20310bacb27a630f16cdefb1c24f 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/serialize/JfrResultJsonSerializer.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/serialize/JfrResultJsonSerializer.java
@@ -81,14 +81,14 @@ public class JfrResultJsonSerializer {
             JsonObject jsonObject3 = Util.make(new JsonObject(), (jsonObject2x) -> jsonObject2.add("durationNanosPercentiles", jsonObject2x));
             timedStatSummary.percentilesNanos().forEach((integer, d) -> jsonObject3.addProperty("p" + integer, d));
             Function<ChunkGenStat, JsonElement> function = (chunkGenStat) -> {
-                JsonObject jsonObject = new JsonObject();
-                jsonObject.addProperty("durationNanos", chunkGenStat.duration().toNanos());
-                jsonObject.addProperty("level", chunkGenStat.level());
-                jsonObject.addProperty("chunkPosX", chunkGenStat.chunkPos().x);
-                jsonObject.addProperty("chunkPosZ", chunkGenStat.chunkPos().z);
-                jsonObject.addProperty("worldPosX", chunkGenStat.worldPos().x());
-                jsonObject.addProperty("worldPosZ", chunkGenStat.worldPos().z());
-                return jsonObject;
+                JsonObject jsonObjectIn = new JsonObject();
+                jsonObjectIn.addProperty("durationNanos", chunkGenStat.duration().toNanos());
+                jsonObjectIn.addProperty("level", chunkGenStat.level());
+                jsonObjectIn.addProperty("chunkPosX", chunkGenStat.chunkPos().x);
+                jsonObjectIn.addProperty("chunkPosZ", chunkGenStat.chunkPos().z);
+                jsonObjectIn.addProperty("worldPosX", chunkGenStat.worldPos().x());
+                jsonObjectIn.addProperty("worldPosZ", chunkGenStat.worldPos().z());
+                return jsonObjectIn;
             };
             jsonObject2.add("fastest", (JsonElement)function.apply(timedStatSummary.fastest()));
             jsonObject2.add("slowest", (JsonElement)function.apply(timedStatSummary.slowest()));
@@ -139,10 +139,10 @@ public class JfrResultJsonSerializer {
         JsonArray jsonArray = new JsonArray();
         jsonObject.add("topContributors", jsonArray);
         summary.topTenContributorsByTotalBytes().forEach((pair) -> {
-            JsonObject jsonObject = new JsonObject();
-            jsonArray.add(jsonObject);
-            jsonObject.addProperty("path", (String)pair.getFirst());
-            jsonObject.addProperty("totalBytes", (Number)pair.getSecond());
+            JsonObject jsonObjectIn = new JsonObject();
+            jsonArray.add(jsonObjectIn);
+            jsonObjectIn.addProperty("path", (String)pair.getFirst());
+            jsonObjectIn.addProperty("totalBytes", (Number)pair.getSecond());
         });
         return jsonObject;
     }
@@ -163,15 +163,15 @@ public class JfrResultJsonSerializer {
         JsonArray jsonArray = new JsonArray();
         jsonObject.add("topContributors", jsonArray);
         networkPacketSummary.largestSizeContributors().forEach((pair) -> {
-            JsonObject jsonObject = new JsonObject();
-            jsonArray.add(jsonObject);
+            JsonObject jsonObjectIn = new JsonObject();
+            jsonArray.add(jsonObjectIn);
             NetworkPacketSummary.PacketIdentification packetIdentification = (NetworkPacketSummary.PacketIdentification)pair.getFirst();
             NetworkPacketSummary.PacketCountAndSize packetCountAndSize = (NetworkPacketSummary.PacketCountAndSize)pair.getSecond();
-            jsonObject.addProperty("protocolId", packetIdentification.protocolId());
-            jsonObject.addProperty("packetId", packetIdentification.packetId());
-            jsonObject.addProperty("packetName", packetIdentification.packetName());
-            jsonObject.addProperty("totalBytes", packetCountAndSize.totalSize());
-            jsonObject.addProperty("count", packetCountAndSize.totalCount());
+            jsonObjectIn.addProperty("protocolId", packetIdentification.protocolId());
+            jsonObjectIn.addProperty("packetId", packetIdentification.packetId());
+            jsonObjectIn.addProperty("packetName", packetIdentification.packetName());
+            jsonObjectIn.addProperty("totalBytes", packetCountAndSize.totalSize());
+            jsonObjectIn.addProperty("count", packetCountAndSize.totalCount());
         });
         return jsonObject;
     }
@@ -179,12 +179,12 @@ public class JfrResultJsonSerializer {
     private JsonElement cpu(List<CpuLoadStat> list) {
         JsonObject jsonObject = new JsonObject();
         BiFunction<List<CpuLoadStat>, ToDoubleFunction<CpuLoadStat>, JsonObject> biFunction = (listx, toDoubleFunction) -> {
-            JsonObject jsonObject = new JsonObject();
+            JsonObject jsonObjectIn = new JsonObject();
             DoubleSummaryStatistics doubleSummaryStatistics = listx.stream().mapToDouble(toDoubleFunction).summaryStatistics();
-            jsonObject.addProperty("min", doubleSummaryStatistics.getMin());
-            jsonObject.addProperty("average", doubleSummaryStatistics.getAverage());
-            jsonObject.addProperty("max", doubleSummaryStatistics.getMax());
-            return jsonObject;
+            jsonObjectIn.addProperty("min", doubleSummaryStatistics.getMin());
+            jsonObjectIn.addProperty("average", doubleSummaryStatistics.getAverage());
+            jsonObjectIn.addProperty("max", doubleSummaryStatistics.getMax());
+            return jsonObjectIn;
         };
         jsonObject.add("jvm", (JsonElement)biFunction.apply(list, CpuLoadStat::jvm));
         jsonObject.add("userJvm", (JsonElement)biFunction.apply(list, CpuLoadStat::userJvm));
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/ChunkGenStat.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/ChunkGenStat.java
index 7943544aadd7b4bb53ea3270522b1e8f75669c2f..c1c751cbf4f5293de4b52747990112340d69fbee 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/ChunkGenStat.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/ChunkGenStat.java
@@ -6,34 +6,8 @@ import net.minecraft.server.level.ColumnPos;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.ChunkStatus;
 
-public record ChunkGenStat(Duration a, ChunkPos b, ColumnPos c, ChunkStatus d, String e) implements TimedStat {
-    private final Duration duration;
-    private final ChunkPos chunkPos;
-    private final ColumnPos worldPos;
-    private final ChunkStatus status;
-    private final String level;
-
+public record ChunkGenStat(Duration duration, ChunkPos chunkPos, ColumnPos worldPos, ChunkStatus status, String level) implements TimedStat {
     public static ChunkGenStat from(RecordedEvent recordedEvent) {
         return new ChunkGenStat(recordedEvent.getDuration(), new ChunkPos(recordedEvent.getInt("chunkPosX"), recordedEvent.getInt("chunkPosX")), new ColumnPos(recordedEvent.getInt("worldPosX"), recordedEvent.getInt("worldPosZ")), ChunkStatus.byName(recordedEvent.getString("status")), recordedEvent.getString("level"));
     }
-
-    public Duration duration() {
-        return this.duration;
-    }
-
-    public ChunkPos chunkPos() {
-        return this.chunkPos;
-    }
-
-    public ColumnPos worldPos() {
-        return this.worldPos;
-    }
-
-    public ChunkStatus status() {
-        return this.status;
-    }
-
-    public String level() {
-        return this.level;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/CpuLoadStat.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/CpuLoadStat.java
index 9a2adc918048296e548245954820bad952dbbda7..76e6413cb803facb52d9b399dd03ba35cbb18292 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/CpuLoadStat.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/CpuLoadStat.java
@@ -2,24 +2,8 @@ package net.minecraft.util.profiling.jfr.stats;
 
 import jdk.jfr.consumer.RecordedEvent;
 
-public record CpuLoadStat(double a, double b, double c) {
-    private final double jvm;
-    private final double userJvm;
-    private final double system;
-
+public record CpuLoadStat(double jvm, double userJvm, double system) {
     public static CpuLoadStat from(RecordedEvent recordedEvent) {
         return new CpuLoadStat((double)recordedEvent.getFloat("jvmSystem"), (double)recordedEvent.getFloat("jvmUser"), (double)recordedEvent.getFloat("machineTotal"));
     }
-
-    public double jvm() {
-        return this.jvm;
-    }
-
-    public double userJvm() {
-        return this.userJvm;
-    }
-
-    public double system() {
-        return this.system;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/FileIOStat.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/FileIOStat.java
index c151e74632d5d01c9aad5a24060bb60c54c3bbb3..50ef2f34361ea882177d412b9854b9efbf2573f3 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/FileIOStat.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/FileIOStat.java
@@ -8,15 +8,10 @@ import java.util.Map.Entry;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 
-public record FileIOStat(Duration a, @Nullable String b, long c) {
-    private final Duration duration;
-    @Nullable
-    private final String path;
-    private final long bytes;
-
+public record FileIOStat(Duration duration, @Nullable String path, long bytes) {
     public static FileIOStat.Summary summary(Duration duration, List<FileIOStat> list) {
         long l = list.stream().mapToLong((fileIOStat) -> fileIOStat.bytes).sum();
-        return new FileIOStat.Summary(l, (double)l / (double)duration.getSeconds(), (long)list.size(), (double)list.size() / (double)duration.getSeconds(), (Duration)list.stream().map(FileIOStat::duration).reduce(Duration.ZERO, Duration::plus), (list.stream().filter((fileIOStat) -> fileIOStat.path != null).collect(Collectors.groupingBy((fileIOStat) -> fileIOStat.path, Collectors.summingLong((fileIOStat) -> fileIOStat.bytes)))).entrySet().stream().sorted(Entry.comparingByValue().reversed()).map((entry) -> Pair.of((String)entry.getKey(), (Long)entry.getValue())).limit(10L).toList());
+        return new FileIOStat.Summary(l, (double)l / (double)duration.getSeconds(), (long)list.size(), (double)list.size() / (double)duration.getSeconds(), (Duration)list.stream().map(FileIOStat::duration).reduce(Duration.ZERO, Duration::plus), (list.stream().filter((fileIOStat) -> fileIOStat.path != null).collect(Collectors.groupingBy((fileIOStat) -> fileIOStat.path, Collectors.summingLong((fileIOStat) -> fileIOStat.bytes)))).entrySet().stream().sorted(Entry.<String, Long>comparingByValue().reversed()).map((entry) -> Pair.of((String)entry.getKey(), (Long)entry.getValue())).limit(10L).toList());
     }
 
     public Duration duration() {
@@ -32,36 +27,6 @@ public record FileIOStat(Duration a, @Nullable String b, long c) {
         return this.bytes;
     }
 
-    public static record Summary(long a, double b, long c, double d, Duration e, List<Pair<String, Long>> f) {
-        private final long totalBytes;
-        private final double bytesPerSecond;
-        private final long counts;
-        private final double countsPerSecond;
-        private final Duration timeSpentInIO;
-        private final List<Pair<String, Long>> topTenContributorsByTotalBytes;
-
-        public long totalBytes() {
-            return this.totalBytes;
-        }
-
-        public double bytesPerSecond() {
-            return this.bytesPerSecond;
-        }
-
-        public long counts() {
-            return this.counts;
-        }
-
-        public double countsPerSecond() {
-            return this.countsPerSecond;
-        }
-
-        public Duration timeSpentInIO() {
-            return this.timeSpentInIO;
-        }
-
-        public List<Pair<String, Long>> topTenContributorsByTotalBytes() {
-            return this.topTenContributorsByTotalBytes;
-        }
+    public static record Summary(long totalBytes, double bytesPerSecond, long counts, double countsPerSecond, Duration timeSpentInIO, List<Pair<String, Long>> topTenContributorsByTotalBytes) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/GcHeapStat.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/GcHeapStat.java
index 0a0b028446afadbf63ee78dd79853944d2875404..701ebf168b673da1edbe26dd54644077a06b06ed 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/GcHeapStat.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/GcHeapStat.java
@@ -7,11 +7,7 @@ import java.util.Map;
 import java.util.stream.Collectors;
 import jdk.jfr.consumer.RecordedEvent;
 
-public record GcHeapStat(Instant a, long b, GcHeapStat.Timing c) {
-    private final Instant timestamp;
-    private final long heapUsed;
-    private final GcHeapStat.Timing timing;
-
+public record GcHeapStat(Instant timestamp, long heapUsed, GcHeapStat.Timing timing) {
     public static GcHeapStat from(RecordedEvent recordedEvent) {
         return new GcHeapStat(recordedEvent.getStartTime(), recordedEvent.getLong("heapUsed"), recordedEvent.getString("when").equalsIgnoreCase("before gc") ? GcHeapStat.Timing.BEFORE_GC : GcHeapStat.Timing.AFTER_GC);
     }
@@ -36,43 +32,10 @@ public record GcHeapStat(Instant a, long b, GcHeapStat.Timing c) {
         return (double)l / (double)duration.getSeconds();
     }
 
-    public Instant timestamp() {
-        return this.timestamp;
-    }
-
-    public long heapUsed() {
-        return this.heapUsed;
-    }
-
-    public GcHeapStat.Timing timing() {
-        return this.timing;
-    }
-
-    public static record Summary(Duration a, Duration b, int c, double d) {
-        private final Duration duration;
-        private final Duration gcTotalDuration;
-        private final int totalGCs;
-        private final double allocationRateBytesPerSecond;
-
+    public static record Summary(Duration duration, Duration gcTotalDuration, int totalGCs, double allocationRateBytesPerSecond) {
         public float gcOverHead() {
             return (float)this.gcTotalDuration.toMillis() / (float)this.duration.toMillis();
         }
-
-        public Duration duration() {
-            return this.duration;
-        }
-
-        public Duration gcTotalDuration() {
-            return this.gcTotalDuration;
-        }
-
-        public int totalGCs() {
-            return this.totalGCs;
-        }
-
-        public double allocationRateBytesPerSecond() {
-            return this.allocationRateBytesPerSecond;
-        }
     }
 
     static enum Timing {
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/NetworkPacketSummary.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/NetworkPacketSummary.java
index 88a992e67ff13d92f028cc36852b0e7934475d95..23a3a335cd394f516fee098af958a3c935a2591e 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/NetworkPacketSummary.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/NetworkPacketSummary.java
@@ -44,28 +44,15 @@ public final class NetworkPacketSummary {
         return this.largestSizeContributors;
     }
 
-    public static record PacketCountAndSize(long a, long b) {
-        final long totalCount;
-        final long totalSize;
+    public static record PacketCountAndSize(long totalCount, long totalSize) {
         static final Comparator<NetworkPacketSummary.PacketCountAndSize> SIZE_THEN_COUNT = Comparator.comparing(NetworkPacketSummary.PacketCountAndSize::totalSize).thenComparing(NetworkPacketSummary.PacketCountAndSize::totalCount).reversed();
 
         NetworkPacketSummary.PacketCountAndSize add(NetworkPacketSummary.PacketCountAndSize packetCountAndSize) {
             return new NetworkPacketSummary.PacketCountAndSize(this.totalCount + packetCountAndSize.totalCount, this.totalSize + packetCountAndSize.totalSize);
         }
-
-        public long totalCount() {
-            return this.totalCount;
-        }
-
-        public long totalSize() {
-            return this.totalSize;
-        }
     }
 
-    public static record PacketIdentification(PacketFlow a, int b, int c) {
-        private final PacketFlow direction;
-        private final int protocolId;
-        private final int packetId;
+    public static record PacketIdentification(PacketFlow direction, int protocolId, int packetId) {
         private static final Map<NetworkPacketSummary.PacketIdentification, String> PACKET_NAME_BY_ID;
 
         public String packetName() {
@@ -76,18 +63,6 @@ public final class NetworkPacketSummary {
             return new NetworkPacketSummary.PacketIdentification(recordedEvent.getEventType().getName().equals("minecraft.PacketSent") ? PacketFlow.CLIENTBOUND : PacketFlow.SERVERBOUND, recordedEvent.getInt("protocolId"), recordedEvent.getInt("packetId"));
         }
 
-        public PacketFlow direction() {
-            return this.direction;
-        }
-
-        public int protocolId() {
-            return this.protocolId;
-        }
-
-        public int packetId() {
-            return this.packetId;
-        }
-
         static {
             Builder<NetworkPacketSummary.PacketIdentification, String> builder = ImmutableMap.builder();
 
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/ThreadAllocationStat.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/ThreadAllocationStat.java
index bad6abce1db5e9d90cec723ba3ce728980e518db..a59270cc1e99cbd61c76130e859de6bc59df0fc2 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/ThreadAllocationStat.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/ThreadAllocationStat.java
@@ -10,15 +10,12 @@ import java.util.stream.Collectors;
 import jdk.jfr.consumer.RecordedEvent;
 import jdk.jfr.consumer.RecordedThread;
 
-public record ThreadAllocationStat(Instant a, String b, long c) {
-    private final Instant timestamp;
-    private final String threadName;
-    private final long totalBytes;
+public record ThreadAllocationStat(Instant timestamp, String threadName, long totalBytes) {
     private static final String UNKNOWN_THREAD = "unknown";
 
     public static ThreadAllocationStat from(RecordedEvent recordedEvent) {
         RecordedThread recordedThread = recordedEvent.getThread("thread");
-        String s = recordedThread == null ? "unknown" : (String)MoreObjects.firstNonNull(recordedThread.getJavaName(), "unknown");
+        String s = recordedThread == null ? UNKNOWN_THREAD : (String)MoreObjects.firstNonNull(recordedThread.getJavaName(), UNKNOWN_THREAD);
         return new ThreadAllocationStat(recordedEvent.getStartTime(), s, recordedEvent.getLong("allocated"));
     }
 
@@ -49,11 +46,6 @@ public record ThreadAllocationStat(Instant a, String b, long c) {
         return this.totalBytes;
     }
 
-    public static record Summary(Map<String, Double> a) {
-        private final Map<String, Double> allocationsPerSecondByThread;
-
-        public Map<String, Double> allocationsPerSecondByThread() {
-            return this.allocationsPerSecondByThread;
-        }
+    public static record Summary(Map<String, Double> allocationsPerSecondByThread) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/TickTimeStat.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/TickTimeStat.java
index cd8c050e77a0687e3e33262d1c901af4391695e6..96e47ea921319bb755a53e8f1a12d240add72665 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/TickTimeStat.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/TickTimeStat.java
@@ -4,19 +4,8 @@ import java.time.Duration;
 import java.time.Instant;
 import jdk.jfr.consumer.RecordedEvent;
 
-public record TickTimeStat(Instant a, Duration b) {
-    private final Instant timestamp;
-    private final Duration currentAverage;
-
+public record TickTimeStat(Instant timestamp, Duration currentAverage) {
     public static TickTimeStat from(RecordedEvent recordedEvent) {
         return new TickTimeStat(recordedEvent.getStartTime(), recordedEvent.getDuration("averageTickDuration"));
     }
-
-    public Instant timestamp() {
-        return this.timestamp;
-    }
-
-    public Duration currentAverage() {
-        return this.currentAverage;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/TimedStatSummary.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/TimedStatSummary.java
index ba4be1102095a9d7ecd8c891f7c81f9cd25e780f..0610dcfe064ae24a118e4ffc3b067906ac02e48a 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/TimedStatSummary.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/TimedStatSummary.java
@@ -7,15 +7,7 @@ import java.util.Map;
 import javax.annotation.Nullable;
 import net.minecraft.util.profiling.jfr.Percentiles;
 
-public record TimedStatSummary<T extends TimedStat>(T a, T b, @Nullable T c, int d, Map<Integer, Double> e, Duration f) {
-    private final T fastest;
-    private final T slowest;
-    @Nullable
-    private final T secondSlowest;
-    private final int count;
-    private final Map<Integer, Double> percentilesNanos;
-    private final Duration totalDuration;
-
+public record TimedStatSummary<T extends TimedStat>(T fastest, T slowest, @Nullable T secondSlowest, int count, Map<Integer, Double> percentilesNanos, Duration totalDuration) {
     public static <T extends TimedStat> TimedStatSummary<T> summary(List<T> list) {
         if (list.isEmpty()) {
             throw new IllegalArgumentException("No values");
@@ -30,29 +22,4 @@ public record TimedStatSummary<T extends TimedStat>(T a, T b, @Nullable T c, int
             return new TimedStatSummary<>(timedStat, timedStat2, timedStat3, i, map, duration);
         }
     }
-
-    public T fastest() {
-        return this.fastest;
-    }
-
-    public T slowest() {
-        return this.slowest;
-    }
-
-    @Nullable
-    public T secondSlowest() {
-        return this.secondSlowest;
-    }
-
-    public int count() {
-        return this.count;
-    }
-
-    public Map<Integer, Double> percentilesNanos() {
-        return this.percentilesNanos;
-    }
-
-    public Duration totalDuration() {
-        return this.totalDuration;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/random/WeightedRandom.java b/src/main/java/net/minecraft/util/random/WeightedRandom.java
index 85c4c8639bbf0ce91f49ad459fba4e2f951e350a..ff4de2385ee4da9a635f29c1ed9eb6e24352520a 100644
--- a/src/main/java/net/minecraft/util/random/WeightedRandom.java
+++ b/src/main/java/net/minecraft/util/random/WeightedRandom.java
@@ -25,7 +25,7 @@ public class WeightedRandom {
 
     public static <T extends WeightedEntry> Optional<T> getRandomItem(RandomSource randomSource, List<T> list, int i) {
         if (i < 0) {
-            throw (IllegalArgumentException)Util.pauseInIde((T)(new IllegalArgumentException("Negative total weight in getRandomItem")));
+            throw (IllegalArgumentException)Util.pauseInIde((new IllegalArgumentException("Negative total weight in getRandomItem")));
         } else if (i == 0) {
             return Optional.empty();
         } else {
diff --git a/src/main/java/net/minecraft/util/valueproviders/BiasedToBottomInt.java b/src/main/java/net/minecraft/util/valueproviders/BiasedToBottomInt.java
index 15c4050fd2aa4131f23af7634371d43b78a58a68..06ad220a001bdd2140f4fc0d41c059bfe73be41f 100644
--- a/src/main/java/net/minecraft/util/valueproviders/BiasedToBottomInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/BiasedToBottomInt.java
@@ -7,7 +7,7 @@ import java.util.function.Function;
 import net.minecraft.util.RandomSource;
 
 public class BiasedToBottomInt extends IntProvider {
-    public static final Codec<BiasedToBottomInt> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((biasedToBottomInt) -> biasedToBottomInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((biasedToBottomInt) -> biasedToBottomInt.maxInclusive)).apply(instance, BiasedToBottomInt::new)).comapFlatMap((biasedToBottomInt) -> biasedToBottomInt.maxInclusive < biasedToBottomInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + biasedToBottomInt.minInclusive + ", max_inclusive: " + biasedToBottomInt.maxInclusive) : DataResult.success(biasedToBottomInt), Function.identity());
+    public static final Codec<BiasedToBottomInt> CODEC = RecordCodecBuilder.<BiasedToBottomInt>create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((biasedToBottomInt) -> biasedToBottomInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((biasedToBottomInt) -> biasedToBottomInt.maxInclusive)).apply(instance, BiasedToBottomInt::new)).comapFlatMap((biasedToBottomInt) -> biasedToBottomInt.maxInclusive < biasedToBottomInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + biasedToBottomInt.minInclusive + ", max_inclusive: " + biasedToBottomInt.maxInclusive) : DataResult.success(biasedToBottomInt), Function.identity());
     private final int minInclusive;
     private final int maxInclusive;
 
diff --git a/src/main/java/net/minecraft/util/valueproviders/ClampedInt.java b/src/main/java/net/minecraft/util/valueproviders/ClampedInt.java
index 5040a7075a6bc7894bca2ffd10dce2089035fd7b..367f7b09e553c1192e40241693639fae153360b8 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ClampedInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ClampedInt.java
@@ -8,7 +8,7 @@ import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 
 public class ClampedInt extends IntProvider {
-    public static final Codec<ClampedInt> CODEC = RecordCodecBuilder.create((instance) -> instance.group(IntProvider.CODEC.fieldOf("source").forGetter((clampedInt) -> clampedInt.source), Codec.INT.fieldOf("min_inclusive").forGetter((clampedInt) -> clampedInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((clampedInt) -> clampedInt.maxInclusive)).apply(instance, ClampedInt::new)).comapFlatMap((clampedInt) -> clampedInt.maxInclusive < clampedInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + clampedInt.minInclusive + ", max_inclusive: " + clampedInt.maxInclusive) : DataResult.success(clampedInt), Function.identity());
+    public static final Codec<ClampedInt> CODEC = RecordCodecBuilder.<ClampedInt>create((instance) -> instance.group(IntProvider.CODEC.fieldOf("source").forGetter((clampedInt) -> clampedInt.source), Codec.INT.fieldOf("min_inclusive").forGetter((clampedInt) -> clampedInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((clampedInt) -> clampedInt.maxInclusive)).apply(instance, ClampedInt::new)).comapFlatMap((clampedInt) -> clampedInt.maxInclusive < clampedInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + clampedInt.minInclusive + ", max_inclusive: " + clampedInt.maxInclusive) : DataResult.success(clampedInt), Function.identity());
     private final IntProvider source;
     private int minInclusive;
     private int maxInclusive;
diff --git a/src/main/java/net/minecraft/util/valueproviders/ClampedNormalFloat.java b/src/main/java/net/minecraft/util/valueproviders/ClampedNormalFloat.java
index ae10b0ee98f4b634133de99f6849fe06860c4ff7..22ab216eb1b5305aa50cadcef1490d2efb65c4e1 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ClampedNormalFloat.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ClampedNormalFloat.java
@@ -8,7 +8,7 @@ import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 
 public class ClampedNormalFloat extends FloatProvider {
-    public static final Codec<ClampedNormalFloat> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("mean").forGetter((clampedNormalFloat) -> clampedNormalFloat.mean), Codec.FLOAT.fieldOf("deviation").forGetter((clampedNormalFloat) -> clampedNormalFloat.deviation), Codec.FLOAT.fieldOf("min").forGetter((clampedNormalFloat) -> clampedNormalFloat.min), Codec.FLOAT.fieldOf("max").forGetter((clampedNormalFloat) -> clampedNormalFloat.max)).apply(instance, ClampedNormalFloat::new)).comapFlatMap((clampedNormalFloat) -> clampedNormalFloat.max < clampedNormalFloat.min ? DataResult.error("Max must be larger than min: [" + clampedNormalFloat.min + ", " + clampedNormalFloat.max + "]") : DataResult.success(clampedNormalFloat), Function.identity());
+    public static final Codec<ClampedNormalFloat> CODEC = RecordCodecBuilder.<ClampedNormalFloat>create((instance) -> instance.group(Codec.FLOAT.fieldOf("mean").forGetter((clampedNormalFloat) -> clampedNormalFloat.mean), Codec.FLOAT.fieldOf("deviation").forGetter((clampedNormalFloat) -> clampedNormalFloat.deviation), Codec.FLOAT.fieldOf("min").forGetter((clampedNormalFloat) -> clampedNormalFloat.min), Codec.FLOAT.fieldOf("max").forGetter((clampedNormalFloat) -> clampedNormalFloat.max)).apply(instance, ClampedNormalFloat::new)).comapFlatMap((clampedNormalFloat) -> clampedNormalFloat.max < clampedNormalFloat.min ? DataResult.error("Max must be larger than min: [" + clampedNormalFloat.min + ", " + clampedNormalFloat.max + "]") : DataResult.success(clampedNormalFloat), Function.identity());
     private float mean;
     private float deviation;
     private float min;
diff --git a/src/main/java/net/minecraft/util/valueproviders/ClampedNormalInt.java b/src/main/java/net/minecraft/util/valueproviders/ClampedNormalInt.java
index 611a321ef2fabfbe9e6a1e7507bc68ce6e093560..3aa762df26adc614d21f1ffc05ff903d78455ae8 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ClampedNormalInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ClampedNormalInt.java
@@ -8,7 +8,7 @@ import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 
 public class ClampedNormalInt extends IntProvider {
-    public static final Codec<ClampedNormalInt> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("mean").forGetter((clampedNormalInt) -> clampedNormalInt.mean), Codec.FLOAT.fieldOf("deviation").forGetter((clampedNormalInt) -> clampedNormalInt.deviation), Codec.INT.fieldOf("min_inclusive").forGetter((clampedNormalInt) -> clampedNormalInt.min_inclusive), Codec.INT.fieldOf("max_inclusive").forGetter((clampedNormalInt) -> clampedNormalInt.max_inclusive)).apply(instance, ClampedNormalInt::new)).comapFlatMap((clampedNormalInt) -> clampedNormalInt.max_inclusive < clampedNormalInt.min_inclusive ? DataResult.error("Max must be larger than min: [" + clampedNormalInt.min_inclusive + ", " + clampedNormalInt.max_inclusive + "]") : DataResult.success(clampedNormalInt), Function.identity());
+    public static final Codec<ClampedNormalInt> CODEC = RecordCodecBuilder.<ClampedNormalInt>create((instance) -> instance.group(Codec.FLOAT.fieldOf("mean").forGetter((clampedNormalInt) -> clampedNormalInt.mean), Codec.FLOAT.fieldOf("deviation").forGetter((clampedNormalInt) -> clampedNormalInt.deviation), Codec.INT.fieldOf("min_inclusive").forGetter((clampedNormalInt) -> clampedNormalInt.min_inclusive), Codec.INT.fieldOf("max_inclusive").forGetter((clampedNormalInt) -> clampedNormalInt.max_inclusive)).apply(instance, ClampedNormalInt::new)).comapFlatMap((clampedNormalInt) -> clampedNormalInt.max_inclusive < clampedNormalInt.min_inclusive ? DataResult.error("Max must be larger than min: [" + clampedNormalInt.min_inclusive + ", " + clampedNormalInt.max_inclusive + "]") : DataResult.success(clampedNormalInt), Function.identity());
     private float mean;
     private float deviation;
     private int min_inclusive;
diff --git a/src/main/java/net/minecraft/util/valueproviders/ConstantFloat.java b/src/main/java/net/minecraft/util/valueproviders/ConstantFloat.java
index 6c541524d06002ed09be17999c1403d90164b385..9cca3401498d4e43593ee88a0db9b754d2b88d06 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ConstantFloat.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ConstantFloat.java
@@ -7,7 +7,7 @@ import net.minecraft.util.RandomSource;
 
 public class ConstantFloat extends FloatProvider {
     public static final ConstantFloat ZERO = new ConstantFloat(0.0F);
-    public static final Codec<ConstantFloat> CODEC = Codec.either(Codec.FLOAT, RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("value").forGetter((constantFloat) -> constantFloat.value)).apply(instance, ConstantFloat::new))).xmap((either) -> (ConstantFloat)either.map(ConstantFloat::of, (constantFloat) -> constantFloat), (constantFloat) -> Either.left(constantFloat.value));
+    public static final Codec<ConstantFloat> CODEC = Codec.either(Codec.FLOAT, RecordCodecBuilder.<ConstantFloat>create((instance) -> instance.group(Codec.FLOAT.fieldOf("value").forGetter((constantFloat) -> constantFloat.value)).apply(instance, ConstantFloat::new))).xmap((either) -> (ConstantFloat)either.map(ConstantFloat::of, (constantFloat) -> constantFloat), (constantFloat) -> Either.left(constantFloat.value));
     private final float value;
 
     public static ConstantFloat of(float f) {
diff --git a/src/main/java/net/minecraft/util/valueproviders/ConstantInt.java b/src/main/java/net/minecraft/util/valueproviders/ConstantInt.java
index cf5a4180890e9879c972327c2a3083b841d96eea..59fc51c566b129fcdb5a225c4b8362e298b2abf5 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ConstantInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ConstantInt.java
@@ -7,7 +7,7 @@ import net.minecraft.util.RandomSource;
 
 public class ConstantInt extends IntProvider {
     public static final ConstantInt ZERO = new ConstantInt(0);
-    public static final Codec<ConstantInt> CODEC = Codec.either(Codec.INT, RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("value").forGetter((constantInt) -> constantInt.value)).apply(instance, ConstantInt::new))).xmap((either) -> (ConstantInt)either.map(ConstantInt::of, (constantInt) -> constantInt), (constantInt) -> Either.left(constantInt.value));
+    public static final Codec<ConstantInt> CODEC = Codec.<Integer, ConstantInt>either(Codec.INT, RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("value").forGetter((constantInt) -> constantInt.value)).apply(instance, ConstantInt::new))).xmap((either) -> (ConstantInt)either.map(ConstantInt::of, (constantInt) -> constantInt), (constantInt) -> Either.left(constantInt.value));
     private final int value;
 
     public static ConstantInt of(int i) {
diff --git a/src/main/java/net/minecraft/util/valueproviders/TrapezoidFloat.java b/src/main/java/net/minecraft/util/valueproviders/TrapezoidFloat.java
index d7ac166eece85e6d49972c5cb8a4e318f0791f54..1727d777a137c6c5af5a6011e6c2c6041baad28c 100644
--- a/src/main/java/net/minecraft/util/valueproviders/TrapezoidFloat.java
+++ b/src/main/java/net/minecraft/util/valueproviders/TrapezoidFloat.java
@@ -7,7 +7,7 @@ import java.util.function.Function;
 import net.minecraft.util.RandomSource;
 
 public class TrapezoidFloat extends FloatProvider {
-    public static final Codec<TrapezoidFloat> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("min").forGetter((trapezoidFloat) -> trapezoidFloat.min), Codec.FLOAT.fieldOf("max").forGetter((trapezoidFloat) -> trapezoidFloat.max), Codec.FLOAT.fieldOf("plateau").forGetter((trapezoidFloat) -> trapezoidFloat.plateau)).apply(instance, TrapezoidFloat::new)).comapFlatMap((trapezoidFloat) -> {
+    public static final Codec<TrapezoidFloat> CODEC = RecordCodecBuilder.<TrapezoidFloat>create((instance) -> instance.group(Codec.FLOAT.fieldOf("min").forGetter((trapezoidFloat) -> trapezoidFloat.min), Codec.FLOAT.fieldOf("max").forGetter((trapezoidFloat) -> trapezoidFloat.max), Codec.FLOAT.fieldOf("plateau").forGetter((trapezoidFloat) -> trapezoidFloat.plateau)).apply(instance, TrapezoidFloat::new)).comapFlatMap((trapezoidFloat) -> {
         if (trapezoidFloat.max < trapezoidFloat.min) {
             return DataResult.error("Max must be larger than min: [" + trapezoidFloat.min + ", " + trapezoidFloat.max + "]");
         } else {
diff --git a/src/main/java/net/minecraft/util/valueproviders/UniformFloat.java b/src/main/java/net/minecraft/util/valueproviders/UniformFloat.java
index 709f97e3af5c59bfc296d63c8e76b2ab11af4b46..3e181364829b3e271ba754a5b9d7773ed46de368 100644
--- a/src/main/java/net/minecraft/util/valueproviders/UniformFloat.java
+++ b/src/main/java/net/minecraft/util/valueproviders/UniformFloat.java
@@ -8,7 +8,7 @@ import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 
 public class UniformFloat extends FloatProvider {
-    public static final Codec<UniformFloat> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("min_inclusive").forGetter((uniformFloat) -> uniformFloat.minInclusive), Codec.FLOAT.fieldOf("max_exclusive").forGetter((uniformFloat) -> uniformFloat.maxExclusive)).apply(instance, UniformFloat::new)).comapFlatMap((uniformFloat) -> uniformFloat.maxExclusive <= uniformFloat.minInclusive ? DataResult.error("Max must be larger than min, min_inclusive: " + uniformFloat.minInclusive + ", max_exclusive: " + uniformFloat.maxExclusive) : DataResult.success(uniformFloat), Function.identity());
+    public static final Codec<UniformFloat> CODEC = RecordCodecBuilder.<UniformFloat>create((instance) -> instance.group(Codec.FLOAT.fieldOf("min_inclusive").forGetter((uniformFloat) -> uniformFloat.minInclusive), Codec.FLOAT.fieldOf("max_exclusive").forGetter((uniformFloat) -> uniformFloat.maxExclusive)).apply(instance, UniformFloat::new)).comapFlatMap((uniformFloat) -> uniformFloat.maxExclusive <= uniformFloat.minInclusive ? DataResult.error("Max must be larger than min, min_inclusive: " + uniformFloat.minInclusive + ", max_exclusive: " + uniformFloat.maxExclusive) : DataResult.success(uniformFloat), Function.identity());
     private final float minInclusive;
     private final float maxExclusive;
 
diff --git a/src/main/java/net/minecraft/util/valueproviders/UniformInt.java b/src/main/java/net/minecraft/util/valueproviders/UniformInt.java
index 83229cff55dfdf2d67f6f2d09095c7d70560bfcc..8458dd41af6c0094f92866f7641363e9904f07a8 100644
--- a/src/main/java/net/minecraft/util/valueproviders/UniformInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/UniformInt.java
@@ -8,7 +8,7 @@ import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 
 public class UniformInt extends IntProvider {
-    public static final Codec<UniformInt> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((uniformInt) -> uniformInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((uniformInt) -> uniformInt.maxInclusive)).apply(instance, UniformInt::new)).comapFlatMap((uniformInt) -> uniformInt.maxInclusive < uniformInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + uniformInt.minInclusive + ", max_inclusive: " + uniformInt.maxInclusive) : DataResult.success(uniformInt), Function.identity());
+    public static final Codec<UniformInt> CODEC = RecordCodecBuilder.<UniformInt>create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((uniformInt) -> uniformInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((uniformInt) -> uniformInt.maxInclusive)).apply(instance, UniformInt::new)).comapFlatMap((uniformInt) -> uniformInt.maxInclusive < uniformInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + uniformInt.minInclusive + ", max_inclusive: " + uniformInt.maxInclusive) : DataResult.success(uniformInt), Function.identity());
     private final int minInclusive;
     private final int maxInclusive;
 
diff --git a/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java b/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
index 062fd8d8274266fffc4c6e0131dcda4dc8efdb56..bb06aff0a217788d2ea4808052c6e3f7dca552b5 100644
--- a/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
+++ b/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
@@ -109,7 +109,7 @@ public class WorldUpgrader {
                 builder2.put(resourceKey2, new ChunkStorage(path.resolve("region"), this.dataFixer, true));
             }
 
-            ImmutableMap<ResourceKey<Level>, ChunkStorage> immutableMap2 = builder2.build();
+            ImmutableMap<ResourceKey<Level>, ChunkStorage> immutableMap2In = builder2.build();
             long l = Util.getMillis();
             this.status = Component.translatable("optimizeWorld.stage.upgrading");
 
@@ -121,7 +121,7 @@ public class WorldUpgrader {
                 for(UnmodifiableIterator iOException = immutableSet.iterator(); iOException.hasNext(); f2 += f3) {
                     ResourceKey<Level> resourceKey3 = (ResourceKey)iOException.next();
                     ListIterator<ChunkPos> listIterator = (ListIterator)immutableMap.get(resourceKey3);
-                    ChunkStorage chunkStorage = (ChunkStorage)immutableMap2.get(resourceKey3);
+                    ChunkStorage chunkStorage = (ChunkStorage)immutableMap2In.get(resourceKey3);
                     if (listIterator.hasNext()) {
                         ChunkPos chunkPos = (ChunkPos)listIterator.next();
                         boolean flag2 = false;
@@ -188,7 +188,7 @@ public class WorldUpgrader {
             }
 
             this.status = Component.translatable("optimizeWorld.stage.finished");
-            UnmodifiableIterator var34 = immutableMap2.values().iterator();
+            UnmodifiableIterator var34 = immutableMap2In.values().iterator();
 
             while(var34.hasNext()) {
                 ChunkStorage chunkStorage2 = (ChunkStorage)var34.next();
diff --git a/src/main/java/net/minecraft/world/effect/MobEffectInstance.java b/src/main/java/net/minecraft/world/effect/MobEffectInstance.java
index b40c50361119138876d7fcbd3e633b70d9de9b20..f425337b35dde7a5224bb576adc4722246f29dd7 100644
--- a/src/main/java/net/minecraft/world/effect/MobEffectInstance.java
+++ b/src/main/java/net/minecraft/world/effect/MobEffectInstance.java
@@ -274,7 +274,7 @@ public class MobEffectInstance implements Comparable<MobEffectInstance> {
 
         Optional<MobEffectInstance.FactorData> optional;
         if (compoundTag.contains("FactorCalculationData", 10)) {
-            optional = MobEffectInstance.FactorData.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundTag.getCompound("FactorCalculationData"))).resultOrPartial(LOGGER::error);
+            optional = MobEffectInstance.FactorData.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.getCompound("FactorCalculationData"))).resultOrPartial(LOGGER::error);
         } else {
             optional = Optional.empty();
         }
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 05487617b1bed3167748b45d09361959fc92fc2e..70de3a2c521dcd70c24a56b27d6d5060b9f5611d 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -3308,16 +3308,6 @@ public abstract class LivingEntity extends Entity {
         return this.getMainHandItem().getItem() instanceof AxeItem;
     }
 
-    public static record Fallsounds(SoundEvent a, SoundEvent b) {
-        private final SoundEvent small;
-        private final SoundEvent big;
-
-        public SoundEvent small() {
-            return this.small;
-        }
-
-        public SoundEvent big() {
-            return this.big;
-        }
+    public static record Fallsounds(SoundEvent small, SoundEvent big) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 27c9430c0af0a6ac6414f39cff6307c42d12e5da..6b52b6f6cbc661739ee04781ff6afd1fa12aa59d 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -1071,7 +1071,7 @@ public abstract class Mob extends LivingEntity {
             if (itemStack.getItem() instanceof SpawnEggItem) {
                 if (this.level instanceof ServerLevel) {
                     SpawnEggItem spawnEggItem = (SpawnEggItem)itemStack.getItem();
-                    Optional<Mob> optional = spawnEggItem.spawnOffspringFromSpawnEgg(player, this, this.getType(), (ServerLevel)this.level, this.position(), itemStack);
+                    Optional<Mob> optional = spawnEggItem.spawnOffspringFromSpawnEgg(player, this, (EntityType) this.getType(), (ServerLevel)this.level, this.position(), itemStack);
                     optional.ifPresent((mob) -> this.onOffspringSpawnedFromEgg(player, mob));
                     return optional.isPresent() ? InteractionResult.SUCCESS : InteractionResult.PASS;
                 } else {
diff --git a/src/main/java/net/minecraft/world/entity/SpawnPlacements.java b/src/main/java/net/minecraft/world/entity/SpawnPlacements.java
index 6bdf469199c45b68c386eec8bdfbbc1a5ecb26c1..8665e97fd58cb7e625d31090ef91aeb95437b9d0 100644
--- a/src/main/java/net/minecraft/world/entity/SpawnPlacements.java
+++ b/src/main/java/net/minecraft/world/entity/SpawnPlacements.java
@@ -61,7 +61,7 @@ public class SpawnPlacements {
 
     public static <T extends Entity> boolean checkSpawnRules(EntityType<T> entityType, ServerLevelAccessor serverLevelAccessor, MobSpawnType mobSpawnType, BlockPos blockPos, RandomSource randomSource) {
         SpawnPlacements.Data data = (SpawnPlacements.Data)DATA_BY_TYPE.get(entityType);
-        return data == null || data.predicate.test(entityType, serverLevelAccessor, mobSpawnType, blockPos, randomSource);
+        return data == null || data.predicate.test((EntityType) entityType, serverLevelAccessor, mobSpawnType, blockPos, randomSource);
     }
 
     static {
diff --git a/src/main/java/net/minecraft/world/entity/ai/Brain.java b/src/main/java/net/minecraft/world/entity/ai/Brain.java
index 03340d64c106e99892246346a488731b96fa30f4..1969a3291f4ddf9eedb81807aa506d9bcdd47233 100644
--- a/src/main/java/net/minecraft/world/entity/ai/Brain.java
+++ b/src/main/java/net/minecraft/world/entity/ai/Brain.java
@@ -68,14 +68,14 @@ public class Brain<E extends LivingEntity> {
             }
 
             public <T> DataResult<Brain<E>> decode(DynamicOps<T> dynamicOps, MapLike<T> mapLike) {
-                MutableObject<DataResult<Builder<Brain.MemoryValue<?>>>> mutableObject = new MutableObject(DataResult.success(ImmutableList.builder()));
+                MutableObject<DataResult<Builder<Brain.MemoryValue<?>>>> mutableObjectIn = new MutableObject<>(DataResult.success(ImmutableList.builder()));
                 mapLike.entries().forEach((pair) -> {
                     DataResult<MemoryModuleType<?>> dataResult = Registry.MEMORY_MODULE_TYPE.byNameCodec().parse(dynamicOps, pair.getFirst());
                     DataResult<? extends Brain.MemoryValue<?>> dataResult2 = dataResult.flatMap((memoryModuleType) -> this.captureRead(memoryModuleType, dynamicOps, (T)pair.getSecond()));
-                    mutableObject.setValue((mutableObject.getValue()).apply2(Builder::add, dataResult2));
+                    mutableObjectIn.setValue((mutableObjectIn.getValue()).apply2(Builder::add, dataResult2));
                 });
-                ImmutableList<Brain.MemoryValue<?>> immutableList = (ImmutableList)(mutableObject.getValue()).resultOrPartial(Brain.LOGGER::error).map(Builder::build).orElseGet(ImmutableList::of);
-                return DataResult.success(new Brain(collection, collection2, immutableList, mutableObject::getValue));
+                ImmutableList<Brain.MemoryValue<?>> immutableList = mutableObjectIn.getValue().resultOrPartial(Brain.LOGGER::error).map(Builder::build).orElseGet(ImmutableList::of);
+                return DataResult.success(new Brain<>(collection, collection2, immutableList, mutableObject::getValue));
             }
 
             private <T, U> DataResult<Brain.MemoryValue<U>> captureRead(MemoryModuleType<U> memoryModuleType, DynamicOps<T> dynamicOps, T object) {
@@ -160,7 +160,7 @@ public class Brain<E extends LivingEntity> {
         if (optional == null) {
             throw new IllegalStateException("Unregistered memory fetched: " + memoryModuleType);
         } else {
-            return optional.map(ExpirableValue::getValue);
+            return (Optional<U>) optional.map(ExpirableValue::getValue);
         }
     }
 
@@ -325,7 +325,7 @@ public class Brain<E extends LivingEntity> {
         UnmodifiableIterator var5 = immutableList.iterator();
 
         while(var5.hasNext()) {
-            Pair<Integer, ? extends Behavior<? super E>> pair = var5.next();
+            Pair<Integer, ? extends Behavior<? super E>> pair = (Pair) var5.next();
             ((this.availableBehaviorsByPriority.computeIfAbsent((Integer)pair.getFirst(), (integer) -> Maps.newHashMap())).computeIfAbsent(activity, (activityx) -> Sets.newLinkedHashSet())).add((Behavior)pair.getSecond());
         }
 
@@ -434,7 +434,7 @@ public class Brain<E extends LivingEntity> {
     }
 
     private boolean isEmptyCollection(Object object) {
-        return object instanceof Collection && (object).isEmpty();
+        return object instanceof Collection && ((Collection) object).isEmpty();
     }
 
     ImmutableList<? extends Pair<Integer, ? extends Behavior<? super E>>> createPriorityPairs(int i, ImmutableList<? extends Behavior<? super E>> immutableList) {
@@ -455,7 +455,7 @@ public class Brain<E extends LivingEntity> {
         private final Optional<? extends ExpirableValue<U>> value;
 
         static <U> Brain.MemoryValue<U> createUnchecked(MemoryModuleType<U> memoryModuleType, Optional<? extends ExpirableValue<?>> optional) {
-            return new Brain.MemoryValue<>(memoryModuleType, optional);
+            return new Brain.MemoryValue(memoryModuleType, optional);
         }
 
         MemoryValue(MemoryModuleType<U> memoryModuleType, Optional<? extends ExpirableValue<U>> optional) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java b/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java
index 972ccd7f2cc63893f1f049c05e12f06575c54fb2..59e3a938ef3f389114aa0f4e3694760ff2b485f9 100644
--- a/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java
+++ b/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java
@@ -78,7 +78,7 @@ import org.slf4j.Logger;
 
 public class DefaultAttributes {
     private static final Logger LOGGER = LogUtils.getLogger();
-    private static final Map<EntityType<? extends LivingEntity>, AttributeSupplier> SUPPLIERS = ImmutableMap.builder().put(EntityType.ALLAY, Allay.createAttributes().build()).put(EntityType.ARMOR_STAND, LivingEntity.createLivingAttributes().build()).put(EntityType.AXOLOTL, Axolotl.createAttributes().build()).put(EntityType.BAT, Bat.createAttributes().build()).put(EntityType.BEE, Bee.createAttributes().build()).put(EntityType.BLAZE, Blaze.createAttributes().build()).put(EntityType.CAT, Cat.createAttributes().build()).put(EntityType.CAVE_SPIDER, CaveSpider.createCaveSpider().build()).put(EntityType.CHICKEN, Chicken.createAttributes().build()).put(EntityType.COD, AbstractFish.createAttributes().build()).put(EntityType.COW, Cow.createAttributes().build()).put(EntityType.CREEPER, Creeper.createAttributes().build()).put(EntityType.DOLPHIN, Dolphin.createAttributes().build()).put(EntityType.DONKEY, AbstractChestedHorse.createBaseChestedHorseAttributes().build()).put(EntityType.DROWNED, Zombie.createAttributes().build()).put(EntityType.ELDER_GUARDIAN, ElderGuardian.createAttributes().build()).put(EntityType.ENDERMAN, EnderMan.createAttributes().build()).put(EntityType.ENDERMITE, Endermite.createAttributes().build()).put(EntityType.ENDER_DRAGON, EnderDragon.createAttributes().build()).put(EntityType.EVOKER, Evoker.createAttributes().build()).put(EntityType.FOX, Fox.createAttributes().build()).put(EntityType.FROG, Frog.createAttributes().build()).put(EntityType.GHAST, Ghast.createAttributes().build()).put(EntityType.GIANT, Giant.createAttributes().build()).put(EntityType.GLOW_SQUID, GlowSquid.createAttributes().build()).put(EntityType.GOAT, Goat.createAttributes().build()).put(EntityType.GUARDIAN, Guardian.createAttributes().build()).put(EntityType.HOGLIN, Hoglin.createAttributes().build()).put(EntityType.HORSE, AbstractHorse.createBaseHorseAttributes().build()).put(EntityType.HUSK, Zombie.createAttributes().build()).put(EntityType.ILLUSIONER, Illusioner.createAttributes().build()).put(EntityType.IRON_GOLEM, IronGolem.createAttributes().build()).put(EntityType.LLAMA, Llama.createAttributes().build()).put(EntityType.MAGMA_CUBE, MagmaCube.createAttributes().build()).put(EntityType.MOOSHROOM, Cow.createAttributes().build()).put(EntityType.MULE, AbstractChestedHorse.createBaseChestedHorseAttributes().build()).put(EntityType.OCELOT, Ocelot.createAttributes().build()).put(EntityType.PANDA, Panda.createAttributes().build()).put(EntityType.PARROT, Parrot.createAttributes().build()).put(EntityType.PHANTOM, Monster.createMonsterAttributes().build()).put(EntityType.PIG, Pig.createAttributes().build()).put(EntityType.PIGLIN, Piglin.createAttributes().build()).put(EntityType.PIGLIN_BRUTE, PiglinBrute.createAttributes().build()).put(EntityType.PILLAGER, Pillager.createAttributes().build()).put(EntityType.PLAYER, Player.createAttributes().build()).put(EntityType.POLAR_BEAR, PolarBear.createAttributes().build()).put(EntityType.PUFFERFISH, AbstractFish.createAttributes().build()).put(EntityType.RABBIT, Rabbit.createAttributes().build()).put(EntityType.RAVAGER, Ravager.createAttributes().build()).put(EntityType.SALMON, AbstractFish.createAttributes().build()).put(EntityType.SHEEP, Sheep.createAttributes().build()).put(EntityType.SHULKER, Shulker.createAttributes().build()).put(EntityType.SILVERFISH, Silverfish.createAttributes().build()).put(EntityType.SKELETON, AbstractSkeleton.createAttributes().build()).put(EntityType.SKELETON_HORSE, SkeletonHorse.createAttributes().build()).put(EntityType.SLIME, Monster.createMonsterAttributes().build()).put(EntityType.SNOW_GOLEM, SnowGolem.createAttributes().build()).put(EntityType.SPIDER, Spider.createAttributes().build()).put(EntityType.SQUID, Squid.createAttributes().build()).put(EntityType.STRAY, AbstractSkeleton.createAttributes().build()).put(EntityType.STRIDER, Strider.createAttributes().build()).put(EntityType.TADPOLE, Tadpole.createAttributes().build()).put(EntityType.TRADER_LLAMA, Llama.createAttributes().build()).put(EntityType.TROPICAL_FISH, AbstractFish.createAttributes().build()).put(EntityType.TURTLE, Turtle.createAttributes().build()).put(EntityType.VEX, Vex.createAttributes().build()).put(EntityType.VILLAGER, Villager.createAttributes().build()).put(EntityType.VINDICATOR, Vindicator.createAttributes().build()).put(EntityType.WARDEN, Warden.createAttributes().build()).put(EntityType.WANDERING_TRADER, Mob.createMobAttributes().build()).put(EntityType.WITCH, Witch.createAttributes().build()).put(EntityType.WITHER, WitherBoss.createAttributes().build()).put(EntityType.WITHER_SKELETON, AbstractSkeleton.createAttributes().build()).put(EntityType.WOLF, Wolf.createAttributes().build()).put(EntityType.ZOGLIN, Zoglin.createAttributes().build()).put(EntityType.ZOMBIE, Zombie.createAttributes().build()).put(EntityType.ZOMBIE_HORSE, ZombieHorse.createAttributes().build()).put(EntityType.ZOMBIE_VILLAGER, Zombie.createAttributes().build()).put(EntityType.ZOMBIFIED_PIGLIN, ZombifiedPiglin.createAttributes().build()).build();
+    private static final Map<EntityType<? extends LivingEntity>, AttributeSupplier> SUPPLIERS = ImmutableMap.<EntityType<? extends LivingEntity>, AttributeSupplier>builder().put(EntityType.ALLAY, Allay.createAttributes().build()).put(EntityType.ARMOR_STAND, LivingEntity.createLivingAttributes().build()).put(EntityType.AXOLOTL, Axolotl.createAttributes().build()).put(EntityType.BAT, Bat.createAttributes().build()).put(EntityType.BEE, Bee.createAttributes().build()).put(EntityType.BLAZE, Blaze.createAttributes().build()).put(EntityType.CAT, Cat.createAttributes().build()).put(EntityType.CAVE_SPIDER, CaveSpider.createCaveSpider().build()).put(EntityType.CHICKEN, Chicken.createAttributes().build()).put(EntityType.COD, AbstractFish.createAttributes().build()).put(EntityType.COW, Cow.createAttributes().build()).put(EntityType.CREEPER, Creeper.createAttributes().build()).put(EntityType.DOLPHIN, Dolphin.createAttributes().build()).put(EntityType.DONKEY, AbstractChestedHorse.createBaseChestedHorseAttributes().build()).put(EntityType.DROWNED, Zombie.createAttributes().build()).put(EntityType.ELDER_GUARDIAN, ElderGuardian.createAttributes().build()).put(EntityType.ENDERMAN, EnderMan.createAttributes().build()).put(EntityType.ENDERMITE, Endermite.createAttributes().build()).put(EntityType.ENDER_DRAGON, EnderDragon.createAttributes().build()).put(EntityType.EVOKER, Evoker.createAttributes().build()).put(EntityType.FOX, Fox.createAttributes().build()).put(EntityType.FROG, Frog.createAttributes().build()).put(EntityType.GHAST, Ghast.createAttributes().build()).put(EntityType.GIANT, Giant.createAttributes().build()).put(EntityType.GLOW_SQUID, GlowSquid.createAttributes().build()).put(EntityType.GOAT, Goat.createAttributes().build()).put(EntityType.GUARDIAN, Guardian.createAttributes().build()).put(EntityType.HOGLIN, Hoglin.createAttributes().build()).put(EntityType.HORSE, AbstractHorse.createBaseHorseAttributes().build()).put(EntityType.HUSK, Zombie.createAttributes().build()).put(EntityType.ILLUSIONER, Illusioner.createAttributes().build()).put(EntityType.IRON_GOLEM, IronGolem.createAttributes().build()).put(EntityType.LLAMA, Llama.createAttributes().build()).put(EntityType.MAGMA_CUBE, MagmaCube.createAttributes().build()).put(EntityType.MOOSHROOM, Cow.createAttributes().build()).put(EntityType.MULE, AbstractChestedHorse.createBaseChestedHorseAttributes().build()).put(EntityType.OCELOT, Ocelot.createAttributes().build()).put(EntityType.PANDA, Panda.createAttributes().build()).put(EntityType.PARROT, Parrot.createAttributes().build()).put(EntityType.PHANTOM, Monster.createMonsterAttributes().build()).put(EntityType.PIG, Pig.createAttributes().build()).put(EntityType.PIGLIN, Piglin.createAttributes().build()).put(EntityType.PIGLIN_BRUTE, PiglinBrute.createAttributes().build()).put(EntityType.PILLAGER, Pillager.createAttributes().build()).put(EntityType.PLAYER, Player.createAttributes().build()).put(EntityType.POLAR_BEAR, PolarBear.createAttributes().build()).put(EntityType.PUFFERFISH, AbstractFish.createAttributes().build()).put(EntityType.RABBIT, Rabbit.createAttributes().build()).put(EntityType.RAVAGER, Ravager.createAttributes().build()).put(EntityType.SALMON, AbstractFish.createAttributes().build()).put(EntityType.SHEEP, Sheep.createAttributes().build()).put(EntityType.SHULKER, Shulker.createAttributes().build()).put(EntityType.SILVERFISH, Silverfish.createAttributes().build()).put(EntityType.SKELETON, AbstractSkeleton.createAttributes().build()).put(EntityType.SKELETON_HORSE, SkeletonHorse.createAttributes().build()).put(EntityType.SLIME, Monster.createMonsterAttributes().build()).put(EntityType.SNOW_GOLEM, SnowGolem.createAttributes().build()).put(EntityType.SPIDER, Spider.createAttributes().build()).put(EntityType.SQUID, Squid.createAttributes().build()).put(EntityType.STRAY, AbstractSkeleton.createAttributes().build()).put(EntityType.STRIDER, Strider.createAttributes().build()).put(EntityType.TADPOLE, Tadpole.createAttributes().build()).put(EntityType.TRADER_LLAMA, Llama.createAttributes().build()).put(EntityType.TROPICAL_FISH, AbstractFish.createAttributes().build()).put(EntityType.TURTLE, Turtle.createAttributes().build()).put(EntityType.VEX, Vex.createAttributes().build()).put(EntityType.VILLAGER, Villager.createAttributes().build()).put(EntityType.VINDICATOR, Vindicator.createAttributes().build()).put(EntityType.WARDEN, Warden.createAttributes().build()).put(EntityType.WANDERING_TRADER, Mob.createMobAttributes().build()).put(EntityType.WITCH, Witch.createAttributes().build()).put(EntityType.WITHER, WitherBoss.createAttributes().build()).put(EntityType.WITHER_SKELETON, AbstractSkeleton.createAttributes().build()).put(EntityType.WOLF, Wolf.createAttributes().build()).put(EntityType.ZOGLIN, Zoglin.createAttributes().build()).put(EntityType.ZOMBIE, Zombie.createAttributes().build()).put(EntityType.ZOMBIE_HORSE, ZombieHorse.createAttributes().build()).put(EntityType.ZOMBIE_VILLAGER, Zombie.createAttributes().build()).put(EntityType.ZOMBIFIED_PIGLIN, ZombifiedPiglin.createAttributes().build()).build();
 
     public static AttributeSupplier getSupplier(EntityType<? extends LivingEntity> entityType) {
         return (AttributeSupplier)SUPPLIERS.get(entityType);
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/BehaviorUtils.java b/src/main/java/net/minecraft/world/entity/ai/behavior/BehaviorUtils.java
index fcda662a14304eb9bd8da65547897663f63deacc..ee938f54ee057544d651441bf1b953db122598b8 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/BehaviorUtils.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/BehaviorUtils.java
@@ -141,15 +141,11 @@ public class BehaviorUtils {
     public static Optional<LivingEntity> getLivingEntityFromUUIDMemory(LivingEntity livingEntity, MemoryModuleType<UUID> memoryModuleType) {
         Optional<UUID> optional = livingEntity.getBrain().getMemory(memoryModuleType);
         return optional.map((uuid) -> ((ServerLevel)livingEntity.level).getEntity(uuid)).map((entity) -> {
-            LivingEntity var10000;
             if (entity instanceof LivingEntity) {
-                LivingEntity livingEntity = (LivingEntity)entity;
-                var10000 = livingEntity;
+                return (LivingEntity) entity;
             } else {
-                var10000 = null;
+                return null;
             }
-
-            return var10000;
         });
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/EntityTracker.java b/src/main/java/net/minecraft/world/entity/ai/behavior/EntityTracker.java
index c9ecbb36d36f7290706e37947c4efe5a7614c847..7bfcec6e1a71a8fe25392736081cb486ce580377 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/EntityTracker.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/EntityTracker.java
@@ -32,8 +32,8 @@ public class EntityTracker implements PositionTracker {
             if (!livingEntity2.isAlive()) {
                 return false;
             } else {
-                Optional<NearestVisibleLivingEntities> optional = livingEntity.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES);
-                return optional.isPresent() && ((NearestVisibleLivingEntities)optional.get()).contains(livingEntity2);
+                Optional<NearestVisibleLivingEntities> optionalIn = livingEntity.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES);
+                return optionalIn.isPresent() && ((NearestVisibleLivingEntities)optionalIn.get()).contains(livingEntity2);
             }
         } else {
             return true;
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWith.java b/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWith.java
index 8642044cacb367f3068241344c62a151938ab8c0..b41d1963ff3e6a7d3efe69c67ff37ac7656e6ec4 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWith.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWith.java
@@ -50,7 +50,7 @@ public class InteractWith<E extends LivingEntity, T extends LivingEntity> extend
     }
 
     private boolean isTargetValid(LivingEntity livingEntity) {
-        return this.type.equals(livingEntity.getType()) && this.targetFilter.test(livingEntity);
+        return this.type.equals(livingEntity.getType()) && this.targetFilter.test((T) livingEntity);
     }
 
     protected void start(ServerLevel serverLevel, E livingEntity, long l) {
@@ -67,6 +67,6 @@ public class InteractWith<E extends LivingEntity, T extends LivingEntity> extend
     }
 
     private boolean canInteract(E livingEntity, LivingEntity livingEntity2) {
-        return this.type.equals(livingEntity2.getType()) && livingEntity2.distanceToSqr(livingEntity) <= (double)this.interactionRangeSqr && this.targetFilter.test(livingEntity2);
+        return this.type.equals(livingEntity2.getType()) && livingEntity2.distanceToSqr(livingEntity) <= (double)this.interactionRangeSqr && this.targetFilter.test((T) livingEntity2);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java b/src/main/java/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
index 82ad20e68d35597d3a685ac419da701f85c3f3bb..317ad428ea2f7c9baa95b443fd8a931d02707a7d 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
@@ -54,13 +54,13 @@ public class SetClosestHomeAsWalkTarget extends Behavior<LivingEntity> {
         PathfinderMob pathfinderMob = (PathfinderMob)livingEntity;
         PoiManager poiManager = serverLevel.getPoiManager();
         Predicate<BlockPos> predicate = (blockPosx) -> {
-            long l = blockPosx.asLong();
-            if (this.batchCache.containsKey(l)) {
+            long pos = blockPosx.asLong();
+            if (this.batchCache.containsKey(pos)) {
                 return false;
             } else if (++this.triedCount >= 5) {
                 return false;
             } else {
-                this.batchCache.put(l, this.lastUpdate + 40L);
+                this.batchCache.put(pos, this.lastUpdate + 40L);
                 return true;
             }
         };
diff --git a/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java b/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
index fe0c4bf0d422f5c743c0344376169b3b0a1c8add..c7bfd2232750377bea4a0635edb79f6f02319f1f 100644
--- a/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
+++ b/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
@@ -90,9 +90,9 @@ public class GossipContainer {
     public void transferFrom(GossipContainer gossipContainer, RandomSource randomSource, int i) {
         Collection<GossipContainer.GossipEntry> collection = gossipContainer.selectGossipsForTransfer(randomSource, i);
         collection.forEach((gossipEntry) -> {
-            int i = gossipEntry.value - gossipEntry.type.decayPerTransfer;
-            if (i >= 2) {
-                this.getOrCreate(gossipEntry.target).entries.mergeInt(gossipEntry.type, i, GossipContainer::mergeValuesForTransfer);
+            int iIn = gossipEntry.value - gossipEntry.type.decayPerTransfer;
+            if (iIn >= 2) {
+                this.getOrCreate(gossipEntry.target).entries.mergeInt(gossipEntry.type, iIn, GossipContainer::mergeValuesForTransfer);
             }
 
         });
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java
index 3d9d3ff8dae4e73450df432844c3a2d8ed2748f2..e2c5665188966a2975004fd5a23d73c4bf3100de 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java
@@ -6,7 +6,7 @@ import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 
 public class VillagerHostilesSensor extends NearestVisibleLivingEntitySensor {
-    private static final ImmutableMap<EntityType<?>, Float> ACCEPTABLE_DISTANCE_FROM_HOSTILES = ImmutableMap.builder().put(EntityType.DROWNED, 8.0F).put(EntityType.EVOKER, 12.0F).put(EntityType.HUSK, 8.0F).put(EntityType.ILLUSIONER, 12.0F).put(EntityType.PILLAGER, 15.0F).put(EntityType.RAVAGER, 12.0F).put(EntityType.VEX, 8.0F).put(EntityType.VINDICATOR, 10.0F).put(EntityType.ZOGLIN, 10.0F).put(EntityType.ZOMBIE, 8.0F).put(EntityType.ZOMBIE_VILLAGER, 8.0F).build();
+    private static final ImmutableMap<EntityType<?>, Float> ACCEPTABLE_DISTANCE_FROM_HOSTILES = ImmutableMap.<EntityType<?>, Float>builder().put(EntityType.DROWNED, 8.0F).put(EntityType.EVOKER, 12.0F).put(EntityType.HUSK, 8.0F).put(EntityType.ILLUSIONER, 12.0F).put(EntityType.PILLAGER, 15.0F).put(EntityType.RAVAGER, 12.0F).put(EntityType.VEX, 8.0F).put(EntityType.VINDICATOR, 10.0F).put(EntityType.ZOGLIN, 10.0F).put(EntityType.ZOMBIE, 8.0F).put(EntityType.ZOMBIE_VILLAGER, 8.0F).build();
 
     protected boolean isMatchingEntity(LivingEntity livingEntity, LivingEntity livingEntity2) {
         return this.isHostile(livingEntity2) && this.isClose(livingEntity, livingEntity2);
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
index cc6f6dd5276fb143303f05647ad06036bdc892be..9fef3ea183afb7738c90c6e1d1d8f6b1ed3ada59 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
@@ -31,7 +31,7 @@ public class PoiSection {
     private boolean isValid;
 
     public static Codec<PoiSection> codec(Runnable runnable) {
-        return RecordCodecBuilder.create((instance) -> instance.group(RecordCodecBuilder.point(runnable), Codec.BOOL.optionalFieldOf("Valid", false).forGetter((poiSection) -> poiSection.isValid), PoiRecord.codec(runnable).listOf().fieldOf("Records").forGetter((poiSection) -> ImmutableList.copyOf(poiSection.records.values()))).apply(instance, PoiSection::new)).orElseGet(Util.prefix("Failed to read POI section: ", LOGGER::error), () -> new PoiSection(runnable, false, ImmutableList.of()));
+        return RecordCodecBuilder.<PoiSection>create((instance) -> instance.group(RecordCodecBuilder.point(runnable), Codec.BOOL.optionalFieldOf("Valid", false).forGetter((poiSection) -> poiSection.isValid), PoiRecord.codec(runnable).listOf().fieldOf("Records").forGetter((poiSection) -> ImmutableList.copyOf(poiSection.records.values()))).apply(instance, PoiSection::new)).orElseGet(Util.prefix("Failed to read POI section: ", LOGGER::error), () -> new PoiSection(runnable, false, ImmutableList.of()));
     }
 
     public PoiSection(Runnable runnable) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiType.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiType.java
index c9093f7dff8551c7f8069e18d1bfbcfa9207fa37..321ebbefe99b5a631ef3cb6044dc3b22c80242fd 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiType.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiType.java
@@ -5,29 +5,14 @@ import java.util.function.Predicate;
 import net.minecraft.core.Holder;
 import net.minecraft.world.level.block.state.BlockState;
 
-public record PoiType(Set<BlockState> b, int c, int d) {
-    private final Set<BlockState> matchingStates;
-    private final int maxTickets;
-    private final int validRange;
+public record PoiType(Set<BlockState> matchingStates, int maxTickets, int validRange) {
     public static final Predicate<Holder<PoiType>> NONE = (holder) -> false;
 
     public PoiType {
-        set = Set.copyOf(set);
+        matchingStates = Set.copyOf(matchingStates);
     }
 
     public boolean is(BlockState blockState) {
         return this.matchingStates.contains(blockState);
     }
-
-    public Set<BlockState> matchingStates() {
-        return this.matchingStates;
-    }
-
-    public int maxTickets() {
-        return this.maxTickets;
-    }
-
-    public int validRange() {
-        return this.validRange;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java b/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
index 4f2768f40bff55acc05068a2a8c4243516f4b8f0..3dd2b31e3f31b01d58260169144b02fdb463373e 100644
--- a/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
@@ -85,7 +85,7 @@ public abstract class AbstractFish extends WaterAnimal implements Bucketable {
     protected void registerGoals() {
         super.registerGoals();
         this.goalSelector.addGoal(0, new PanicGoal(this, 1.25D));
-        this.goalSelector.addGoal(2, new AvoidEntityGoal(this, Player.class, 8.0F, 1.6D, 1.4D, EntitySelector.NO_SPECTATORS::test));
+        this.goalSelector.addGoal(2, new AvoidEntityGoal<>(this, Player.class, 8.0F, 1.6D, 1.4D, EntitySelector.NO_SPECTATORS::test));
         this.goalSelector.addGoal(4, new AbstractFish.FishSwimGoal(this));
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/CatVariant.java b/src/main/java/net/minecraft/world/entity/animal/CatVariant.java
index ba2df151a1ffe5781a1d175ae5d6e5a41a0634b5..56f1ef7b3af187a9b5b329227b239681cb0fbdf5 100644
--- a/src/main/java/net/minecraft/world/entity/animal/CatVariant.java
+++ b/src/main/java/net/minecraft/world/entity/animal/CatVariant.java
@@ -3,8 +3,7 @@ package net.minecraft.world.entity.animal;
 import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceLocation;
 
-public record CatVariant(ResourceLocation l) {
-    private final ResourceLocation texture;
+public record CatVariant(ResourceLocation texture) {
     public static final CatVariant TABBY = register("tabby", "textures/entity/cat/tabby.png");
     public static final CatVariant BLACK = register("black", "textures/entity/cat/black.png");
     public static final CatVariant RED = register("red", "textures/entity/cat/red.png");
@@ -20,8 +19,4 @@ public record CatVariant(ResourceLocation l) {
     private static CatVariant register(String s, String s2) {
         return Registry.register(Registry.CAT_VARIANT, s, new CatVariant(new ResourceLocation(s2)));
     }
-
-    public ResourceLocation texture() {
-        return this.texture;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/animal/Fox.java b/src/main/java/net/minecraft/world/entity/animal/Fox.java
index 416a9eb5f68c4b4d639c5335660b66a72c14f313..0693e35b51a2fd72bf1a1d54213696a266a1d0b6 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Fox.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Fox.java
@@ -148,9 +148,9 @@ public class Fox extends Animal {
         this.goalSelector.addGoal(1, new Fox.FaceplantGoal());
         this.goalSelector.addGoal(2, new Fox.FoxPanicGoal(2.2D));
         this.goalSelector.addGoal(3, new Fox.FoxBreedGoal(1.0D));
-        this.goalSelector.addGoal(4, new AvoidEntityGoal(this, Player.class, 16.0F, 1.6D, 1.4D, (livingEntity) -> AVOID_PLAYERS.test(livingEntity) && !this.trusts(livingEntity.getUUID()) && !this.isDefending()));
-        this.goalSelector.addGoal(4, new AvoidEntityGoal(this, Wolf.class, 8.0F, 1.6D, 1.4D, (livingEntity) -> !((Wolf)livingEntity).isTame() && !this.isDefending()));
-        this.goalSelector.addGoal(4, new AvoidEntityGoal(this, PolarBear.class, 8.0F, 1.6D, 1.4D, (livingEntity) -> !this.isDefending()));
+        this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, Player.class, 16.0F, 1.6D, 1.4D, (livingEntity) -> AVOID_PLAYERS.test(livingEntity) && !this.trusts(livingEntity.getUUID()) && !this.isDefending()));
+        this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, Wolf.class, 8.0F, 1.6D, 1.4D, (livingEntity) -> !((Wolf)livingEntity).isTame() && !this.isDefending()));
+        this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, PolarBear.class, 8.0F, 1.6D, 1.4D, (livingEntity) -> !this.isDefending()));
         this.goalSelector.addGoal(5, new Fox.StalkPreyGoal());
         this.goalSelector.addGoal(6, new Fox.FoxPounceGoal());
         this.goalSelector.addGoal(6, new Fox.SeekShelterGoal(1.25D));
diff --git a/src/main/java/net/minecraft/world/entity/animal/FrogVariant.java b/src/main/java/net/minecraft/world/entity/animal/FrogVariant.java
index 6330f2f3da74474e9e8ab223a848d90570425dbe..21bd309d6169e1a10e54827c6e1643d77b9fd07c 100644
--- a/src/main/java/net/minecraft/world/entity/animal/FrogVariant.java
+++ b/src/main/java/net/minecraft/world/entity/animal/FrogVariant.java
@@ -3,8 +3,7 @@ package net.minecraft.world.entity.animal;
 import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceLocation;
 
-public record FrogVariant(ResourceLocation d) {
-    private final ResourceLocation texture;
+public record FrogVariant(ResourceLocation texture) {
     public static final FrogVariant TEMPERATE = register("temperate", "textures/entity/frog/temperate_frog.png");
     public static final FrogVariant WARM = register("warm", "textures/entity/frog/warm_frog.png");
     public static final FrogVariant COLD = register("cold", "textures/entity/frog/cold_frog.png");
@@ -12,8 +11,4 @@ public record FrogVariant(ResourceLocation d) {
     private static FrogVariant register(String s, String s2) {
         return Registry.register(Registry.FROG_VARIANT, s, new FrogVariant(new ResourceLocation(s2)));
     }
-
-    public ResourceLocation texture() {
-        return this.texture;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/animal/Sheep.java b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
index 0b5e59cddc16723b6ae20a971a81fa7fd1743e7d..2c7737429ff88d6d6ba860ef6352f70dee615ee8 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Sheep.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
@@ -81,7 +81,7 @@ public class Sheep extends Animal implements Shearable {
         enumMap.put(DyeColor.RED, Blocks.RED_WOOL);
         enumMap.put(DyeColor.BLACK, Blocks.BLACK_WOOL);
     });
-    private static final Map<DyeColor, float[]> COLORARRAY_BY_COLOR = Maps.newEnumMap(Arrays.stream(DyeColor.values()).collect(Collectors.toMap((dyeColor) -> dyeColor, Sheep::createSheepColor)));
+    private static final Map<DyeColor, float[]> COLORARRAY_BY_COLOR = Maps.<DyeColor, float[]>newEnumMap(Arrays.stream(DyeColor.values()).collect(Collectors.toMap((dyeColor) -> dyeColor, Sheep::createSheepColor)));
     private int eatAnimationTick;
     private EatBlockGoal eatBlockGoal;
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
index cef1c0987618e1f483cb3a5613e7a18ada162ce4..7053c0f67e49c2d93ea1f40986dbecf8763765d1 100644
--- a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
+++ b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
@@ -89,7 +89,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationL
     }
 
     public Brain<Allay> getBrain() {
-        return super.getBrain();
+        return (Brain<Allay>) super.getBrain();
     }
 
     public static AttributeSupplier.Builder createAttributes() {
@@ -133,9 +133,8 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationL
     }
 
     public boolean hurt(DamageSource damageSource, float f) {
-        Entity optional = damageSource.getEntity();
-        if (optional instanceof Player) {
-            Player player = (Player)optional;
+        Entity entity = damageSource.getEntity();
+        if (entity instanceof Player player) {
             Optional<UUID> optional = this.getBrain().getMemory(MemoryModuleType.LIKED_PLAYER);
             if (optional.isPresent() && player.getUUID().equals(optional.get())) {
                 return false;
@@ -339,7 +338,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationL
         super.readAdditionalSaveData(compoundTag);
         this.inventory.fromTag(compoundTag.getList("Inventory", 10));
         if (compoundTag.contains("listener", 10)) {
-            VibrationListener.codec(this).parse(new Dynamic(NbtOps.INSTANCE, compoundTag.getCompound("listener"))).resultOrPartial(LOGGER::error).ifPresent((vibrationListener) -> this.dynamicGameEventListener.updateListener(vibrationListener, this.level));
+            VibrationListener.codec(this).parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.getCompound("listener"))).resultOrPartial(LOGGER::error).ifPresent((vibrationListener) -> this.dynamicGameEventListener.updateListener(vibrationListener, this.level));
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/allay/AllayAi.java b/src/main/java/net/minecraft/world/entity/animal/allay/AllayAi.java
index ebd005ffc9994464e2f3a3c612abb3cb0a986b24..06d220c3164181f123dc3def9df8eaa62fde1daf 100644
--- a/src/main/java/net/minecraft/world/entity/animal/allay/AllayAi.java
+++ b/src/main/java/net/minecraft/world/entity/animal/allay/AllayAi.java
@@ -62,7 +62,7 @@ public class AllayAi {
     }
 
     private static void initIdleActivity(Brain<Allay> brain) {
-        brain.addActivityWithConditions(Activity.IDLE, ImmutableList.of(Pair.of(0, new GoToWantedItem<>((allay) -> true, 1.75F, true, 32)), Pair.of(1, new GoAndGiveItemsToTarget(AllayAi::getItemDepositPosition, 2.25F)), Pair.of(2, new StayCloseToTarget(AllayAi::getItemDepositPosition, 4, 16, 2.25F)), Pair.of(3, new RunSometimes<>(new SetEntityLookTarget((livingEntity) -> true, 6.0F), UniformInt.of(30, 60))), Pair.of(4, new RunOne<>(ImmutableList.of(Pair.of(new FlyingRandomStroll(1.0F), 2), Pair.of(new SetWalkTargetFromLookTarget(1.0F, 3), 2), Pair.of(new DoNothing(30, 60), 1))))), ImmutableSet.of());
+        brain.addActivityWithConditions(Activity.IDLE, ImmutableList.of(Pair.of(0, new GoToWantedItem<>((allay) -> true, 1.75F, true, 32)), Pair.of(1, new GoAndGiveItemsToTarget<>(AllayAi::getItemDepositPosition, 2.25F)), Pair.of(2, new StayCloseToTarget<>(AllayAi::getItemDepositPosition, 4, 16, 2.25F)), Pair.of(3, new RunSometimes<>(new SetEntityLookTarget((livingEntity) -> true, 6.0F), UniformInt.of(30, 60))), Pair.of(4, new RunOne<>(ImmutableList.of(Pair.of(new FlyingRandomStroll(1.0F), 2), Pair.of(new SetWalkTargetFromLookTarget(1.0F, 3), 2), Pair.of(new DoNothing(30, 60), 1))))), ImmutableSet.of());
     }
 
     public static void updateActivity(Allay allay) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
index 242c12d62f96671b7559ccd6db8ae372de0f754c..15ebae9746505193a9a292d865fcfecc14fe3235 100644
--- a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
+++ b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
@@ -68,7 +68,7 @@ public class Axolotl extends Animal implements LerpingModel, Bucketable {
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final int TOTAL_PLAYDEAD_TIME = 200;
     protected static final ImmutableList<? extends SensorType<? extends Sensor<? super Axolotl>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_ADULT, SensorType.HURT_BY, SensorType.AXOLOTL_ATTACKABLES, SensorType.AXOLOTL_TEMPTATIONS);
-    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT, new MemoryModuleType[]{MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.PLAY_DEAD_TICKS, MemoryModuleType.NEAREST_ATTACKABLE, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.HAS_HUNTING_COOLDOWN, MemoryModuleType.IS_PANICKING});
+    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.<MemoryModuleType<?>>of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT, new MemoryModuleType[]{MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.PLAY_DEAD_TICKS, MemoryModuleType.NEAREST_ATTACKABLE, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.HAS_HUNTING_COOLDOWN, MemoryModuleType.IS_PANICKING});
     private static final EntityDataAccessor<Integer> DATA_VARIANT = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Boolean> DATA_PLAYING_DEAD = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> FROM_BUCKET = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.BOOLEAN);
@@ -414,7 +414,7 @@ public class Axolotl extends Animal implements LerpingModel, Bucketable {
     }
 
     public Brain<Axolotl> getBrain() {
-        return super.getBrain();
+        return (Brain<Axolotl>) super.getBrain();
     }
 
     protected void sendDebugPackets() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java b/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java
index 87b0e497dd1125001302fe507824cd669a23de03..bd8fbc36afd1ba994197a52a26a0737cf44b8640 100644
--- a/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java
+++ b/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java
@@ -102,7 +102,7 @@ public class Frog extends Animal {
     }
 
     public Brain<Frog> getBrain() {
-        return super.getBrain();
+        return (Brain<Frog>) super.getBrain();
     }
 
     protected void defineSynchedData() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/frog/FrogAi.java b/src/main/java/net/minecraft/world/entity/animal/frog/FrogAi.java
index 44a341956020c2dbd588791b67e45144512ab233..ca69b8bffb7869f09e4ab130c7d5ebaa8320584f 100644
--- a/src/main/java/net/minecraft/world/entity/animal/frog/FrogAi.java
+++ b/src/main/java/net/minecraft/world/entity/animal/frog/FrogAi.java
@@ -79,7 +79,7 @@ public class FrogAi {
     }
 
     private static void initSwimActivity(Brain<Frog> brain) {
-        brain.addActivityWithConditions(Activity.SWIM, ImmutableList.of(Pair.of(0, new RunSometimes<>(new SetEntityLookTarget(EntityType.PLAYER, 6.0F), UniformInt.of(30, 60))), Pair.of(1, new FollowTemptation((livingEntity) -> 1.25F)), Pair.of(2, new StartAttacking<>(FrogAi::canAttack, (frog) -> frog.getBrain().getMemory(MemoryModuleType.NEAREST_ATTACKABLE))), Pair.of(3, new TryFindLand(8, 1.5F)), Pair.of(5, new GateBehavior(ImmutableMap.of(MemoryModuleType.WALK_TARGET, MemoryStatus.VALUE_ABSENT), ImmutableSet.of(), GateBehavior.OrderPolicy.ORDERED, GateBehavior.RunningPolicy.TRY_ALL, ImmutableList.of(Pair.of(new RandomSwim(0.75F), 1), Pair.of(new RandomStroll(1.0F, true), 1), Pair.of(new SetWalkTargetFromLookTarget(1.0F, 3), 1), Pair.of(new RunIf<>(Entity::isInWaterOrBubble, new DoNothing(30, 60)), 5))))), ImmutableSet.of(Pair.of(MemoryModuleType.LONG_JUMP_MID_JUMP, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.IS_IN_WATER, MemoryStatus.VALUE_PRESENT)));
+        brain.addActivityWithConditions(Activity.SWIM, ImmutableList.of(Pair.of(0, new RunSometimes<>(new SetEntityLookTarget(EntityType.PLAYER, 6.0F), UniformInt.of(30, 60))), Pair.of(1, new FollowTemptation((livingEntity) -> 1.25F)), Pair.of(2, new StartAttacking<>(FrogAi::canAttack, (frog) -> frog.getBrain().getMemory(MemoryModuleType.NEAREST_ATTACKABLE))), Pair.of(3, new TryFindLand(8, 1.5F)), Pair.of(5, new GateBehavior<>(ImmutableMap.of(MemoryModuleType.WALK_TARGET, MemoryStatus.VALUE_ABSENT), ImmutableSet.of(), GateBehavior.OrderPolicy.ORDERED, GateBehavior.RunningPolicy.TRY_ALL, ImmutableList.of(Pair.of(new RandomSwim(0.75F), 1), Pair.of(new RandomStroll(1.0F, true), 1), Pair.of(new SetWalkTargetFromLookTarget(1.0F, 3), 1), Pair.of(new RunIf<>(Entity::isInWaterOrBubble, new DoNothing(30, 60)), 5))))), ImmutableSet.of(Pair.of(MemoryModuleType.LONG_JUMP_MID_JUMP, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.IS_IN_WATER, MemoryStatus.VALUE_PRESENT)));
     }
 
     private static void initLaySpawnActivity(Brain<Frog> brain) {
@@ -87,7 +87,7 @@ public class FrogAi {
     }
 
     private static void initJumpActivity(Brain<Frog> brain) {
-        brain.addActivityWithConditions(Activity.LONG_JUMP, ImmutableList.of(Pair.of(0, new LongJumpMidJump(TIME_BETWEEN_LONG_JUMPS, SoundEvents.FROG_STEP)), Pair.of(1, new LongJumpToPreferredBlock(TIME_BETWEEN_LONG_JUMPS, 2, 4, 1.5F, (frog) -> SoundEvents.FROG_LONG_JUMP, BlockTags.FROG_PREFER_JUMP_TO, 0.5F, (blockState) -> blockState.is(Blocks.LILY_PAD)))), ImmutableSet.of(Pair.of(MemoryModuleType.TEMPTING_PLAYER, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.BREED_TARGET, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.LONG_JUMP_COOLDOWN_TICKS, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.IS_IN_WATER, MemoryStatus.VALUE_ABSENT)));
+        brain.addActivityWithConditions(Activity.LONG_JUMP, ImmutableList.of(Pair.of(0, new LongJumpMidJump(TIME_BETWEEN_LONG_JUMPS, SoundEvents.FROG_STEP)), Pair.of(1, new LongJumpToPreferredBlock<>(TIME_BETWEEN_LONG_JUMPS, 2, 4, 1.5F, (frog) -> SoundEvents.FROG_LONG_JUMP, BlockTags.FROG_PREFER_JUMP_TO, 0.5F, (blockState) -> blockState.is(Blocks.LILY_PAD)))), ImmutableSet.of(Pair.of(MemoryModuleType.TEMPTING_PLAYER, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.BREED_TARGET, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.LONG_JUMP_COOLDOWN_TICKS, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.IS_IN_WATER, MemoryStatus.VALUE_ABSENT)));
     }
 
     private static void initTongueActivity(Brain<Frog> brain) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java b/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
index 0600b7be17be52108c65d2171312bc6327d4a478..a8698460e52bc8f85137c3144ec213e0a6dcffc0 100644
--- a/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
+++ b/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
@@ -63,7 +63,7 @@ public class Tadpole extends AbstractFish {
     }
 
     public Brain<Tadpole> getBrain() {
-        return super.getBrain();
+        return (Brain<Tadpole>) super.getBrain();
     }
 
     protected SoundEvent getFlopSound() {
@@ -195,9 +195,7 @@ public class Tadpole extends AbstractFish {
     }
 
     private void ageUp() {
-        Level frog = this.level;
-        if (frog instanceof ServerLevel) {
-            ServerLevel serverLevel = (ServerLevel)frog;
+        if (this.level instanceof ServerLevel serverLevel) {
             Frog frog = EntityType.FROG.create(this.level);
             frog.moveTo(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
             frog.finalizeSpawn(serverLevel, this.level.getCurrentDifficultyAt(frog.blockPosition()), MobSpawnType.CONVERSION, (SpawnGroupData)null, (CompoundTag)null);
diff --git a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
index 6d59aa8ff96613205dd08c258f544a0770ff7981..9b5155efc488e5208eab8540e54e89cc140a1313 100644
--- a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
@@ -141,7 +141,7 @@ public class Goat extends Animal {
     }
 
     public Brain<Goat> getBrain() {
-        return super.getBrain();
+        return (Brain<Goat>) super.getBrain();
     }
 
     protected void customServerAiStep() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/goat/GoatAi.java b/src/main/java/net/minecraft/world/entity/animal/goat/GoatAi.java
index cd85fab8723ad910e3c092c49efd641d2206f344..6a1b98b98d2db135aad0af71eeecf8d5638836b6 100644
--- a/src/main/java/net/minecraft/world/entity/animal/goat/GoatAi.java
+++ b/src/main/java/net/minecraft/world/entity/animal/goat/GoatAi.java
@@ -84,7 +84,7 @@ public class GoatAi {
     }
 
     private static void initRamActivity(Brain<Goat> brain) {
-        brain.addActivityWithConditions(Activity.RAM, ImmutableList.of(Pair.of(0, new RamTarget<>((goat) -> goat.isScreamingGoat() ? TIME_BETWEEN_RAMS_SCREAMER : TIME_BETWEEN_RAMS, RAM_TARGET_CONDITIONS, 3.0F, (goat) -> goat.isBaby() ? 1.0D : 2.5D, (goat) -> goat.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_RAM_IMPACT : SoundEvents.GOAT_RAM_IMPACT, (goat) -> goat.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_HORN_BREAK : SoundEvents.GOAT_HORN_BREAK)), Pair.of(1, new PrepareRamNearestTarget<>((goat) -> goat.isScreamingGoat() ? TIME_BETWEEN_RAMS_SCREAMER.getMinValue() : TIME_BETWEEN_RAMS.getMinValue(), 4, 7, 1.25F, RAM_TARGET_CONDITIONS, 20, (goat) -> goat.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_PREPARE_RAM : SoundEvents.GOAT_PREPARE_RAM))), ImmutableSet.of(Pair.of(MemoryModuleType.TEMPTING_PLAYER, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.BREED_TARGET, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.RAM_COOLDOWN_TICKS, MemoryStatus.VALUE_ABSENT)));
+        brain.addActivityWithConditions(Activity.RAM, ImmutableList.of(Pair.of(0, new RamTarget((goat) -> goat.isScreamingGoat() ? TIME_BETWEEN_RAMS_SCREAMER : TIME_BETWEEN_RAMS, RAM_TARGET_CONDITIONS, 3.0F, (goat) -> goat.isBaby() ? 1.0D : 2.5D, (goat) -> goat.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_RAM_IMPACT : SoundEvents.GOAT_RAM_IMPACT, (goat) -> goat.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_HORN_BREAK : SoundEvents.GOAT_HORN_BREAK)), Pair.of(1, new PrepareRamNearestTarget<>((goat) -> goat.isScreamingGoat() ? TIME_BETWEEN_RAMS_SCREAMER.getMinValue() : TIME_BETWEEN_RAMS.getMinValue(), 4, 7, 1.25F, RAM_TARGET_CONDITIONS, 20, (goat) -> goat.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_PREPARE_RAM : SoundEvents.GOAT_PREPARE_RAM))), ImmutableSet.of(Pair.of(MemoryModuleType.TEMPTING_PLAYER, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.BREED_TARGET, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.RAM_COOLDOWN_TICKS, MemoryStatus.VALUE_ABSENT)));
     }
 
     public static void updateActivity(Goat goat) {
diff --git a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
index 72720f5507f7a825453168f9919ef93879c52164..86914d46ef4ded48a77282b32143c45788e4b267 100644
--- a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -482,11 +482,11 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
     }
 
     public int getAlternativeTarget(int i) {
-        return this.entityData.get((EntityDataAccessor)DATA_TARGETS.get(i));
+        return this.entityData.get(DATA_TARGETS.get(i));
     }
 
     public void setAlternativeTarget(int i, int i2) {
-        this.entityData.set((EntityDataAccessor)DATA_TARGETS.get(i), i2);
+        this.entityData.set(DATA_TARGETS.get(i), i2);
     }
 
     public boolean isPowered() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Phantom.java b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
index 41b9500201466fb7040a0c477bc82fe3dbe219f5..06f662d9bb8b9927eef3e821f5e3df0baa21c947 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Phantom.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
@@ -218,7 +218,7 @@ public class Phantom extends FlyingMob implements Enemy {
                 this.nextScanTick = reducedTickDelay(60);
                 List<Player> list = Phantom.this.level.getNearbyPlayers(this.attackTargeting, Phantom.this, Phantom.this.getBoundingBox().inflate(16.0D, 64.0D, 16.0D));
                 if (!list.isEmpty()) {
-                    list.sort(Comparator.comparing(Entity::getY).reversed());
+                    list.sort(Comparator.<Entity, Double>comparing(Entity::getY).reversed());
 
                     for(Player player : list) {
                         if (Phantom.this.canAttack(player, TargetingConditions.DEFAULT)) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Slime.java b/src/main/java/net/minecraft/world/entity/monster/Slime.java
index f7bbe256d062bdd31400e1f9bb44b1f6f129ad40..71acf9cb9db58445895133ea3b410e0db7f1cb12 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Slime.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Slime.java
@@ -169,7 +169,7 @@ public class Slime extends Mob implements Enemy {
     }
 
     public EntityType<? extends Slime> getType() {
-        return super.getType();
+        return (EntityType<? extends Slime>) super.getType();
     }
 
     public void remove(Entity.RemovalReason removalReason) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zoglin.java b/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
index 37f628bb5fed5f4afa8f9e415a86bd2a90380194..5d6671325f009d2abccae4e5647e89b946fbe7e3 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
@@ -173,7 +173,7 @@ public class Zoglin extends Monster implements Enemy, HoglinBase {
     }
 
     public Brain<Zoglin> getBrain() {
-        return super.getBrain();
+        return (Brain<Zoglin>) super.getBrain();
     }
 
     protected void updateActivity() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
index 2478d7e9f8987a6dffb261b4218fffd54078818d..d1496d17285a0f1ccac6059d8b566665ba8dd3b4 100644
--- a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
@@ -60,7 +60,7 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
     private int timeInOverworld;
     private boolean cannotBeHunted;
     protected static final ImmutableList<? extends SensorType<? extends Sensor<? super Hoglin>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ADULT, SensorType.HOGLIN_SPECIFIC_SENSOR);
-    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, new MemoryModuleType[]{MemoryModuleType.AVOID_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.NEAREST_REPELLENT, MemoryModuleType.PACIFIED});
+    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.<MemoryModuleType<?>>of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, new MemoryModuleType[]{MemoryModuleType.AVOID_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.NEAREST_REPELLENT, MemoryModuleType.PACIFIED});
 
     public Hoglin(EntityType<? extends Hoglin> entityType, Level level) {
         super(entityType, level);
@@ -116,7 +116,7 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
     }
 
     public Brain<Hoglin> getBrain() {
-        return super.getBrain();
+        return (Brain<Hoglin>) super.getBrain();
     }
 
     protected void customServerAiStep() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
index 556df241789a0150e11f85374e222c43011138c3..42eef0b418a20bf6676db26365166f25df572038 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -191,7 +191,7 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
     }
 
     public Brain<Piglin> getBrain() {
-        return super.getBrain();
+        return (Brain<Piglin>) super.getBrain();
     }
 
     public InteractionResult mobInteract(Player player, InteractionHand interactionHand) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
index b40df0bd4de136d9899d6f497389d7bfb1407d6a..ce20a350666e2e49940a75ddc6d4094f642c9fac 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
@@ -140,11 +140,11 @@ public class PiglinAi {
     }
 
     private static void initCelebrateActivity(Brain<Piglin> brain) {
-        brain.addActivityAndRemoveMemoryWhenStopped(Activity.CELEBRATE, 10, ImmutableList.of(avoidRepellent(), new SetEntityLookTarget(PiglinAi::isPlayerHoldingLovedItem, 14.0F), new StartAttacking<>(AbstractPiglin::isAdult, PiglinAi::findNearestValidAttackTarget), new RunIf<>(((piglin) -> !piglin.isDancing()), new GoToTargetLocation(MemoryModuleType.CELEBRATE_LOCATION, 2, 1.0F)), new RunIf<>(Piglin::isDancing, new GoToTargetLocation(MemoryModuleType.CELEBRATE_LOCATION, 4, 0.6F)), new RunOne<>(ImmutableList.of(Pair.of(new SetEntityLookTarget(EntityType.PIGLIN, 8.0F), 1), Pair.of(new RandomStroll(0.6F, 2, 1), 1), Pair.of(new DoNothing(10, 20), 1)))), MemoryModuleType.CELEBRATE_LOCATION);
+        brain.addActivityAndRemoveMemoryWhenStopped(Activity.CELEBRATE, 10, ImmutableList.of(avoidRepellent(), new SetEntityLookTarget(PiglinAi::isPlayerHoldingLovedItem, 14.0F), new StartAttacking<>(AbstractPiglin::isAdult, PiglinAi::findNearestValidAttackTarget), new RunIf<>(((piglin) -> !piglin.isDancing()), new GoToTargetLocation<>(MemoryModuleType.CELEBRATE_LOCATION, 2, 1.0F)), new RunIf<>(Piglin::isDancing, new GoToTargetLocation<>(MemoryModuleType.CELEBRATE_LOCATION, 4, 0.6F)), new RunOne<>(ImmutableList.of(Pair.of(new SetEntityLookTarget(EntityType.PIGLIN, 8.0F), 1), Pair.of(new RandomStroll(0.6F, 2, 1), 1), Pair.of(new DoNothing(10, 20), 1)))), MemoryModuleType.CELEBRATE_LOCATION);
     }
 
     private static void initAdmireItemActivity(Brain<Piglin> brain) {
-        brain.addActivityAndRemoveMemoryWhenStopped(Activity.ADMIRE_ITEM, 10, ImmutableList.of(new GoToWantedItem<>(PiglinAi::isNotHoldingLovedItemInOffHand, 1.0F, true, 9), new StopAdmiringIfItemTooFarAway(9), new StopAdmiringIfTiredOfTryingToReachItem<>(200, 200)), MemoryModuleType.ADMIRING_ITEM);
+        brain.addActivityAndRemoveMemoryWhenStopped(Activity.ADMIRE_ITEM, 10, ImmutableList.<net.minecraft.world.entity.ai.behavior.Behavior<Piglin>>of(new GoToWantedItem<>(PiglinAi::isNotHoldingLovedItemInOffHand, 1.0F, true, 9), new StopAdmiringIfItemTooFarAway<>(9), new StopAdmiringIfTiredOfTryingToReachItem<>(200, 200)), MemoryModuleType.ADMIRING_ITEM);
     }
 
     private static void initRetreatActivity(Brain<Piglin> brain) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
index c28b04482190a07c62a19c8e31872882379b252a..e4da09943256745b7d11ad5c51f3f1169dcced11 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
@@ -65,7 +65,7 @@ public class PiglinBrute extends AbstractPiglin {
     }
 
     public Brain<PiglinBrute> getBrain() {
-        return super.getBrain();
+        return (Brain<PiglinBrute>) super.getBrain();
     }
 
     public boolean canHunt() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java b/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java
index ecdb96e8023d01ec1f04d9dafa9ae5db2ec9b640..5744aa264a2219d39bfa610f5629f986f5f87589 100644
--- a/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java
+++ b/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java
@@ -59,7 +59,7 @@ public class AngerManagement {
     }
 
     private List<Pair<UUID, Integer>> createUuidAngerPairs() {
-        return Streams.concat(new Stream[]{this.suspects.stream().map((entity) -> Pair.of(entity.getUUID(), this.angerBySuspect.getInt(entity))), this.angerByUuid.object2IntEntrySet().stream().map((entry) -> Pair.of((UUID)entry.getKey(), entry.getIntValue()))}).collect(Collectors.toList());
+        return (List) Streams.concat(new Stream[]{this.suspects.stream().map((entity) -> Pair.of(entity.getUUID(), this.angerBySuspect.getInt(entity))), this.angerByUuid.object2IntEntrySet().stream().map((entry) -> Pair.of((UUID)entry.getKey(), entry.getIntValue()))}).collect(Collectors.toList());
     }
 
     public void tick(ServerLevel serverLevel, Predicate<Entity> predicate) {
@@ -166,9 +166,7 @@ public class AngerManagement {
     }
 
     @VisibleForTesting
-    protected static record Sorter(AngerManagement a) implements Comparator<Entity> {
-        private final AngerManagement angerManagement;
-
+    protected static record Sorter(AngerManagement angerManagement) implements Comparator<Entity> {
         public int compare(Entity entity, Entity entity2) {
             if (entity.equals(entity2)) {
                 return 0;
diff --git a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
index d7aa327a8086e89e217a4c19b9a1271fbe914de6..4a50774524fd5d204eee2c5d93eca2ddcdf24e63 100644
--- a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
+++ b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
@@ -339,7 +339,7 @@ public class Warden extends Monster implements VibrationListener.VibrationListen
     }
 
     public Brain<Warden> getBrain() {
-        return super.getBrain();
+        return (Brain<Warden>) super.getBrain();
     }
 
     protected void sendDebugPackets() {
@@ -390,12 +390,12 @@ public class Warden extends Monster implements VibrationListener.VibrationListen
     public void readAdditionalSaveData(CompoundTag compoundTag) {
         super.readAdditionalSaveData(compoundTag);
         if (compoundTag.contains("anger")) {
-            AngerManagement.codec(this::canTargetEntity).parse(new Dynamic(NbtOps.INSTANCE, compoundTag.get("anger"))).resultOrPartial(LOGGER::error).ifPresent((angerManagement) -> this.angerManagement = angerManagement);
+            AngerManagement.codec(this::canTargetEntity).parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.get("anger"))).resultOrPartial(LOGGER::error).ifPresent((angerManagement) -> this.angerManagement = angerManagement);
             this.syncClientAngerLevel();
         }
 
         if (compoundTag.contains("listener", 10)) {
-            VibrationListener.codec(this).parse(new Dynamic(NbtOps.INSTANCE, compoundTag.getCompound("listener"))).resultOrPartial(LOGGER::error).ifPresent((vibrationListener) -> this.dynamicGameEventListener.updateListener(vibrationListener, this.level));
+            VibrationListener.codec(this).parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.getCompound("listener"))).resultOrPartial(LOGGER::error).ifPresent((vibrationListener) -> this.dynamicGameEventListener.updateListener(vibrationListener, this.level));
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/entity/monster/warden/WardenAi.java b/src/main/java/net/minecraft/world/entity/monster/warden/WardenAi.java
index 99b571726f0a48891396d0def3424fdf5f84fcf4..f998ee02eb7f06075cfbdbf309531fae551635c4 100644
--- a/src/main/java/net/minecraft/world/entity/monster/warden/WardenAi.java
+++ b/src/main/java/net/minecraft/world/entity/monster/warden/WardenAi.java
@@ -87,7 +87,7 @@ public class WardenAi {
     }
 
     private static void initEmergeActivity(Brain<Warden> brain) {
-        brain.addActivityAndRemoveMemoryWhenStopped(Activity.EMERGE, 5, ImmutableList.of(new Emerging(EMERGE_DURATION)), MemoryModuleType.IS_EMERGING);
+        brain.addActivityAndRemoveMemoryWhenStopped(Activity.EMERGE, 5, ImmutableList.of(new Emerging<>(EMERGE_DURATION)), MemoryModuleType.IS_EMERGING);
     }
 
     private static void initDiggingActivity(Brain<Warden> brain) {
@@ -95,15 +95,15 @@ public class WardenAi {
     }
 
     private static void initIdleActivity(Brain<Warden> brain) {
-        brain.addActivity(Activity.IDLE, 10, ImmutableList.of(new SetRoarTarget(Warden::getEntityAngryAt), new TryToSniff(), new RunOne<>(ImmutableMap.of(MemoryModuleType.IS_SNIFFING, MemoryStatus.VALUE_ABSENT), ImmutableList.of(Pair.of(new RandomStroll(0.5F), 2), Pair.of(new DoNothing(30, 60), 1)))));
+        brain.addActivity(Activity.IDLE, 10, ImmutableList.of(new SetRoarTarget<>(Warden::getEntityAngryAt), new TryToSniff(), new RunOne<>(ImmutableMap.of(MemoryModuleType.IS_SNIFFING, MemoryStatus.VALUE_ABSENT), ImmutableList.of(Pair.of(new RandomStroll(0.5F), 2), Pair.of(new DoNothing(30, 60), 1)))));
     }
 
     private static void initInvestigateActivity(Brain<Warden> brain) {
-        brain.addActivityAndRemoveMemoryWhenStopped(Activity.INVESTIGATE, 5, ImmutableList.of(new SetRoarTarget(Warden::getEntityAngryAt), new GoToTargetLocation(MemoryModuleType.DISTURBANCE_LOCATION, 2, 0.7F)), MemoryModuleType.DISTURBANCE_LOCATION);
+        brain.addActivityAndRemoveMemoryWhenStopped(Activity.INVESTIGATE, 5, ImmutableList.of(new SetRoarTarget<>(Warden::getEntityAngryAt), new GoToTargetLocation<>(MemoryModuleType.DISTURBANCE_LOCATION, 2, 0.7F)), MemoryModuleType.DISTURBANCE_LOCATION);
     }
 
     private static void initSniffingActivity(Brain<Warden> brain) {
-        brain.addActivityAndRemoveMemoryWhenStopped(Activity.SNIFF, 5, ImmutableList.of(new SetRoarTarget(Warden::getEntityAngryAt), new Sniffing(SNIFFING_DURATION)), MemoryModuleType.IS_SNIFFING);
+        brain.addActivityAndRemoveMemoryWhenStopped(Activity.SNIFF, 5, ImmutableList.of(new SetRoarTarget<>(Warden::getEntityAngryAt), new Sniffing<>(SNIFFING_DURATION)), MemoryModuleType.IS_SNIFFING);
     }
 
     private static void initRoarActivity(Brain<Warden> brain) {
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index e73da0bced2683eaef2cebc7547283a5da35c6cb..f22f142e2276b3ab5ce20dd7e8d123ffaacf819f 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -135,7 +135,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     }
 
     public Brain<Villager> getBrain() {
-        return super.getBrain();
+        return (Brain<Villager>) super.getBrain();
     }
 
     protected Brain.Provider<Villager> brainProvider() {
@@ -556,12 +556,12 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     }
 
     private void tellWitnessesThatIWasMurdered(Entity entity) {
-        Level optional = this.level;
-        if (optional instanceof ServerLevel) {
-            ServerLevel serverLevel = (ServerLevel)optional;
-            Optional<NearestVisibleLivingEntities> optional = this.brain.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES);
-            if (!optional.isEmpty()) {
-                ((NearestVisibleLivingEntities)optional.get()).findAll(ReputationEventHandler.class::isInstance).forEach((livingEntity) -> serverLevel.onReputationEvent(ReputationEventType.VILLAGER_KILLED, entity, (ReputationEventHandler)livingEntity));
+        Level level = this.level;
+        if (level instanceof ServerLevel) {
+            ServerLevel serverLevel = (ServerLevel)level;
+            Optional<NearestVisibleLivingEntities> optionalIn = this.brain.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES);
+            if (!optionalIn.isEmpty()) {
+                ((NearestVisibleLivingEntities)optionalIn.get()).findAll(ReputationEventHandler.class::isInstance).forEach((livingEntity) -> serverLevel.onReputationEvent(ReputationEventType.VILLAGER_KILLED, entity, (ReputationEventHandler)livingEntity));
             }
         }
     }
diff --git a/src/main/java/net/minecraft/world/entity/npc/VillagerProfession.java b/src/main/java/net/minecraft/world/entity/npc/VillagerProfession.java
index 9f6c84226ca1244a64cf373d927cb0701355666b..1ac6ff0837e5d764339d34f38c7f80fd6fb4dc51 100644
--- a/src/main/java/net/minecraft/world/entity/npc/VillagerProfession.java
+++ b/src/main/java/net/minecraft/world/entity/npc/VillagerProfession.java
@@ -17,14 +17,7 @@ import net.minecraft.world.item.Items;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 
-public record VillagerProfession(String q, Predicate<Holder<PoiType>> r, Predicate<Holder<PoiType>> s, ImmutableSet<Item> t, ImmutableSet<Block> u, @Nullable SoundEvent v) {
-    private final String name;
-    private final Predicate<Holder<PoiType>> heldJobSite;
-    private final Predicate<Holder<PoiType>> acquirableJobSite;
-    private final ImmutableSet<Item> requestedItems;
-    private final ImmutableSet<Block> secondaryPoi;
-    @Nullable
-    private final SoundEvent workSound;
+public record VillagerProfession(String name, Predicate<Holder<PoiType>> heldJobSite, Predicate<Holder<PoiType>> acquirableJobSite, ImmutableSet<Item> requestedItems, ImmutableSet<Block> secondaryPoi, @Nullable SoundEvent workSound) {
     public static final Predicate<Holder<PoiType>> ALL_ACQUIRABLE_JOBS = (holder) -> holder.is(PoiTypeTags.ACQUIRABLE_JOB_SITE);
     public static final VillagerProfession NONE = register("none", PoiType.NONE, ALL_ACQUIRABLE_JOBS, (SoundEvent)null);
     public static final VillagerProfession ARMORER = register("armorer", PoiTypes.ARMORER, SoundEvents.VILLAGER_WORK_ARMORER);
@@ -61,29 +54,4 @@ public record VillagerProfession(String q, Predicate<Holder<PoiType>> r, Predica
     private static VillagerProfession register(String s, Predicate<Holder<PoiType>> predicate, Predicate<Holder<PoiType>> predicate2, ImmutableSet<Item> immutableSet, ImmutableSet<Block> immutableSet2, @Nullable SoundEvent soundEvent) {
         return Registry.register(Registry.VILLAGER_PROFESSION, new ResourceLocation(s), new VillagerProfession(s, predicate, predicate2, immutableSet, immutableSet2, soundEvent));
     }
-
-    public String name() {
-        return this.name;
-    }
-
-    public Predicate<Holder<PoiType>> heldJobSite() {
-        return this.heldJobSite;
-    }
-
-    public Predicate<Holder<PoiType>> acquirableJobSite() {
-        return this.acquirableJobSite;
-    }
-
-    public ImmutableSet<Item> requestedItems() {
-        return this.requestedItems;
-    }
-
-    public ImmutableSet<Block> secondaryPoi() {
-        return this.secondaryPoi;
-    }
-
-    @Nullable
-    public SoundEvent workSound() {
-        return this.workSound;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
index d34510dca6ba2dddf2be82b68e3bc0a2462f437c..d837030b13914405a431c4863d53f5d3a742e596 100644
--- a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
+++ b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
@@ -62,10 +62,10 @@ public class VillagerTrades {
     private static final float HIGH_TIER_PRICE_MULTIPLIER = 0.2F;
     public static final Map<VillagerProfession, Int2ObjectMap<VillagerTrades.ItemListing[]>> TRADES = Util.make(Maps.newHashMap(), (hashMap) -> {
         hashMap.put(VillagerProfession.FARMER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WHEAT, 20, 16, 2), new VillagerTrades.EmeraldForItems(Items.POTATO, 26, 16, 2), new VillagerTrades.EmeraldForItems(Items.CARROT, 22, 16, 2), new VillagerTrades.EmeraldForItems(Items.BEETROOT, 15, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.BREAD, 1, 6, 16, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Blocks.PUMPKIN, 6, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.PUMPKIN_PIE, 1, 4, 5), new VillagerTrades.ItemsForEmeralds(Items.APPLE, 1, 4, 16, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.COOKIE, 3, 18, 10), new VillagerTrades.EmeraldForItems(Blocks.MELON, 4, 12, 20)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Blocks.CAKE, 1, 1, 12, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.NIGHT_VISION, 100, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.JUMP, 160, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.WEAKNESS, 140, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.BLINDNESS, 120, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.POISON, 280, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.SATURATION, 7, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.GOLDEN_CARROT, 3, 3, 30), new VillagerTrades.ItemsForEmeralds(Items.GLISTERING_MELON_SLICE, 4, 3, 30)})));
-        hashMap.put(VillagerProfession.FISHERMAN, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STRING, 20, 16, 2), new VillagerTrades.EmeraldForItems(Items.COAL, 10, 16, 2), new VillagerTrades.ItemsAndEmeraldsToItems(Items.COD, 6, Items.COOKED_COD, 6, 16, 1), new VillagerTrades.ItemsForEmeralds(Items.COD_BUCKET, 3, 1, 16, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COD, 15, 16, 10), new VillagerTrades.ItemsAndEmeraldsToItems(Items.SALMON, 6, Items.COOKED_SALMON, 6, 16, 5), new VillagerTrades.ItemsForEmeralds(Items.CAMPFIRE, 2, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SALMON, 13, 16, 20), new VillagerTrades.EnchantedItemForEmeralds(Items.FISHING_ROD, 3, 3, 10, 0.2F)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.TROPICAL_FISH, 6, 12, 30)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PUFFERFISH, 4, 12, 30), new VillagerTrades.EmeraldsForVillagerTypeItem(1, 12, 30, ImmutableMap.builder().put(VillagerType.PLAINS, Items.OAK_BOAT).put(VillagerType.TAIGA, Items.SPRUCE_BOAT).put(VillagerType.SNOW, Items.SPRUCE_BOAT).put(VillagerType.DESERT, Items.JUNGLE_BOAT).put(VillagerType.JUNGLE, Items.JUNGLE_BOAT).put(VillagerType.SAVANNA, Items.ACACIA_BOAT).put(VillagerType.SWAMP, Items.DARK_OAK_BOAT).build())})));
+        hashMap.put(VillagerProfession.FISHERMAN, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STRING, 20, 16, 2), new VillagerTrades.EmeraldForItems(Items.COAL, 10, 16, 2), new VillagerTrades.ItemsAndEmeraldsToItems(Items.COD, 6, Items.COOKED_COD, 6, 16, 1), new VillagerTrades.ItemsForEmeralds(Items.COD_BUCKET, 3, 1, 16, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COD, 15, 16, 10), new VillagerTrades.ItemsAndEmeraldsToItems(Items.SALMON, 6, Items.COOKED_SALMON, 6, 16, 5), new VillagerTrades.ItemsForEmeralds(Items.CAMPFIRE, 2, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SALMON, 13, 16, 20), new VillagerTrades.EnchantedItemForEmeralds(Items.FISHING_ROD, 3, 3, 10, 0.2F)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.TROPICAL_FISH, 6, 12, 30)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PUFFERFISH, 4, 12, 30), new VillagerTrades.EmeraldsForVillagerTypeItem(1, 12, 30, ImmutableMap.<VillagerType, Item>builder().put(VillagerType.PLAINS, Items.OAK_BOAT).put(VillagerType.TAIGA, Items.SPRUCE_BOAT).put(VillagerType.SNOW, Items.SPRUCE_BOAT).put(VillagerType.DESERT, Items.JUNGLE_BOAT).put(VillagerType.JUNGLE, Items.JUNGLE_BOAT).put(VillagerType.SAVANNA, Items.ACACIA_BOAT).put(VillagerType.SWAMP, Items.DARK_OAK_BOAT).build())})));
         hashMap.put(VillagerProfession.SHEPHERD, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Blocks.WHITE_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.BROWN_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.BLACK_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.GRAY_WOOL, 18, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.SHEARS, 2, 1, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WHITE_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.GRAY_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.BLACK_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.LIGHT_BLUE_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.LIME_DYE, 12, 16, 10), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.RED_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.RED_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_CARPET, 1, 4, 16, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.YELLOW_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.LIGHT_GRAY_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.ORANGE_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.RED_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.PINK_DYE, 12, 16, 20), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.RED_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_BED, 3, 1, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BROWN_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.PURPLE_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.BLUE_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.GREEN_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.MAGENTA_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.CYAN_DYE, 12, 16, 30), new VillagerTrades.ItemsForEmeralds(Items.WHITE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BLUE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_BLUE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.RED_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.PINK_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.GREEN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIME_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.GRAY_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BLACK_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.PURPLE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.MAGENTA_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.CYAN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BROWN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.YELLOW_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_GRAY_BANNER, 3, 1, 12, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.PAINTING, 2, 3, 30)})));
         hashMap.put(VillagerProfession.FLETCHER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STICK, 32, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.ARROW, 1, 16, 1), new VillagerTrades.ItemsAndEmeraldsToItems(Blocks.GRAVEL, 10, Items.FLINT, 10, 12, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.FLINT, 26, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.BOW, 2, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STRING, 14, 16, 20), new VillagerTrades.ItemsForEmeralds(Items.CROSSBOW, 3, 1, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.FEATHER, 24, 16, 30), new VillagerTrades.EnchantedItemForEmeralds(Items.BOW, 2, 3, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.TRIPWIRE_HOOK, 8, 12, 30), new VillagerTrades.EnchantedItemForEmeralds(Items.CROSSBOW, 3, 3, 15), new VillagerTrades.TippedArrowForItemsAndEmeralds(Items.ARROW, 5, Items.TIPPED_ARROW, 5, 2, 12, 30)})));
-        hashMap.put(VillagerProfession.LIBRARIAN, toIntMap(ImmutableMap.builder().put(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.EnchantBookForEmeralds(1), new VillagerTrades.ItemsForEmeralds(Blocks.BOOKSHELF, 9, 1, 12, 1)}).put(2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BOOK, 4, 12, 10), new VillagerTrades.EnchantBookForEmeralds(5), new VillagerTrades.ItemsForEmeralds(Items.LANTERN, 1, 1, 5)}).put(3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.INK_SAC, 5, 12, 20), new VillagerTrades.EnchantBookForEmeralds(10), new VillagerTrades.ItemsForEmeralds(Items.GLASS, 1, 4, 10)}).put(4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WRITABLE_BOOK, 2, 12, 30), new VillagerTrades.EnchantBookForEmeralds(15), new VillagerTrades.ItemsForEmeralds(Items.CLOCK, 5, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.COMPASS, 4, 1, 15)}).put(5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.NAME_TAG, 20, 1, 30)}).build()));
+        hashMap.put(VillagerProfession.LIBRARIAN, toIntMap(ImmutableMap.<Integer, ItemListing[]>builder().put(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.EnchantBookForEmeralds(1), new VillagerTrades.ItemsForEmeralds(Blocks.BOOKSHELF, 9, 1, 12, 1)}).put(2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BOOK, 4, 12, 10), new VillagerTrades.EnchantBookForEmeralds(5), new VillagerTrades.ItemsForEmeralds(Items.LANTERN, 1, 1, 5)}).put(3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.INK_SAC, 5, 12, 20), new VillagerTrades.EnchantBookForEmeralds(10), new VillagerTrades.ItemsForEmeralds(Items.GLASS, 1, 4, 10)}).put(4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WRITABLE_BOOK, 2, 12, 30), new VillagerTrades.EnchantBookForEmeralds(15), new VillagerTrades.ItemsForEmeralds(Items.CLOCK, 5, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.COMPASS, 4, 1, 15)}).put(5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.NAME_TAG, 20, 1, 30)}).build()));
         hashMap.put(VillagerProfession.CARTOGRAPHER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.MAP, 7, 1, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.GLASS_PANE, 11, 16, 10), new VillagerTrades.TreasureMapForEmeralds(13, StructureTags.ON_OCEAN_EXPLORER_MAPS, "filled_map.monument", MapDecoration.Type.MONUMENT, 12, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COMPASS, 1, 12, 20), new VillagerTrades.TreasureMapForEmeralds(14, StructureTags.ON_WOODLAND_EXPLORER_MAPS, "filled_map.mansion", MapDecoration.Type.MANSION, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.ITEM_FRAME, 7, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.WHITE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BLUE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_BLUE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.RED_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.PINK_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.GREEN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIME_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.GRAY_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BLACK_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.PURPLE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.MAGENTA_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.CYAN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BROWN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.YELLOW_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_GRAY_BANNER, 3, 1, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.GLOBE_BANNER_PATTERN, 8, 1, 30)})));
         hashMap.put(VillagerProfession.CLERIC, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.ROTTEN_FLESH, 32, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.REDSTONE, 1, 2, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.GOLD_INGOT, 3, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.LAPIS_LAZULI, 1, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.RABBIT_FOOT, 2, 12, 20), new VillagerTrades.ItemsForEmeralds(Blocks.GLOWSTONE, 4, 1, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SCUTE, 4, 12, 30), new VillagerTrades.EmeraldForItems(Items.GLASS_BOTTLE, 9, 12, 30), new VillagerTrades.ItemsForEmeralds(Items.ENDER_PEARL, 5, 1, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.NETHER_WART, 22, 12, 30), new VillagerTrades.ItemsForEmeralds(Items.EXPERIENCE_BOTTLE, 3, 1, 30)})));
         hashMap.put(VillagerProfession.ARMORER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COAL, 15, 16, 2), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_LEGGINGS), 7, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_BOOTS), 4, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_HELMET), 5, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_CHESTPLATE), 9, 1, 12, 1, 0.2F)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.IRON_INGOT, 4, 12, 10), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.BELL), 36, 1, 12, 5, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_BOOTS), 1, 1, 12, 5, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_LEGGINGS), 3, 1, 12, 5, 0.2F)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.LAVA_BUCKET, 1, 12, 20), new VillagerTrades.EmeraldForItems(Items.DIAMOND, 1, 12, 20), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_HELMET), 1, 1, 12, 10, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_CHESTPLATE), 4, 1, 12, 10, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.SHIELD), 5, 1, 12, 10, 0.2F)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_LEGGINGS, 14, 3, 15, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_BOOTS, 8, 3, 15, 0.2F)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_HELMET, 8, 3, 30, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_CHESTPLATE, 16, 3, 30, 0.2F)})));
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 6dfa8d98b9235de831d2f3a980dcd0115b1e88f6..23a8ff5955a6b3d3aa2fcffe9dc55ac5696cea90 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -125,7 +125,7 @@ public abstract class Player extends LivingEntity {
     public static final float SWIMMING_BB_HEIGHT = 0.6F;
     public static final float DEFAULT_EYE_HEIGHT = 1.62F;
     public static final EntityDimensions STANDING_DIMENSIONS = EntityDimensions.scalable(0.6F, 1.8F);
-    private static final Map<Pose, EntityDimensions> POSES = ImmutableMap.builder().put(Pose.STANDING, STANDING_DIMENSIONS).put(Pose.SLEEPING, SLEEPING_DIMENSIONS).put(Pose.FALL_FLYING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SWIMMING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SPIN_ATTACK, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.CROUCHING, EntityDimensions.scalable(0.6F, 1.5F)).put(Pose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build();
+    private static final Map<Pose, EntityDimensions> POSES = ImmutableMap.<Pose, EntityDimensions>builder().put(Pose.STANDING, STANDING_DIMENSIONS).put(Pose.SLEEPING, SLEEPING_DIMENSIONS).put(Pose.FALL_FLYING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SWIMMING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SPIN_ATTACK, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.CROUCHING, EntityDimensions.scalable(0.6F, 1.5F)).put(Pose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build();
     private static final int FLY_ACHIEVEMENT_SPEED = 25;
     private static final EntityDataAccessor<Float> DATA_PLAYER_ABSORPTION_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.FLOAT);
     private static final EntityDataAccessor<Integer> DATA_SCORE_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.INT);
@@ -737,7 +737,7 @@ public abstract class Player extends LivingEntity {
         this.setScore(compoundTag.getInt("Score"));
         this.foodData.readAdditionalSaveData(compoundTag);
         if (compoundTag.contains("warden_spawn_tracker", 10)) {
-            WardenSpawnTracker.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundTag.get("warden_spawn_tracker"))).resultOrPartial(LOGGER::error).ifPresent((wardenSpawnTracker) -> this.wardenSpawnTracker = wardenSpawnTracker);
+            WardenSpawnTracker.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.get("warden_spawn_tracker"))).resultOrPartial(LOGGER::error).ifPresent((wardenSpawnTracker) -> this.wardenSpawnTracker = wardenSpawnTracker);
         }
 
         this.abilities.loadSaveData(compoundTag);
diff --git a/src/main/java/net/minecraft/world/entity/player/ProfileKeyPair.java b/src/main/java/net/minecraft/world/entity/player/ProfileKeyPair.java
index 1d49a1a3f7ccd5d0a4ec6089d22bdd2d6ee9390b..c7eabd7cdca001a2a5b2c132b04339047a8da50d 100644
--- a/src/main/java/net/minecraft/world/entity/player/ProfileKeyPair.java
+++ b/src/main/java/net/minecraft/world/entity/player/ProfileKeyPair.java
@@ -7,25 +7,10 @@ import java.time.Instant;
 import net.minecraft.util.Crypt;
 import net.minecraft.util.ExtraCodecs;
 
-public record ProfileKeyPair(PrivateKey b, ProfilePublicKey c, Instant d) {
-    private final PrivateKey privateKey;
-    private final ProfilePublicKey publicKey;
-    private final Instant refreshedAfter;
+public record ProfileKeyPair(PrivateKey privateKey, ProfilePublicKey publicKey, Instant refreshedAfter) {
     public static final Codec<ProfileKeyPair> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Crypt.PRIVATE_KEY_CODEC.fieldOf("private_key").forGetter(ProfileKeyPair::privateKey), ProfilePublicKey.TRUSTED_CODEC.fieldOf("public_key").forGetter(ProfileKeyPair::publicKey), ExtraCodecs.INSTANT_ISO8601.fieldOf("refreshed_after").forGetter(ProfileKeyPair::refreshedAfter)).apply(instance, ProfileKeyPair::new));
 
     public boolean dueRefresh() {
         return this.refreshedAfter.isBefore(Instant.now());
     }
-
-    public PrivateKey privateKey() {
-        return this.privateKey;
-    }
-
-    public ProfilePublicKey publicKey() {
-        return this.publicKey;
-    }
-
-    public Instant refreshedAfter() {
-        return this.refreshedAfter;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/player/ProfilePublicKey.java b/src/main/java/net/minecraft/world/entity/player/ProfilePublicKey.java
index 2eb202c128588d1d7b0843d3157bf22211059d36..9d5ae2df5ec5e271659336fba44ff99d7014ac02 100644
--- a/src/main/java/net/minecraft/world/entity/player/ProfilePublicKey.java
+++ b/src/main/java/net/minecraft/world/entity/player/ProfilePublicKey.java
@@ -14,8 +14,7 @@ import net.minecraft.util.CryptException;
 import net.minecraft.util.ExtraCodecs;
 import net.minecraft.util.SignatureValidator;
 
-public record ProfilePublicKey(ProfilePublicKey.Data b) {
-    private final ProfilePublicKey.Data data;
+public record ProfilePublicKey(ProfilePublicKey.Data data) {
     public static final Codec<ProfilePublicKey> TRUSTED_CODEC = ProfilePublicKey.Data.CODEC.comapFlatMap((data) -> {
         try {
             return DataResult.success(createTrusted(data));
@@ -46,15 +45,12 @@ public record ProfilePublicKey(ProfilePublicKey.Data b) {
         return this.data;
     }
 
-    public static record Data(Instant b, PublicKey c, byte[] d) {
-        private final Instant expiresAt;
-        final PublicKey key;
-        private final byte[] keySignature;
+    public static record Data(Instant expiresAt, PublicKey key, byte[] keySignature) {
         private static final int MAX_KEY_SIGNATURE_SIZE = 4096;
         public static final Codec<ProfilePublicKey.Data> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.INSTANT_ISO8601.fieldOf("expires_at").forGetter(ProfilePublicKey.Data::expiresAt), Crypt.PUBLIC_KEY_CODEC.fieldOf("key").forGetter(ProfilePublicKey.Data::key), ExtraCodecs.BASE64_STRING.fieldOf("signature").forGetter(ProfilePublicKey.Data::keySignature)).apply(instance, ProfilePublicKey.Data::new));
 
         public Data(FriendlyByteBuf friendlyByteBuf) {
-            this(friendlyByteBuf.readInstant(), friendlyByteBuf.readPublicKey(), friendlyByteBuf.readByteArray(4096));
+            this(friendlyByteBuf.readInstant(), friendlyByteBuf.readPublicKey(), friendlyByteBuf.readByteArray(MAX_KEY_SIGNATURE_SIZE));
         }
 
         public void write(FriendlyByteBuf friendlyByteBuf) {
@@ -75,17 +71,5 @@ public record ProfilePublicKey(ProfilePublicKey.Data b) {
         public boolean hasExpired() {
             return this.expiresAt.isBefore(Instant.now());
         }
-
-        public Instant expiresAt() {
-            return this.expiresAt;
-        }
-
-        public PublicKey key() {
-            return this.key;
-        }
-
-        public byte[] keySignature() {
-            return this.keySignature;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
index 561537e18b44c3610cb1dd0a622e99c27a3fc69e..238501ee5e82d62299bec5893c7aebd3f4ea3fc6 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -163,7 +163,7 @@ public abstract class AbstractMinecart extends Entity {
                 UnmodifiableIterator d3 = ((ImmutableList)POSE_DISMOUNT_HEIGHTS.get(pose)).iterator();
 
                 while(d3.hasNext()) {
-                    int i2 = d3.next();
+                    int i2 = (int) d3.next();
 
                     for(int[] ints : i) {
                         mutableBlockPos.set(blockPos.getX() + ints[0], blockPos.getY() + i2, blockPos.getZ() + ints[1]);
@@ -180,16 +180,16 @@ public abstract class AbstractMinecart extends Entity {
                 }
             }
 
-            double d2 = this.getBoundingBox().maxY;
-            mutableBlockPos.set((double)blockPos.getX(), d2, (double)blockPos.getZ());
+            double maxY = this.getBoundingBox().maxY;
+            mutableBlockPos.set((double)blockPos.getX(), maxY, (double)blockPos.getZ());
             UnmodifiableIterator var22 = immutableList.iterator();
 
             while(var22.hasNext()) {
                 Pose pose2 = (Pose)var22.next();
                 double d3 = (double)livingEntity.getDimensions(pose2).height;
-                int i3 = Mth.ceil(d2 - (double)mutableBlockPos.getY() + d3);
+                int i3 = Mth.ceil(maxY - (double)mutableBlockPos.getY() + d3);
                 double d4 = DismountHelper.findCeilingFrom(mutableBlockPos, i3, (blockPosx) -> this.level.getBlockState(blockPosx).getCollisionShape(this.level, blockPosx));
-                if (d2 + d3 <= d4) {
+                if (maxY + d3 <= d4) {
                     livingEntity.setPose(pose2);
                     break;
                 }
diff --git a/src/main/java/net/minecraft/world/inventory/DataSlot.java b/src/main/java/net/minecraft/world/inventory/DataSlot.java
index 00799f62cea61878d885ee25341129632cad29a5..4b9dd0554d4002ec5c4995dfbdf22f28c12b74ff 100644
--- a/src/main/java/net/minecraft/world/inventory/DataSlot.java
+++ b/src/main/java/net/minecraft/world/inventory/DataSlot.java
@@ -10,7 +10,7 @@ public abstract class DataSlot {
             }
 
             public void set(int ix) {
-                containerData.set(i, i);
+                containerData.set(i, ix);
             }
         };
     }
@@ -22,7 +22,7 @@ public abstract class DataSlot {
             }
 
             public void set(int ix) {
-                ints[i] = i;
+                ints[i] = ix;
             }
         };
     }
diff --git a/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java b/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
index d55b1a0b77cd0e8904b7db6b4b02dcfdeff11b4e..6d7ebb7757e1a89e23856974045ce12a20d0b8ad 100644
--- a/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
@@ -12,7 +12,7 @@ public abstract class RecipeBookMenu<C extends Container> extends AbstractContai
     }
 
     public void handlePlacement(boolean flag, Recipe<?> recipe, ServerPlayer serverPlayer) {
-        (new ServerPlaceRecipe<>(this)).recipeClicked(serverPlayer, recipe, flag);
+        (new ServerPlaceRecipe<>(this)).recipeClicked(serverPlayer, (Recipe<C>) recipe, flag);
     }
 
     public abstract void fillCraftSlotsStackedContents(StackedContents var1);
diff --git a/src/main/java/net/minecraft/world/item/HoneycombItem.java b/src/main/java/net/minecraft/world/item/HoneycombItem.java
index bc7feb8212bd022aba5f07c81c69c14cfc6ffacb..222f70109f125b9364e245fba0b501b075c5f1ec 100644
--- a/src/main/java/net/minecraft/world/item/HoneycombItem.java
+++ b/src/main/java/net/minecraft/world/item/HoneycombItem.java
@@ -18,7 +18,7 @@ import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.gameevent.GameEvent;
 
 public class HoneycombItem extends Item {
-    public static final Supplier<BiMap<Block, Block>> WAXABLES = Suppliers.memoize(() -> ImmutableBiMap.builder().put(Blocks.COPPER_BLOCK, Blocks.WAXED_COPPER_BLOCK).put(Blocks.EXPOSED_COPPER, Blocks.WAXED_EXPOSED_COPPER).put(Blocks.WEATHERED_COPPER, Blocks.WAXED_WEATHERED_COPPER).put(Blocks.OXIDIZED_COPPER, Blocks.WAXED_OXIDIZED_COPPER).put(Blocks.CUT_COPPER, Blocks.WAXED_CUT_COPPER).put(Blocks.EXPOSED_CUT_COPPER, Blocks.WAXED_EXPOSED_CUT_COPPER).put(Blocks.WEATHERED_CUT_COPPER, Blocks.WAXED_WEATHERED_CUT_COPPER).put(Blocks.OXIDIZED_CUT_COPPER, Blocks.WAXED_OXIDIZED_CUT_COPPER).put(Blocks.CUT_COPPER_SLAB, Blocks.WAXED_CUT_COPPER_SLAB).put(Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.WAXED_EXPOSED_CUT_COPPER_SLAB).put(Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.WAXED_WEATHERED_CUT_COPPER_SLAB).put(Blocks.OXIDIZED_CUT_COPPER_SLAB, Blocks.WAXED_OXIDIZED_CUT_COPPER_SLAB).put(Blocks.CUT_COPPER_STAIRS, Blocks.WAXED_CUT_COPPER_STAIRS).put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.WAXED_EXPOSED_CUT_COPPER_STAIRS).put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.WAXED_WEATHERED_CUT_COPPER_STAIRS).put(Blocks.OXIDIZED_CUT_COPPER_STAIRS, Blocks.WAXED_OXIDIZED_CUT_COPPER_STAIRS).build());
+    public static final Supplier<BiMap<Block, Block>> WAXABLES = Suppliers.memoize(() -> ImmutableBiMap.<Block, Block>builder().put(Blocks.COPPER_BLOCK, Blocks.WAXED_COPPER_BLOCK).put(Blocks.EXPOSED_COPPER, Blocks.WAXED_EXPOSED_COPPER).put(Blocks.WEATHERED_COPPER, Blocks.WAXED_WEATHERED_COPPER).put(Blocks.OXIDIZED_COPPER, Blocks.WAXED_OXIDIZED_COPPER).put(Blocks.CUT_COPPER, Blocks.WAXED_CUT_COPPER).put(Blocks.EXPOSED_CUT_COPPER, Blocks.WAXED_EXPOSED_CUT_COPPER).put(Blocks.WEATHERED_CUT_COPPER, Blocks.WAXED_WEATHERED_CUT_COPPER).put(Blocks.OXIDIZED_CUT_COPPER, Blocks.WAXED_OXIDIZED_CUT_COPPER).put(Blocks.CUT_COPPER_SLAB, Blocks.WAXED_CUT_COPPER_SLAB).put(Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.WAXED_EXPOSED_CUT_COPPER_SLAB).put(Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.WAXED_WEATHERED_CUT_COPPER_SLAB).put(Blocks.OXIDIZED_CUT_COPPER_SLAB, Blocks.WAXED_OXIDIZED_CUT_COPPER_SLAB).put(Blocks.CUT_COPPER_STAIRS, Blocks.WAXED_CUT_COPPER_STAIRS).put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.WAXED_EXPOSED_CUT_COPPER_STAIRS).put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.WAXED_WEATHERED_CUT_COPPER_STAIRS).put(Blocks.OXIDIZED_CUT_COPPER_STAIRS, Blocks.WAXED_OXIDIZED_CUT_COPPER_STAIRS).build());
     public static final Supplier<BiMap<Block, Block>> WAX_OFF_BY_BLOCK = Suppliers.memoize(() -> ((BiMap)WAXABLES.get()).inverse());
 
     public HoneycombItem(Item.Properties properties) {
diff --git a/src/main/java/net/minecraft/world/item/Instrument.java b/src/main/java/net/minecraft/world/item/Instrument.java
index 8ea08d96d45d3774ed446914557c3e48fb9197a1..61cafdbef129ddc1b7fc7954713291f58b12b10c 100644
--- a/src/main/java/net/minecraft/world/item/Instrument.java
+++ b/src/main/java/net/minecraft/world/item/Instrument.java
@@ -5,21 +5,6 @@ import com.mojang.serialization.codecs.RecordCodecBuilder;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.util.ExtraCodecs;
 
-public record Instrument(SoundEvent b, int c, float d) {
-    private final SoundEvent soundEvent;
-    private final int useDuration;
-    private final float range;
+public record Instrument(SoundEvent soundEvent, int useDuration, float range) {
     public static final Codec<Instrument> CODEC = RecordCodecBuilder.create((instance) -> instance.group(SoundEvent.CODEC.fieldOf("sound_event").forGetter(Instrument::soundEvent), ExtraCodecs.POSITIVE_INT.fieldOf("use_duration").forGetter(Instrument::useDuration), ExtraCodecs.POSITIVE_FLOAT.fieldOf("range").forGetter(Instrument::range)).apply(instance, Instrument::new));
-
-    public SoundEvent soundEvent() {
-        return this.soundEvent;
-    }
-
-    public int useDuration() {
-        return this.useDuration;
-    }
-
-    public float range() {
-        return this.range;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
index 372f2b804cf4ee0f8a926d3c009bc08567b24276..a260340306f4c5d19dcb587a8f09897a11aada06 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
@@ -83,7 +83,7 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
             }
         }
 
-        return map.entrySet().stream().filter((entry) -> ((Recipe)entry.getValue()).matches(container, level)).findFirst().map((entry) -> Pair.of((ResourceLocation)entry.getKey(), (Recipe)entry.getValue()));
+        return map.entrySet().stream().filter((entry) -> entry.getValue().matches(container, level)).findFirst().map((entry) -> Pair.of(entry.getKey(), entry.getValue()));
     }
 
     public <C extends Container, T extends Recipe<C>> List<T> getAllRecipesFor(RecipeType<T> recipeType) {
@@ -95,7 +95,7 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
     }
 
     private <C extends Container, T extends Recipe<C>> Map<ResourceLocation, T> byType(RecipeType<T> recipeType) {
-        return this.recipes.getOrDefault(recipeType, Collections.emptyMap());
+        return (Map<ResourceLocation, T>) this.recipes.getOrDefault(recipeType, Collections.emptyMap());
     }
 
     public <C extends Container, T extends Recipe<C>> NonNullList<ItemStack> getRemainingItemsFor(RecipeType<T> recipeType, C container, Level level) {
@@ -114,7 +114,7 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
     }
 
     public Optional<? extends Recipe<?>> byKey(ResourceLocation resourceLocation) {
-        return Optional.ofNullable((Recipe)this.byName.get(resourceLocation));
+        return Optional.ofNullable(this.byName.get(resourceLocation));
     }
 
     public Collection<Recipe<?>> getRecipes() {
@@ -158,7 +158,7 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
                 if (optional.isPresent()) {
                     Pair<ResourceLocation, T> pair = optional.get();
                     this.lastRecipe = (ResourceLocation)pair.getFirst();
-                    return Optional.of((Recipe)pair.getSecond());
+                    return Optional.of(pair.getSecond());
                 } else {
                     return Optional.empty();
                 }
diff --git a/src/main/java/net/minecraft/world/level/BlockEventData.java b/src/main/java/net/minecraft/world/level/BlockEventData.java
index 37d90acbd7b9fd7d4452583854c5e47db99fde67..f96b25aaac3a0b4d6666566d9a1a90552bc5096d 100644
--- a/src/main/java/net/minecraft/world/level/BlockEventData.java
+++ b/src/main/java/net/minecraft/world/level/BlockEventData.java
@@ -3,25 +3,4 @@ package net.minecraft.world.level;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.block.Block;
 
-public record BlockEventData(BlockPos a, Block b, int c, int d) {
-    private final BlockPos pos;
-    private final Block block;
-    private final int paramA;
-    private final int paramB;
-
-    public BlockPos pos() {
-        return this.pos;
-    }
-
-    public Block block() {
-        return this.block;
-    }
-
-    public int paramA() {
-        return this.paramA;
-    }
-
-    public int paramB() {
-        return this.paramB;
-    }
-}
\ No newline at end of file
+public record BlockEventData(BlockPos pos, Block block, int paramA, int paramB) {}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/BlockGetter.java b/src/main/java/net/minecraft/world/level/BlockGetter.java
index 53d772f066d3f0e84b59ac8c727033535aa7186a..ec5501be91d303eca9e5088913e5842b99194bb5 100644
--- a/src/main/java/net/minecraft/world/level/BlockGetter.java
+++ b/src/main/java/net/minecraft/world/level/BlockGetter.java
@@ -24,7 +24,7 @@ public interface BlockGetter extends LevelHeightAccessor {
 
     default <T extends BlockEntity> Optional<T> getBlockEntity(BlockPos blockPos, BlockEntityType<T> blockEntityType) {
         BlockEntity blockEntity = this.getBlockEntity(blockPos);
-        return blockEntity != null && blockEntity.getType() == blockEntityType ? Optional.of(blockEntity) : Optional.empty();
+        return blockEntity != null && blockEntity.getType() == blockEntityType ? Optional.of((T) blockEntity) : Optional.empty();
     }
 
     BlockState getBlockState(BlockPos var1);
diff --git a/src/main/java/net/minecraft/world/level/Explosion.java b/src/main/java/net/minecraft/world/level/Explosion.java
index bd741852dd12cc9deed916da3522705c556aaabf..66d39de4b1947e969a20bb7c51f5f6c0e00325da 100644
--- a/src/main/java/net/minecraft/world/level/Explosion.java
+++ b/src/main/java/net/minecraft/world/level/Explosion.java
@@ -246,16 +246,14 @@ public class Explosion {
                     BlockPos blockPos2 = blockPos.immutable();
                     this.level.getProfiler().push("explosion_blocks");
                     if (block.dropFromExplosion(this)) {
-                        Level blockEntity = this.level;
-                        if (blockEntity instanceof ServerLevel) {
-                            ServerLevel serverLevel = (ServerLevel)blockEntity;
-                            BlockEntity blockEntity = blockState.hasBlockEntity() ? this.level.getBlockEntity(blockPos) : null;
-                            LootContext.Builder builder = (new LootContext.Builder(serverLevel)).withRandom(this.level.random).withParameter(LootContextParams.ORIGIN, Vec3.atCenterOf(blockPos)).withParameter(LootContextParams.TOOL, ItemStack.EMPTY).withOptionalParameter(LootContextParams.BLOCK_ENTITY, blockEntity).withOptionalParameter(LootContextParams.THIS_ENTITY, this.source);
+                        if (this.level instanceof ServerLevel serverLevelIn) {
+                            BlockEntity blockEntityIn = blockState.hasBlockEntity() ? this.level.getBlockEntity(blockPos) : null;
+                            LootContext.Builder builder = (new LootContext.Builder(serverLevelIn)).withRandom(this.level.random).withParameter(LootContextParams.ORIGIN, Vec3.atCenterOf(blockPos)).withParameter(LootContextParams.TOOL, ItemStack.EMPTY).withOptionalParameter(LootContextParams.BLOCK_ENTITY, blockEntityIn).withOptionalParameter(LootContextParams.THIS_ENTITY, this.source);
                             if (this.blockInteraction == Explosion.BlockInteraction.DESTROY) {
                                 builder.withParameter(LootContextParams.EXPLOSION_RADIUS, this.radius);
                             }
 
-                            blockState.spawnAfterBreak(serverLevel, blockPos, ItemStack.EMPTY, flag3);
+                            blockState.spawnAfterBreak(serverLevelIn, blockPos, ItemStack.EMPTY, flag3);
                             blockState.getDrops(builder).forEach((itemStack) -> addBlockDrops(objectArrayList, itemStack, blockPos2));
                         }
                     }
@@ -269,7 +267,7 @@ public class Explosion {
             var5 = objectArrayList.iterator();
 
             while(var5.hasNext()) {
-                Pair<ItemStack, BlockPos> pair = var5.next();
+                Pair<ItemStack, BlockPos> pair = (Pair<ItemStack, BlockPos>) var5.next();
                 Block.popResource(this.level, (BlockPos)pair.getSecond(), (ItemStack)pair.getFirst());
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/GameRules.java b/src/main/java/net/minecraft/world/level/GameRules.java
index 635ad870193d405a816c3c042a613e8075376d5d..c3055a84d5e3782c40a426620600e31286ab31e8 100644
--- a/src/main/java/net/minecraft/world/level/GameRules.java
+++ b/src/main/java/net/minecraft/world/level/GameRules.java
@@ -125,8 +125,8 @@ public class GameRules {
     }
 
     private static <T extends GameRules.Value<T>> void callVisitorCap(GameRules.GameRuleTypeVisitor gameRuleTypeVisitor, GameRules.Key<?> key, GameRules.Type<?> type) {
-        gameRuleTypeVisitor.visit(key, type);
-        type.callVisitor(gameRuleTypeVisitor, key);
+        gameRuleTypeVisitor.visit((Key) key, type);
+        type.callVisitor(gameRuleTypeVisitor, (Key) key);
     }
 
     public void assignFrom(GameRules gameRules, @Nullable MinecraftServer minecraftServer) {
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index 5567eb54459a1f53ef6062ae3a005b94155affe9..c83dafc555b5e9900641e9f228da8a1f8da81ff8 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -83,13 +83,14 @@ public final class NaturalSpawner {
             MobCategory mobCategory = entity.getType().getCategory();
             if (mobCategory != MobCategory.MISC) {
                 BlockPos blockPos = entity.blockPosition();
+                Entity finalEntity = entity;
                 chunkGetter.query(ChunkPos.asLong(blockPos), (levelChunk) -> {
-                    MobSpawnSettings.MobSpawnCost mobSpawnCost = getRoughBiome(blockPos, levelChunk).getMobSettings().getMobSpawnCost(entity.getType());
+                    MobSpawnSettings.MobSpawnCost mobSpawnCost = getRoughBiome(blockPos, levelChunk).getMobSettings().getMobSpawnCost(finalEntity.getType());
                     if (mobSpawnCost != null) {
-                        potentialCalculator.addCharge(entity.blockPosition(), mobSpawnCost.getCharge());
+                        potentialCalculator.addCharge(finalEntity.blockPosition(), mobSpawnCost.getCharge());
                     }
 
-                    if (entity instanceof Mob) {
+                    if (finalEntity instanceof Mob) {
                         localMobCapCalculator.addMob(levelChunk.getPos(), mobCategory);
                     }
 
diff --git a/src/main/java/net/minecraft/world/level/SpawnData.java b/src/main/java/net/minecraft/world/level/SpawnData.java
index d9d0812d9d7794b2f7f8244e04a13dc8e4d09479..356db10fd19982dda3e5f558f41d3b71658bdf77 100644
--- a/src/main/java/net/minecraft/world/level/SpawnData.java
+++ b/src/main/java/net/minecraft/world/level/SpawnData.java
@@ -10,9 +10,7 @@ import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.InclusiveRange;
 import net.minecraft.util.random.SimpleWeightedRandomList;
 
-public record SpawnData(CompoundTag d, Optional<SpawnData.CustomSpawnRules> e) {
-    private final CompoundTag entityToSpawn;
-    private final Optional<SpawnData.CustomSpawnRules> customSpawnRules;
+public record SpawnData(CompoundTag entityToSpawn, Optional<SpawnData.CustomSpawnRules> customSpawnRules) {
     public static final Codec<SpawnData> CODEC = RecordCodecBuilder.create((instance) -> instance.group(CompoundTag.CODEC.fieldOf("entity").forGetter((spawnData) -> spawnData.entityToSpawn), SpawnData.CustomSpawnRules.CODEC.optionalFieldOf("custom_spawn_rules").forGetter((spawnData) -> spawnData.customSpawnRules)).apply(instance, SpawnData::new));
     public static final Codec<SimpleWeightedRandomList<SpawnData>> LIST_CODEC = SimpleWeightedRandomList.wrappedCodecAllowingEmpty(CODEC);
     public static final String DEFAULT_TYPE = "minecraft:pig";
@@ -22,8 +20,8 @@ public record SpawnData(CompoundTag d, Optional<SpawnData.CustomSpawnRules> e) {
     }
 
     public SpawnData {
-        ResourceLocation resourceLocation = ResourceLocation.tryParse(compoundTag.getString("id"));
-        compoundTag.putString("id", resourceLocation != null ? resourceLocation.toString() : "minecraft:pig");
+        ResourceLocation resourceLocation = ResourceLocation.tryParse(entityToSpawn.getString("id"));
+        entityToSpawn.putString("id", resourceLocation != null ? resourceLocation.toString() : "minecraft:pig");
     }
 
     public CompoundTag getEntityToSpawn() {
@@ -34,30 +32,12 @@ public record SpawnData(CompoundTag d, Optional<SpawnData.CustomSpawnRules> e) {
         return this.customSpawnRules;
     }
 
-    public CompoundTag entityToSpawn() {
-        return this.entityToSpawn;
-    }
-
-    public Optional<SpawnData.CustomSpawnRules> customSpawnRules() {
-        return this.customSpawnRules;
-    }
-
-    public static record CustomSpawnRules(InclusiveRange<Integer> b, InclusiveRange<Integer> c) {
-        private final InclusiveRange<Integer> blockLightLimit;
-        private final InclusiveRange<Integer> skyLightLimit;
+    public static record CustomSpawnRules(InclusiveRange<Integer> blockLightLimit, InclusiveRange<Integer> skyLightLimit) {
         private static final InclusiveRange<Integer> LIGHT_RANGE = new InclusiveRange(0, 15);
         public static final Codec<SpawnData.CustomSpawnRules> CODEC = RecordCodecBuilder.create((instance) -> instance.group(InclusiveRange.INT.optionalFieldOf("block_light_limit", LIGHT_RANGE).flatXmap(SpawnData.CustomSpawnRules::checkLightBoundaries, SpawnData.CustomSpawnRules::checkLightBoundaries).forGetter((customSpawnRules) -> customSpawnRules.blockLightLimit), InclusiveRange.INT.optionalFieldOf("sky_light_limit", LIGHT_RANGE).flatXmap(SpawnData.CustomSpawnRules::checkLightBoundaries, SpawnData.CustomSpawnRules::checkLightBoundaries).forGetter((customSpawnRules) -> customSpawnRules.skyLightLimit)).apply(instance, SpawnData.CustomSpawnRules::new));
 
         private static DataResult<InclusiveRange<Integer>> checkLightBoundaries(InclusiveRange<Integer> inclusiveRange) {
             return !LIGHT_RANGE.contains(inclusiveRange) ? DataResult.error("Light values must be withing range " + LIGHT_RANGE) : DataResult.success(inclusiveRange);
         }
-
-        public InclusiveRange<Integer> blockLightLimit() {
-            return this.blockLightLimit;
-        }
-
-        public InclusiveRange<Integer> skyLightLimit() {
-            return this.skyLightLimit;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/biome/Biome.java b/src/main/java/net/minecraft/world/level/biome/Biome.java
index e2ef7c13bf39a807d7aaf9169fdd1fccf3404701..3bcf0ff3a29ffe1a14132d2feb6a5c37c0c7de87 100644
--- a/src/main/java/net/minecraft/world/level/biome/Biome.java
+++ b/src/main/java/net/minecraft/world/level/biome/Biome.java
@@ -299,28 +299,8 @@ public final class Biome {
         }
     }
 
-    static record ClimateSettings(Biome.Precipitation b, float c, Biome.TemperatureModifier d, float e) {
-        final Biome.Precipitation precipitation;
-        final float temperature;
-        final Biome.TemperatureModifier temperatureModifier;
-        final float downfall;
+    static record ClimateSettings(Biome.Precipitation precipitation, float temperature, Biome.TemperatureModifier temperatureModifier, float downfall) {
         public static final MapCodec<Biome.ClimateSettings> CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(Biome.Precipitation.CODEC.fieldOf("precipitation").forGetter((climateSettings) -> climateSettings.precipitation), Codec.FLOAT.fieldOf("temperature").forGetter((climateSettings) -> climateSettings.temperature), Biome.TemperatureModifier.CODEC.optionalFieldOf("temperature_modifier", Biome.TemperatureModifier.NONE).forGetter((climateSettings) -> climateSettings.temperatureModifier), Codec.FLOAT.fieldOf("downfall").forGetter((climateSettings) -> climateSettings.downfall)).apply(instance, Biome.ClimateSettings::new));
-
-        public Biome.Precipitation precipitation() {
-            return this.precipitation;
-        }
-
-        public float temperature() {
-            return this.temperature;
-        }
-
-        public Biome.TemperatureModifier temperatureModifier() {
-            return this.temperatureModifier;
-        }
-
-        public float downfall() {
-            return this.downfall;
-        }
     }
 
     public static enum Precipitation implements StringRepresentable {
diff --git a/src/main/java/net/minecraft/world/level/biome/Climate.java b/src/main/java/net/minecraft/world/level/biome/Climate.java
index 47e7daa4b7ccc31753e669e8bba1bf27010b21e6..eeb840b73ce08ae45c9d1ad8efc2d3d00390f7e9 100644
--- a/src/main/java/net/minecraft/world/level/biome/Climate.java
+++ b/src/main/java/net/minecraft/world/level/biome/Climate.java
@@ -60,9 +60,7 @@ public class Climate {
         long distance(Climate.RTree.Node<T> var1, long[] var2);
     }
 
-    public static record Parameter(long b, long c) {
-        private final long min;
-        private final long max;
+    public static record Parameter(long min, long max) {
         public static final Codec<Climate.Parameter> CODEC = ExtraCodecs.intervalCodec(Codec.floatRange(-2.0F, 2.0F), "min", "max", (f, f2) -> f.compareTo(f2) > 0 ? DataResult.error("Cannon construct interval, min > max (" + f + " > " + f2 + ")") : DataResult.success(new Climate.Parameter(Climate.quantizeCoord(f), Climate.quantizeCoord(f2))), (parameter) -> Climate.unquantizeCoord(parameter.min()), (parameter) -> Climate.unquantizeCoord(parameter.max()));
 
         public static Climate.Parameter point(float f) {
@@ -104,14 +102,6 @@ public class Climate {
         public Climate.Parameter span(@Nullable Climate.Parameter parameter) {
             return parameter == null ? this : new Climate.Parameter(Math.min(this.min, parameter.min()), Math.max(this.max, parameter.max()));
         }
-
-        public long min() {
-            return this.min;
-        }
-
-        public long max() {
-            return this.max;
-        }
     }
 
     public static class ParameterList<T> {
@@ -159,14 +149,7 @@ public class Climate {
         }
     }
 
-    public static record ParameterPoint(Climate.Parameter b, Climate.Parameter c, Climate.Parameter d, Climate.Parameter e, Climate.Parameter f, Climate.Parameter g, long h) {
-        private final Climate.Parameter temperature;
-        private final Climate.Parameter humidity;
-        private final Climate.Parameter continentalness;
-        private final Climate.Parameter erosion;
-        private final Climate.Parameter depth;
-        private final Climate.Parameter weirdness;
-        private final long offset;
+    public static record ParameterPoint(Climate.Parameter temperature, Climate.Parameter humidity, Climate.Parameter continentalness, Climate.Parameter erosion, Climate.Parameter depth, Climate.Parameter weirdness, long offset) {
         public static final Codec<Climate.ParameterPoint> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Climate.Parameter.CODEC.fieldOf("temperature").forGetter((parameterPoint) -> parameterPoint.temperature), Climate.Parameter.CODEC.fieldOf("humidity").forGetter((parameterPoint) -> parameterPoint.humidity), Climate.Parameter.CODEC.fieldOf("continentalness").forGetter((parameterPoint) -> parameterPoint.continentalness), Climate.Parameter.CODEC.fieldOf("erosion").forGetter((parameterPoint) -> parameterPoint.erosion), Climate.Parameter.CODEC.fieldOf("depth").forGetter((parameterPoint) -> parameterPoint.depth), Climate.Parameter.CODEC.fieldOf("weirdness").forGetter((parameterPoint) -> parameterPoint.weirdness), Codec.floatRange(0.0F, 1.0F).fieldOf("offset").xmap(Climate::quantizeCoord, Climate::unquantizeCoord).forGetter((parameterPoint) -> parameterPoint.offset)).apply(instance, Climate.ParameterPoint::new));
 
         long fitness(Climate.TargetPoint targetPoint) {
@@ -176,34 +159,6 @@ public class Climate {
         protected List<Climate.Parameter> parameterSpace() {
             return ImmutableList.of(this.temperature, this.humidity, this.continentalness, this.erosion, this.depth, this.weirdness, new Climate.Parameter(this.offset, this.offset));
         }
-
-        public Climate.Parameter temperature() {
-            return this.temperature;
-        }
-
-        public Climate.Parameter humidity() {
-            return this.humidity;
-        }
-
-        public Climate.Parameter continentalness() {
-            return this.continentalness;
-        }
-
-        public Climate.Parameter erosion() {
-            return this.erosion;
-        }
-
-        public Climate.Parameter depth() {
-            return this.depth;
-        }
-
-        public Climate.Parameter weirdness() {
-            return this.weirdness;
-        }
-
-        public long offset() {
-            return this.offset;
-        }
     }
 
     protected static final class RTree<T> {
@@ -418,15 +373,7 @@ public class Climate {
         }
     }
 
-    public static record Sampler(DensityFunction a, DensityFunction b, DensityFunction c, DensityFunction d, DensityFunction e, DensityFunction f, List<Climate.ParameterPoint> g) {
-        private final DensityFunction temperature;
-        private final DensityFunction humidity;
-        private final DensityFunction continentalness;
-        private final DensityFunction erosion;
-        private final DensityFunction depth;
-        private final DensityFunction weirdness;
-        private final List<Climate.ParameterPoint> spawnTarget;
-
+    public static record Sampler(DensityFunction temperature, DensityFunction humidity, DensityFunction continentalness, DensityFunction erosion, DensityFunction depth, DensityFunction weirdness, List<Climate.ParameterPoint> spawnTarget) {
         public Climate.TargetPoint sample(int i, int i2, int i3) {
             int i4 = QuartPos.toBlock(i);
             int i5 = QuartPos.toBlock(i2);
@@ -438,34 +385,6 @@ public class Climate {
         public BlockPos findSpawnPosition() {
             return this.spawnTarget.isEmpty() ? BlockPos.ZERO : Climate.findSpawnPosition(this.spawnTarget, this);
         }
-
-        public DensityFunction temperature() {
-            return this.temperature;
-        }
-
-        public DensityFunction humidity() {
-            return this.humidity;
-        }
-
-        public DensityFunction continentalness() {
-            return this.continentalness;
-        }
-
-        public DensityFunction erosion() {
-            return this.erosion;
-        }
-
-        public DensityFunction depth() {
-            return this.depth;
-        }
-
-        public DensityFunction weirdness() {
-            return this.weirdness;
-        }
-
-        public List<Climate.ParameterPoint> spawnTarget() {
-            return this.spawnTarget;
-        }
     }
 
     static class SpawnFinder {
@@ -514,55 +433,14 @@ public class Climate {
             return new Climate.SpawnFinder.Result(new BlockPos(i, 0, i2), l + l2);
         }
 
-        static record Result(BlockPos a, long b) {
-            private final BlockPos location;
-            private final long fitness;
-
-            public BlockPos location() {
-                return this.location;
-            }
-
-            public long fitness() {
-                return this.fitness;
-            }
+        static record Result(BlockPos location, long fitness) {
         }
     }
 
-    public static record TargetPoint(long a, long b, long c, long d, long e, long f) {
-        final long temperature;
-        final long humidity;
-        final long continentalness;
-        final long erosion;
-        final long depth;
-        final long weirdness;
-
+    public static record TargetPoint(long temperature, long humidity, long continentalness, long erosion, long depth, long weirdness) {
         @VisibleForTesting
         protected long[] toParameterArray() {
             return new long[]{this.temperature, this.humidity, this.continentalness, this.erosion, this.depth, this.weirdness, 0L};
         }
-
-        public long temperature() {
-            return this.temperature;
-        }
-
-        public long humidity() {
-            return this.humidity;
-        }
-
-        public long continentalness() {
-            return this.continentalness;
-        }
-
-        public long erosion() {
-            return this.erosion;
-        }
-
-        public long depth() {
-            return this.depth;
-        }
-
-        public long weirdness() {
-            return this.weirdness;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/biome/FeatureSorter.java b/src/main/java/net/minecraft/world/level/biome/FeatureSorter.java
index 16bf19f3f4f560bef96ea97ebdd500b21c79ee79..7803a8f5d4a78db85d644ad4360fef54ba8a6640 100644
--- a/src/main/java/net/minecraft/world/level/biome/FeatureSorter.java
+++ b/src/main/java/net/minecraft/world/level/biome/FeatureSorter.java
@@ -30,22 +30,7 @@ public class FeatureSorter {
         Object2IntMap<PlacedFeature> object2IntMap = new Object2IntOpenHashMap();
         MutableInt mutableInt = new MutableInt(0);
 
-        record FeatureData(int a, int b, PlacedFeature c) {
-            private final int featureIndex;
-            private final int step;
-            private final PlacedFeature feature;
-
-            public int featureIndex() {
-                return this.featureIndex;
-            }
-
-            public int step() {
-                return this.step;
-            }
-
-            public PlacedFeature feature() {
-                return this.feature;
-            }
+        record FeatureData(int featureIndex, int step, PlacedFeature feature) {
         }
 
         Comparator<FeatureData> comparator = Comparator.comparingInt(FeatureData::step).thenComparingInt(FeatureData::featureIndex);
@@ -58,9 +43,9 @@ public class FeatureSorter {
             i = Math.max(i, list3.size());
 
             for(int i2 = 0; i2 < list3.size(); ++i2) {
-                for(Holder<PlacedFeature> holder : (HolderSet)list3.get(i2)) {
+                for(Holder<PlacedFeature> holder : list3.get(i2)) {
                     PlacedFeature placedFeature = (PlacedFeature)holder.value();
-                    list2.add(new FeatureData(object2IntMap.computeIfAbsent(placedFeature, (object) -> mutableInt.getAndIncrement()), i2, placedFeature));
+                    list2.add(new FeatureData(object2IntMap.computeIfAbsent(placedFeature, (objectIn) -> mutableInt.getAndIncrement()), i2, placedFeature));
                 }
             }
 
@@ -76,12 +61,12 @@ public class FeatureSorter {
         Set<FeatureData> set3 = new TreeSet(comparator);
         List<FeatureData> list4 = Lists.newArrayList();
 
-        for(FeatureData 1FeatureData : map.keySet()) {
+        for(FeatureData featureData : map.keySet()) {
             if (!set3.isEmpty()) {
                 throw new IllegalStateException("You somehow broke the universe; DFS bork (iteration finished with non-empty in-progress vertex set");
             }
 
-            if (!set2.contains(1FeatureData) && Graph.depthFirstSearch(map, set2, set3, list4::add, (T)1FeatureData)) {
+            if (!set2.contains(featureData) && Graph.depthFirstSearch(map, set2, set3, list4::add, featureData)) {
                 if (!flag) {
                     throw new IllegalStateException("Feature order cycle found");
                 }
@@ -123,20 +108,9 @@ public class FeatureSorter {
         return builder.build();
     }
 
-    public static record StepFeatureData(List<PlacedFeature> a, ToIntFunction<PlacedFeature> b) {
-        private final List<PlacedFeature> features;
-        private final ToIntFunction<PlacedFeature> indexMapping;
-
+    public static record StepFeatureData(List<PlacedFeature> features, ToIntFunction<PlacedFeature> indexMapping) {
         StepFeatureData(List<PlacedFeature> list) {
             this(list, Util.createIndexLookup(list, (i) -> new Object2IntOpenCustomHashMap(i, Util.identityStrategy())));
         }
-
-        public List<PlacedFeature> features() {
-            return this.features;
-        }
-
-        public ToIntFunction<PlacedFeature> indexMapping() {
-            return this.indexMapping;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java b/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
index 20447778b676e915c5fe11c041479923ee2ec940..2aeedcb2c7a2efa546e3cd63aa7cb0a9e0497e5d 100644
--- a/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
+++ b/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
@@ -28,7 +28,7 @@ import net.minecraft.util.VisibleForDebug;
 import net.minecraft.world.level.levelgen.NoiseRouterData;
 
 public class MultiNoiseBiomeSource extends BiomeSource {
-    public static final MapCodec<MultiNoiseBiomeSource> DIRECT_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(ExtraCodecs.nonEmptyList(RecordCodecBuilder.create((instancex) -> instancex.group(Climate.ParameterPoint.CODEC.fieldOf("parameters").forGetter(Pair::getFirst), Biome.CODEC.fieldOf("biome").forGetter(Pair::getSecond)).apply(instancex, Pair::of)).listOf()).xmap(Climate.ParameterList::new, Climate.ParameterList::values).fieldOf("biomes").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.parameters)).apply(instance, MultiNoiseBiomeSource::new));
+    public static final MapCodec<MultiNoiseBiomeSource> DIRECT_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(ExtraCodecs.nonEmptyList(RecordCodecBuilder.<Pair<Climate.ParameterPoint, Holder<Biome>>>create((instancex) -> instancex.group(Climate.ParameterPoint.CODEC.fieldOf("parameters").forGetter(Pair::getFirst), Biome.CODEC.fieldOf("biome").forGetter(Pair::getSecond)).apply(instancex, Pair::of)).listOf()).xmap(Climate.ParameterList::new, Climate.ParameterList::values).fieldOf("biomes").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.parameters)).apply(instance, MultiNoiseBiomeSource::new));
     public static final Codec<MultiNoiseBiomeSource> CODEC = Codec.mapEither(MultiNoiseBiomeSource.PresetInstance.CODEC, DIRECT_CODEC).xmap((either) -> (MultiNoiseBiomeSource)either.map(MultiNoiseBiomeSource.PresetInstance::biomeSource, Function.identity()), (multiNoiseBiomeSource) -> (Either)multiNoiseBiomeSource.preset().map(Either::left).orElseGet(() -> Either.right(multiNoiseBiomeSource))).codec();
     private final Climate.ParameterList<Holder<Biome>> parameters;
     private final Optional<MultiNoiseBiomeSource.PresetInstance> preset;
@@ -119,21 +119,11 @@ public class MultiNoiseBiomeSource extends BiomeSource {
         }
     }
 
-    static record PresetInstance(MultiNoiseBiomeSource.Preset b, Registry<Biome> c) {
-        private final MultiNoiseBiomeSource.Preset preset;
-        private final Registry<Biome> biomes;
+    static record PresetInstance(MultiNoiseBiomeSource.Preset preset, Registry<Biome> biomes) {
         public static final MapCodec<MultiNoiseBiomeSource.PresetInstance> CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(ResourceLocation.CODEC.flatXmap((resourceLocation) -> Optional.ofNullable((MultiNoiseBiomeSource.Preset)MultiNoiseBiomeSource.Preset.BY_NAME.get(resourceLocation)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown preset: " + resourceLocation)), (preset) -> DataResult.success(preset.name)).fieldOf("preset").stable().forGetter(MultiNoiseBiomeSource.PresetInstance::preset), RegistryOps.retrieveRegistry(Registry.BIOME_REGISTRY).forGetter(MultiNoiseBiomeSource.PresetInstance::biomes)).apply(instance, instance.stable(MultiNoiseBiomeSource.PresetInstance::new)));
 
         public MultiNoiseBiomeSource biomeSource() {
             return this.preset.biomeSource(this, true);
         }
-
-        public MultiNoiseBiomeSource.Preset preset() {
-            return this.preset;
-        }
-
-        public Registry<Biome> biomes() {
-            return this.biomes;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java b/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java
index f36aeb222dcf0648d626f423d9ba26ca0a2f3be3..6d688bc0d308f09cc21b0f01476ba387c0c390cb 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java
@@ -33,6 +33,6 @@ public abstract class BaseEntityBlock extends Block implements EntityBlock {
 
     @Nullable
     protected static <E extends BlockEntity, A extends BlockEntity> BlockEntityTicker<A> createTickerHelper(BlockEntityType<A> blockEntityType, BlockEntityType<E> blockEntityType2, BlockEntityTicker<? super E> blockEntityTicker) {
-        return blockEntityType2 == blockEntityType ? blockEntityTicker : null;
+        return blockEntityType2 == blockEntityType ? (BlockEntityTicker<A>) blockEntityTicker : null;
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/block/Blocks.java b/src/main/java/net/minecraft/world/level/block/Blocks.java
index 900ced861bd57ab63656a70b33ea430dff403183..41b9a522a62d1c93571af98bdbb3855435b39646 100644
--- a/src/main/java/net/minecraft/world/level/block/Blocks.java
+++ b/src/main/java/net/minecraft/world/level/block/Blocks.java
@@ -984,7 +984,7 @@ public class Blocks {
     }
 
     private static Boolean ocelotOrParrot(BlockState blockState, BlockGetter blockGetter, BlockPos blockPos, EntityType<?> entityType) {
-        return (boolean)entityType == EntityType.OCELOT || entityType == EntityType.PARROT;
+        return entityType == EntityType.OCELOT || entityType == EntityType.PARROT;
     }
 
     private static BedBlock bed(DyeColor dyeColor) {
diff --git a/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java b/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
index 94198785a875a18d134a5e6102bb73846933111e..9c4ca39dbda2362460bd31732a4a31307b7137e0 100644
--- a/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
@@ -55,7 +55,7 @@ public class IronBarsBlock extends CrossCollisionBlock {
                 return true;
             }
 
-            if (blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(direction)) && blockState2.getValue((Property)PROPERTY_BY_DIRECTION.get(direction.getOpposite()))) {
+            if (blockState.getValue(PROPERTY_BY_DIRECTION.get(direction)) && blockState2.getValue(PROPERTY_BY_DIRECTION.get(direction.getOpposite()))) {
                 return true;
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/block/MultifaceSpreader.java b/src/main/java/net/minecraft/world/level/block/MultifaceSpreader.java
index e2ae949debc93bbef19f02f47cd4af00af82cb82..35e8e3ebd8202f3eec4becdfdd7fe53c5c498d42 100644
--- a/src/main/java/net/minecraft/world/level/block/MultifaceSpreader.java
+++ b/src/main/java/net/minecraft/world/level/block/MultifaceSpreader.java
@@ -127,17 +127,7 @@ public class MultifaceSpreader {
         }
     }
 
-    public static record SpreadPos(BlockPos a, Direction b) {
-        private final BlockPos pos;
-        private final Direction face;
-
-        public BlockPos pos() {
-            return this.pos;
-        }
-
-        public Direction face() {
-            return this.face;
-        }
+    public static record SpreadPos(BlockPos pos, Direction face) {
     }
 
     @FunctionalInterface
diff --git a/src/main/java/net/minecraft/world/level/block/PipeBlock.java b/src/main/java/net/minecraft/world/level/block/PipeBlock.java
index 4186147b04fa1a6e286969cd3484a4f9ec864f8e..432a87a9d892212697585a0a59e29aad76c0bf99 100644
--- a/src/main/java/net/minecraft/world/level/block/PipeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PipeBlock.java
@@ -79,7 +79,7 @@ public class PipeBlock extends Block {
         int i = 0;
 
         for(int i2 = 0; i2 < DIRECTIONS.length; ++i2) {
-            if (blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(DIRECTIONS[i2]))) {
+            if (blockState.getValue(PROPERTY_BY_DIRECTION.get(DIRECTIONS[i2]))) {
                 i |= 1 << i2;
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java b/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
index 426c17f1fb12f3cb85f07f9fa2a68e495a417a80..b1db17abab82b9cb103e45238aa63cb7d4c33037 100644
--- a/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
@@ -509,15 +509,15 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
     private static Optional<PointedDripstoneBlock.FluidInfo> getFluidAboveStalactite(Level level, BlockPos blockPos, BlockState blockState) {
         return !isStalactite(blockState) ? Optional.empty() : findRootBlock(level, blockPos, blockState, 11).map((blockPosx) -> {
             BlockPos blockPos2 = blockPosx.above();
-            BlockState blockState = level.getBlockState(blockPos2);
+            BlockState blockStateIn = level.getBlockState(blockPos2);
             Fluid fluid;
-            if (blockState.is(Blocks.MUD) && !level.dimensionType().ultraWarm()) {
+            if (blockStateIn.is(Blocks.MUD) && !level.dimensionType().ultraWarm()) {
                 fluid = Fluids.WATER;
             } else {
                 fluid = level.getFluidState(blockPos2).getType();
             }
 
-            return new PointedDripstoneBlock.FluidInfo(blockPos2, fluid, blockState);
+            return new PointedDripstoneBlock.FluidInfo(blockPos2, fluid, blockStateIn);
         });
     }
 
@@ -569,21 +569,6 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
         }
     }
 
-    static record FluidInfo(BlockPos a, Fluid b, BlockState c) {
-        final BlockPos pos;
-        final Fluid fluid;
-        final BlockState sourceState;
-
-        public BlockPos pos() {
-            return this.pos;
-        }
-
-        public Fluid fluid() {
-            return this.fluid;
-        }
-
-        public BlockState sourceState() {
-            return this.sourceState;
-        }
+    static record FluidInfo(BlockPos pos, Fluid fluid, BlockState sourceState) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
index a2f7a78706d2bf119486f60c9c91f4fd7a8fa9d1..61164f3151a946fa2245743e5ebdeda24c8985a8 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
@@ -85,7 +85,7 @@ public class RedStoneWireBlock extends Block {
         VoxelShape voxelShape = SHAPE_DOT;
 
         for(Direction direction : Direction.Plane.HORIZONTAL) {
-            RedstoneSide redstoneSide = blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(direction));
+            RedstoneSide redstoneSide = blockState.getValue(PROPERTY_BY_DIRECTION.get(direction));
             if (redstoneSide == RedstoneSide.SIDE) {
                 voxelShape = Shapes.or(voxelShape, (VoxelShape)SHAPES_FLOOR.get(direction));
             } else if (redstoneSide == RedstoneSide.UP) {
@@ -172,7 +172,7 @@ public class RedStoneWireBlock extends Block {
         BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
 
         for(Direction direction : Direction.Plane.HORIZONTAL) {
-            RedstoneSide redstoneSide = blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(direction));
+            RedstoneSide redstoneSide = blockState.getValue(PROPERTY_BY_DIRECTION.get(direction));
             if (redstoneSide != RedstoneSide.NONE && !levelAccessor.getBlockState(mutableBlockPos.setWithOffset(blockPos, direction)).is(this)) {
                 mutableBlockPos.move(Direction.DOWN);
                 BlockState blockState2 = levelAccessor.getBlockState(mutableBlockPos);
@@ -394,7 +394,7 @@ public class RedStoneWireBlock extends Block {
         int i = blockState.getValue(POWER);
         if (i != 0) {
             for(Direction direction : Direction.Plane.HORIZONTAL) {
-                RedstoneSide redstoneSide = blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(direction));
+                RedstoneSide redstoneSide = blockState.getValue(PROPERTY_BY_DIRECTION.get(direction));
                 switch(redstoneSide) {
                 case UP:
                     this.spawnParticlesAlongLine(level, randomSource, blockPos, COLORS[i], direction, Direction.UP, -0.5F, 0.5F);
diff --git a/src/main/java/net/minecraft/world/level/block/SculkSpreader.java b/src/main/java/net/minecraft/world/level/block/SculkSpreader.java
index 139b5796fdaac3a06847e32343f6471b72521b39..316e527d1264a083eb1e20b42fb57668505028ce 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkSpreader.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkSpreader.java
@@ -105,7 +105,7 @@ public class SculkSpreader {
     public void load(CompoundTag compoundTag) {
         if (compoundTag.contains("cursors", 9)) {
             this.cursors.clear();
-            List<SculkSpreader.ChargeCursor> list = SculkSpreader.ChargeCursor.CODEC.listOf().parse(new Dynamic(NbtOps.INSTANCE, compoundTag.getList("cursors", 10))).resultOrPartial(LOGGER::error).orElseGet(ArrayList::new);
+            List<SculkSpreader.ChargeCursor> list = SculkSpreader.ChargeCursor.CODEC.listOf().parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.getList("cursors", 10))).resultOrPartial(LOGGER::error).orElseGet(ArrayList::new);
             int i = Math.min(list.size(), 32);
 
             for(int i2 = 0; i2 < i; ++i2) {
diff --git a/src/main/java/net/minecraft/world/level/block/WeatheringCopper.java b/src/main/java/net/minecraft/world/level/block/WeatheringCopper.java
index 42b6ea6f07acc5811e2e4c2c938906638ce5bbb3..cb839f61945e33542f5ac60160dd833b9cc8c458 100644
--- a/src/main/java/net/minecraft/world/level/block/WeatheringCopper.java
+++ b/src/main/java/net/minecraft/world/level/block/WeatheringCopper.java
@@ -8,7 +8,7 @@ import java.util.function.Supplier;
 import net.minecraft.world.level.block.state.BlockState;
 
 public interface WeatheringCopper extends ChangeOverTimeBlock<WeatheringCopper.WeatherState> {
-    Supplier<BiMap<Block, Block>> NEXT_BY_BLOCK = Suppliers.memoize(() -> ImmutableBiMap.builder().put(Blocks.COPPER_BLOCK, Blocks.EXPOSED_COPPER).put(Blocks.EXPOSED_COPPER, Blocks.WEATHERED_COPPER).put(Blocks.WEATHERED_COPPER, Blocks.OXIDIZED_COPPER).put(Blocks.CUT_COPPER, Blocks.EXPOSED_CUT_COPPER).put(Blocks.EXPOSED_CUT_COPPER, Blocks.WEATHERED_CUT_COPPER).put(Blocks.WEATHERED_CUT_COPPER, Blocks.OXIDIZED_CUT_COPPER).put(Blocks.CUT_COPPER_SLAB, Blocks.EXPOSED_CUT_COPPER_SLAB).put(Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.WEATHERED_CUT_COPPER_SLAB).put(Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.OXIDIZED_CUT_COPPER_SLAB).put(Blocks.CUT_COPPER_STAIRS, Blocks.EXPOSED_CUT_COPPER_STAIRS).put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.WEATHERED_CUT_COPPER_STAIRS).put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.OXIDIZED_CUT_COPPER_STAIRS).build());
+    Supplier<BiMap<Block, Block>> NEXT_BY_BLOCK = Suppliers.memoize(() -> ImmutableBiMap.<Block, Block>builder().put(Blocks.COPPER_BLOCK, Blocks.EXPOSED_COPPER).put(Blocks.EXPOSED_COPPER, Blocks.WEATHERED_COPPER).put(Blocks.WEATHERED_COPPER, Blocks.OXIDIZED_COPPER).put(Blocks.CUT_COPPER, Blocks.EXPOSED_CUT_COPPER).put(Blocks.EXPOSED_CUT_COPPER, Blocks.WEATHERED_CUT_COPPER).put(Blocks.WEATHERED_CUT_COPPER, Blocks.OXIDIZED_CUT_COPPER).put(Blocks.CUT_COPPER_SLAB, Blocks.EXPOSED_CUT_COPPER_SLAB).put(Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.WEATHERED_CUT_COPPER_SLAB).put(Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.OXIDIZED_CUT_COPPER_SLAB).put(Blocks.CUT_COPPER_STAIRS, Blocks.EXPOSED_CUT_COPPER_STAIRS).put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.WEATHERED_CUT_COPPER_STAIRS).put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.OXIDIZED_CUT_COPPER_STAIRS).build());
     Supplier<BiMap<Block, Block>> PREVIOUS_BY_BLOCK = Suppliers.memoize(() -> ((BiMap)NEXT_BY_BLOCK.get()).inverse());
 
     static Optional<Block> getPrevious(Block block) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
index cbd616f2cefc650998ebfef95fb2ac2d7ffa73ff..6e46b8873b6698360cb91694d1826dfe98166a14 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
@@ -45,9 +45,9 @@ public class SculkCatalystBlockEntity extends BlockEntity implements GameEventLi
         } else {
             GameEvent.Context context = message.context();
             if (message.gameEvent() == GameEvent.ENTITY_DIE) {
-                Entity i = context.sourceEntity();
-                if (i instanceof LivingEntity) {
-                    LivingEntity livingEntity = (LivingEntity)i;
+                Entity entity = context.sourceEntity();
+                if (entity instanceof LivingEntity) {
+                    LivingEntity livingEntity = (LivingEntity)entity;
                     if (!livingEntity.wasExperienceConsumed()) {
                         int i = livingEntity.getExperienceReward();
                         if (livingEntity.shouldDropExperience() && i > 0) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/SculkSensorBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/SculkSensorBlockEntity.java
index b8a3f53974238330279d3b943d384acf2403f70a..283bb68f635613599c3d5efa015e57f1943e358b 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/SculkSensorBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/SculkSensorBlockEntity.java
@@ -31,7 +31,7 @@ public class SculkSensorBlockEntity extends BlockEntity implements VibrationList
         super.load(compoundTag);
         this.lastVibrationFrequency = compoundTag.getInt("last_vibration_frequency");
         if (compoundTag.contains("listener", 10)) {
-            VibrationListener.codec(this).parse(new Dynamic(NbtOps.INSTANCE, compoundTag.getCompound("listener"))).resultOrPartial(LOGGER::error).ifPresent((vibrationListener) -> this.listener = vibrationListener);
+            VibrationListener.codec(this).parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.getCompound("listener"))).resultOrPartial(LOGGER::error).ifPresent((vibrationListener) -> this.listener = vibrationListener);
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/SculkShriekerBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/SculkShriekerBlockEntity.java
index 2e10b0fa832ba13289bfb4718040473e16c83e32..401833f91bc55245dcf4c01e4f64a4e1d4b2a06c 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/SculkShriekerBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/SculkShriekerBlockEntity.java
@@ -70,7 +70,7 @@ public class SculkShriekerBlockEntity extends BlockEntity implements VibrationLi
         }
 
         if (compoundTag.contains("listener", 10)) {
-            VibrationListener.codec(this).parse(new Dynamic(NbtOps.INSTANCE, compoundTag.getCompound("listener"))).resultOrPartial(LOGGER::error).ifPresent((vibrationListener) -> this.listener = vibrationListener);
+            VibrationListener.codec(this).parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.getCompound("listener"))).resultOrPartial(LOGGER::error).ifPresent((vibrationListener) -> this.listener = vibrationListener);
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java
index 7bace7efa360a0d9bc4e041d251f5647db1fe5dc..72899840b3382a5b7349fb9e515e347fb0ac48c2 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java
@@ -265,12 +265,12 @@ public class StructureBlockEntity extends BlockEntity {
             BlockPos blockPos3 = new BlockPos(blockPos.getX() + 80, this.level.getMaxBuildHeight() - 1, blockPos.getZ() + 80);
             Stream<BlockPos> stream = this.getRelatedCorners(blockPos2, blockPos3);
             return calculateEnclosingBoundingBox(blockPos, stream).filter((boundingBox) -> {
-                int i = boundingBox.maxX() - boundingBox.minX();
+                int ix = boundingBox.maxX() - boundingBox.minX();
                 int i2 = boundingBox.maxY() - boundingBox.minY();
                 int i3 = boundingBox.maxZ() - boundingBox.minZ();
-                if (i > 1 && i2 > 1 && i3 > 1) {
+                if (ix > 1 && i2 > 1 && i3 > 1) {
                     this.structurePos = new BlockPos(boundingBox.minX() - blockPos.getX() + 1, boundingBox.minY() - blockPos.getY() + 1, boundingBox.minZ() - blockPos.getZ() + 1);
-                    this.structureSize = new Vec3i(i - 1, i2 - 1, i3 - 1);
+                    this.structureSize = new Vec3i(ix - 1, i2 - 1, i3 - 1);
                     this.setChanged();
                     BlockState blockState = this.level.getBlockState(blockPos);
                     this.level.sendBlockUpdated(blockPos, blockState, blockState, 3);
diff --git a/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java b/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
index 1e07de2b3263c22f2942899ab2d82593af62583a..496a061eba13ba89bb689ebef4d1fac661ddb257 100644
--- a/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
+++ b/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.level.block.state;
 
 import com.google.common.base.MoreObjects;
+import com.google.common.collect.ImmutableCollection;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSortedMap;
@@ -34,7 +35,7 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
     protected StateDefinition(Function<O, S> function, O object, StateDefinition.Factory<O, S> factory, Map<String, Property<?>> map) {
         this.owner = object;
         this.propertiesByName = ImmutableSortedMap.copyOf(map);
-        Supplier<S> supplier = () -> (StateHolder)function.apply(object);
+        Supplier<S> supplier = () -> (S) function.apply(object);
         MapCodec<S> mapCodec = MapCodec.of(Encoder.empty(), Decoder.unit(supplier));
 
         Entry<String, Property<?>> entry;
@@ -47,13 +48,12 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
         List<S> list = Lists.newArrayList();
         Stream<List<Pair<Property<?>, Comparable<?>>>> stream = Stream.of(Collections.emptyList());
 
-        Property<?> property;
-        for(UnmodifiableIterator var11 = this.propertiesByName.values().iterator(); var11.hasNext(); stream = stream.flatMap((listx) -> property.getPossibleValues().stream().map((comparable) -> {
-                List<Pair<Property<?>, Comparable<?>>> list2 = Lists.newArrayList(listx);
-                list2.add(Pair.of(property, comparable));
-                return list2;
-            }))) {
-            property = (Property)var11.next();
+        for(Property<?> property : this.propertiesByName.values()) {
+            stream = stream.flatMap((l) -> property.getPossibleValues().stream().map((o) -> {
+                List<Pair<Property<?>, Comparable<?>>> list1 = Lists.newArrayList(l);
+                list1.add(Pair.of(property, o));
+                return list1;
+            }));
         }
 
         stream.forEach((list2) -> {
@@ -72,7 +72,7 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
 
     private static <S extends StateHolder<?, S>, T extends Comparable<T>> MapCodec<S> appendPropertyCodec(MapCodec<S> mapCodec, Supplier<S> supplier, String s, Property<T> property) {
         return Codec.mapPair(mapCodec, property.valueCodec().fieldOf(s).orElseGet((sx) -> {
-        }, () -> property.value((StateHolder)supplier.get()))).xmap((pair) -> (StateHolder)((StateHolder)pair.getFirst()).setValue(property, ((Property.Value)pair.getSecond()).value()), (stateHolder) -> Pair.of(stateHolder, property.value(stateHolder)));
+        }, () -> property.value(supplier.get()))).xmap((pair) -> pair.getFirst().setValue(property, pair.getSecond().value()), (stateHolder) -> Pair.of(stateHolder, property.value(stateHolder)));
     }
 
     public ImmutableList<S> getPossibleStates() {
diff --git a/src/main/java/net/minecraft/world/level/block/state/StateHolder.java b/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
index 8c87e11f9f15006bdf7bfbed0b6f3d78a24dc59a..9c7f21e2d82c94fcd23d8ff1ccf5d0c3be6e441a 100644
--- a/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
+++ b/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
@@ -98,7 +98,7 @@ public abstract class StateHolder<O, S> {
 
     public <T extends Comparable<T>> Optional<T> getOptionalValue(Property<T> property) {
         Comparable<?> comparable = (Comparable)this.values.get(property);
-        return comparable == null ? Optional.empty() : Optional.of((Comparable)property.getValueClass().cast(comparable));
+        return comparable == null ? Optional.empty() : Optional.of(property.getValueClass().cast(comparable));
     }
 
     public <T extends Comparable<T>, V extends T> S setValue(Property<T> property, V comparable) {
@@ -150,9 +150,9 @@ public abstract class StateHolder<O, S> {
     }
 
     protected static <O, S extends StateHolder<O, S>> Codec<S> codec(Codec<O> codec, Function<O, S> function) {
-        return codec.dispatch("Name", (stateHolder) -> stateHolder.owner, (object) -> {
+        return codec.<S>dispatch("Name", (stateHolder) -> stateHolder.owner, (object) -> {
             S stateHolder = (S)(function.apply(object));
-            return stateHolder.getValues().isEmpty() ? Codec.unit(stateHolder) : stateHolder.propertiesCodec.codec().optionalFieldOf("Properties").xmap((optional) -> (StateHolder)optional.orElse(stateHolder), Optional::of).codec();
+            return stateHolder.getValues().isEmpty() ? Codec.unit(stateHolder) : stateHolder.propertiesCodec.codec().optionalFieldOf("Properties").xmap((optional) -> optional.orElse(stateHolder), Optional::of).codec();
         });
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java b/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java
index 8c44f10310d942ac0ad9d6c312c8c4dbf90e675f..90c0f7e4815c59f8b2a52cf471f209c8eeed0007 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java
@@ -35,7 +35,7 @@ public class EnumProperty<T extends Enum<T> & StringRepresentable> extends Prope
     }
 
     public Optional<T> getValue(String s) {
-        return Optional.ofNullable((Enum)this.names.get(s));
+        return Optional.ofNullable(this.names.get(s));
     }
 
     public String getName(T enum_) {
@@ -64,7 +64,7 @@ public class EnumProperty<T extends Enum<T> & StringRepresentable> extends Prope
     }
 
     public static <T extends Enum<T> & StringRepresentable> EnumProperty<T> create(String s, Class<T> clazz, Predicate<T> predicate) {
-        return create(s, clazz, Arrays.stream((Enum[])clazz.getEnumConstants()).filter(predicate).collect(Collectors.toList()));
+        return create(s, clazz, Arrays.stream(clazz.getEnumConstants()).filter(predicate).collect(Collectors.toList()));
     }
 
     public static <T extends Enum<T> & StringRepresentable> EnumProperty<T> create(String s, Class<T> clazz, T... enums) {
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/Property.java b/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
index 50ab8ec6c08f089887de3eab8fd0a984a4efc714..1fc0381d6fb1ed349fd8eb3ea569b6b4482cffee 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
@@ -89,26 +89,15 @@ public abstract class Property<T extends Comparable<T>> {
         return dataResult.map((comparable) -> stateHolder.setValue(this, comparable)).setPartial(stateHolder);
     }
 
-    public static record Value<T extends Comparable<T>>(Property<T> a, T b) {
-        private final Property<T> property;
-        private final T value;
-
+    public static record Value<T extends Comparable<T>>(Property<T> property, T value) {
         public Value {
-            if (!property.getPossibleValues().contains(comparable)) {
-                throw new IllegalArgumentException("Value " + comparable + " does not belong to property " + property);
+            if (!property.getPossibleValues().contains(value)) {
+                throw new IllegalArgumentException("Value " + value + " does not belong to property " + property);
             }
         }
 
         public String toString() {
             return this.property.getName() + "=" + this.property.getName(this.value);
         }
-
-        public Property<T> property() {
-            return this.property;
-        }
-
-        public T value() {
-            return this.value;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
index 07b08f1f8b1936b63604882c23931097ccc63dd7..ff1ac6e2affa1a8b46d741418eb6ebc1c09ef2af 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
@@ -401,16 +401,5 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
         return this;
     }
 
-    public static record TicksToSave(SerializableTickContainer<Block> a, SerializableTickContainer<Fluid> b) {
-        private final SerializableTickContainer<Block> blocks;
-        private final SerializableTickContainer<Fluid> fluids;
-
-        public SerializableTickContainer<Block> blocks() {
-            return this.blocks;
-        }
-
-        public SerializableTickContainer<Fluid> fluids() {
-            return this.fluids;
-        }
-    }
+    public static record TicksToSave(SerializableTickContainer<Block> blocks, SerializableTickContainer<Fluid> fluids) {}
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
index b03ace78e9d4b487f9bf1cd893c30f47f97dc027..05c38fa26a15e5ac08125b775b122bb93d4f57a6 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
@@ -208,7 +208,7 @@ public abstract class ChunkGenerator {
 
         for(Holder<Structure> holder : holderSet) {
             for(StructurePlacement structurePlacement : this.getPlacementsForStructure(holder, serverLevel.getChunkSource().randomState())) {
-                (map.computeIfAbsent(structurePlacement, (structurePlacement) -> new ObjectArraySet())).add(holder);
+                (map.computeIfAbsent(structurePlacement, (structurePlacementIn) -> new ObjectArraySet())).add(holder);
             }
         }
 
@@ -358,9 +358,9 @@ public abstract class ChunkGenerator {
             long l = worldgenRandom.setDecorationSeed(worldGenLevel.getSeed(), blockPos.getX(), blockPos.getZ());
             Set<Holder<Biome>> set = new ObjectArraySet();
             ChunkPos.rangeClosed(sectionPos.chunk(), 1).forEach((chunkPosx) -> {
-                ChunkAccess chunkAccess = worldGenLevel.getChunk(chunkPosx.x, chunkPosx.z);
+                ChunkAccess chunkAccessIn = worldGenLevel.getChunk(chunkPosx.x, chunkPosx.z);
 
-                for(LevelChunkSection levelChunkSection : chunkAccess.getSections()) {
+                for(LevelChunkSection levelChunkSection : chunkAccessIn.getSections()) {
                     levelChunkSection.getBiomes().getAll(set::add);
                 }
 
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
index b3f1fffccb20ed8b8b8f24f5664a8f7850feeae9..e8b79a78f4580c37b32c2d460cbafe7317635b88 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
@@ -43,21 +43,24 @@ public class ChunkStatus {
     };
     public static final ChunkStatus EMPTY = registerSimple("empty", (ChunkStatus)null, -1, PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (chunkStatus, serverLevel, chunkGenerator, list, chunkAccess) -> {
     });
-    public static final ChunkStatus STRUCTURE_STARTS = register("structure_starts", EMPTY, 0, PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (chunkStatus, executor, serverLevel, chunkGenerator, structureTemplateManager, threadedLevelLightEngine, function, list, chunkAccess, flag) -> {
-        if (!chunkAccess.getStatus().isOrAfter(chunkStatus)) {
-            if (serverLevel.getServer().getWorldData().worldGenSettings().generateStructures()) {
-                chunkGenerator.createStructures(serverLevel.registryAccess(), serverLevel.getChunkSource().randomState(), serverLevel.structureManager(), chunkAccess, structureTemplateManager, serverLevel.getSeed());
-            }
+    public static final ChunkStatus STRUCTURE_STARTS = register("structure_starts", EMPTY, 0, PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, new GenerationTask() {
+        @Override
+        public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> doWork(ChunkStatus chunkStatus, Executor executor, ServerLevel serverLevel, ChunkGenerator chunkGenerator, StructureTemplateManager structureTemplateManager, ThreadedLevelLightEngine threadedLevelLightEngine, Function<ChunkAccess, CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> chunkAccessCompletableFutureFunction, List<ChunkAccess> list, ChunkAccess chunkAccess, boolean var10) {
+            if (!chunkAccess.getStatus().isOrAfter(chunkStatus)) {
+                if (serverLevel.getServer().getWorldData().worldGenSettings().generateStructures()) {
+                    chunkGenerator.createStructures(serverLevel.registryAccess(), serverLevel.getChunkSource().randomState(), serverLevel.structureManager(), chunkAccess, structureTemplateManager, serverLevel.getSeed());
+                }
 
-            if (chunkAccess instanceof ProtoChunk) {
-                ProtoChunk protoChunk = (ProtoChunk)chunkAccess;
-                protoChunk.setStatus(chunkStatus);
+                if (chunkAccess instanceof ProtoChunk) {
+                    ProtoChunk protoChunk = (ProtoChunk) chunkAccess;
+                    protoChunk.setStatus(chunkStatus);
+                }
+
+                serverLevel.onStructureStartsAvailable(chunkAccess);
             }
 
-            serverLevel.onStructureStartsAvailable(chunkAccess);
+            return CompletableFuture.completedFuture(Either.left(chunkAccess));
         }
-
-        return CompletableFuture.completedFuture(Either.left(chunkAccess));
     }, (chunkStatus, serverLevel, structureTemplateManager, threadedLevelLightEngine, function, chunkAccess) -> {
         if (!chunkAccess.getStatus().isOrAfter(chunkStatus)) {
             if (chunkAccess instanceof ProtoChunk) {
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index ad3271f1a53ab025b6175e78b384d4a3a2a347cb..75d0aa5ab076c4704061848fc6ed73404b7b2190 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -588,7 +588,7 @@ public class LevelChunk extends ChunkAccess {
 
     private <T extends BlockEntity> void updateBlockEntityTicker(T blockEntity) {
         BlockState blockState = blockEntity.getBlockState();
-        BlockEntityTicker<T> blockEntityTicker = blockState.getTicker(this.level, blockEntity.getType());
+        BlockEntityTicker<T> blockEntityTicker = (BlockEntityTicker<T>) blockState.getTicker(this.level, blockEntity.getType());
         if (blockEntityTicker == null) {
             this.removeBlockEntityTicker(blockEntity.getBlockPos());
         } else {
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
index 6dbed27582e96b832059559493361c2efff8bdce..54a7f7e3ed5609df977c95db923e408b94ef1478 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
@@ -143,11 +143,11 @@ public class LevelChunkSection {
             }
         }
 
-        BlockCounter 1BlockCounter = new BlockCounter();
-        this.states.count(1BlockCounter);
-        this.nonEmptyBlockCount = (short)1BlockCounter.nonEmptyBlockCount;
-        this.tickingBlockCount = (short)1BlockCounter.tickingBlockCount;
-        this.tickingFluidCount = (short)1BlockCounter.tickingFluidCount;
+        BlockCounter blockCounter = new BlockCounter();
+        this.states.count(blockCounter);
+        this.nonEmptyBlockCount = (short)blockCounter.nonEmptyBlockCount;
+        this.tickingBlockCount = (short)blockCounter.tickingBlockCount;
+        this.tickingFluidCount = (short)blockCounter.tickingFluidCount;
     }
 
     public PalettedContainer<BlockState> getStates() {
diff --git a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
index 00c7907640c14238e49b858a3b1189e2dfa8f450..7c551fe7f87efd6516509677c28770de8b58950f 100644
--- a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
@@ -40,7 +40,7 @@ public class PalettedContainer<T> implements PaletteResize<T> {
     }
 
     public static <T> Codec<PalettedContainer<T>> codec(IdMap<T> idMap, Codec<T> codec, PalettedContainer.Strategy strategy, T object) {
-        return RecordCodecBuilder.create((instance) -> instance.group(codec.mapResult(ExtraCodecs.orElsePartial(object)).listOf().fieldOf("palette").forGetter(PalettedContainer.DiscData::paletteEntries), Codec.LONG_STREAM.optionalFieldOf("data").forGetter(PalettedContainer.DiscData::storage)).apply(instance, PalettedContainer.DiscData::new)).comapFlatMap((discData) -> read(idMap, strategy, discData), (palettedContainer) -> palettedContainer.write(idMap, strategy));
+        return RecordCodecBuilder.<DiscData<T>>create((instance) -> instance.group(codec.mapResult(ExtraCodecs.orElsePartial(object)).listOf().fieldOf("palette").forGetter(PalettedContainer.DiscData<T>::paletteEntries), Codec.LONG_STREAM.optionalFieldOf("data").forGetter(PalettedContainer.DiscData<T>::storage)).apply(instance, PalettedContainer.DiscData::new)).comapFlatMap((discData) -> read(idMap, strategy, discData), (palettedContainer) -> palettedContainer.write(idMap, strategy));
     }
 
     public PalettedContainer(IdMap<T> idMap, PalettedContainer.Strategy strategy, PalettedContainer.Configuration<T> configuration, BitStorage bitStorage, List<T> list) {
@@ -256,10 +256,7 @@ public class PalettedContainer<T> implements PaletteResize<T> {
         }
     }
 
-    static record Configuration<T>(Palette.Factory a, int b) {
-        private final Palette.Factory factory;
-        private final int bits;
-
+    static record Configuration<T>(Palette.Factory factory, int bits) {
         public PalettedContainer.Data<T> createData(IdMap<T> idMap, PaletteResize<T> paletteResize, int i) {
             BitStorage bitStorage = (BitStorage)(this.bits == 0 ? new ZeroBitStorage(i) : new SimpleBitStorage(this.bits, i));
             Palette<T> palette = this.factory.create(this.bits, idMap, paletteResize, List.of());
@@ -280,11 +277,7 @@ public class PalettedContainer<T> implements PaletteResize<T> {
         void accept(T var1, int var2);
     }
 
-    static record Data<T>(PalettedContainer.Configuration<T> a, BitStorage b, Palette<T> c) {
-        private final PalettedContainer.Configuration<T> configuration;
-        final BitStorage storage;
-        final Palette<T> palette;
-
+    static record Data<T>(PalettedContainer.Configuration<T> configuration, BitStorage storage, Palette<T> palette) {
         public void copyFrom(Palette<T> palette, BitStorage bitStorage) {
             for(int i = 0; i < bitStorage.getSize(); ++i) {
                 T object = palette.valueFor(bitStorage.get(i));
@@ -302,31 +295,9 @@ public class PalettedContainer<T> implements PaletteResize<T> {
             this.palette.write(friendlyByteBuf);
             friendlyByteBuf.writeLongArray(this.storage.getRaw());
         }
-
-        public PalettedContainer.Configuration<T> configuration() {
-            return this.configuration;
-        }
-
-        public BitStorage storage() {
-            return this.storage;
-        }
-
-        public Palette<T> palette() {
-            return this.palette;
-        }
     }
 
-    static record DiscData<T>(List<T> a, Optional<LongStream> b) {
-        private final List<T> paletteEntries;
-        private final Optional<LongStream> storage;
-
-        public List<T> paletteEntries() {
-            return this.paletteEntries;
-        }
-
-        public Optional<LongStream> storage() {
-            return this.storage;
-        }
+    static record DiscData<T>(List<T> paletteEntries, Optional<LongStream> storage) {
     }
 
     public abstract static class Strategy {
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index aeec3a0d27667ffd1aa862c947b9ec8345f435dc..564d542f399e5b58e40bf0ff6c2d913578358095 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -140,7 +140,7 @@ public class ChunkSerializer {
         ChunkStatus.ChunkType chunkType = getChunkTypeFromTag(compoundTag);
         BlendingData blendingData;
         if (compoundTag.contains("blending_data", 10)) {
-            blendingData = (BlendingData)BlendingData.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundTag.getCompound("blending_data"))).resultOrPartial(LOGGER::error).orElse(null);
+            blendingData = (BlendingData)BlendingData.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.getCompound("blending_data"))).resultOrPartial(LOGGER::error).orElse(null);
         } else {
             blendingData = null;
         }
@@ -157,7 +157,7 @@ public class ChunkSerializer {
             chunkAccess = protoChunk;
             protoChunk.setInhabitedTime(l);
             if (compoundTag.contains("below_zero_retrogen", 10)) {
-                BelowZeroRetrogen.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundTag.getCompound("below_zero_retrogen"))).resultOrPartial(LOGGER::error).ifPresent(protoChunk::setBelowZeroRetrogen);
+                BelowZeroRetrogen.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.getCompound("below_zero_retrogen"))).resultOrPartial(LOGGER::error).ifPresent(protoChunk::setBelowZeroRetrogen);
             }
 
             ChunkStatus chunkStatus = ChunkStatus.byName(compoundTag.getString("Status"));
@@ -383,13 +383,13 @@ public class ChunkSerializer {
 
             if (listTag2 != null) {
                 for(int i = 0; i < listTag2.size(); ++i) {
-                    CompoundTag compoundTag = listTag2.getCompound(i);
-                    boolean flag = compoundTag.getBoolean("keepPacked");
+                    CompoundTag tag = listTag2.getCompound(i);
+                    boolean flag = tag.getBoolean("keepPacked");
                     if (flag) {
-                        levelChunk.setBlockEntityNbt(compoundTag);
+                        levelChunk.setBlockEntityNbt(tag);
                     } else {
-                        BlockPos blockPos = BlockEntity.getPosFromTag(compoundTag);
-                        BlockEntity blockEntity = BlockEntity.loadStatic(blockPos, levelChunk.getBlockState(blockPos), compoundTag);
+                        BlockPos blockPos = BlockEntity.getPosFromTag(tag);
+                        BlockEntity blockEntity = BlockEntity.loadStatic(blockPos, levelChunk.getBlockState(blockPos), tag);
                         if (blockEntity != null) {
                             levelChunk.setBlockEntity(blockEntity);
                         }
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/IOWorker.java b/src/main/java/net/minecraft/world/level/chunk/storage/IOWorker.java
index 1cbc5299e8144f8da4902b56917a99cc39652b3b..5e28f7d428660947ebf0fb549294023f597af97c 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/IOWorker.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/IOWorker.java
@@ -107,8 +107,7 @@ public class IOWorker implements ChunkScanAccess, AutoCloseable {
                 if (tag instanceof CompoundTag) {
                     CompoundTag compoundTag = (CompoundTag)tag;
                     if (this.isOldChunk(compoundTag)) {
-                        int i = chunkPosx.getRegionLocalZ() * 32 + chunkPosx.getRegionLocalX();
-                        bitSet.set(i);
+                        bitSet.set(chunkPosx.getRegionLocalZ() * 32 + chunkPosx.getRegionLocalX());
                     }
                 }
 
diff --git a/src/main/java/net/minecraft/world/level/dimension/DimensionType.java b/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
index 7838928112e0f06e264fa39d3d4b2d0529a5e6ae..eadb703c18934fdf4e98adfb4d991148451a0e6d 100644
--- a/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
+++ b/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
@@ -21,22 +21,22 @@ import net.minecraft.util.valueproviders.IntProvider;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
 
-public record DimensionType(OptionalLong k, boolean l, boolean m, boolean n, boolean o, double p, boolean q, boolean r, int s, int t, int u, TagKey<Block> v, ResourceLocation w, float x, DimensionType.MonsterSettings y) {
-    private final OptionalLong fixedTime;
-    private final boolean hasSkyLight;
-    private final boolean hasCeiling;
-    private final boolean ultraWarm;
-    private final boolean natural;
-    private final double coordinateScale;
-    private final boolean bedWorks;
-    private final boolean respawnAnchorWorks;
-    private final int minY;
-    private final int height;
-    private final int logicalHeight;
-    private final TagKey<Block> infiniburn;
-    private final ResourceLocation effectsLocation;
-    private final float ambientLight;
-    private final DimensionType.MonsterSettings monsterSettings;
+public record DimensionType(
+        OptionalLong fixedTime,
+        boolean hasSkyLight,
+        boolean hasCeiling,
+        boolean ultraWarm,
+        boolean natural,
+        double coordinateScale,
+        boolean bedWorks,
+        boolean respawnAnchorWorks,
+        int minY,
+        int height,
+        int logicalHeight,
+        TagKey<Block> infiniburn,
+        ResourceLocation effectsLocation,
+        float ambientLight,
+        DimensionType.MonsterSettings monsterSettings) {
     public static final int BITS_FOR_Y = BlockPos.PACKED_Y_LENGTH;
     public static final int MIN_HEIGHT = 16;
     public static final int Y_SIZE = (1 << BITS_FOR_Y) - 32;
@@ -50,15 +50,15 @@ public record DimensionType(OptionalLong k, boolean l, boolean m, boolean n, boo
     public static final Codec<Holder<DimensionType>> CODEC = RegistryFileCodec.create(Registry.DIMENSION_TYPE_REGISTRY, DIRECT_CODEC);
 
     public DimensionType {
-        if (i2 < 16) {
+        if (height < 16) {
             throw new IllegalStateException("height has to be at least 16");
-        } else if (i + i2 > MAX_Y + 1) {
+        } else if (minY + height > MAX_Y + 1) {
             throw new IllegalStateException("min_y + height cannot be higher than: " + (MAX_Y + 1));
-        } else if (i3 > i2) {
+        } else if (logicalHeight > height) {
             throw new IllegalStateException("logical_height cannot be higher than height");
-        } else if (i2 % 16 != 0) {
+        } else if (height % 16 != 0) {
             throw new IllegalStateException("height has to be multiple of 16");
-        } else if (i % 16 != 0) {
+        } else if (minY % 16 != 0) {
             throw new IllegalStateException("min_y has to be a multiple of 16");
         }
     }
@@ -131,87 +131,7 @@ public record DimensionType(OptionalLong k, boolean l, boolean m, boolean n, boo
         return this.monsterSettings.monsterSpawnBlockLightLimit();
     }
 
-    public OptionalLong fixedTime() {
-        return this.fixedTime;
-    }
-
-    public boolean hasSkyLight() {
-        return this.hasSkyLight;
-    }
-
-    public boolean hasCeiling() {
-        return this.hasCeiling;
-    }
-
-    public boolean ultraWarm() {
-        return this.ultraWarm;
-    }
-
-    public boolean natural() {
-        return this.natural;
-    }
-
-    public double coordinateScale() {
-        return this.coordinateScale;
-    }
-
-    public boolean bedWorks() {
-        return this.bedWorks;
-    }
-
-    public boolean respawnAnchorWorks() {
-        return this.respawnAnchorWorks;
-    }
-
-    public int minY() {
-        return this.minY;
-    }
-
-    public int height() {
-        return this.height;
-    }
-
-    public int logicalHeight() {
-        return this.logicalHeight;
-    }
-
-    public TagKey<Block> infiniburn() {
-        return this.infiniburn;
-    }
-
-    public ResourceLocation effectsLocation() {
-        return this.effectsLocation;
-    }
-
-    public float ambientLight() {
-        return this.ambientLight;
-    }
-
-    public DimensionType.MonsterSettings monsterSettings() {
-        return this.monsterSettings;
-    }
-
-    public static record MonsterSettings(boolean b, boolean c, IntProvider d, int e) {
-        private final boolean piglinSafe;
-        private final boolean hasRaids;
-        private final IntProvider monsterSpawnLightTest;
-        private final int monsterSpawnBlockLightLimit;
+    public static record MonsterSettings(boolean piglinSafe, boolean hasRaids, IntProvider monsterSpawnLightTest, int monsterSpawnBlockLightLimit) {
         public static final MapCodec<DimensionType.MonsterSettings> CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(Codec.BOOL.fieldOf("piglin_safe").forGetter(DimensionType.MonsterSettings::piglinSafe), Codec.BOOL.fieldOf("has_raids").forGetter(DimensionType.MonsterSettings::hasRaids), IntProvider.codec(0, 15).fieldOf("monster_spawn_light_level").forGetter(DimensionType.MonsterSettings::monsterSpawnLightTest), Codec.intRange(0, 15).fieldOf("monster_spawn_block_light_limit").forGetter(DimensionType.MonsterSettings::monsterSpawnBlockLightLimit)).apply(instance, DimensionType.MonsterSettings::new));
-
-        public boolean piglinSafe() {
-            return this.piglinSafe;
-        }
-
-        public boolean hasRaids() {
-            return this.hasRaids;
-        }
-
-        public IntProvider monsterSpawnLightTest() {
-            return this.monsterSpawnLightTest;
-        }
-
-        public int monsterSpawnBlockLightLimit() {
-            return this.monsterSpawnBlockLightLimit;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java b/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java
index 2f1a9bdf87c13e44a25f8a3d211762fe7a6ca000..0434e0da7afdb1be8ad27e731f43ab2d1ad7549e 100644
--- a/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java
+++ b/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java
@@ -143,7 +143,7 @@ public class EndDragonFight {
         }
 
         ListTag listTag = new ListTag();
-        ObjectListIterator var3 = this.gateways.iterator();
+        ObjectListIterator<Integer> var3 = this.gateways.iterator();
 
         while(var3.hasNext()) {
             int i = var3.next();
diff --git a/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java b/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
index 858c787c19dd50d77e92d29ffa6dfc93f6bbb129..83bdfe971cdeb340db7e92732f85f02ba229d370 100644
--- a/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
@@ -105,7 +105,7 @@ public class EntitySectionStorage<T extends EntityAccess> {
 
     public LongSet getAllChunksWithExistingSections() {
         LongSet longSet = new LongOpenHashSet();
-        this.sections.keySet().forEach((l) -> longSet.add(getChunkKeyFromSectionKey(l)));
+        this.sections.keySet().forEach((java.util.function.LongConsumer) (l) -> longSet.add(getChunkKeyFromSectionKey(l)));
         return longSet;
     }
 
diff --git a/src/main/java/net/minecraft/world/level/entity/EntityTickList.java b/src/main/java/net/minecraft/world/level/entity/EntityTickList.java
index 36eea12c8ba27654a0d6c739fac0e21c352cc6f3..0e57d738d89ecbb8b3c8c68e9b6f92055e6c6a7f 100644
--- a/src/main/java/net/minecraft/world/level/entity/EntityTickList.java
+++ b/src/main/java/net/minecraft/world/level/entity/EntityTickList.java
@@ -25,9 +25,9 @@ public class EntityTickList {
                 this.passive.put(entry.getIntKey(), (Entity)entry.getValue());
             }
 
-            Int2ObjectMap<Entity> int2ObjectMap = this.active;
+            Int2ObjectMap<Entity> originalMap = this.active;
             this.active = this.passive;
-            this.passive = int2ObjectMap;
+            this.passive = originalMap;
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
index d22d47fbce75c55c27528b2b997834de9128d694..86ee111a7aa0907bd11ea194e34da98de6f7ffdc 100644
--- a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
+++ b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
@@ -223,7 +223,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
     }
 
     private void processUnloads() {
-        this.chunksToUnload.removeIf((l) -> this.chunkVisibility.get(l) != Visibility.HIDDEN ? true : this.processChunkUnload(l));
+        this.chunksToUnload.removeIf((java.util.function.LongPredicate) (l) -> this.chunkVisibility.get(l) != Visibility.HIDDEN ? true : this.processChunkUnload(l));
     }
 
     private void processPendingLoads() {
@@ -255,7 +255,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
     }
 
     public void autoSave() {
-        this.getAllChunksToSave().forEach((l) -> {
+        this.getAllChunksToSave().forEach((java.util.function.LongConsumer) (l) -> {
             boolean flag = this.chunkVisibility.get(l) == Visibility.HIDDEN;
             if (flag) {
                 this.processChunkUnload(l);
@@ -273,7 +273,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
         while(!longSet.isEmpty()) {
             this.permanentStorage.flush(false);
             this.processPendingLoads();
-            longSet.removeIf((l) -> {
+            longSet.removeIf((java.util.function.LongPredicate) (l) -> {
                 boolean flag = this.chunkVisibility.get(l) == Visibility.HIDDEN;
                 return flag ? this.processChunkUnload(l) : this.storeChunkSections(l, (entityAccess) -> {
                 });
@@ -310,7 +310,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
 
     public void dumpSections(Writer writer) throws IOException {
         CsvOutput csvOutput = CsvOutput.builder().addColumn("x").addColumn("y").addColumn("z").addColumn("visibility").addColumn("load_status").addColumn("entity_count").build(writer);
-        this.sectionStorage.getAllChunksWithExistingSections().forEach((l) -> {
+        this.sectionStorage.getAllChunksWithExistingSections().forEach((java.util.function.LongConsumer) (l) -> {
             PersistentEntitySectionManager.ChunkLoadStatus chunkLoadStatus = (PersistentEntitySectionManager.ChunkLoadStatus)this.chunkLoadStatuses.get(l);
             this.sectionStorage.getExistingSectionPositionsInChunk(l).forEach((lx) -> {
                 EntitySection<T> entitySection = this.sectionStorage.getSection(lx);
diff --git a/src/main/java/net/minecraft/world/level/gameevent/GameEvent.java b/src/main/java/net/minecraft/world/level/gameevent/GameEvent.java
index 607eab8983dfc80c05ad1525afcbf69596c14e69..b6fc2664ce8d3d85de893a932f91880d4c311fe3 100644
--- a/src/main/java/net/minecraft/world/level/gameevent/GameEvent.java
+++ b/src/main/java/net/minecraft/world/level/gameevent/GameEvent.java
@@ -93,12 +93,7 @@ public class GameEvent {
         return this.builtInRegistryHolder.is(tagKey);
     }
 
-    public static record Context(@Nullable Entity a, @Nullable BlockState b) {
-        @Nullable
-        private final Entity sourceEntity;
-        @Nullable
-        private final BlockState affectedState;
-
+    public static record Context(@Nullable Entity sourceEntity, @Nullable BlockState affectedState) {
         public static GameEvent.Context of(@Nullable Entity entity) {
             return new GameEvent.Context(entity, (BlockState)null);
         }
@@ -110,16 +105,6 @@ public class GameEvent {
         public static GameEvent.Context of(@Nullable Entity entity, @Nullable BlockState blockState) {
             return new GameEvent.Context(entity, blockState);
         }
-
-        @Nullable
-        public Entity sourceEntity() {
-            return this.sourceEntity;
-        }
-
-        @Nullable
-        public BlockState affectedState() {
-            return this.affectedState;
-        }
     }
 
     public static final class Message implements Comparable<GameEvent.Message> {
diff --git a/src/main/java/net/minecraft/world/level/gameevent/PositionSourceType.java b/src/main/java/net/minecraft/world/level/gameevent/PositionSourceType.java
index c565b92b29154ace6ab6119aa4ee73aacbf5ede2..7b3cb0b82ed5e543f7593beabd61391854b8ad74 100644
--- a/src/main/java/net/minecraft/world/level/gameevent/PositionSourceType.java
+++ b/src/main/java/net/minecraft/world/level/gameevent/PositionSourceType.java
@@ -26,6 +26,6 @@ public interface PositionSourceType<T extends PositionSource> {
 
     static <T extends PositionSource> void toNetwork(T positionSource, FriendlyByteBuf friendlyByteBuf) {
         friendlyByteBuf.writeResourceLocation(Registry.POSITION_SOURCE_TYPE.getKey(positionSource.getType()));
-        positionSource.getType().write(friendlyByteBuf, positionSource);
+        ((PositionSourceType) positionSource.getType()).write(friendlyByteBuf, positionSource);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/gameevent/vibrations/VibrationListener.java b/src/main/java/net/minecraft/world/level/gameevent/vibrations/VibrationListener.java
index 521d6ba00ea87020ee57374fbce67ee5790d7aa4..f7c51d2fa90615bc0fc4a89d92148b1136822bfc 100644
--- a/src/main/java/net/minecraft/world/level/gameevent/vibrations/VibrationListener.java
+++ b/src/main/java/net/minecraft/world/level/gameevent/vibrations/VibrationListener.java
@@ -122,16 +122,7 @@ public class VibrationListener implements GameEventListener {
         return true;
     }
 
-    public static record ReceivingEvent(GameEvent b, float c, Vec3 d, @Nullable UUID e, @Nullable UUID f, @Nullable Entity g) {
-        final GameEvent gameEvent;
-        private final float distance;
-        final Vec3 pos;
-        @Nullable
-        private final UUID uuid;
-        @Nullable
-        private final UUID projectileOwnerUuid;
-        @Nullable
-        private final Entity entity;
+    public static record ReceivingEvent(GameEvent gameEvent, float distance, Vec3 pos, @Nullable UUID uuid, @Nullable UUID projectileOwnerUuid, @Nullable Entity entity) {
         public static final Codec<VibrationListener.ReceivingEvent> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Registry.GAME_EVENT.byNameCodec().fieldOf("game_event").forGetter(VibrationListener.ReceivingEvent::gameEvent), Codec.floatRange(0.0F, Float.MAX_VALUE).fieldOf("distance").forGetter(VibrationListener.ReceivingEvent::distance), Vec3.CODEC.fieldOf("pos").forGetter(VibrationListener.ReceivingEvent::pos), ExtraCodecs.UUID.optionalFieldOf("source").forGetter((receivingEvent) -> Optional.ofNullable(receivingEvent.uuid())), ExtraCodecs.UUID.optionalFieldOf("projectile_owner").forGetter((receivingEvent) -> Optional.ofNullable(receivingEvent.projectileOwnerUuid()))).apply(instance, (gameEvent, f, vec3, optional, optional2) -> new VibrationListener.ReceivingEvent(gameEvent, f, vec3, (UUID)optional.orElse(null), (UUID)optional2.orElse(null))));
 
         public ReceivingEvent(GameEvent gameEvent, float f, Vec3 vec3, @Nullable UUID uuid, @Nullable UUID uuid2) {
@@ -161,33 +152,6 @@ public class VibrationListener implements GameEventListener {
         public Optional<Entity> getProjectileOwner(ServerLevel serverLevel) {
             return this.getEntity(serverLevel).filter((entity) -> entity instanceof Projectile).map((entity) -> (Projectile)entity).map(Projectile::getOwner).or(() -> Optional.ofNullable(this.projectileOwnerUuid).map(serverLevel::getEntity));
         }
-
-        public GameEvent gameEvent() {
-            return this.gameEvent;
-        }
-
-        public float distance() {
-            return this.distance;
-        }
-
-        public Vec3 pos() {
-            return this.pos;
-        }
-
-        @Nullable
-        public UUID uuid() {
-            return this.uuid;
-        }
-
-        @Nullable
-        public UUID projectileOwnerUuid() {
-            return this.projectileOwnerUuid;
-        }
-
-        @Nullable
-        public Entity entity() {
-            return this.entity;
-        }
     }
 
     public interface VibrationListenerConfig {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/Beardifier.java b/src/main/java/net/minecraft/world/level/levelgen/Beardifier.java
index d8433b51ef614df551be5fff0a3d77ba18c272d1..e2c16edab60f6b029ee4674c7ab9e5d7c5b411e2 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/Beardifier.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/Beardifier.java
@@ -174,21 +174,6 @@ public class Beardifier implements DensityFunctions.BeardifierOrMarker {
     }
 
     @VisibleForTesting
-    public static record Rigid(BoundingBox a, TerrainAdjustment b, int c) {
-        private final BoundingBox box;
-        private final TerrainAdjustment terrainAdjustment;
-        private final int groundLevelDelta;
-
-        public BoundingBox box() {
-            return this.box;
-        }
-
-        public TerrainAdjustment terrainAdjustment() {
-            return this.terrainAdjustment;
-        }
-
-        public int groundLevelDelta() {
-            return this.groundLevelDelta;
-        }
+    public static record Rigid(BoundingBox box, TerrainAdjustment terrainAdjustment, int groundLevelDelta) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/DensityFunction.java b/src/main/java/net/minecraft/world/level/levelgen/DensityFunction.java
index c8464e47d2b9ce26b8621e093e890a51857c4a69..b66a69e0bf05eb6cbecd273b0ab46d13ef4d941d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/DensityFunction.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/DensityFunction.java
@@ -79,10 +79,7 @@ public interface DensityFunction {
         }
     }
 
-    public static record NoiseHolder(Holder<NormalNoise.NoiseParameters> b, @Nullable NormalNoise c) {
-        private final Holder<NormalNoise.NoiseParameters> noiseData;
-        @Nullable
-        private final NormalNoise noise;
+    public static record NoiseHolder(Holder<NormalNoise.NoiseParameters> noiseData, @Nullable NormalNoise noise) {
         public static final Codec<DensityFunction.NoiseHolder> CODEC = NormalNoise.NoiseParameters.CODEC.xmap((holder) -> new DensityFunction.NoiseHolder(holder, (NormalNoise)null), DensityFunction.NoiseHolder::noiseData);
 
         public NoiseHolder(Holder<NormalNoise.NoiseParameters> holder) {
@@ -96,15 +93,6 @@ public interface DensityFunction {
         public double maxValue() {
             return this.noise == null ? 2.0D : this.noise.maxValue();
         }
-
-        public Holder<NormalNoise.NoiseParameters> noiseData() {
-            return this.noiseData;
-        }
-
-        @Nullable
-        public NormalNoise noise() {
-            return this.noise;
-        }
     }
 
     public interface SimpleFunction extends DensityFunction {
@@ -117,22 +105,7 @@ public interface DensityFunction {
         }
     }
 
-    public static record SinglePointContext(int a, int b, int c) implements DensityFunction.FunctionContext {
-        private final int blockX;
-        private final int blockY;
-        private final int blockZ;
-
-        public int blockX() {
-            return this.blockX;
-        }
-
-        public int blockY() {
-            return this.blockY;
-        }
-
-        public int blockZ() {
-            return this.blockZ;
-        }
+    public static record SinglePointContext(int blockX, int blockY, int blockZ) implements DensityFunction.FunctionContext {
     }
 
     public interface Visitor {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/DensityFunctions.java b/src/main/java/net/minecraft/world/level/levelgen/DensityFunctions.java
index bada53cd28c6dbed3a3a313fc1f854b9be6c095c..d9ccabe109c2f32c49e73300b5bf5598124c6048 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/DensityFunctions.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/DensityFunctions.java
@@ -237,13 +237,7 @@ public final class DensityFunctions {
         return add(mul(densityFunction, add(densityFunction2, constant(-d))), constant(d));
     }
 
-    static record Ap2(DensityFunctions.TwoArgumentSimpleFunction.Type e, DensityFunction f, DensityFunction g, double h, double i) implements DensityFunctions.TwoArgumentSimpleFunction {
-        private final DensityFunctions.TwoArgumentSimpleFunction.Type type;
-        private final DensityFunction argument1;
-        private final DensityFunction argument2;
-        private final double minValue;
-        private final double maxValue;
-
+    static record Ap2(DensityFunctions.TwoArgumentSimpleFunction.Type type, DensityFunction argument1, DensityFunction argument2, double minValue, double maxValue) implements DensityFunctions.TwoArgumentSimpleFunction {
         public double compute(DensityFunction.FunctionContext functionContext) {
             double d = this.argument1.compute(functionContext);
             double var10000;
@@ -306,26 +300,6 @@ public final class DensityFunctions {
         public DensityFunction mapAll(DensityFunction.Visitor visitor) {
             return visitor.apply(DensityFunctions.TwoArgumentSimpleFunction.create(this.type, this.argument1.mapAll(visitor), this.argument2.mapAll(visitor)));
         }
-
-        public double minValue() {
-            return this.minValue;
-        }
-
-        public double maxValue() {
-            return this.maxValue;
-        }
-
-        public DensityFunctions.TwoArgumentSimpleFunction.Type type() {
-            return this.type;
-        }
-
-        public DensityFunction argument1() {
-            return this.argument1;
-        }
-
-        public DensityFunction argument2() {
-            return this.argument2;
-        }
     }
 
     protected static enum BeardifierMarker implements DensityFunctions.BeardifierOrMarker {
@@ -382,8 +356,7 @@ public final class DensityFunctions {
         }
     }
 
-    static record BlendDensity(DensityFunction a) implements DensityFunctions.TransformerWithContext {
-        private final DensityFunction input;
+    static record BlendDensity(DensityFunction input) implements DensityFunctions.TransformerWithContext {
         static final KeyDispatchDataCodec<DensityFunctions.BlendDensity> CODEC = DensityFunctions.singleFunctionArgumentCodec(DensityFunctions.BlendDensity::new, DensityFunctions.BlendDensity::input);
 
         public double transform(DensityFunction.FunctionContext functionContext, double d) {
@@ -405,10 +378,6 @@ public final class DensityFunctions {
         public KeyDispatchDataCodec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public DensityFunction input() {
-            return this.input;
-        }
     }
 
     protected static enum BlendOffset implements DensityFunction.SimpleFunction {
@@ -437,10 +406,7 @@ public final class DensityFunctions {
         }
     }
 
-    protected static record Clamp(DensityFunction e, double f, double g) implements DensityFunctions.PureTransformer {
-        private final DensityFunction input;
-        private final double minValue;
-        private final double maxValue;
+    protected static record Clamp(DensityFunction input, double minValue, double maxValue) implements DensityFunctions.PureTransformer {
         private static final MapCodec<DensityFunctions.Clamp> DATA_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(DensityFunction.DIRECT_CODEC.fieldOf("input").forGetter(DensityFunctions.Clamp::input), DensityFunctions.NOISE_VALUE_CODEC.fieldOf("min").forGetter(DensityFunctions.Clamp::minValue), DensityFunctions.NOISE_VALUE_CODEC.fieldOf("max").forGetter(DensityFunctions.Clamp::maxValue)).apply(instance, DensityFunctions.Clamp::new));
         public static final KeyDispatchDataCodec<DensityFunctions.Clamp> CODEC = DensityFunctions.makeCodec(DATA_CODEC);
 
@@ -455,22 +421,9 @@ public final class DensityFunctions {
         public KeyDispatchDataCodec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public DensityFunction input() {
-            return this.input;
-        }
-
-        public double minValue() {
-            return this.minValue;
-        }
-
-        public double maxValue() {
-            return this.maxValue;
-        }
     }
 
-    static record Constant(double a) implements DensityFunction.SimpleFunction {
-        final double value;
+    static record Constant(double value) implements DensityFunction.SimpleFunction {
         static final KeyDispatchDataCodec<DensityFunctions.Constant> CODEC = DensityFunctions.singleArgumentCodec(DensityFunctions.NOISE_VALUE_CODEC, DensityFunctions.Constant::new, DensityFunctions.Constant::value);
         static final DensityFunctions.Constant ZERO = new DensityFunctions.Constant(0.0D);
 
@@ -493,10 +446,6 @@ public final class DensityFunctions {
         public KeyDispatchDataCodec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public double value() {
-            return this.value;
-        }
     }
 
     protected static final class EndIslandDensityFunction implements DensityFunction.SimpleFunction {
@@ -554,9 +503,7 @@ public final class DensityFunctions {
     }
 
     @VisibleForDebug
-    public static record HolderHolder(Holder<DensityFunction> a) implements DensityFunction {
-        private final Holder<DensityFunction> function;
-
+    public static record HolderHolder(Holder<DensityFunction> function) implements DensityFunction {
         public double compute(DensityFunction.FunctionContext functionContext) {
             return this.function.value().compute(functionContext);
         }
@@ -580,18 +527,9 @@ public final class DensityFunctions {
         public KeyDispatchDataCodec<? extends DensityFunction> codec() {
             throw new UnsupportedOperationException("Calling .codec() on HolderHolder");
         }
-
-        public Holder<DensityFunction> function() {
-            return this.function;
-        }
     }
 
-    protected static record Mapped(DensityFunctions.Mapped.Type a, DensityFunction e, double f, double g) implements DensityFunctions.PureTransformer {
-        private final DensityFunctions.Mapped.Type type;
-        private final DensityFunction input;
-        private final double minValue;
-        private final double maxValue;
-
+    protected static record Mapped(DensityFunctions.Mapped.Type type, DensityFunction input, double minValue, double maxValue) implements DensityFunctions.PureTransformer {
         public static DensityFunctions.Mapped create(DensityFunctions.Mapped.Type type, DensityFunction densityFunction) {
             double d = densityFunction.minValue();
             double d2 = transform(type, d);
@@ -640,22 +578,6 @@ public final class DensityFunctions {
             return this.type.codec;
         }
 
-        public DensityFunctions.Mapped.Type type() {
-            return this.type;
-        }
-
-        public DensityFunction input() {
-            return this.input;
-        }
-
-        public double minValue() {
-            return this.minValue;
-        }
-
-        public double maxValue() {
-            return this.maxValue;
-        }
-
         static enum Type implements StringRepresentable {
             ABS("abs"),
             SQUARE("square"),
@@ -677,10 +599,7 @@ public final class DensityFunctions {
         }
     }
 
-    protected static record Marker(DensityFunctions.Marker.Type a, DensityFunction e) implements DensityFunctions.MarkerOrMarked {
-        private final DensityFunctions.Marker.Type type;
-        private final DensityFunction wrapped;
-
+    protected static record Marker(DensityFunctions.Marker.Type type, DensityFunction wrapped) implements DensityFunctions.MarkerOrMarked {
         public double compute(DensityFunction.FunctionContext functionContext) {
             return this.wrapped.compute(functionContext);
         }
@@ -697,14 +616,6 @@ public final class DensityFunctions {
             return this.wrapped.maxValue();
         }
 
-        public DensityFunctions.Marker.Type type() {
-            return this.type;
-        }
-
-        public DensityFunction wrapped() {
-            return this.wrapped;
-        }
-
         static enum Type implements StringRepresentable {
             Interpolated("interpolated"),
             FlatCache("flat_cache"),
@@ -739,13 +650,7 @@ public final class DensityFunctions {
         }
     }
 
-    static record MulOrAdd(DensityFunctions.MulOrAdd.Type e, DensityFunction f, double g, double h, double i) implements DensityFunctions.PureTransformer, DensityFunctions.TwoArgumentSimpleFunction {
-        private final DensityFunctions.MulOrAdd.Type specificType;
-        private final DensityFunction input;
-        private final double minValue;
-        private final double maxValue;
-        private final double argument;
-
+    static record MulOrAdd(DensityFunctions.MulOrAdd.Type specificType, DensityFunction input, double minValue, double maxValue, double argument) implements DensityFunctions.PureTransformer, DensityFunctions.TwoArgumentSimpleFunction {
         public DensityFunctions.TwoArgumentSimpleFunction.Type type() {
             return this.specificType == DensityFunctions.MulOrAdd.Type.MUL ? DensityFunctions.TwoArgumentSimpleFunction.Type.MUL : DensityFunctions.TwoArgumentSimpleFunction.Type.ADD;
         }
@@ -794,38 +699,13 @@ public final class DensityFunctions {
             return new DensityFunctions.MulOrAdd(this.specificType, densityFunction, d3, d4, this.argument);
         }
 
-        public DensityFunctions.MulOrAdd.Type specificType() {
-            return this.specificType;
-        }
-
-        public DensityFunction input() {
-            return this.input;
-        }
-
-        public double minValue() {
-            return this.minValue;
-        }
-
-        public double maxValue() {
-            return this.maxValue;
-        }
-
-        public double argument() {
-            return this.argument;
-        }
-
         static enum Type {
             MUL,
             ADD;
         }
     }
 
-    protected static record Noise(DensityFunction.NoiseHolder f, double g, double h) implements DensityFunction {
-        private final DensityFunction.NoiseHolder noise;
-        /** @deprecated */
-        @Deprecated
-        private final double xzScale;
-        private final double yScale;
+    protected static record Noise(DensityFunction.NoiseHolder noise, double xzScale, double yScale) implements DensityFunction {
         public static final MapCodec<DensityFunctions.Noise> DATA_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(DensityFunction.NoiseHolder.CODEC.fieldOf("noise").forGetter(DensityFunctions.Noise::noise), Codec.DOUBLE.fieldOf("xz_scale").forGetter(DensityFunctions.Noise::xzScale), Codec.DOUBLE.fieldOf("y_scale").forGetter(DensityFunctions.Noise::yScale)).apply(instance, DensityFunctions.Noise::new));
         public static final KeyDispatchDataCodec<DensityFunctions.Noise> CODEC = DensityFunctions.makeCodec(DATA_CODEC);
 
@@ -852,20 +732,6 @@ public final class DensityFunctions {
         public KeyDispatchDataCodec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public DensityFunction.NoiseHolder noise() {
-            return this.noise;
-        }
-
-        /** @deprecated */
-        @Deprecated
-        public double xzScale() {
-            return this.xzScale;
-        }
-
-        public double yScale() {
-            return this.yScale;
-        }
     }
 
     interface PureTransformer extends DensityFunction {
@@ -887,12 +753,7 @@ public final class DensityFunctions {
         double transform(double var1);
     }
 
-    static record RangeChoice(DensityFunction f, double g, double h, DensityFunction i, DensityFunction j) implements DensityFunction {
-        private final DensityFunction input;
-        private final double minInclusive;
-        private final double maxExclusive;
-        private final DensityFunction whenInRange;
-        private final DensityFunction whenOutOfRange;
+    static record RangeChoice(DensityFunction input, double minInclusive, double maxExclusive, DensityFunction whenInRange, DensityFunction whenOutOfRange) implements DensityFunction {
         public static final MapCodec<DensityFunctions.RangeChoice> DATA_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(DensityFunction.HOLDER_HELPER_CODEC.fieldOf("input").forGetter(DensityFunctions.RangeChoice::input), DensityFunctions.NOISE_VALUE_CODEC.fieldOf("min_inclusive").forGetter(DensityFunctions.RangeChoice::minInclusive), DensityFunctions.NOISE_VALUE_CODEC.fieldOf("max_exclusive").forGetter(DensityFunctions.RangeChoice::maxExclusive), DensityFunction.HOLDER_HELPER_CODEC.fieldOf("when_in_range").forGetter(DensityFunctions.RangeChoice::whenInRange), DensityFunction.HOLDER_HELPER_CODEC.fieldOf("when_out_of_range").forGetter(DensityFunctions.RangeChoice::whenOutOfRange)).apply(instance, DensityFunctions.RangeChoice::new));
         public static final KeyDispatchDataCodec<DensityFunctions.RangeChoice> CODEC = DensityFunctions.makeCodec(DATA_CODEC);
 
@@ -930,30 +791,9 @@ public final class DensityFunctions {
         public KeyDispatchDataCodec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public DensityFunction input() {
-            return this.input;
-        }
-
-        public double minInclusive() {
-            return this.minInclusive;
-        }
-
-        public double maxExclusive() {
-            return this.maxExclusive;
-        }
-
-        public DensityFunction whenInRange() {
-            return this.whenInRange;
-        }
-
-        public DensityFunction whenOutOfRange() {
-            return this.whenOutOfRange;
-        }
     }
 
-    protected static record Shift(DensityFunction.NoiseHolder a) implements DensityFunctions.ShiftNoise {
-        private final DensityFunction.NoiseHolder offsetNoise;
+    protected static record Shift(DensityFunction.NoiseHolder offsetNoise) implements DensityFunctions.ShiftNoise {
         static final KeyDispatchDataCodec<DensityFunctions.Shift> CODEC = DensityFunctions.singleArgumentCodec(DensityFunction.NoiseHolder.CODEC, DensityFunctions.Shift::new, DensityFunctions.Shift::offsetNoise);
 
         public double compute(DensityFunction.FunctionContext functionContext) {
@@ -967,14 +807,9 @@ public final class DensityFunctions {
         public KeyDispatchDataCodec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public DensityFunction.NoiseHolder offsetNoise() {
-            return this.offsetNoise;
-        }
     }
 
-    protected static record ShiftA(DensityFunction.NoiseHolder a) implements DensityFunctions.ShiftNoise {
-        private final DensityFunction.NoiseHolder offsetNoise;
+    protected static record ShiftA(DensityFunction.NoiseHolder offsetNoise) implements DensityFunctions.ShiftNoise {
         static final KeyDispatchDataCodec<DensityFunctions.ShiftA> CODEC = DensityFunctions.singleArgumentCodec(DensityFunction.NoiseHolder.CODEC, DensityFunctions.ShiftA::new, DensityFunctions.ShiftA::offsetNoise);
 
         public double compute(DensityFunction.FunctionContext functionContext) {
@@ -988,14 +823,9 @@ public final class DensityFunctions {
         public KeyDispatchDataCodec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public DensityFunction.NoiseHolder offsetNoise() {
-            return this.offsetNoise;
-        }
     }
 
-    protected static record ShiftB(DensityFunction.NoiseHolder a) implements DensityFunctions.ShiftNoise {
-        private final DensityFunction.NoiseHolder offsetNoise;
+    protected static record ShiftB(DensityFunction.NoiseHolder offsetNoise) implements DensityFunctions.ShiftNoise {
         static final KeyDispatchDataCodec<DensityFunctions.ShiftB> CODEC = DensityFunctions.singleArgumentCodec(DensityFunction.NoiseHolder.CODEC, DensityFunctions.ShiftB::new, DensityFunctions.ShiftB::offsetNoise);
 
         public double compute(DensityFunction.FunctionContext functionContext) {
@@ -1009,10 +839,6 @@ public final class DensityFunctions {
         public KeyDispatchDataCodec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public DensityFunction.NoiseHolder offsetNoise() {
-            return this.offsetNoise;
-        }
     }
 
     interface ShiftNoise extends DensityFunction {
@@ -1035,13 +861,7 @@ public final class DensityFunctions {
         }
     }
 
-    protected static record ShiftedNoise(DensityFunction e, DensityFunction f, DensityFunction g, double h, double i, DensityFunction.NoiseHolder j) implements DensityFunction {
-        private final DensityFunction shiftX;
-        private final DensityFunction shiftY;
-        private final DensityFunction shiftZ;
-        private final double xzScale;
-        private final double yScale;
-        private final DensityFunction.NoiseHolder noise;
+    protected static record ShiftedNoise(DensityFunction shiftX, DensityFunction shiftY, DensityFunction shiftZ, double xzScale, double yScale, DensityFunction.NoiseHolder noise) implements DensityFunction {
         private static final MapCodec<DensityFunctions.ShiftedNoise> DATA_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(DensityFunction.HOLDER_HELPER_CODEC.fieldOf("shift_x").forGetter(DensityFunctions.ShiftedNoise::shiftX), DensityFunction.HOLDER_HELPER_CODEC.fieldOf("shift_y").forGetter(DensityFunctions.ShiftedNoise::shiftY), DensityFunction.HOLDER_HELPER_CODEC.fieldOf("shift_z").forGetter(DensityFunctions.ShiftedNoise::shiftZ), Codec.DOUBLE.fieldOf("xz_scale").forGetter(DensityFunctions.ShiftedNoise::xzScale), Codec.DOUBLE.fieldOf("y_scale").forGetter(DensityFunctions.ShiftedNoise::yScale), DensityFunction.NoiseHolder.CODEC.fieldOf("noise").forGetter(DensityFunctions.ShiftedNoise::noise)).apply(instance, DensityFunctions.ShiftedNoise::new));
         public static final KeyDispatchDataCodec<DensityFunctions.ShiftedNoise> CODEC = DensityFunctions.makeCodec(DATA_CODEC);
 
@@ -1071,34 +891,9 @@ public final class DensityFunctions {
         public KeyDispatchDataCodec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public DensityFunction shiftX() {
-            return this.shiftX;
-        }
-
-        public DensityFunction shiftY() {
-            return this.shiftY;
-        }
-
-        public DensityFunction shiftZ() {
-            return this.shiftZ;
-        }
-
-        public double xzScale() {
-            return this.xzScale;
-        }
-
-        public double yScale() {
-            return this.yScale;
-        }
-
-        public DensityFunction.NoiseHolder noise() {
-            return this.noise;
-        }
     }
 
-    public static record Spline(CubicSpline<DensityFunctions.Spline.Point, DensityFunctions.Spline.Coordinate> e) implements DensityFunction {
-        private final CubicSpline<DensityFunctions.Spline.Point, DensityFunctions.Spline.Coordinate> spline;
+    public static record Spline(CubicSpline<DensityFunctions.Spline.Point, DensityFunctions.Spline.Coordinate> spline) implements DensityFunction {
         private static final Codec<CubicSpline<DensityFunctions.Spline.Point, DensityFunctions.Spline.Coordinate>> SPLINE_CODEC = CubicSpline.codec(DensityFunctions.Spline.Coordinate.CODEC);
         private static final MapCodec<DensityFunctions.Spline> DATA_CODEC = SPLINE_CODEC.fieldOf("spline").xmap(DensityFunctions.Spline::new, DensityFunctions.Spline::spline);
         public static final KeyDispatchDataCodec<DensityFunctions.Spline> CODEC = DensityFunctions.makeCodec(DATA_CODEC);
@@ -1127,12 +922,7 @@ public final class DensityFunctions {
             return CODEC;
         }
 
-        public CubicSpline<DensityFunctions.Spline.Point, DensityFunctions.Spline.Coordinate> spline() {
-            return this.spline;
-        }
-
-        public static record Coordinate(Holder<DensityFunction> c) implements ToFloatFunction<DensityFunctions.Spline.Point> {
-            private final Holder<DensityFunction> function;
+        public static record Coordinate(Holder<DensityFunction> function) implements ToFloatFunction<DensityFunctions.Spline.Point> {
             public static final Codec<DensityFunctions.Spline.Coordinate> CODEC = DensityFunction.CODEC.xmap(DensityFunctions.Spline.Coordinate::new, DensityFunctions.Spline.Coordinate::function);
 
             public String toString() {
@@ -1174,18 +964,9 @@ public final class DensityFunctions {
             public DensityFunctions.Spline.Coordinate mapAll(DensityFunction.Visitor visitor) {
                 return new DensityFunctions.Spline.Coordinate(new Holder.Direct<>(this.function.value().mapAll(visitor)));
             }
-
-            public Holder<DensityFunction> function() {
-                return this.function;
-            }
         }
 
-        public static record Point(DensityFunction.FunctionContext a) {
-            private final DensityFunction.FunctionContext context;
-
-            public DensityFunction.FunctionContext context() {
-                return this.context;
-            }
+        public static record Point(DensityFunction.FunctionContext context) {
         }
     }
 
@@ -1305,10 +1086,7 @@ public final class DensityFunctions {
         }
     }
 
-    protected static record WeirdScaledSampler(DensityFunction e, DensityFunction.NoiseHolder f, DensityFunctions.WeirdScaledSampler.RarityValueMapper g) implements DensityFunctions.TransformerWithContext {
-        private final DensityFunction input;
-        private final DensityFunction.NoiseHolder noise;
-        private final DensityFunctions.WeirdScaledSampler.RarityValueMapper rarityValueMapper;
+    protected static record WeirdScaledSampler(DensityFunction input, DensityFunction.NoiseHolder noise, DensityFunctions.WeirdScaledSampler.RarityValueMapper rarityValueMapper) implements DensityFunctions.TransformerWithContext {
         private static final MapCodec<DensityFunctions.WeirdScaledSampler> DATA_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(DensityFunction.HOLDER_HELPER_CODEC.fieldOf("input").forGetter(DensityFunctions.WeirdScaledSampler::input), DensityFunction.NoiseHolder.CODEC.fieldOf("noise").forGetter(DensityFunctions.WeirdScaledSampler::noise), DensityFunctions.WeirdScaledSampler.RarityValueMapper.CODEC.fieldOf("rarity_value_mapper").forGetter(DensityFunctions.WeirdScaledSampler::rarityValueMapper)).apply(instance, DensityFunctions.WeirdScaledSampler::new));
         public static final KeyDispatchDataCodec<DensityFunctions.WeirdScaledSampler> CODEC = DensityFunctions.makeCodec(DATA_CODEC);
 
@@ -1333,18 +1111,6 @@ public final class DensityFunctions {
             return CODEC;
         }
 
-        public DensityFunction input() {
-            return this.input;
-        }
-
-        public DensityFunction.NoiseHolder noise() {
-            return this.noise;
-        }
-
-        public DensityFunctions.WeirdScaledSampler.RarityValueMapper rarityValueMapper() {
-            return this.rarityValueMapper;
-        }
-
         public static enum RarityValueMapper implements StringRepresentable {
             TYPE1("type_1", NoiseRouterData.QuantizedSpaghettiRarity::getSpaghettiRarity3D, 2.0D),
             TYPE2("type_2", NoiseRouterData.QuantizedSpaghettiRarity::getSphaghettiRarity2D, 3.0D);
@@ -1366,11 +1132,7 @@ public final class DensityFunctions {
         }
     }
 
-    static record YClampedGradient(int e, int f, double g, double h) implements DensityFunction.SimpleFunction {
-        private final int fromY;
-        private final int toY;
-        private final double fromValue;
-        private final double toValue;
+    static record YClampedGradient(int fromY, int toY, double fromValue, double toValue) implements DensityFunction.SimpleFunction {
         private static final MapCodec<DensityFunctions.YClampedGradient> DATA_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(Codec.intRange(DimensionType.MIN_Y * 2, DimensionType.MAX_Y * 2).fieldOf("from_y").forGetter(DensityFunctions.YClampedGradient::fromY), Codec.intRange(DimensionType.MIN_Y * 2, DimensionType.MAX_Y * 2).fieldOf("to_y").forGetter(DensityFunctions.YClampedGradient::toY), DensityFunctions.NOISE_VALUE_CODEC.fieldOf("from_value").forGetter(DensityFunctions.YClampedGradient::fromValue), DensityFunctions.NOISE_VALUE_CODEC.fieldOf("to_value").forGetter(DensityFunctions.YClampedGradient::toValue)).apply(instance, DensityFunctions.YClampedGradient::new));
         public static final KeyDispatchDataCodec<DensityFunctions.YClampedGradient> CODEC = DensityFunctions.makeCodec(DATA_CODEC);
 
@@ -1389,21 +1151,5 @@ public final class DensityFunctions {
         public KeyDispatchDataCodec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public int fromY() {
-            return this.fromY;
-        }
-
-        public int toY() {
-            return this.toY;
-        }
-
-        public double fromValue() {
-            return this.fromValue;
-        }
-
-        public double toValue() {
-            return this.toValue;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
index 2a261713be18bf79fc49a68194fd6746821de540..77ca55e5171ce09f089caf4682f596d88ea7a2ce 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
@@ -15,18 +15,18 @@ import net.minecraft.world.level.biome.OverworldBiomeBuilder;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 
-public record NoiseGeneratorSettings(NoiseSettings j, BlockState k, BlockState l, NoiseRouter m, SurfaceRules.RuleSource n, List<Climate.ParameterPoint> o, int p, boolean q, boolean r, boolean s, boolean t) {
-    private final NoiseSettings noiseSettings;
-    private final BlockState defaultBlock;
-    private final BlockState defaultFluid;
-    private final NoiseRouter noiseRouter;
-    private final SurfaceRules.RuleSource surfaceRule;
-    private final List<Climate.ParameterPoint> spawnTarget;
-    private final int seaLevel;
-    private final boolean disableMobGeneration;
-    private final boolean aquifersEnabled;
-    private final boolean oreVeinsEnabled;
-    private final boolean useLegacyRandomSource;
+public record NoiseGeneratorSettings(
+        NoiseSettings noiseSettings,
+        BlockState defaultBlock,
+        BlockState defaultFluid,
+        NoiseRouter noiseRouter,
+        SurfaceRules.RuleSource surfaceRule,
+        List<Climate.ParameterPoint> spawnTarget,
+        int seaLevel,
+        boolean disableMobGeneration,
+        boolean aquifersEnabled,
+        boolean oreVeinsEnabled,
+        boolean useLegacyRandomSource) {
     public static final Codec<NoiseGeneratorSettings> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(NoiseSettings.CODEC.fieldOf("noise").forGetter(NoiseGeneratorSettings::noiseSettings), BlockState.CODEC.fieldOf("default_block").forGetter(NoiseGeneratorSettings::defaultBlock), BlockState.CODEC.fieldOf("default_fluid").forGetter(NoiseGeneratorSettings::defaultFluid), NoiseRouter.CODEC.fieldOf("noise_router").forGetter(NoiseGeneratorSettings::noiseRouter), SurfaceRules.RuleSource.CODEC.fieldOf("surface_rule").forGetter(NoiseGeneratorSettings::surfaceRule), Climate.ParameterPoint.CODEC.listOf().fieldOf("spawn_target").forGetter(NoiseGeneratorSettings::spawnTarget), Codec.INT.fieldOf("sea_level").forGetter(NoiseGeneratorSettings::seaLevel), Codec.BOOL.fieldOf("disable_mob_generation").forGetter(NoiseGeneratorSettings::disableMobGeneration), Codec.BOOL.fieldOf("aquifers_enabled").forGetter(NoiseGeneratorSettings::isAquifersEnabled), Codec.BOOL.fieldOf("ore_veins_enabled").forGetter(NoiseGeneratorSettings::oreVeinsEnabled), Codec.BOOL.fieldOf("legacy_random_source").forGetter(NoiseGeneratorSettings::useLegacyRandomSource)).apply(instance, NoiseGeneratorSettings::new));
     public static final Codec<Holder<NoiseGeneratorSettings>> CODEC = RegistryFileCodec.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, DIRECT_CODEC);
     public static final ResourceKey<NoiseGeneratorSettings> OVERWORLD = ResourceKey.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, new ResourceLocation("overworld"));
@@ -37,20 +37,10 @@ public record NoiseGeneratorSettings(NoiseSettings j, BlockState k, BlockState l
     public static final ResourceKey<NoiseGeneratorSettings> CAVES = ResourceKey.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, new ResourceLocation("caves"));
     public static final ResourceKey<NoiseGeneratorSettings> FLOATING_ISLANDS = ResourceKey.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, new ResourceLocation("floating_islands"));
 
-    /** @deprecated */
-    @Deprecated
-    public boolean disableMobGeneration() {
-        return this.disableMobGeneration;
-    }
-
     public boolean isAquifersEnabled() {
         return this.aquifersEnabled;
     }
 
-    public boolean oreVeinsEnabled() {
-        return this.oreVeinsEnabled;
-    }
-
     public WorldgenRandom.Algorithm getRandomSource() {
         return this.useLegacyRandomSource ? WorldgenRandom.Algorithm.LEGACY : WorldgenRandom.Algorithm.XOROSHIRO;
     }
@@ -92,40 +82,4 @@ public record NoiseGeneratorSettings(NoiseSettings j, BlockState k, BlockState l
     public static NoiseGeneratorSettings dummy() {
         return new NoiseGeneratorSettings(NoiseSettings.OVERWORLD_NOISE_SETTINGS, Blocks.STONE.defaultBlockState(), Blocks.AIR.defaultBlockState(), NoiseRouterData.none(), SurfaceRuleData.air(), List.of(), 63, true, false, false, false);
     }
-
-    public NoiseSettings noiseSettings() {
-        return this.noiseSettings;
-    }
-
-    public BlockState defaultBlock() {
-        return this.defaultBlock;
-    }
-
-    public BlockState defaultFluid() {
-        return this.defaultFluid;
-    }
-
-    public NoiseRouter noiseRouter() {
-        return this.noiseRouter;
-    }
-
-    public SurfaceRules.RuleSource surfaceRule() {
-        return this.surfaceRule;
-    }
-
-    public List<Climate.ParameterPoint> spawnTarget() {
-        return this.spawnTarget;
-    }
-
-    public int seaLevel() {
-        return this.seaLevel;
-    }
-
-    public boolean aquifersEnabled() {
-        return this.aquifersEnabled;
-    }
-
-    public boolean useLegacyRandomSource() {
-        return this.useLegacyRandomSource;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseRouter.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseRouter.java
index 9bc70bb98ca12c256bd8e3304df0bdce33677e45..27c281dfb6dbfd061f62091289bab0887284f04a 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseRouter.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseRouter.java
@@ -4,22 +4,22 @@ import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.function.Function;
 
-public record NoiseRouter(DensityFunction b, DensityFunction c, DensityFunction d, DensityFunction e, DensityFunction f, DensityFunction g, DensityFunction h, DensityFunction i, DensityFunction j, DensityFunction k, DensityFunction l, DensityFunction m, DensityFunction n, DensityFunction o, DensityFunction p) {
-    private final DensityFunction barrierNoise;
-    private final DensityFunction fluidLevelFloodednessNoise;
-    private final DensityFunction fluidLevelSpreadNoise;
-    private final DensityFunction lavaNoise;
-    private final DensityFunction temperature;
-    private final DensityFunction vegetation;
-    private final DensityFunction continents;
-    private final DensityFunction erosion;
-    private final DensityFunction depth;
-    private final DensityFunction ridges;
-    private final DensityFunction initialDensityWithoutJaggedness;
-    private final DensityFunction finalDensity;
-    private final DensityFunction veinToggle;
-    private final DensityFunction veinRidged;
-    private final DensityFunction veinGap;
+public record NoiseRouter(
+        DensityFunction barrierNoise,
+        DensityFunction fluidLevelFloodednessNoise,
+        DensityFunction fluidLevelSpreadNoise,
+        DensityFunction lavaNoise,
+        DensityFunction temperature,
+        DensityFunction vegetation,
+        DensityFunction continents,
+        DensityFunction erosion,
+        DensityFunction depth,
+        DensityFunction ridges,
+        DensityFunction initialDensityWithoutJaggedness,
+        DensityFunction finalDensity,
+        DensityFunction veinToggle,
+        DensityFunction veinRidged,
+        DensityFunction veinGap) {
     public static final Codec<NoiseRouter> CODEC = RecordCodecBuilder.create((instance) -> instance.group(field("barrier", NoiseRouter::barrierNoise), field("fluid_level_floodedness", NoiseRouter::fluidLevelFloodednessNoise), field("fluid_level_spread", NoiseRouter::fluidLevelSpreadNoise), field("lava", NoiseRouter::lavaNoise), field("temperature", NoiseRouter::temperature), field("vegetation", NoiseRouter::vegetation), field("continents", NoiseRouter::continents), field("erosion", NoiseRouter::erosion), field("depth", NoiseRouter::depth), field("ridges", NoiseRouter::ridges), field("initial_density_without_jaggedness", NoiseRouter::initialDensityWithoutJaggedness), field("final_density", NoiseRouter::finalDensity), field("vein_toggle", NoiseRouter::veinToggle), field("vein_ridged", NoiseRouter::veinRidged), field("vein_gap", NoiseRouter::veinGap)).apply(instance, NoiseRouter::new));
 
     private static RecordCodecBuilder<NoiseRouter, DensityFunction> field(String s, Function<NoiseRouter, DensityFunction> function) {
@@ -29,64 +29,4 @@ public record NoiseRouter(DensityFunction b, DensityFunction c, DensityFunction
     public NoiseRouter mapAll(DensityFunction.Visitor visitor) {
         return new NoiseRouter(this.barrierNoise.mapAll(visitor), this.fluidLevelFloodednessNoise.mapAll(visitor), this.fluidLevelSpreadNoise.mapAll(visitor), this.lavaNoise.mapAll(visitor), this.temperature.mapAll(visitor), this.vegetation.mapAll(visitor), this.continents.mapAll(visitor), this.erosion.mapAll(visitor), this.depth.mapAll(visitor), this.ridges.mapAll(visitor), this.initialDensityWithoutJaggedness.mapAll(visitor), this.finalDensity.mapAll(visitor), this.veinToggle.mapAll(visitor), this.veinRidged.mapAll(visitor), this.veinGap.mapAll(visitor));
     }
-
-    public DensityFunction barrierNoise() {
-        return this.barrierNoise;
-    }
-
-    public DensityFunction fluidLevelFloodednessNoise() {
-        return this.fluidLevelFloodednessNoise;
-    }
-
-    public DensityFunction fluidLevelSpreadNoise() {
-        return this.fluidLevelSpreadNoise;
-    }
-
-    public DensityFunction lavaNoise() {
-        return this.lavaNoise;
-    }
-
-    public DensityFunction temperature() {
-        return this.temperature;
-    }
-
-    public DensityFunction vegetation() {
-        return this.vegetation;
-    }
-
-    public DensityFunction continents() {
-        return this.continents;
-    }
-
-    public DensityFunction erosion() {
-        return this.erosion;
-    }
-
-    public DensityFunction depth() {
-        return this.depth;
-    }
-
-    public DensityFunction ridges() {
-        return this.ridges;
-    }
-
-    public DensityFunction initialDensityWithoutJaggedness() {
-        return this.initialDensityWithoutJaggedness;
-    }
-
-    public DensityFunction finalDensity() {
-        return this.finalDensity;
-    }
-
-    public DensityFunction veinToggle() {
-        return this.veinToggle;
-    }
-
-    public DensityFunction veinRidged() {
-        return this.veinRidged;
-    }
-
-    public DensityFunction veinGap() {
-        return this.veinGap;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
index 4117344ea6a4a962cb0f77d6fde495ac57b072f0..acd0efcbb577f9eae686b33a3ea5b3d8d6825496 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
@@ -8,12 +8,8 @@ import net.minecraft.core.QuartPos;
 import net.minecraft.world.level.LevelHeightAccessor;
 import net.minecraft.world.level.dimension.DimensionType;
 
-public record NoiseSettings(int g, int h, int i, int j) {
-    private final int minY;
-    private final int height;
-    private final int noiseSizeHorizontal;
-    private final int noiseSizeVertical;
-    public static final Codec<NoiseSettings> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("min_y").forGetter(NoiseSettings::minY), Codec.intRange(0, DimensionType.Y_SIZE).fieldOf("height").forGetter(NoiseSettings::height), Codec.intRange(1, 4).fieldOf("size_horizontal").forGetter(NoiseSettings::noiseSizeHorizontal), Codec.intRange(1, 4).fieldOf("size_vertical").forGetter(NoiseSettings::noiseSizeVertical)).apply(instance, NoiseSettings::new)).comapFlatMap(NoiseSettings::guardY, Function.identity());
+public record NoiseSettings(int minY, int height, int noiseSizeHorizontal, int noiseSizeVertical) {
+    public static final Codec<NoiseSettings> CODEC = RecordCodecBuilder.<NoiseSettings>create((instance) -> instance.group(Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("min_y").forGetter(NoiseSettings::minY), Codec.intRange(0, DimensionType.Y_SIZE).fieldOf("height").forGetter(NoiseSettings::height), Codec.intRange(1, 4).fieldOf("size_horizontal").forGetter(NoiseSettings::noiseSizeHorizontal), Codec.intRange(1, 4).fieldOf("size_vertical").forGetter(NoiseSettings::noiseSizeVertical)).apply(instance, NoiseSettings::new)).comapFlatMap(NoiseSettings::guardY, Function.identity());
     protected static final NoiseSettings OVERWORLD_NOISE_SETTINGS = create(-64, 384, 1, 2);
     protected static final NoiseSettings NETHER_NOISE_SETTINGS = create(0, 128, 1, 2);
     protected static final NoiseSettings END_NOISE_SETTINGS = create(0, 128, 2, 1);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/RandomSupport.java b/src/main/java/net/minecraft/world/level/levelgen/RandomSupport.java
index 4293346691bf568e1a87def4178f539efa2d68f4..83aafb11f85b219b2f5fecc5d4bd343a08a167a1 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/RandomSupport.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/RandomSupport.java
@@ -25,16 +25,6 @@ public final class RandomSupport {
         return SEED_UNIQUIFIER.updateAndGet((l) -> l * 1181783497276652981L) ^ System.nanoTime();
     }
 
-    public static record Seed128bit(long a, long b) {
-        private final long seedLo;
-        private final long seedHi;
-
-        public long seedLo() {
-            return this.seedLo;
-        }
-
-        public long seedHi() {
-            return this.seedHi;
-        }
+    public static record Seed128bit(long seedLo, long seedHi) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/SurfaceRules.java b/src/main/java/net/minecraft/world/level/levelgen/SurfaceRules.java
index e89a62c2e230571b530471a6befcc65330b41091..c56aea5cd2ba8169a26bc8d2aff0a6f4c8c8374b 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/SurfaceRules.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/SurfaceRules.java
@@ -169,7 +169,7 @@ public class SurfaceRules {
 
         public SurfaceRules.Condition apply(final SurfaceRules.Context context) {
             class BiomeCondition extends SurfaceRules.LazyYCondition {
-                BiomeCondition() {
+                BiomeCondition(Context context) {
                     super(context);
                 }
 
@@ -178,7 +178,7 @@ public class SurfaceRules {
                 }
             }
 
-            return new BiomeCondition();
+            return new BiomeCondition(context);
         }
 
         public boolean equals(Object object) {
@@ -201,9 +201,7 @@ public class SurfaceRules {
         }
     }
 
-    static record BlockRuleSource(BlockState a, SurfaceRules.StateRule c) implements SurfaceRules.RuleSource {
-        private final BlockState resultState;
-        private final SurfaceRules.StateRule rule;
+    static record BlockRuleSource(BlockState resultState, SurfaceRules.StateRule rule) implements SurfaceRules.RuleSource {
         static final KeyDispatchDataCodec<SurfaceRules.BlockRuleSource> CODEC = KeyDispatchDataCodec.of(BlockState.CODEC.xmap(SurfaceRules.BlockRuleSource::new, SurfaceRules.BlockRuleSource::resultState).fieldOf("result_state"));
 
         BlockRuleSource(BlockState blockState) {
@@ -217,14 +215,6 @@ public class SurfaceRules {
         public SurfaceRules.SurfaceRule apply(SurfaceRules.Context context) {
             return this.rule;
         }
-
-        public BlockState resultState() {
-            return this.resultState;
-        }
-
-        public SurfaceRules.StateRule rule() {
-            return this.rule;
-        }
     }
 
     interface Condition {
@@ -465,10 +455,7 @@ public class SurfaceRules {
         }
     }
 
-    static record NoiseThresholdConditionSource(ResourceKey<NormalNoise.NoiseParameters> a, double c, double d) implements SurfaceRules.ConditionSource {
-        private final ResourceKey<NormalNoise.NoiseParameters> noise;
-        final double minThreshold;
-        final double maxThreshold;
+    static record NoiseThresholdConditionSource(ResourceKey<NormalNoise.NoiseParameters> noise, double minThreshold, double maxThreshold) implements SurfaceRules.ConditionSource {
         static final KeyDispatchDataCodec<SurfaceRules.NoiseThresholdConditionSource> CODEC = KeyDispatchDataCodec.of(RecordCodecBuilder.mapCodec((instance) -> instance.group(ResourceKey.codec(Registry.NOISE_REGISTRY).fieldOf("noise").forGetter(SurfaceRules.NoiseThresholdConditionSource::noise), Codec.DOUBLE.fieldOf("min_threshold").forGetter(SurfaceRules.NoiseThresholdConditionSource::minThreshold), Codec.DOUBLE.fieldOf("max_threshold").forGetter(SurfaceRules.NoiseThresholdConditionSource::maxThreshold)).apply(instance, SurfaceRules.NoiseThresholdConditionSource::new)));
 
         public KeyDispatchDataCodec<? extends SurfaceRules.ConditionSource> codec() {
@@ -479,7 +466,7 @@ public class SurfaceRules {
             final NormalNoise normalNoise = context.randomState.getOrCreateNoise(this.noise);
 
             class NoiseThresholdCondition extends SurfaceRules.LazyXZCondition {
-                NoiseThresholdCondition() {
+                NoiseThresholdCondition(Context context) {
                     super(context);
                 }
 
@@ -489,7 +476,7 @@ public class SurfaceRules {
                 }
             }
 
-            return new NoiseThresholdCondition();
+            return new NoiseThresholdCondition(context);
         }
 
         public ResourceKey<NormalNoise.NoiseParameters> noise() {
@@ -505,20 +492,13 @@ public class SurfaceRules {
         }
     }
 
-    static record NotCondition(SurfaceRules.Condition a) implements SurfaceRules.Condition {
-        private final SurfaceRules.Condition target;
-
+    static record NotCondition(SurfaceRules.Condition target) implements SurfaceRules.Condition {
         public boolean test() {
             return !this.target.test();
         }
-
-        public SurfaceRules.Condition target() {
-            return this.target;
-        }
     }
 
-    static record NotConditionSource(SurfaceRules.ConditionSource a) implements SurfaceRules.ConditionSource {
-        private final SurfaceRules.ConditionSource target;
+    static record NotConditionSource(SurfaceRules.ConditionSource target) implements SurfaceRules.ConditionSource {
         static final KeyDispatchDataCodec<SurfaceRules.NotConditionSource> CODEC = KeyDispatchDataCodec.of(SurfaceRules.ConditionSource.CODEC.xmap(SurfaceRules.NotConditionSource::new, SurfaceRules.NotConditionSource::target).fieldOf("invert"));
 
         public KeyDispatchDataCodec<? extends SurfaceRules.ConditionSource> codec() {
@@ -528,10 +508,6 @@ public class SurfaceRules {
         public SurfaceRules.Condition apply(SurfaceRules.Context context) {
             return new SurfaceRules.NotCondition((SurfaceRules.Condition)this.target.apply(context));
         }
-
-        public SurfaceRules.ConditionSource target() {
-            return this.target;
-        }
     }
 
     public interface RuleSource extends Function<SurfaceRules.Context, SurfaceRules.SurfaceRule> {
@@ -547,9 +523,7 @@ public class SurfaceRules {
         KeyDispatchDataCodec<? extends SurfaceRules.RuleSource> codec();
     }
 
-    static record SequenceRule(List<SurfaceRules.SurfaceRule> a) implements SurfaceRules.SurfaceRule {
-        private final List<SurfaceRules.SurfaceRule> rules;
-
+    static record SequenceRule(List<SurfaceRules.SurfaceRule> rules) implements SurfaceRules.SurfaceRule {
         @Nullable
         public BlockState tryApply(int i, int i2, int i3) {
             for(SurfaceRules.SurfaceRule surfaceRule : this.rules) {
@@ -561,14 +535,9 @@ public class SurfaceRules {
 
             return null;
         }
-
-        public List<SurfaceRules.SurfaceRule> rules() {
-            return this.rules;
-        }
     }
 
-    static record SequenceRuleSource(List<SurfaceRules.RuleSource> a) implements SurfaceRules.RuleSource {
-        private final List<SurfaceRules.RuleSource> sequence;
+    static record SequenceRuleSource(List<SurfaceRules.RuleSource> sequence) implements SurfaceRules.RuleSource {
         static final KeyDispatchDataCodec<SurfaceRules.SequenceRuleSource> CODEC = KeyDispatchDataCodec.of(SurfaceRules.RuleSource.CODEC.listOf().xmap(SurfaceRules.SequenceRuleSource::new, SurfaceRules.SequenceRuleSource::sequence).fieldOf("sequence"));
 
         public KeyDispatchDataCodec<? extends SurfaceRules.RuleSource> codec() {
@@ -588,22 +557,12 @@ public class SurfaceRules {
                 return new SurfaceRules.SequenceRule(builder.build());
             }
         }
-
-        public List<SurfaceRules.RuleSource> sequence() {
-            return this.sequence;
-        }
     }
 
-    static record StateRule(BlockState a) implements SurfaceRules.SurfaceRule {
-        private final BlockState state;
-
+    static record StateRule(BlockState state) implements SurfaceRules.SurfaceRule {
         public BlockState tryApply(int i, int i2, int i3) {
             return this.state;
         }
-
-        public BlockState state() {
-            return this.state;
-        }
     }
 
     static enum Steep implements SurfaceRules.ConditionSource {
@@ -620,11 +579,7 @@ public class SurfaceRules {
         }
     }
 
-    static record StoneDepthCheck(int a, boolean c, int d, CaveSurface e) implements SurfaceRules.ConditionSource {
-        final int offset;
-        final boolean addSurfaceDepth;
-        final int secondaryDepthRange;
-        private final CaveSurface surfaceType;
+    static record StoneDepthCheck(int offset, boolean addSurfaceDepth, int secondaryDepthRange, CaveSurface surfaceType) implements SurfaceRules.ConditionSource {
         static final KeyDispatchDataCodec<SurfaceRules.StoneDepthCheck> CODEC = KeyDispatchDataCodec.of(RecordCodecBuilder.mapCodec((instance) -> instance.group(Codec.INT.fieldOf("offset").forGetter(SurfaceRules.StoneDepthCheck::offset), Codec.BOOL.fieldOf("add_surface_depth").forGetter(SurfaceRules.StoneDepthCheck::addSurfaceDepth), Codec.INT.fieldOf("secondary_depth_range").forGetter(SurfaceRules.StoneDepthCheck::secondaryDepthRange), CaveSurface.CODEC.fieldOf("surface_type").forGetter(SurfaceRules.StoneDepthCheck::surfaceType)).apply(instance, SurfaceRules.StoneDepthCheck::new)));
 
         public KeyDispatchDataCodec<? extends SurfaceRules.ConditionSource> codec() {
@@ -635,7 +590,7 @@ public class SurfaceRules {
             final boolean flag = this.surfaceType == CaveSurface.CEILING;
 
             class StoneDepthCondition extends SurfaceRules.LazyYCondition {
-                StoneDepthCondition() {
+                StoneDepthCondition(Context context) {
                     super(context);
                 }
 
@@ -647,23 +602,7 @@ public class SurfaceRules {
                 }
             }
 
-            return new StoneDepthCondition();
-        }
-
-        public int offset() {
-            return this.offset;
-        }
-
-        public boolean addSurfaceDepth() {
-            return this.addSurfaceDepth;
-        }
-
-        public int secondaryDepthRange() {
-            return this.secondaryDepthRange;
-        }
-
-        public CaveSurface surfaceType() {
-            return this.surfaceType;
+            return new StoneDepthCondition(context);
         }
     }
 
@@ -686,27 +625,14 @@ public class SurfaceRules {
         }
     }
 
-    static record TestRule(SurfaceRules.Condition a, SurfaceRules.SurfaceRule b) implements SurfaceRules.SurfaceRule {
-        private final SurfaceRules.Condition condition;
-        private final SurfaceRules.SurfaceRule followup;
-
+    static record TestRule(SurfaceRules.Condition condition, SurfaceRules.SurfaceRule followup) implements SurfaceRules.SurfaceRule {
         @Nullable
         public BlockState tryApply(int i, int i2, int i3) {
             return !this.condition.test() ? null : this.followup.tryApply(i, i2, i3);
         }
-
-        public SurfaceRules.Condition condition() {
-            return this.condition;
-        }
-
-        public SurfaceRules.SurfaceRule followup() {
-            return this.followup;
-        }
     }
 
-    static record TestRuleSource(SurfaceRules.ConditionSource a, SurfaceRules.RuleSource c) implements SurfaceRules.RuleSource {
-        private final SurfaceRules.ConditionSource ifTrue;
-        private final SurfaceRules.RuleSource thenRun;
+    static record TestRuleSource(SurfaceRules.ConditionSource ifTrue, SurfaceRules.RuleSource thenRun) implements SurfaceRules.RuleSource {
         static final KeyDispatchDataCodec<SurfaceRules.TestRuleSource> CODEC = KeyDispatchDataCodec.of(RecordCodecBuilder.mapCodec((instance) -> instance.group(SurfaceRules.ConditionSource.CODEC.fieldOf("if_true").forGetter(SurfaceRules.TestRuleSource::ifTrue), SurfaceRules.RuleSource.CODEC.fieldOf("then_run").forGetter(SurfaceRules.TestRuleSource::thenRun)).apply(instance, SurfaceRules.TestRuleSource::new)));
 
         public KeyDispatchDataCodec<? extends SurfaceRules.RuleSource> codec() {
@@ -716,20 +642,9 @@ public class SurfaceRules {
         public SurfaceRules.SurfaceRule apply(SurfaceRules.Context context) {
             return new SurfaceRules.TestRule((SurfaceRules.Condition)this.ifTrue.apply(context), (SurfaceRules.SurfaceRule)this.thenRun.apply(context));
         }
-
-        public SurfaceRules.ConditionSource ifTrue() {
-            return this.ifTrue;
-        }
-
-        public SurfaceRules.RuleSource thenRun() {
-            return this.thenRun;
-        }
     }
 
-    static record VerticalGradientConditionSource(ResourceLocation a, VerticalAnchor c, VerticalAnchor d) implements SurfaceRules.ConditionSource {
-        private final ResourceLocation randomName;
-        private final VerticalAnchor trueAtAndBelow;
-        private final VerticalAnchor falseAtAndAbove;
+    static record VerticalGradientConditionSource(ResourceLocation randomName, VerticalAnchor trueAtAndBelow, VerticalAnchor falseAtAndAbove) implements SurfaceRules.ConditionSource {
         static final KeyDispatchDataCodec<SurfaceRules.VerticalGradientConditionSource> CODEC = KeyDispatchDataCodec.of(RecordCodecBuilder.mapCodec((instance) -> instance.group(ResourceLocation.CODEC.fieldOf("random_name").forGetter(SurfaceRules.VerticalGradientConditionSource::randomName), VerticalAnchor.CODEC.fieldOf("true_at_and_below").forGetter(SurfaceRules.VerticalGradientConditionSource::trueAtAndBelow), VerticalAnchor.CODEC.fieldOf("false_at_and_above").forGetter(SurfaceRules.VerticalGradientConditionSource::falseAtAndAbove)).apply(instance, SurfaceRules.VerticalGradientConditionSource::new)));
 
         public KeyDispatchDataCodec<? extends SurfaceRules.ConditionSource> codec() {
@@ -742,44 +657,30 @@ public class SurfaceRules {
             final PositionalRandomFactory positionalRandomFactory = context.randomState.getOrCreateRandomFactory(this.randomName());
 
             class VerticalGradientCondition extends SurfaceRules.LazyYCondition {
-                VerticalGradientCondition() {
+                VerticalGradientCondition(Context context) {
                     super(context);
                 }
 
                 protected boolean compute() {
-                    int i = this.context.blockY;
-                    if (i <= i) {
+                    int ix = this.context.blockY;
+                    if (ix <= i) {
                         return true;
-                    } else if (i >= i2) {
+                    } else if (ix >= i2) {
                         return false;
                     } else {
-                        double d = Mth.map((double)i, (double)i, (double)i2, 1.0D, 0.0D);
-                        RandomSource randomSource = positionalRandomFactory.at(this.context.blockX, i, this.context.blockZ);
+                        // TODO: (ix, ix, i2), (i, ix, i2), or (ix, i, i2), which is correct one?
+                        double d = Mth.map((double)ix, (double)ix, (double)i2, 1.0D, 0.0D);
+                        RandomSource randomSource = positionalRandomFactory.at(this.context.blockX, ix, this.context.blockZ);
                         return (double)randomSource.nextFloat() < d;
                     }
                 }
             }
 
-            return new VerticalGradientCondition();
-        }
-
-        public ResourceLocation randomName() {
-            return this.randomName;
-        }
-
-        public VerticalAnchor trueAtAndBelow() {
-            return this.trueAtAndBelow;
-        }
-
-        public VerticalAnchor falseAtAndAbove() {
-            return this.falseAtAndAbove;
+            return new VerticalGradientCondition(context);
         }
     }
 
-    static record WaterConditionSource(int a, int c, boolean d) implements SurfaceRules.ConditionSource {
-        final int offset;
-        final int surfaceDepthMultiplier;
-        final boolean addStoneDepth;
+    static record WaterConditionSource(int offset, int surfaceDepthMultiplier, boolean addStoneDepth) implements SurfaceRules.ConditionSource {
         static final KeyDispatchDataCodec<SurfaceRules.WaterConditionSource> CODEC = KeyDispatchDataCodec.of(RecordCodecBuilder.mapCodec((instance) -> instance.group(Codec.INT.fieldOf("offset").forGetter(SurfaceRules.WaterConditionSource::offset), Codec.intRange(-20, 20).fieldOf("surface_depth_multiplier").forGetter(SurfaceRules.WaterConditionSource::surfaceDepthMultiplier), Codec.BOOL.fieldOf("add_stone_depth").forGetter(SurfaceRules.WaterConditionSource::addStoneDepth)).apply(instance, SurfaceRules.WaterConditionSource::new)));
 
         public KeyDispatchDataCodec<? extends SurfaceRules.ConditionSource> codec() {
@@ -788,7 +689,7 @@ public class SurfaceRules {
 
         public SurfaceRules.Condition apply(final SurfaceRules.Context context) {
             class WaterCondition extends SurfaceRules.LazyYCondition {
-                WaterCondition() {
+                WaterCondition(Context context) {
                     super(context);
                 }
 
@@ -797,26 +698,11 @@ public class SurfaceRules {
                 }
             }
 
-            return new WaterCondition();
-        }
-
-        public int offset() {
-            return this.offset;
-        }
-
-        public int surfaceDepthMultiplier() {
-            return this.surfaceDepthMultiplier;
-        }
-
-        public boolean addStoneDepth() {
-            return this.addStoneDepth;
+            return new WaterCondition(context);
         }
     }
 
-    static record YConditionSource(VerticalAnchor a, int c, boolean d) implements SurfaceRules.ConditionSource {
-        final VerticalAnchor anchor;
-        final int surfaceDepthMultiplier;
-        final boolean addStoneDepth;
+    static record YConditionSource(VerticalAnchor anchor, int surfaceDepthMultiplier, boolean addStoneDepth) implements SurfaceRules.ConditionSource {
         static final KeyDispatchDataCodec<SurfaceRules.YConditionSource> CODEC = KeyDispatchDataCodec.of(RecordCodecBuilder.mapCodec((instance) -> instance.group(VerticalAnchor.CODEC.fieldOf("anchor").forGetter(SurfaceRules.YConditionSource::anchor), Codec.intRange(-20, 20).fieldOf("surface_depth_multiplier").forGetter(SurfaceRules.YConditionSource::surfaceDepthMultiplier), Codec.BOOL.fieldOf("add_stone_depth").forGetter(SurfaceRules.YConditionSource::addStoneDepth)).apply(instance, SurfaceRules.YConditionSource::new)));
 
         public KeyDispatchDataCodec<? extends SurfaceRules.ConditionSource> codec() {
@@ -825,7 +711,7 @@ public class SurfaceRules {
 
         public SurfaceRules.Condition apply(final SurfaceRules.Context context) {
             class YCondition extends SurfaceRules.LazyYCondition {
-                YCondition() {
+                YCondition(Context context) {
                     super(context);
                 }
 
@@ -834,19 +720,7 @@ public class SurfaceRules {
                 }
             }
 
-            return new YCondition();
-        }
-
-        public VerticalAnchor anchor() {
-            return this.anchor;
-        }
-
-        public int surfaceDepthMultiplier() {
-            return this.surfaceDepthMultiplier;
-        }
-
-        public boolean addStoneDepth() {
-            return this.addStoneDepth;
+            return new YCondition(context);
         }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/VerticalAnchor.java b/src/main/java/net/minecraft/world/level/levelgen/VerticalAnchor.java
index c2448daa7abd62f88e6e4b52da040eef7076412c..1789f131927f48328f303e53102cf391c2e689b0 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/VerticalAnchor.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/VerticalAnchor.java
@@ -41,8 +41,7 @@ public interface VerticalAnchor {
 
     int resolveY(WorldGenerationContext var1);
 
-    public static record AboveBottom(int e) implements VerticalAnchor {
-        private final int offset;
+    public static record AboveBottom(int offset) implements VerticalAnchor {
         public static final Codec<VerticalAnchor.AboveBottom> CODEC = Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("above_bottom").xmap(VerticalAnchor.AboveBottom::new, VerticalAnchor.AboveBottom::offset).codec();
 
         public int resolveY(WorldGenerationContext worldGenerationContext) {
@@ -52,14 +51,9 @@ public interface VerticalAnchor {
         public String toString() {
             return this.offset + " above bottom";
         }
-
-        public int offset() {
-            return this.offset;
-        }
     }
 
-    public static record Absolute(int e) implements VerticalAnchor {
-        private final int y;
+    public static record Absolute(int y) implements VerticalAnchor {
         public static final Codec<VerticalAnchor.Absolute> CODEC = Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("absolute").xmap(VerticalAnchor.Absolute::new, VerticalAnchor.Absolute::y).codec();
 
         public int resolveY(WorldGenerationContext worldGenerationContext) {
@@ -75,8 +69,7 @@ public interface VerticalAnchor {
         }
     }
 
-    public static record BelowTop(int e) implements VerticalAnchor {
-        private final int offset;
+    public static record BelowTop(int offset) implements VerticalAnchor {
         public static final Codec<VerticalAnchor.BelowTop> CODEC = Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("below_top").xmap(VerticalAnchor.BelowTop::new, VerticalAnchor.BelowTop::offset).codec();
 
         public int resolveY(WorldGenerationContext worldGenerationContext) {
@@ -86,9 +79,5 @@ public interface VerticalAnchor {
         public String toString() {
             return this.offset + " below top";
         }
-
-        public int offset() {
-            return this.offset;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java b/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
index b284990278ad9788e5bef3ea2f21cb6f92e458e0..2d822d1cc6164102793461da223d04b6d8ad3cd2 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
@@ -24,7 +24,7 @@ import net.minecraft.world.level.dimension.LevelStem;
 import org.apache.commons.lang3.StringUtils;
 
 public class WorldGenSettings {
-    public static final Codec<WorldGenSettings> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::seed), Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldGenSettings::generateStructures), Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldGenSettings::generateBonusChest), RegistryCodecs.dataPackAwareCodec(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), LevelStem.CODEC).xmap(LevelStem::sortMap, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::dimensions), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((worldGenSettings) -> worldGenSettings.legacyCustomOptions)).apply(instance, instance.stable(WorldGenSettings::new))).comapFlatMap(WorldGenSettings::guardExperimental, Function.identity());
+    public static final Codec<WorldGenSettings> CODEC = RecordCodecBuilder.<WorldGenSettings>create((instance) -> instance.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::seed), Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldGenSettings::generateStructures), Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldGenSettings::generateBonusChest), RegistryCodecs.dataPackAwareCodec(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), LevelStem.CODEC).xmap(LevelStem::sortMap, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::dimensions), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((worldGenSettings) -> worldGenSettings.legacyCustomOptions)).apply(instance, instance.stable(WorldGenSettings::new))).comapFlatMap(WorldGenSettings::guardExperimental, Function.identity());
     private final long seed;
     private final boolean generateStructures;
     private final boolean generateBonusChest;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/blending/Blender.java b/src/main/java/net/minecraft/world/level/levelgen/blending/Blender.java
index 9dd4b908ed91b306befb8c7b3364ab6ca979a9e5..40c19d9476014c11b2ec0729b8e70396b59870f1 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/blending/Blender.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/blending/Blender.java
@@ -110,7 +110,7 @@ public class Blender {
             MutableDouble mutableDouble = new MutableDouble(0.0D);
             MutableDouble mutableDouble2 = new MutableDouble(0.0D);
             MutableDouble mutableDouble3 = new MutableDouble(Double.POSITIVE_INFINITY);
-            this.heightAndBiomeBlendingData.forEach((l, blendingData) -> blendingData.iterateHeights(QuartPos.fromSection(ChunkPos.getX(l)), QuartPos.fromSection(ChunkPos.getZ(l)), (i3x, i4x, d) -> {
+            this.heightAndBiomeBlendingData.forEach((l, blendingData) -> blendingData.iterateHeights(QuartPos.fromSection(ChunkPos.getX(l)), QuartPos.fromSection(ChunkPos.getZ(l)), (i3x, i4x, dIn) -> {
                     double d2 = Mth.length((double)(i3 - i3x), (double)(i4 - i4x));
                     if (!(d2 > (double)HEIGHT_BLENDING_RANGE_CELLS)) {
                         if (d2 < mutableDouble3.doubleValue()) {
@@ -118,7 +118,7 @@ public class Blender {
                         }
 
                         double d3 = 1.0D / (d2 * d2 * d2 * d2);
-                        mutableDouble2.add(d * d3);
+                        mutableDouble2.add(dIn * d3);
                         mutableDouble.add(d3);
                     }
                 }));
@@ -151,18 +151,18 @@ public class Blender {
             MutableDouble mutableDouble = new MutableDouble(0.0D);
             MutableDouble mutableDouble2 = new MutableDouble(0.0D);
             MutableDouble mutableDouble3 = new MutableDouble(Double.POSITIVE_INFINITY);
-            this.densityBlendingData.forEach((l, blendingData) -> blendingData.iterateDensities(QuartPos.fromSection(ChunkPos.getX(l)), QuartPos.fromSection(ChunkPos.getZ(l)), i2 - 1, i2 + 1, (i4, i5, i6, d) -> {
-                    double d2 = Mth.length((double)(i - i4), (double)((i2 - i5) * 2), (double)(i3 - i6));
-                    if (!(d2 > 2.0D)) {
-                        if (d2 < mutableDouble3.doubleValue()) {
-                            mutableDouble3.setValue(d2);
-                        }
-
-                        double d3 = 1.0D / (d2 * d2 * d2 * d2);
-                        mutableDouble2.add(d * d3);
-                        mutableDouble.add(d3);
+            this.densityBlendingData.forEach((l, blendingData) -> blendingData.iterateDensities(QuartPos.fromSection(ChunkPos.getX(l)), QuartPos.fromSection(ChunkPos.getZ(l)), i2 - 1, i2 + 1, (i4, i5, i6, dIn) -> {
+                double d2In = Mth.length((double)(i - i4), (double)((i2 - i5) * 2), (double)(i3 - i6));
+                if (!(d2In > 2.0D)) {
+                    if (d2In < mutableDouble3.doubleValue()) {
+                        mutableDouble3.setValue(d2In);
                     }
-                }));
+
+                    double d3 = 1.0D / (d2In * d2In * d2In * d2In);
+                    mutableDouble2.add(dIn * d3);
+                    mutableDouble.add(d3);
+                }
+            }));
             if (mutableDouble3.doubleValue() == Double.POSITIVE_INFINITY) {
                 return d;
             } else {
@@ -215,15 +215,15 @@ public class Blender {
         MutableDouble mutableDouble = new MutableDouble(Double.POSITIVE_INFINITY);
         MutableObject<Holder<Biome>> mutableObject = new MutableObject();
         this.heightAndBiomeBlendingData.forEach((l, blendingData) -> blendingData.iterateBiomes(QuartPos.fromSection(ChunkPos.getX(l)), i2, QuartPos.fromSection(ChunkPos.getZ(l)), (i3x, i4, holder) -> {
-                double d = Mth.length((double)(i - i3x), (double)(i3 - i4));
-                if (!(d > (double)HEIGHT_BLENDING_RANGE_CELLS)) {
-                    if (d < mutableDouble.doubleValue()) {
+                double d3 = Mth.length((double)(i - i3x), (double)(i3 - i4));
+                if (!(d3 > (double)HEIGHT_BLENDING_RANGE_CELLS)) {
+                    if (d3 < mutableDouble.doubleValue()) {
                         mutableObject.setValue(holder);
-                        mutableDouble.setValue(d);
+                        mutableDouble.setValue(d3);
                     }
 
-                }
-            }));
+            }
+        }));
         if (mutableDouble.doubleValue() == Double.POSITIVE_INFINITY) {
             return null;
         } else {
@@ -359,17 +359,7 @@ public class Blender {
         return Mth.length(Math.max(0.0D, d7), Math.max(0.0D, d8), Math.max(0.0D, d9));
     }
 
-    public static record BlendingOutput(double a, double b) {
-        private final double alpha;
-        private final double blendingOffset;
-
-        public double alpha() {
-            return this.alpha;
-        }
-
-        public double blendingOffset() {
-            return this.blendingOffset;
-        }
+    public static record BlendingOutput(double alpha, double blendingOffset) {
     }
 
     interface CellValueGetter {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/blending/BlendingData.java b/src/main/java/net/minecraft/world/level/levelgen/blending/BlendingData.java
index fe65336eee4daf6a8a984991eda6b8e0f6c96acd..bf9856c1826d60cdd85e87505c06d6bcaa916434 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/blending/BlendingData.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/blending/BlendingData.java
@@ -54,7 +54,7 @@ public class BlendingData {
     private final List<List<Holder<Biome>>> biomes;
     private final transient double[][] densities;
     private static final Codec<double[]> DOUBLE_ARRAY_CODEC = Codec.DOUBLE.listOf().xmap(Doubles::toArray, Doubles::asList);
-    public static final Codec<BlendingData> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("min_section").forGetter((blendingData) -> blendingData.areaWithOldGeneration.getMinSection()), Codec.INT.fieldOf("max_section").forGetter((blendingData) -> blendingData.areaWithOldGeneration.getMaxSection()), DOUBLE_ARRAY_CODEC.optionalFieldOf("heights").forGetter((blendingData) -> DoubleStream.of(blendingData.heights).anyMatch((d) -> d != Double.MAX_VALUE) ? Optional.of(blendingData.heights) : Optional.empty())).apply(instance, BlendingData::new)).comapFlatMap(BlendingData::validateArraySize, Function.identity());
+    public static final Codec<BlendingData> CODEC = RecordCodecBuilder.<BlendingData>create((instance) -> instance.group(Codec.INT.fieldOf("min_section").forGetter((blendingData) -> blendingData.areaWithOldGeneration.getMinSection()), Codec.INT.fieldOf("max_section").forGetter((blendingData) -> blendingData.areaWithOldGeneration.getMaxSection()), DOUBLE_ARRAY_CODEC.optionalFieldOf("heights").forGetter((blendingData) -> DoubleStream.of(blendingData.heights).anyMatch((d) -> d != Double.MAX_VALUE) ? Optional.of(blendingData.heights) : Optional.empty())).apply(instance, BlendingData::new)).comapFlatMap(BlendingData::validateArraySize, Function.identity());
 
     private static DataResult<BlendingData> validateArraySize(BlendingData blendingData) {
         return blendingData.heights.length != CELL_COLUMN_COUNT ? DataResult.error("heights has to be of length " + CELL_COLUMN_COUNT) : DataResult.success(blendingData);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/carver/ConfiguredWorldCarver.java b/src/main/java/net/minecraft/world/level/levelgen/carver/ConfiguredWorldCarver.java
index 20fde94a3754dd4d58216197339d33353887f711..412571d55547b28c2c32fd354db8ac92f20f756c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/carver/ConfiguredWorldCarver.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/carver/ConfiguredWorldCarver.java
@@ -16,9 +16,7 @@ import net.minecraft.world.level.chunk.CarvingMask;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.levelgen.Aquifer;
 
-public record ConfiguredWorldCarver<WC extends CarverConfiguration>(WorldCarver<WC> d, WC e) {
-    private final WorldCarver<WC> worldCarver;
-    private final WC config;
+public record ConfiguredWorldCarver<WC extends CarverConfiguration>(WorldCarver<WC> worldCarver, WC config) {
     public static final Codec<ConfiguredWorldCarver<?>> DIRECT_CODEC = Registry.CARVER.byNameCodec().dispatch((configuredWorldCarver) -> configuredWorldCarver.worldCarver, WorldCarver::configuredCodec);
     public static final Codec<Holder<ConfiguredWorldCarver<?>>> CODEC = RegistryFileCodec.create(Registry.CONFIGURED_CARVER_REGISTRY, DIRECT_CODEC);
     public static final Codec<HolderSet<ConfiguredWorldCarver<?>>> LIST_CODEC = RegistryCodecs.homogeneousList(Registry.CONFIGURED_CARVER_REGISTRY, DIRECT_CODEC);
@@ -30,12 +28,4 @@ public record ConfiguredWorldCarver<WC extends CarverConfiguration>(WorldCarver<
     public boolean carve(CarvingContext carvingContext, ChunkAccess chunkAccess, Function<BlockPos, Holder<Biome>> function, RandomSource randomSource, Aquifer aquifer, ChunkPos chunkPos, CarvingMask carvingMask) {
         return SharedConstants.debugVoidTerrain(chunkAccess.getPos()) ? false : this.worldCarver.carve(carvingContext, this.config, chunkAccess, function, randomSource, aquifer, chunkPos, carvingMask);
     }
-
-    public WorldCarver<WC> worldCarver() {
-        return this.worldCarver;
-    }
-
-    public WC config() {
-        return this.config;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/ConfiguredFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/ConfiguredFeature.java
index 9eac4a5f0b00ca52c56aedc2af3eff920f7fe325..4586826a3ef889c53bb27dc446a868f3f60a51a4 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/ConfiguredFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/ConfiguredFeature.java
@@ -13,9 +13,7 @@ import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 
-public record ConfiguredFeature<FC extends FeatureConfiguration, F extends Feature<FC>>(F d, FC e) {
-    private final F feature;
-    private final FC config;
+public record ConfiguredFeature<FC extends FeatureConfiguration, F extends Feature<FC>>(F feature, FC config) {
     public static final Codec<ConfiguredFeature<?, ?>> DIRECT_CODEC = Registry.FEATURE.byNameCodec().dispatch((configuredFeature) -> configuredFeature.feature, Feature::configuredCodec);
     public static final Codec<Holder<ConfiguredFeature<?, ?>>> CODEC = RegistryFileCodec.create(Registry.CONFIGURED_FEATURE_REGISTRY, DIRECT_CODEC);
     public static final Codec<HolderSet<ConfiguredFeature<?, ?>>> LIST_CODEC = RegistryCodecs.homogeneousList(Registry.CONFIGURED_FEATURE_REGISTRY, DIRECT_CODEC);
@@ -31,12 +29,4 @@ public record ConfiguredFeature<FC extends FeatureConfiguration, F extends Featu
     public String toString() {
         return "Configured: " + this.feature + ": " + this.config;
     }
-
-    public F feature() {
-        return this.feature;
-    }
-
-    public FC config() {
-        return this.config;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/CoralFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/CoralFeature.java
index d771964b7b246b6a1fc6ed718a541b3291c64e29..6d9e41e31fbe3483070df063c7a109e4b9bf3c9d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/CoralFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/CoralFeature.java
@@ -48,12 +48,12 @@ public abstract class CoralFeature extends Feature<NoneFeatureConfiguration> {
                     BlockPos blockPos3 = blockPos.relative(direction);
                     if (levelAccessor.getBlockState(blockPos3).is(Blocks.WATER)) {
                         Registry.BLOCK.getTag(BlockTags.WALL_CORALS).flatMap((named) -> named.getRandomElement(randomSource)).map(Holder::value).ifPresent((block) -> {
-                            BlockState blockState = block.defaultBlockState();
-                            if (blockState.hasProperty(BaseCoralWallFanBlock.FACING)) {
-                                blockState = blockState.setValue(BaseCoralWallFanBlock.FACING, direction);
+                            BlockState blockStateIn = block.defaultBlockState();
+                            if (blockStateIn.hasProperty(BaseCoralWallFanBlock.FACING)) {
+                                blockStateIn = blockStateIn.setValue(BaseCoralWallFanBlock.FACING, direction);
                             }
 
-                            levelAccessor.setBlock(blockPos3, blockState, 2);
+                            levelAccessor.setBlock(blockPos3, blockStateIn, 2);
                         });
                     }
                 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/FeatureCountTracker.java b/src/main/java/net/minecraft/world/level/levelgen/feature/FeatureCountTracker.java
index 5048ca98b85b57d0731a9126c257cb876c7cab74..79d1ba5ddff649fb64db6c389fe780656db76cbf 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/FeatureCountTracker.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/FeatureCountTracker.java
@@ -60,29 +60,9 @@ public class FeatureCountTracker {
         });
     }
 
-    static record FeatureData(ConfiguredFeature<?, ?> a, Optional<PlacedFeature> b) {
-        private final ConfiguredFeature<?, ?> feature;
-        private final Optional<PlacedFeature> topFeature;
-
-        public ConfiguredFeature<?, ?> feature() {
-            return this.feature;
-        }
-
-        public Optional<PlacedFeature> topFeature() {
-            return this.topFeature;
-        }
+    static record FeatureData(ConfiguredFeature<?, ?> feature, Optional<PlacedFeature> topFeature) {
     }
 
-    static record LevelData(Object2IntMap<FeatureCountTracker.FeatureData> a, MutableInt b) {
-        private final Object2IntMap<FeatureCountTracker.FeatureData> featureData;
-        private final MutableInt chunksWithFeatures;
-
-        public Object2IntMap<FeatureCountTracker.FeatureData> featureData() {
-            return this.featureData;
-        }
-
-        public MutableInt chunksWithFeatures() {
-            return this.chunksWithFeatures;
-        }
+    static record LevelData(Object2IntMap<FeatureCountTracker.FeatureData> featureData, MutableInt chunksWithFeatures) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/LakeFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/LakeFeature.java
index 377a5e51c04c80f52682a119bdee813c3da633e0..06222baf659cb4217b3c6e1128fd3aa77a15c61a 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/LakeFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/LakeFeature.java
@@ -134,9 +134,7 @@ public class LakeFeature extends Feature<LakeFeature.Configuration> {
         return !blockState.is(BlockTags.FEATURES_CANNOT_REPLACE);
     }
 
-    public static record Configuration(BlockStateProvider b, BlockStateProvider c) implements FeatureConfiguration {
-        private final BlockStateProvider fluid;
-        private final BlockStateProvider barrier;
+    public static record Configuration(BlockStateProvider fluid, BlockStateProvider barrier) implements FeatureConfiguration {
         public static final Codec<LakeFeature.Configuration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(BlockStateProvider.CODEC.fieldOf("fluid").forGetter(LakeFeature.Configuration::fluid), BlockStateProvider.CODEC.fieldOf("barrier").forGetter(LakeFeature.Configuration::barrier)).apply(instance, LakeFeature.Configuration::new));
 
         public BlockStateProvider fluid() {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockColumnConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockColumnConfiguration.java
index 387819c53fa7a55bf9f56f6c5a07bcafb169dd05..781c83464ebce9f4c7b897de7fe7ccd57a421115 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockColumnConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockColumnConfiguration.java
@@ -8,11 +8,7 @@ import net.minecraft.util.valueproviders.IntProvider;
 import net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate;
 import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
 
-public record BlockColumnConfiguration(List<BlockColumnConfiguration.Layer> b, Direction c, BlockPredicate d, boolean e) implements FeatureConfiguration {
-    private final List<BlockColumnConfiguration.Layer> layers;
-    private final Direction direction;
-    private final BlockPredicate allowedPlacement;
-    private final boolean prioritizeTip;
+public record BlockColumnConfiguration(List<BlockColumnConfiguration.Layer> layers, Direction direction, BlockPredicate allowedPlacement, boolean prioritizeTip) implements FeatureConfiguration {
     public static final Codec<BlockColumnConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(BlockColumnConfiguration.Layer.CODEC.listOf().fieldOf("layers").forGetter(BlockColumnConfiguration::layers), Direction.CODEC.fieldOf("direction").forGetter(BlockColumnConfiguration::direction), BlockPredicate.CODEC.fieldOf("allowed_placement").forGetter(BlockColumnConfiguration::allowedPlacement), Codec.BOOL.fieldOf("prioritize_tip").forGetter(BlockColumnConfiguration::prioritizeTip)).apply(instance, BlockColumnConfiguration::new));
 
     public static BlockColumnConfiguration.Layer layer(IntProvider intProvider, BlockStateProvider blockStateProvider) {
@@ -23,33 +19,7 @@ public record BlockColumnConfiguration(List<BlockColumnConfiguration.Layer> b, D
         return new BlockColumnConfiguration(List.of(layer(intProvider, blockStateProvider)), Direction.UP, BlockPredicate.ONLY_IN_AIR_PREDICATE, false);
     }
 
-    public List<BlockColumnConfiguration.Layer> layers() {
-        return this.layers;
-    }
-
-    public Direction direction() {
-        return this.direction;
-    }
-
-    public BlockPredicate allowedPlacement() {
-        return this.allowedPlacement;
-    }
-
-    public boolean prioritizeTip() {
-        return this.prioritizeTip;
-    }
-
-    public static record Layer(IntProvider b, BlockStateProvider c) {
-        private final IntProvider height;
-        private final BlockStateProvider state;
+    public static record Layer(IntProvider height, BlockStateProvider state) {
         public static final Codec<BlockColumnConfiguration.Layer> CODEC = RecordCodecBuilder.create((instance) -> instance.group(IntProvider.NON_NEGATIVE_CODEC.fieldOf("height").forGetter(BlockColumnConfiguration.Layer::height), BlockStateProvider.CODEC.fieldOf("provider").forGetter(BlockColumnConfiguration.Layer::state)).apply(instance, BlockColumnConfiguration.Layer::new));
-
-        public IntProvider height() {
-            return this.height;
-        }
-
-        public BlockStateProvider state() {
-            return this.state;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DiskConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DiskConfiguration.java
index 1ad318b76fa8942c3fcf51789db56611d16e05e2..722511d24eeef36e394a8a0334250d370c7e3efc 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DiskConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DiskConfiguration.java
@@ -6,26 +6,6 @@ import net.minecraft.util.valueproviders.IntProvider;
 import net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate;
 import net.minecraft.world.level.levelgen.feature.stateproviders.RuleBasedBlockStateProvider;
 
-public record DiskConfiguration(RuleBasedBlockStateProvider b, BlockPredicate c, IntProvider d, int e) implements FeatureConfiguration {
-    private final RuleBasedBlockStateProvider stateProvider;
-    private final BlockPredicate target;
-    private final IntProvider radius;
-    private final int halfHeight;
+public record DiskConfiguration(RuleBasedBlockStateProvider stateProvider, BlockPredicate target, IntProvider radius, int halfHeight) implements FeatureConfiguration {
     public static final Codec<DiskConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(RuleBasedBlockStateProvider.CODEC.fieldOf("state_provider").forGetter(DiskConfiguration::stateProvider), BlockPredicate.CODEC.fieldOf("target").forGetter(DiskConfiguration::target), IntProvider.codec(0, 8).fieldOf("radius").forGetter(DiskConfiguration::radius), Codec.intRange(0, 4).fieldOf("half_height").forGetter(DiskConfiguration::halfHeight)).apply(instance, DiskConfiguration::new));
-
-    public RuleBasedBlockStateProvider stateProvider() {
-        return this.stateProvider;
-    }
-
-    public BlockPredicate target() {
-        return this.target;
-    }
-
-    public IntProvider radius() {
-        return this.radius;
-    }
-
-    public int halfHeight() {
-        return this.halfHeight;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java
index fd5cf431ba3566fe5a6f887472ead45de5e4b7b5..40b0546975a6ec54039b98007431f2c0752338b7 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java
@@ -6,26 +6,6 @@ import net.minecraft.core.Holder;
 import net.minecraft.util.ExtraCodecs;
 import net.minecraft.world.level.levelgen.placement.PlacedFeature;
 
-public record RandomPatchConfiguration(int b, int c, int d, Holder<PlacedFeature> e) implements FeatureConfiguration {
-    private final int tries;
-    private final int xzSpread;
-    private final int ySpread;
-    private final Holder<PlacedFeature> feature;
+public record RandomPatchConfiguration(int tries, int xzSpread, int ySpread, Holder<PlacedFeature> feature) implements FeatureConfiguration {
     public static final Codec<RandomPatchConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.POSITIVE_INT.fieldOf("tries").orElse(128).forGetter(RandomPatchConfiguration::tries), ExtraCodecs.NON_NEGATIVE_INT.fieldOf("xz_spread").orElse(7).forGetter(RandomPatchConfiguration::xzSpread), ExtraCodecs.NON_NEGATIVE_INT.fieldOf("y_spread").orElse(3).forGetter(RandomPatchConfiguration::ySpread), PlacedFeature.CODEC.fieldOf("feature").forGetter(RandomPatchConfiguration::feature)).apply(instance, RandomPatchConfiguration::new));
-
-    public int tries() {
-        return this.tries;
-    }
-
-    public int xzSpread() {
-        return this.xzSpread;
-    }
-
-    public int ySpread() {
-        return this.ySpread;
-    }
-
-    public Holder<PlacedFeature> feature() {
-        return this.feature;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SculkPatchConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SculkPatchConfiguration.java
index 3c89fb89f2fbb670887f620757ed6f9dbbf20848..0421a358422c219c73d6aae6b664c3026fdf5bd5 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SculkPatchConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SculkPatchConfiguration.java
@@ -4,41 +4,6 @@ import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import net.minecraft.util.valueproviders.IntProvider;
 
-public record SculkPatchConfiguration(int b, int c, int d, int e, int f, IntProvider g, float h) implements FeatureConfiguration {
-    private final int chargeCount;
-    private final int amountPerCharge;
-    private final int spreadAttempts;
-    private final int growthRounds;
-    private final int spreadRounds;
-    private final IntProvider extraRareGrowths;
-    private final float catalystChance;
+public record SculkPatchConfiguration(int chargeCount, int amountPerCharge, int spreadAttempts, int growthRounds, int spreadRounds, IntProvider extraRareGrowths, float catalystChance) implements FeatureConfiguration {
     public static final Codec<SculkPatchConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.intRange(1, 32).fieldOf("charge_count").forGetter(SculkPatchConfiguration::chargeCount), Codec.intRange(1, 500).fieldOf("amount_per_charge").forGetter(SculkPatchConfiguration::amountPerCharge), Codec.intRange(1, 64).fieldOf("spread_attempts").forGetter(SculkPatchConfiguration::spreadAttempts), Codec.intRange(0, 8).fieldOf("growth_rounds").forGetter(SculkPatchConfiguration::growthRounds), Codec.intRange(0, 8).fieldOf("spread_rounds").forGetter(SculkPatchConfiguration::spreadRounds), IntProvider.CODEC.fieldOf("extra_rare_growths").forGetter(SculkPatchConfiguration::extraRareGrowths), Codec.floatRange(0.0F, 1.0F).fieldOf("catalyst_chance").forGetter(SculkPatchConfiguration::catalystChance)).apply(instance, SculkPatchConfiguration::new));
-
-    public int chargeCount() {
-        return this.chargeCount;
-    }
-
-    public int amountPerCharge() {
-        return this.amountPerCharge;
-    }
-
-    public int spreadAttempts() {
-        return this.spreadAttempts;
-    }
-
-    public int growthRounds() {
-        return this.growthRounds;
-    }
-
-    public int spreadRounds() {
-        return this.spreadRounds;
-    }
-
-    public IntProvider extraRareGrowths() {
-        return this.extraRareGrowths;
-    }
-
-    public float catalystChance() {
-        return this.catalystChance;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleBlockConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleBlockConfiguration.java
index b401eece159cbdc649582dfd1b72907cb568efce..9a1e0952b2ad80b66727222664fe5e874d5f8821 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleBlockConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleBlockConfiguration.java
@@ -4,11 +4,6 @@ import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
 
-public record SimpleBlockConfiguration(BlockStateProvider b) implements FeatureConfiguration {
-    private final BlockStateProvider toPlace;
+public record SimpleBlockConfiguration(BlockStateProvider toPlace) implements FeatureConfiguration {
     public static final Codec<SimpleBlockConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(BlockStateProvider.CODEC.fieldOf("to_place").forGetter((simpleBlockConfiguration) -> simpleBlockConfiguration.toPlace)).apply(instance, SimpleBlockConfiguration::new));
-
-    public BlockStateProvider toPlace() {
-        return this.toPlace;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/TwistingVinesConfig.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/TwistingVinesConfig.java
index e93b917cf6e56c2653b693ebf0461f9aa0abc0ac..763643f5df58a47f8068d10a2f1c834b1f1dba7d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/TwistingVinesConfig.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/TwistingVinesConfig.java
@@ -4,21 +4,6 @@ import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import net.minecraft.util.ExtraCodecs;
 
-public record TwistingVinesConfig(int b, int c, int d) implements FeatureConfiguration {
-    private final int spreadWidth;
-    private final int spreadHeight;
-    private final int maxHeight;
+public record TwistingVinesConfig(int spreadWidth, int spreadHeight, int maxHeight) implements FeatureConfiguration {
     public static final Codec<TwistingVinesConfig> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.POSITIVE_INT.fieldOf("spread_width").forGetter(TwistingVinesConfig::spreadWidth), ExtraCodecs.POSITIVE_INT.fieldOf("spread_height").forGetter(TwistingVinesConfig::spreadHeight), ExtraCodecs.POSITIVE_INT.fieldOf("max_height").forGetter(TwistingVinesConfig::maxHeight)).apply(instance, TwistingVinesConfig::new));
-
-    public int spreadWidth() {
-        return this.spreadWidth;
-    }
-
-    public int spreadHeight() {
-        return this.spreadHeight;
-    }
-
-    public int maxHeight() {
-        return this.maxHeight;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/rootplacers/AboveRootPlacement.java b/src/main/java/net/minecraft/world/level/levelgen/feature/rootplacers/AboveRootPlacement.java
index d57618e2f9c50d580d68f4e3f0643bd48de9b6c1..6f396f950b905acabce2d588fc9fa2191ddd1a96 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/rootplacers/AboveRootPlacement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/rootplacers/AboveRootPlacement.java
@@ -4,16 +4,6 @@ import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
 
-public record AboveRootPlacement(BlockStateProvider b, float c) {
-    private final BlockStateProvider aboveRootProvider;
-    private final float aboveRootPlacementChance;
+public record AboveRootPlacement(BlockStateProvider aboveRootProvider, float aboveRootPlacementChance) {
     public static final Codec<AboveRootPlacement> CODEC = RecordCodecBuilder.create((instance) -> instance.group(BlockStateProvider.CODEC.fieldOf("above_root_provider").forGetter((aboveRootPlacement) -> aboveRootPlacement.aboveRootProvider), Codec.floatRange(0.0F, 1.0F).fieldOf("above_root_placement_chance").forGetter((aboveRootPlacement) -> aboveRootPlacement.aboveRootPlacementChance)).apply(instance, AboveRootPlacement::new));
-
-    public BlockStateProvider aboveRootProvider() {
-        return this.aboveRootProvider;
-    }
-
-    public float aboveRootPlacementChance() {
-        return this.aboveRootPlacementChance;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/rootplacers/MangroveRootPlacement.java b/src/main/java/net/minecraft/world/level/levelgen/feature/rootplacers/MangroveRootPlacement.java
index 0283eac3a05a2095f1893dc5109162c92aa5bc45..4f959da49c80abe9c2e21db4c8f33115559415b4 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/rootplacers/MangroveRootPlacement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/rootplacers/MangroveRootPlacement.java
@@ -8,13 +8,7 @@ import net.minecraft.core.RegistryCodecs;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
 
-public record MangroveRootPlacement(HolderSet<Block> b, HolderSet<Block> c, BlockStateProvider d, int e, int f, float g) {
-    private final HolderSet<Block> canGrowThrough;
-    private final HolderSet<Block> muddyRootsIn;
-    private final BlockStateProvider muddyRootsProvider;
-    private final int maxRootWidth;
-    private final int maxRootLength;
-    private final float randomSkewChance;
+public record MangroveRootPlacement(HolderSet<Block> canGrowThrough, HolderSet<Block> muddyRootsIn, BlockStateProvider muddyRootsProvider, int maxRootWidth, int maxRootLength, float randomSkewChance) {
     public static final Codec<MangroveRootPlacement> CODEC = RecordCodecBuilder.create((instance) -> instance.group(RegistryCodecs.homogeneousList(Registry.BLOCK_REGISTRY).fieldOf("can_grow_through").forGetter((mangroveRootPlacement) -> mangroveRootPlacement.canGrowThrough), RegistryCodecs.homogeneousList(Registry.BLOCK_REGISTRY).fieldOf("muddy_roots_in").forGetter((mangroveRootPlacement) -> mangroveRootPlacement.muddyRootsIn), BlockStateProvider.CODEC.fieldOf("muddy_roots_provider").forGetter((mangroveRootPlacement) -> mangroveRootPlacement.muddyRootsProvider), Codec.intRange(1, 12).fieldOf("max_root_width").forGetter((mangroveRootPlacement) -> mangroveRootPlacement.maxRootWidth), Codec.intRange(1, 64).fieldOf("max_root_length").forGetter((mangroveRootPlacement) -> mangroveRootPlacement.maxRootLength), Codec.floatRange(0.0F, 1.0F).fieldOf("random_skew_chance").forGetter((mangroveRootPlacement) -> mangroveRootPlacement.randomSkewChance)).apply(instance, MangroveRootPlacement::new));
 
     public HolderSet<Block> canGrowThrough() {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/RuleBasedBlockStateProvider.java b/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/RuleBasedBlockStateProvider.java
index 86846bcfc28e702d859bdc4456696a4f0d8036b6..d4cc378ee2dddf37bb0e6c02a76ece3036439e37 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/RuleBasedBlockStateProvider.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/RuleBasedBlockStateProvider.java
@@ -10,9 +10,7 @@ import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate;
 
-public record RuleBasedBlockStateProvider(BlockStateProvider b, List<RuleBasedBlockStateProvider.Rule> c) {
-    private final BlockStateProvider fallback;
-    private final List<RuleBasedBlockStateProvider.Rule> rules;
+public record RuleBasedBlockStateProvider(BlockStateProvider fallback, List<RuleBasedBlockStateProvider.Rule> rules) {
     public static final Codec<RuleBasedBlockStateProvider> CODEC = RecordCodecBuilder.create((instance) -> instance.group(BlockStateProvider.CODEC.fieldOf("fallback").forGetter(RuleBasedBlockStateProvider::fallback), RuleBasedBlockStateProvider.Rule.CODEC.listOf().fieldOf("rules").forGetter(RuleBasedBlockStateProvider::rules)).apply(instance, RuleBasedBlockStateProvider::new));
 
     public static RuleBasedBlockStateProvider simple(BlockStateProvider blockStateProvider) {
@@ -33,25 +31,7 @@ public record RuleBasedBlockStateProvider(BlockStateProvider b, List<RuleBasedBl
         return this.fallback.getState(randomSource, blockPos);
     }
 
-    public BlockStateProvider fallback() {
-        return this.fallback;
-    }
-
-    public List<RuleBasedBlockStateProvider.Rule> rules() {
-        return this.rules;
-    }
-
-    public static record Rule(BlockPredicate b, BlockStateProvider c) {
-        private final BlockPredicate ifTrue;
-        private final BlockStateProvider then;
+    public static record Rule(BlockPredicate ifTrue, BlockStateProvider then) {
         public static final Codec<RuleBasedBlockStateProvider.Rule> CODEC = RecordCodecBuilder.create((instance) -> instance.group(BlockPredicate.CODEC.fieldOf("if_true").forGetter(RuleBasedBlockStateProvider.Rule::ifTrue), BlockStateProvider.CODEC.fieldOf("then").forGetter(RuleBasedBlockStateProvider.Rule::then)).apply(instance, RuleBasedBlockStateProvider.Rule::new));
-
-        public BlockPredicate ifTrue() {
-            return this.ifTrue;
-        }
-
-        public BlockStateProvider then() {
-            return this.then;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
index d900cc9ddf00f835c838de1035594188a0ea3bf3..0977dac3c10af5211f409962f69ece14bc1a32bd 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
@@ -40,7 +40,7 @@ public class AlterGroundDecorator extends TreeDecorator {
                 this.placeCircle(context, blockPos.west().south(2));
                 this.placeCircle(context, blockPos.east(2).south(2));
 
-                for(int i = 0; i < 5; ++i) {
+                for(int ix = 0; ix < 5; ++ix) {
                     int i2 = context.random().nextInt(64);
                     int i3 = i2 % 8;
                     int i4 = i2 / 8;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/BeehiveDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/BeehiveDecorator.java
index 8f2e888c4651729aaec46179bff8e295c0640c34..2d432fb4023f833f31696460ab6f83c77a87d997 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/BeehiveDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/BeehiveDecorator.java
@@ -43,9 +43,9 @@ public class BeehiveDecorator extends TreeDecorator {
                 if (!optional.isEmpty()) {
                     context.setBlock((BlockPos)optional.get(), Blocks.BEE_NEST.defaultBlockState().setValue(BeehiveBlock.FACING, WORLDGEN_FACING));
                     context.level().getBlockEntity((BlockPos)optional.get(), BlockEntityType.BEEHIVE).ifPresent((beehiveBlockEntity) -> {
-                        int i = 2 + randomSource.nextInt(2);
+                        int iIn = 2 + randomSource.nextInt(2);
 
-                        for(int i2 = 0; i2 < i; ++i2) {
+                        for(int i2 = 0; i2 < iIn; ++i2) {
                             CompoundTag compoundTag = new CompoundTag();
                             compoundTag.putString("id", Registry.ENTITY_TYPE.getKey(EntityType.BEE).toString());
                             beehiveBlockEntity.storeBee(compoundTag, randomSource.nextInt(599), false);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorPreset.java b/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorPreset.java
index 68d7030c12176d3b78d1ff77cf2c32b1d03f96da..95d06f7b6a442344f2bf5a67c98cbb322e54f7d0 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorPreset.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorPreset.java
@@ -8,17 +8,7 @@ import net.minecraft.resources.RegistryFileCodec;
 import net.minecraft.resources.RegistryFixedCodec;
 import net.minecraft.world.item.Item;
 
-public record FlatLevelGeneratorPreset(Holder<Item> c, FlatLevelGeneratorSettings d) {
-    private final Holder<Item> displayItem;
-    private final FlatLevelGeneratorSettings settings;
+public record FlatLevelGeneratorPreset(Holder<Item> displayItem, FlatLevelGeneratorSettings settings) {
     public static final Codec<FlatLevelGeneratorPreset> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(RegistryFixedCodec.create(Registry.ITEM_REGISTRY).fieldOf("display").forGetter((flatLevelGeneratorPreset) -> flatLevelGeneratorPreset.displayItem), FlatLevelGeneratorSettings.CODEC.fieldOf("settings").forGetter((flatLevelGeneratorPreset) -> flatLevelGeneratorPreset.settings)).apply(instance, FlatLevelGeneratorPreset::new));
     public static final Codec<Holder<FlatLevelGeneratorPreset>> CODEC = RegistryFileCodec.create(Registry.FLAT_LEVEL_GENERATOR_PRESET_REGISTRY, DIRECT_CODEC);
-
-    public Holder<Item> displayItem() {
-        return this.displayItem;
-    }
-
-    public FlatLevelGeneratorSettings settings() {
-        return this.settings;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java b/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
index e663674fc936d6f9222fa4e3ee9483d4c29822b7..30ad969b71acd2270373b16db6aa6eedc9035c63 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
@@ -32,7 +32,7 @@ import org.slf4j.Logger;
 
 public class FlatLevelGeneratorSettings {
     private static final Logger LOGGER = LogUtils.getLogger();
-    public static final Codec<FlatLevelGeneratorSettings> CODEC = RecordCodecBuilder.create((instance) -> instance.group(RegistryOps.retrieveRegistry(Registry.BIOME_REGISTRY).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.biomes), RegistryCodecs.homogeneousList(Registry.STRUCTURE_SET_REGISTRY).optionalFieldOf("structure_overrides").forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.structureOverrides), FlatLayerInfo.CODEC.listOf().fieldOf("layers").forGetter(FlatLevelGeneratorSettings::getLayersInfo), Codec.BOOL.fieldOf("lakes").orElse(false).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.addLakes), Codec.BOOL.fieldOf("features").orElse(false).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.decoration), Biome.CODEC.optionalFieldOf("biome").orElseGet(Optional::empty).forGetter((flatLevelGeneratorSettings) -> Optional.of(flatLevelGeneratorSettings.biome))).apply(instance, FlatLevelGeneratorSettings::new)).comapFlatMap(FlatLevelGeneratorSettings::validateHeight, Function.identity()).stable();
+    public static final Codec<FlatLevelGeneratorSettings> CODEC = RecordCodecBuilder.<FlatLevelGeneratorSettings>create((instance) -> instance.group(RegistryOps.retrieveRegistry(Registry.BIOME_REGISTRY).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.biomes), RegistryCodecs.homogeneousList(Registry.STRUCTURE_SET_REGISTRY).optionalFieldOf("structure_overrides").forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.structureOverrides), FlatLayerInfo.CODEC.listOf().fieldOf("layers").forGetter(FlatLevelGeneratorSettings::getLayersInfo), Codec.BOOL.fieldOf("lakes").orElse(false).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.addLakes), Codec.BOOL.fieldOf("features").orElse(false).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.decoration), Biome.CODEC.optionalFieldOf("biome").orElseGet(Optional::empty).forGetter((flatLevelGeneratorSettings) -> Optional.of(flatLevelGeneratorSettings.biome))).apply(instance, FlatLevelGeneratorSettings::new)).comapFlatMap(FlatLevelGeneratorSettings::validateHeight, Function.identity()).stable();
     private final Registry<Biome> biomes;
     private final Optional<HolderSet<StructureSet>> structureOverrides;
     private final List<FlatLayerInfo> layersInfo = Lists.newArrayList();
@@ -120,7 +120,7 @@ public class FlatLevelGeneratorSettings {
 
                 for(int i = 0; i < list.size(); ++i) {
                     if (i != GenerationStep.Decoration.UNDERGROUND_STRUCTURES.ordinal() && i != GenerationStep.Decoration.SURFACE_STRUCTURES.ordinal()) {
-                        for(Holder<PlacedFeature> holder2 : (HolderSet)list.get(i)) {
+                        for(Holder<PlacedFeature> holder2 : list.get(i)) {
                             builder.addFeature(i, holder2);
                         }
                     }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/heightproviders/ConstantHeight.java b/src/main/java/net/minecraft/world/level/levelgen/heightproviders/ConstantHeight.java
index 6f7a18786b7ef62c9830842ecc92a417e4326617..e688cc84ee88b04168b9a3b7b9fbc1e2f5b349d2 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/heightproviders/ConstantHeight.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/heightproviders/ConstantHeight.java
@@ -9,7 +9,7 @@ import net.minecraft.world.level.levelgen.WorldGenerationContext;
 
 public class ConstantHeight extends HeightProvider {
     public static final ConstantHeight ZERO = new ConstantHeight(VerticalAnchor.absolute(0));
-    public static final Codec<ConstantHeight> CODEC = Codec.either(VerticalAnchor.CODEC, RecordCodecBuilder.create((instance) -> instance.group(VerticalAnchor.CODEC.fieldOf("value").forGetter((constantHeight) -> constantHeight.value)).apply(instance, ConstantHeight::new))).xmap((either) -> (ConstantHeight)either.map(ConstantHeight::of, (constantHeight) -> constantHeight), (constantHeight) -> Either.left(constantHeight.value));
+    public static final Codec<ConstantHeight> CODEC = Codec.either(VerticalAnchor.CODEC, RecordCodecBuilder.<ConstantHeight>create((instance) -> instance.group(VerticalAnchor.CODEC.fieldOf("value").forGetter((constantHeight) -> constantHeight.value)).apply(instance, ConstantHeight::new))).xmap((either) -> (ConstantHeight)either.map(ConstantHeight::of, (constantHeight) -> constantHeight), (constantHeight) -> Either.left(constantHeight.value));
     private final VerticalAnchor value;
 
     public static ConstantHeight of(VerticalAnchor verticalAnchor) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/material/MaterialRuleList.java b/src/main/java/net/minecraft/world/level/levelgen/material/MaterialRuleList.java
index 418cd2c166ff34538a91261517019c90058368f3..f71e4e53d88629e5bc06cb476197b8dfa70ec211 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/material/MaterialRuleList.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/material/MaterialRuleList.java
@@ -6,9 +6,7 @@ import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.DensityFunction;
 import net.minecraft.world.level.levelgen.NoiseChunk;
 
-public record MaterialRuleList(List<NoiseChunk.BlockStateFiller> a) implements NoiseChunk.BlockStateFiller {
-    private final List<NoiseChunk.BlockStateFiller> materialRuleList;
-
+public record MaterialRuleList(List<NoiseChunk.BlockStateFiller> materialRuleList) implements NoiseChunk.BlockStateFiller {
     @Nullable
     public BlockState calculate(DensityFunction.FunctionContext functionContext) {
         for(NoiseChunk.BlockStateFiller blockStateFiller : this.materialRuleList) {
@@ -20,8 +18,4 @@ public record MaterialRuleList(List<NoiseChunk.BlockStateFiller> a) implements N
 
         return null;
     }
-
-    public List<NoiseChunk.BlockStateFiller> materialRuleList() {
-        return this.materialRuleList;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/PlacedFeature.java b/src/main/java/net/minecraft/world/level/levelgen/placement/PlacedFeature.java
index ef52de64bcd924fb4b5e499bfe7ccbcd6eaacbb3..fdd41065720208c14618fee29e65a917507407c1 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/PlacedFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/PlacedFeature.java
@@ -17,9 +17,7 @@ import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
 import org.apache.commons.lang3.mutable.MutableBoolean;
 
-public record PlacedFeature(Holder<ConfiguredFeature<?, ?>> e, List<PlacementModifier> f) {
-    private final Holder<ConfiguredFeature<?, ?>> feature;
-    private final List<PlacementModifier> placement;
+public record PlacedFeature(Holder<ConfiguredFeature<?, ?>> feature, List<PlacementModifier> placement) {
     public static final Codec<PlacedFeature> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(ConfiguredFeature.CODEC.fieldOf("feature").forGetter((placedFeature) -> placedFeature.feature), PlacementModifier.CODEC.listOf().fieldOf("placement").forGetter((placedFeature) -> placedFeature.placement)).apply(instance, PlacedFeature::new));
     public static final Codec<Holder<PlacedFeature>> CODEC = RegistryFileCodec.create(Registry.PLACED_FEATURE_REGISTRY, DIRECT_CODEC);
     public static final Codec<HolderSet<PlacedFeature>> LIST_CODEC = RegistryCodecs.homogeneousList(Registry.PLACED_FEATURE_REGISTRY, DIRECT_CODEC);
@@ -59,14 +57,6 @@ public record PlacedFeature(Holder<ConfiguredFeature<?, ?>> e, List<PlacementMod
         return "Placed " + this.feature;
     }
 
-    public Holder<ConfiguredFeature<?, ?>> feature() {
-        return this.feature;
-    }
-
-    public List<PlacementModifier> placement() {
-        return this.placement;
-    }
-
     static record test(int a) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/Structure.java b/src/main/java/net/minecraft/world/level/levelgen/structure/Structure.java
index c89a19037d63ec4b48cfd8d8a219000ce1381fec..b058b6ae0bde7ccfc272c5f9b10325650b0feddc 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/Structure.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/Structure.java
@@ -147,18 +147,17 @@ public abstract class Structure {
 
     public abstract StructureType<?> type();
 
-    public static record GenerationContext(RegistryAccess a, ChunkGenerator b, BiomeSource c, RandomState d, StructureTemplateManager e, WorldgenRandom f, long g, ChunkPos h, LevelHeightAccessor i, Predicate<Holder<Biome>> j) {
-        private final RegistryAccess registryAccess;
-        private final ChunkGenerator chunkGenerator;
-        private final BiomeSource biomeSource;
-        private final RandomState randomState;
-        private final StructureTemplateManager structureTemplateManager;
-        private final WorldgenRandom random;
-        private final long seed;
-        private final ChunkPos chunkPos;
-        private final LevelHeightAccessor heightAccessor;
-        private final Predicate<Holder<Biome>> validBiome;
-
+    public static record GenerationContext(
+            RegistryAccess registryAccess,
+            ChunkGenerator chunkGenerator,
+            BiomeSource biomeSource,
+            RandomState randomState,
+            StructureTemplateManager structureTemplateManager,
+            WorldgenRandom random,
+            long seed,
+            ChunkPos chunkPos,
+            LevelHeightAccessor heightAccessor,
+            Predicate<Holder<Biome>> validBiome) {
         public GenerationContext(RegistryAccess registryAccess, ChunkGenerator chunkGenerator, BiomeSource biomeSource, RandomState randomState, StructureTemplateManager structureTemplateManager, long l, ChunkPos chunkPos, LevelHeightAccessor levelHeightAccessor, Predicate<Holder<Biome>> predicate) {
             this(registryAccess, chunkGenerator, biomeSource, randomState, structureTemplateManager, makeRandom(l, chunkPos), l, chunkPos, levelHeightAccessor, predicate);
         }
@@ -168,52 +167,9 @@ public abstract class Structure {
             worldgenRandom.setLargeFeatureSeed(l, chunkPos.x, chunkPos.z);
             return worldgenRandom;
         }
-
-        public RegistryAccess registryAccess() {
-            return this.registryAccess;
-        }
-
-        public ChunkGenerator chunkGenerator() {
-            return this.chunkGenerator;
-        }
-
-        public BiomeSource biomeSource() {
-            return this.biomeSource;
-        }
-
-        public RandomState randomState() {
-            return this.randomState;
-        }
-
-        public StructureTemplateManager structureTemplateManager() {
-            return this.structureTemplateManager;
-        }
-
-        public WorldgenRandom random() {
-            return this.random;
-        }
-
-        public long seed() {
-            return this.seed;
-        }
-
-        public ChunkPos chunkPos() {
-            return this.chunkPos;
-        }
-
-        public LevelHeightAccessor heightAccessor() {
-            return this.heightAccessor;
-        }
-
-        public Predicate<Holder<Biome>> validBiome() {
-            return this.validBiome;
-        }
     }
 
-    public static record GenerationStub(BlockPos a, Either<Consumer<StructurePiecesBuilder>, StructurePiecesBuilder> b) {
-        private final BlockPos position;
-        private final Either<Consumer<StructurePiecesBuilder>, StructurePiecesBuilder> generator;
-
+    public static record GenerationStub(BlockPos position, Either<Consumer<StructurePiecesBuilder>, StructurePiecesBuilder> generator) {
         public GenerationStub(BlockPos blockPos, Consumer<StructurePiecesBuilder> consumer) {
             this(blockPos, Either.left(consumer));
         }
@@ -225,21 +181,9 @@ public abstract class Structure {
                 return structurePiecesBuilder;
             }, (structurePiecesBuilder) -> structurePiecesBuilder);
         }
-
-        public BlockPos position() {
-            return this.position;
-        }
-
-        public Either<Consumer<StructurePiecesBuilder>, StructurePiecesBuilder> generator() {
-            return this.generator;
-        }
     }
 
-    public static record StructureSettings(HolderSet<Biome> b, Map<MobCategory, StructureSpawnOverride> c, GenerationStep.Decoration d, TerrainAdjustment e) {
-        final HolderSet<Biome> biomes;
-        final Map<MobCategory, StructureSpawnOverride> spawnOverrides;
-        final GenerationStep.Decoration step;
-        final TerrainAdjustment terrainAdaptation;
+    public static record StructureSettings(HolderSet<Biome> biomes, Map<MobCategory, StructureSpawnOverride> spawnOverrides, GenerationStep.Decoration step, TerrainAdjustment terrainAdaptation) {
         public static final MapCodec<Structure.StructureSettings> CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(RegistryCodecs.homogeneousList(Registry.BIOME_REGISTRY).fieldOf("biomes").forGetter(Structure.StructureSettings::biomes), Codec.simpleMap(MobCategory.CODEC, StructureSpawnOverride.CODEC, StringRepresentable.keys(MobCategory.values())).fieldOf("spawn_overrides").forGetter(Structure.StructureSettings::spawnOverrides), GenerationStep.Decoration.CODEC.fieldOf("step").forGetter(Structure.StructureSettings::step), TerrainAdjustment.CODEC.optionalFieldOf("terrain_adaptation", TerrainAdjustment.NONE).forGetter(Structure.StructureSettings::terrainAdaptation)).apply(instance, Structure.StructureSettings::new));
 
         public HolderSet<Biome> biomes() {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java b/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java
index 187dea6dda6f5a46954ca2f620cb7c3223c65b35..08992974525faae4652e0756ef58a3e3bbfca654 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java
@@ -46,7 +46,7 @@ public abstract class StructurePiece {
     private Rotation rotation;
     protected int genDepth;
     private final StructurePieceType type;
-    private static final Set<Block> SHAPE_CHECK_BLOCKS = ImmutableSet.builder().add(Blocks.NETHER_BRICK_FENCE).add(Blocks.TORCH).add(Blocks.WALL_TORCH).add(Blocks.OAK_FENCE).add(Blocks.SPRUCE_FENCE).add(Blocks.DARK_OAK_FENCE).add(Blocks.ACACIA_FENCE).add(Blocks.BIRCH_FENCE).add(Blocks.JUNGLE_FENCE).add(Blocks.LADDER).add(Blocks.IRON_BARS).build();
+    private static final Set<Block> SHAPE_CHECK_BLOCKS = ImmutableSet.<Block>builder().add(Blocks.NETHER_BRICK_FENCE).add(Blocks.TORCH).add(Blocks.WALL_TORCH).add(Blocks.OAK_FENCE).add(Blocks.SPRUCE_FENCE).add(Blocks.DARK_OAK_FENCE).add(Blocks.ACACIA_FENCE).add(Blocks.BIRCH_FENCE).add(Blocks.JUNGLE_FENCE).add(Blocks.LADDER).add(Blocks.IRON_BARS).build();
 
     protected StructurePiece(StructurePieceType structurePieceType, int i, BoundingBox boundingBox) {
         this.type = structurePieceType;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureSet.java b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureSet.java
index 6296c353839db1347257c986a1e10dc5aa1f63bc..6447b2cfe2cf9c4c0a02e07129ce8b3336fcce2c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureSet.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureSet.java
@@ -9,9 +9,7 @@ import net.minecraft.resources.RegistryFileCodec;
 import net.minecraft.util.ExtraCodecs;
 import net.minecraft.world.level.levelgen.structure.placement.StructurePlacement;
 
-public record StructureSet(List<StructureSet.StructureSelectionEntry> c, StructurePlacement d) {
-    private final List<StructureSet.StructureSelectionEntry> structures;
-    private final StructurePlacement placement;
+public record StructureSet(List<StructureSet.StructureSelectionEntry> structures, StructurePlacement placement) {
     public static final Codec<StructureSet> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(StructureSet.StructureSelectionEntry.CODEC.listOf().fieldOf("structures").forGetter(StructureSet::structures), StructurePlacement.CODEC.fieldOf("placement").forGetter(StructureSet::placement)).apply(instance, StructureSet::new));
     public static final Codec<Holder<StructureSet>> CODEC = RegistryFileCodec.create(Registry.STRUCTURE_SET_REGISTRY, DIRECT_CODEC);
 
@@ -27,25 +25,7 @@ public record StructureSet(List<StructureSet.StructureSelectionEntry> c, Structu
         return new StructureSet.StructureSelectionEntry(holder, 1);
     }
 
-    public List<StructureSet.StructureSelectionEntry> structures() {
-        return this.structures;
-    }
-
-    public StructurePlacement placement() {
-        return this.placement;
-    }
-
-    public static record StructureSelectionEntry(Holder<Structure> b, int c) {
-        private final Holder<Structure> structure;
-        private final int weight;
+    public static record StructureSelectionEntry(Holder<Structure> structure, int weight) {
         public static final Codec<StructureSet.StructureSelectionEntry> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Structure.CODEC.fieldOf("structure").forGetter(StructureSet.StructureSelectionEntry::structure), ExtraCodecs.POSITIVE_INT.fieldOf("weight").forGetter(StructureSet.StructureSelectionEntry::weight)).apply(instance, StructureSet.StructureSelectionEntry::new));
-
-        public Holder<Structure> structure() {
-            return this.structure;
-        }
-
-        public int weight() {
-            return this.weight;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureSpawnOverride.java b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureSpawnOverride.java
index 984d53c2dc333f2d434e74081407b6f89f93fdca..3fa7b5d6e0dc835b355ea84fdbe68c0eaef6f862 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureSpawnOverride.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureSpawnOverride.java
@@ -6,19 +6,9 @@ import net.minecraft.util.StringRepresentable;
 import net.minecraft.util.random.WeightedRandomList;
 import net.minecraft.world.level.biome.MobSpawnSettings;
 
-public record StructureSpawnOverride(StructureSpawnOverride.BoundingBoxType b, WeightedRandomList<MobSpawnSettings.SpawnerData> c) {
-    private final StructureSpawnOverride.BoundingBoxType boundingBox;
-    private final WeightedRandomList<MobSpawnSettings.SpawnerData> spawns;
+public record StructureSpawnOverride(StructureSpawnOverride.BoundingBoxType boundingBox, WeightedRandomList<MobSpawnSettings.SpawnerData> spawns) {
     public static final Codec<StructureSpawnOverride> CODEC = RecordCodecBuilder.create((instance) -> instance.group(StructureSpawnOverride.BoundingBoxType.CODEC.fieldOf("bounding_box").forGetter(StructureSpawnOverride::boundingBox), WeightedRandomList.codec(MobSpawnSettings.SpawnerData.CODEC).fieldOf("spawns").forGetter(StructureSpawnOverride::spawns)).apply(instance, StructureSpawnOverride::new));
 
-    public StructureSpawnOverride.BoundingBoxType boundingBox() {
-        return this.boundingBox;
-    }
-
-    public WeightedRandomList<MobSpawnSettings.SpawnerData> spawns() {
-        return this.spawns;
-    }
-
     public static enum BoundingBoxType implements StringRepresentable {
         PIECE("piece"),
         STRUCTURE("full");
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureStart.java b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureStart.java
index 0c8d319138ebc01bd46bd1c51b884a27764724b3..918fe396590ab8e193f53e4ab2e67c55171efbb6 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureStart.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureStart.java
@@ -104,7 +104,7 @@ public final class StructureStart {
             compoundTag.put("Children", this.pieceContainer.save(structurePieceSerializationContext));
             return compoundTag;
         } else {
-            compoundTag.putString("id", "INVALID");
+            compoundTag.putString("id", INVALID_START_ID);
             return compoundTag;
         }
     }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PieceGenerator.java b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PieceGenerator.java
index 2338abf3407bd955b107ba1e0c37488775c36db9..b4c1ba069eb53326da18d8181941d1cc9524b8ac 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PieceGenerator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PieceGenerator.java
@@ -11,41 +11,6 @@ import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemp
 public interface PieceGenerator<C extends FeatureConfiguration> {
     void generatePieces(StructurePiecesBuilder var1, PieceGenerator.Context<C> var2);
 
-    public static record Context<C extends FeatureConfiguration>(C a, ChunkGenerator b, StructureTemplateManager c, ChunkPos d, LevelHeightAccessor e, WorldgenRandom f, long g) {
-        private final C config;
-        private final ChunkGenerator chunkGenerator;
-        private final StructureTemplateManager structureTemplateManager;
-        private final ChunkPos chunkPos;
-        private final LevelHeightAccessor heightAccessor;
-        private final WorldgenRandom random;
-        private final long seed;
-
-        public C config() {
-            return this.config;
-        }
-
-        public ChunkGenerator chunkGenerator() {
-            return this.chunkGenerator;
-        }
-
-        public StructureTemplateManager structureTemplateManager() {
-            return this.structureTemplateManager;
-        }
-
-        public ChunkPos chunkPos() {
-            return this.chunkPos;
-        }
-
-        public LevelHeightAccessor heightAccessor() {
-            return this.heightAccessor;
-        }
-
-        public WorldgenRandom random() {
-            return this.random;
-        }
-
-        public long seed() {
-            return this.seed;
-        }
+    public static record Context<C extends FeatureConfiguration>(C config, ChunkGenerator chunkGenerator, StructureTemplateManager structureTemplateManager, ChunkPos chunkPos, LevelHeightAccessor heightAccessor, WorldgenRandom random, long seed) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PieceGeneratorSupplier.java b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PieceGeneratorSupplier.java
index c04cd9eff59e6ddde6bf08e7bea904b4bcc3f421..af6ad827df694503f4faf88cba7dc38b066a8203 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PieceGeneratorSupplier.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PieceGeneratorSupplier.java
@@ -28,18 +28,17 @@ public interface PieceGeneratorSupplier<C extends FeatureConfiguration> {
         return (context) -> context.validBiomeOnTop(types);
     }
 
-    public static record Context<C extends FeatureConfiguration>(ChunkGenerator a, BiomeSource b, RandomState c, long d, ChunkPos e, C f, LevelHeightAccessor g, Predicate<Holder<Biome>> h, StructureTemplateManager i, RegistryAccess j) {
-        private final ChunkGenerator chunkGenerator;
-        private final BiomeSource biomeSource;
-        private final RandomState randomState;
-        private final long seed;
-        private final ChunkPos chunkPos;
-        private final C config;
-        private final LevelHeightAccessor heightAccessor;
-        private final Predicate<Holder<Biome>> validBiome;
-        private final StructureTemplateManager structureTemplateManager;
-        private final RegistryAccess registryAccess;
-
+    public static record Context<C extends FeatureConfiguration>(
+            ChunkGenerator chunkGenerator,
+            BiomeSource biomeSource,
+            RandomState randomState,
+            long seed,
+            ChunkPos chunkPos,
+            C config,
+            LevelHeightAccessor heightAccessor,
+            Predicate<Holder<Biome>> validBiome,
+            StructureTemplateManager structureTemplateManager,
+            RegistryAccess registryAccess) {
         public boolean validBiomeOnTop(Heightmap.Types types) {
             int i = this.chunkPos.getMiddleBlockX();
             int i2 = this.chunkPos.getMiddleBlockZ();
@@ -47,45 +46,5 @@ public interface PieceGeneratorSupplier<C extends FeatureConfiguration> {
             Holder<Biome> holder = this.chunkGenerator.getBiomeSource().getNoiseBiome(QuartPos.fromBlock(i), QuartPos.fromBlock(i3), QuartPos.fromBlock(i2), this.randomState.sampler());
             return this.validBiome.test(holder);
         }
-
-        public ChunkGenerator chunkGenerator() {
-            return this.chunkGenerator;
-        }
-
-        public BiomeSource biomeSource() {
-            return this.biomeSource;
-        }
-
-        public RandomState randomState() {
-            return this.randomState;
-        }
-
-        public long seed() {
-            return this.seed;
-        }
-
-        public ChunkPos chunkPos() {
-            return this.chunkPos;
-        }
-
-        public C config() {
-            return this.config;
-        }
-
-        public LevelHeightAccessor heightAccessor() {
-            return this.heightAccessor;
-        }
-
-        public Predicate<Holder<Biome>> validBiome() {
-            return this.validBiome;
-        }
-
-        public StructureTemplateManager structureTemplateManager() {
-            return this.structureTemplateManager;
-        }
-
-        public RegistryAccess registryAccess() {
-            return this.registryAccess;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PiecesContainer.java b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PiecesContainer.java
index a4aadc14bd5e549436771c9378b53ba82909c570..537d00400f83beddd9cd7e1c4723ef1bcc651cec 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PiecesContainer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PiecesContainer.java
@@ -16,14 +16,13 @@ import net.minecraft.world.level.levelgen.structure.BoundingBox;
 import net.minecraft.world.level.levelgen.structure.StructurePiece;
 import org.slf4j.Logger;
 
-public record PiecesContainer(List<StructurePiece> a) {
-    private final List<StructurePiece> pieces;
+public record PiecesContainer(List<StructurePiece> pieces) {
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final ResourceLocation JIGSAW_RENAME = new ResourceLocation("jigsaw");
-    private static final Map<ResourceLocation, ResourceLocation> RENAMES = ImmutableMap.builder().put(new ResourceLocation("nvi"), JIGSAW_RENAME).put(new ResourceLocation("pcp"), JIGSAW_RENAME).put(new ResourceLocation("bastionremnant"), JIGSAW_RENAME).put(new ResourceLocation("runtime"), JIGSAW_RENAME).build();
+    private static final Map<ResourceLocation, ResourceLocation> RENAMES = ImmutableMap.<ResourceLocation, ResourceLocation>builder().put(new ResourceLocation("nvi"), JIGSAW_RENAME).put(new ResourceLocation("pcp"), JIGSAW_RENAME).put(new ResourceLocation("bastionremnant"), JIGSAW_RENAME).put(new ResourceLocation("runtime"), JIGSAW_RENAME).build();
 
-    public PiecesContainer(List<StructurePiece> list) {
-        this.pieces = List.copyOf(list);
+    public PiecesContainer(List<StructurePiece> pieces) {
+        this.pieces = List.copyOf(pieces);
     }
 
     public boolean isEmpty() {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext.java b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext.java
index 263464676629587e4144cd11ce44419413ac1532..d4fdfe8353c47165dcba631a13885133f6543ab8 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext.java
@@ -6,25 +6,9 @@ import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
 
-public record StructurePieceSerializationContext(ResourceManager a, RegistryAccess b, StructureTemplateManager c) {
-    private final ResourceManager resourceManager;
-    private final RegistryAccess registryAccess;
-    private final StructureTemplateManager structureTemplateManager;
-
+public record StructurePieceSerializationContext(ResourceManager resourceManager, RegistryAccess registryAccess, StructureTemplateManager structureTemplateManager) {
     public static StructurePieceSerializationContext fromLevel(ServerLevel serverLevel) {
         MinecraftServer minecraftServer = serverLevel.getServer();
         return new StructurePieceSerializationContext(minecraftServer.getResourceManager(), minecraftServer.registryAccess(), minecraftServer.getStructureManager());
     }
-
-    public ResourceManager resourceManager() {
-        return this.resourceManager;
-    }
-
-    public RegistryAccess registryAccess() {
-        return this.registryAccess;
-    }
-
-    public StructureTemplateManager structureTemplateManager() {
-        return this.structureTemplateManager;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/placement/RandomSpreadStructurePlacement.java b/src/main/java/net/minecraft/world/level/levelgen/structure/placement/RandomSpreadStructurePlacement.java
index 4d1e57c073851a4876722bc428e1cfe1600a0341..bc285dfac02c417da861f0ffc7659f7e8751739e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/placement/RandomSpreadStructurePlacement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/placement/RandomSpreadStructurePlacement.java
@@ -12,7 +12,7 @@ import net.minecraft.world.level.levelgen.RandomState;
 import net.minecraft.world.level.levelgen.WorldgenRandom;
 
 public class RandomSpreadStructurePlacement extends StructurePlacement {
-    public static final Codec<RandomSpreadStructurePlacement> CODEC = RecordCodecBuilder.mapCodec((instance) -> placementCodec(instance).and(instance.group(Codec.intRange(0, 4096).fieldOf("spacing").forGetter(RandomSpreadStructurePlacement::spacing), Codec.intRange(0, 4096).fieldOf("separation").forGetter(RandomSpreadStructurePlacement::separation), RandomSpreadType.CODEC.optionalFieldOf("spread_type", RandomSpreadType.LINEAR).forGetter(RandomSpreadStructurePlacement::spreadType))).apply(instance, RandomSpreadStructurePlacement::new)).flatXmap((randomSpreadStructurePlacement) -> randomSpreadStructurePlacement.spacing <= randomSpreadStructurePlacement.separation ? DataResult.error("Spacing has to be larger than separation") : DataResult.success(randomSpreadStructurePlacement), DataResult::success).codec();
+    public static final Codec<RandomSpreadStructurePlacement> CODEC = RecordCodecBuilder.<RandomSpreadStructurePlacement>mapCodec((instance) -> placementCodec(instance).and(instance.group(Codec.intRange(0, 4096).fieldOf("spacing").forGetter(RandomSpreadStructurePlacement::spacing), Codec.intRange(0, 4096).fieldOf("separation").forGetter(RandomSpreadStructurePlacement::separation), RandomSpreadType.CODEC.optionalFieldOf("spread_type", RandomSpreadType.LINEAR).forGetter(RandomSpreadStructurePlacement::spreadType))).apply(instance, RandomSpreadStructurePlacement::new)).flatXmap((randomSpreadStructurePlacement) -> randomSpreadStructurePlacement.spacing <= randomSpreadStructurePlacement.separation ? DataResult.error("Spacing has to be larger than separation") : DataResult.success(randomSpreadStructurePlacement), DataResult::success).codec();
     private final int spacing;
     private final int separation;
     private final RandomSpreadType spreadType;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/placement/StructurePlacement.java b/src/main/java/net/minecraft/world/level/levelgen/structure/placement/StructurePlacement.java
index 6231638e5b05d2490178a354e31411da32166036..66b5eb13e7fe8689f1d683aeac88906d1ceae4a7 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/placement/StructurePlacement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/placement/StructurePlacement.java
@@ -108,22 +108,12 @@ public abstract class StructurePlacement {
 
     /** @deprecated */
     @Deprecated
-    public static record ExclusionZone(Holder<StructureSet> b, int c) {
-        private final Holder<StructureSet> otherSet;
-        private final int chunkCount;
+    public static record ExclusionZone(Holder<StructureSet> otherSet, int chunkCount) {
         public static final Codec<StructurePlacement.ExclusionZone> CODEC = RecordCodecBuilder.create((instance) -> instance.group(RegistryFileCodec.create(Registry.STRUCTURE_SET_REGISTRY, StructureSet.DIRECT_CODEC, false).fieldOf("other_set").forGetter(StructurePlacement.ExclusionZone::otherSet), Codec.intRange(1, 16).fieldOf("chunk_count").forGetter(StructurePlacement.ExclusionZone::chunkCount)).apply(instance, StructurePlacement.ExclusionZone::new));
 
         boolean isPlacementForbidden(ChunkGenerator chunkGenerator, RandomState randomState, long l, int i, int i2) {
             return chunkGenerator.hasStructureChunkInRange(this.otherSet, randomState, l, i, i2, this.chunkCount);
         }
-
-        public Holder<StructureSet> otherSet() {
-            return this.otherSet;
-        }
-
-        public int chunkCount() {
-            return this.chunkCount;
-        }
     }
 
     @FunctionalInterface
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/pools/JigsawPlacement.java b/src/main/java/net/minecraft/world/level/levelgen/structure/pools/JigsawPlacement.java
index 5925fd33610c3566c45af4795ff7b6e60e825e36..eab71caaf913dca386e413474ed4c452896ee7f9 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/pools/JigsawPlacement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/pools/JigsawPlacement.java
@@ -235,12 +235,12 @@ public class JigsawPlacement {
                                         if (!boundingBox2.isInside(structureBlockInfox.pos.relative(JigsawBlock.getFrontFacing(structureBlockInfox.state)))) {
                                             return 0;
                                         } else {
-                                            ResourceLocation resourceLocation = new ResourceLocation(structureBlockInfox.nbt.getString("pool"));
-                                            Optional<StructureTemplatePool> optional = this.pools.getOptional(resourceLocation);
-                                            Optional<StructureTemplatePool> optional2 = optional.flatMap((structureTemplatePool) -> this.pools.getOptional(structureTemplatePool.getFallback()));
-                                            int i = optional.map((structureTemplatePool) -> structureTemplatePool.getMaxSize(this.structureTemplateManager)).orElse(0);
-                                            int i2 = optional2.map((structureTemplatePool) -> structureTemplatePool.getMaxSize(this.structureTemplateManager)).orElse(0);
-                                            return Math.max(i, i2);
+                                            ResourceLocation poolLocation = new ResourceLocation(structureBlockInfox.nbt.getString("pool"));
+                                            Optional<StructureTemplatePool> poolsOptional = this.pools.getOptional(poolLocation);
+                                            Optional<StructureTemplatePool> mappedOpt = poolsOptional.flatMap((structureTemplatePool) -> this.pools.getOptional(structureTemplatePool.getFallback()));
+                                            int iIn = poolsOptional.map((structureTemplatePool) -> structureTemplatePool.getMaxSize(this.structureTemplateManager)).orElse(0);
+                                            int i2In = mappedOpt.map((structureTemplatePool) -> structureTemplatePool.getMaxSize(this.structureTemplateManager)).orElse(0);
+                                            return Math.max(iIn, i2In);
                                         }
                                     }).max().orElse(0);
                                 } else {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/structures/JigsawStructure.java b/src/main/java/net/minecraft/world/level/levelgen/structure/structures/JigsawStructure.java
index ddc12ca1fe9b59b47d0be1315b05c9cb1e9c3a3a..8354fa717c905a2373ee664a867ba7b0ae672a43 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/structures/JigsawStructure.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/structures/JigsawStructure.java
@@ -20,7 +20,7 @@ import net.minecraft.world.level.levelgen.structure.pools.StructureTemplatePool;
 
 public final class JigsawStructure extends Structure {
     public static final int MAX_TOTAL_STRUCTURE_RANGE = 128;
-    public static final Codec<JigsawStructure> CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(settingsCodec(instance), StructureTemplatePool.CODEC.fieldOf("start_pool").forGetter((jigsawStructure) -> jigsawStructure.startPool), ResourceLocation.CODEC.optionalFieldOf("start_jigsaw_name").forGetter((jigsawStructure) -> jigsawStructure.startJigsawName), Codec.intRange(0, 7).fieldOf("size").forGetter((jigsawStructure) -> jigsawStructure.maxDepth), HeightProvider.CODEC.fieldOf("start_height").forGetter((jigsawStructure) -> jigsawStructure.startHeight), Codec.BOOL.fieldOf("use_expansion_hack").forGetter((jigsawStructure) -> jigsawStructure.useExpansionHack), Heightmap.Types.CODEC.optionalFieldOf("project_start_to_heightmap").forGetter((jigsawStructure) -> jigsawStructure.projectStartToHeightmap), Codec.intRange(1, 128).fieldOf("max_distance_from_center").forGetter((jigsawStructure) -> jigsawStructure.maxDistanceFromCenter)).apply(instance, JigsawStructure::new)).flatXmap(verifyRange(), verifyRange()).codec();
+    public static final Codec<JigsawStructure> CODEC = RecordCodecBuilder.<JigsawStructure>mapCodec((instance) -> instance.group(settingsCodec(instance), StructureTemplatePool.CODEC.fieldOf("start_pool").forGetter((jigsawStructure) -> jigsawStructure.startPool), ResourceLocation.CODEC.optionalFieldOf("start_jigsaw_name").forGetter((jigsawStructure) -> jigsawStructure.startJigsawName), Codec.intRange(0, 7).fieldOf("size").forGetter((jigsawStructure) -> jigsawStructure.maxDepth), HeightProvider.CODEC.fieldOf("start_height").forGetter((jigsawStructure) -> jigsawStructure.startHeight), Codec.BOOL.fieldOf("use_expansion_hack").forGetter((jigsawStructure) -> jigsawStructure.useExpansionHack), Heightmap.Types.CODEC.optionalFieldOf("project_start_to_heightmap").forGetter((jigsawStructure) -> jigsawStructure.projectStartToHeightmap), Codec.intRange(1, 128).fieldOf("max_distance_from_center").forGetter((jigsawStructure) -> jigsawStructure.maxDistanceFromCenter)).apply(instance, JigsawStructure::new)).flatXmap(verifyRange(), verifyRange()).codec();
     private final Holder<StructureTemplatePool> startPool;
     private final Optional<ResourceLocation> startJigsawName;
     private final int maxDepth;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/structures/OceanMonumentPieces.java b/src/main/java/net/minecraft/world/level/levelgen/structure/structures/OceanMonumentPieces.java
index 2d4771b33556a5ca281b2188bbb66424bd017b88..ed8cc223a28024c28b61ab725d3e392ac9407a5f 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/structures/OceanMonumentPieces.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/structures/OceanMonumentPieces.java
@@ -1320,7 +1320,7 @@ public class OceanMonumentPieces {
         protected static final BlockState LAMP_BLOCK = Blocks.SEA_LANTERN.defaultBlockState();
         protected static final boolean DO_FILL = true;
         protected static final BlockState FILL_BLOCK = Blocks.WATER.defaultBlockState();
-        protected static final Set<Block> FILL_KEEP = ImmutableSet.builder().add(Blocks.ICE).add(Blocks.PACKED_ICE).add(Blocks.BLUE_ICE).add(FILL_BLOCK.getBlock()).build();
+        protected static final Set<Block> FILL_KEEP = ImmutableSet.<Block>builder().add(Blocks.ICE).add(Blocks.PACKED_ICE).add(Blocks.BLUE_ICE).add(FILL_BLOCK.getBlock()).build();
         protected static final int GRIDROOM_WIDTH = 8;
         protected static final int GRIDROOM_DEPTH = 8;
         protected static final int GRIDROOM_HEIGHT = 4;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/structures/RuinedPortalPiece.java b/src/main/java/net/minecraft/world/level/levelgen/structure/structures/RuinedPortalPiece.java
index 16f8fbe2679fc3af35dcfb7bebdc308ae8ad85d9..4e57e0ced68ae6b5dee07e6ed70ec7b078225ec9 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/structures/RuinedPortalPiece.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/structures/RuinedPortalPiece.java
@@ -65,7 +65,7 @@ public class RuinedPortalPiece extends TemplateStructurePiece {
     public RuinedPortalPiece(StructureTemplateManager structureTemplateManager, CompoundTag compoundTag) {
         super(StructurePieceType.RUINED_PORTAL, compoundTag, structureTemplateManager, (resourceLocation) -> makeSettings(structureTemplateManager, compoundTag, resourceLocation));
         this.verticalPlacement = RuinedPortalPiece.VerticalPlacement.byName(compoundTag.getString("VerticalPlacement"));
-        this.properties = (RuinedPortalPiece.Properties)RuinedPortalPiece.Properties.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundTag.get("Properties"))).getOrThrow(true, LOGGER::error);
+        this.properties = (RuinedPortalPiece.Properties)RuinedPortalPiece.Properties.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.get("Properties"))).getOrThrow(true, LOGGER::error);
     }
 
     protected void addAdditionalSaveData(StructurePieceSerializationContext structurePieceSerializationContext, CompoundTag compoundTag) {
@@ -79,7 +79,7 @@ public class RuinedPortalPiece extends TemplateStructurePiece {
     private static StructurePlaceSettings makeSettings(StructureTemplateManager structureTemplateManager, CompoundTag compoundTag, ResourceLocation resourceLocation) {
         StructureTemplate structureTemplate = structureTemplateManager.getOrCreate(resourceLocation);
         BlockPos blockPos = new BlockPos(structureTemplate.getSize().getX() / 2, 0, structureTemplate.getSize().getZ() / 2);
-        return makeSettings(Mirror.valueOf(compoundTag.getString("Mirror")), Rotation.valueOf(compoundTag.getString("Rotation")), RuinedPortalPiece.VerticalPlacement.byName(compoundTag.getString("VerticalPlacement")), blockPos, (RuinedPortalPiece.Properties)RuinedPortalPiece.Properties.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundTag.get("Properties"))).getOrThrow(true, LOGGER::error));
+        return makeSettings(Mirror.valueOf(compoundTag.getString("Mirror")), Rotation.valueOf(compoundTag.getString("Rotation")), RuinedPortalPiece.VerticalPlacement.byName(compoundTag.getString("VerticalPlacement")), blockPos, (RuinedPortalPiece.Properties)RuinedPortalPiece.Properties.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.get("Properties"))).getOrThrow(true, LOGGER::error));
     }
 
     private static StructurePlaceSettings makeSettings(Mirror mirror, Rotation rotation, RuinedPortalPiece.VerticalPlacement verticalPlacement, BlockPos blockPos, RuinedPortalPiece.Properties properties) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/structures/RuinedPortalStructure.java b/src/main/java/net/minecraft/world/level/levelgen/structure/structures/RuinedPortalStructure.java
index 2385e4dc5ce417a1285781b430af8a261d6c01b2..78c1d7d4a4598547e3dbc1321c0d638d1053e291 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/structures/RuinedPortalStructure.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/structures/RuinedPortalStructure.java
@@ -178,47 +178,7 @@ public class RuinedPortalStructure extends Structure {
         return StructureType.RUINED_PORTAL;
     }
 
-    public static record Setup(RuinedPortalPiece.VerticalPlacement b, float c, float d, boolean e, boolean f, boolean g, boolean h, float i) {
-        private final RuinedPortalPiece.VerticalPlacement placement;
-        private final float airPocketProbability;
-        private final float mossiness;
-        private final boolean overgrown;
-        private final boolean vines;
-        private final boolean canBeCold;
-        private final boolean replaceWithBlackstone;
-        private final float weight;
+    public static record Setup(RuinedPortalPiece.VerticalPlacement placement, float airPocketProbability, float mossiness, boolean overgrown, boolean vines, boolean canBeCold, boolean replaceWithBlackstone, float weight) {
         public static final Codec<RuinedPortalStructure.Setup> CODEC = RecordCodecBuilder.create((instance) -> instance.group(RuinedPortalPiece.VerticalPlacement.CODEC.fieldOf("placement").forGetter(RuinedPortalStructure.Setup::placement), Codec.floatRange(0.0F, 1.0F).fieldOf("air_pocket_probability").forGetter(RuinedPortalStructure.Setup::airPocketProbability), Codec.floatRange(0.0F, 1.0F).fieldOf("mossiness").forGetter(RuinedPortalStructure.Setup::mossiness), Codec.BOOL.fieldOf("overgrown").forGetter(RuinedPortalStructure.Setup::overgrown), Codec.BOOL.fieldOf("vines").forGetter(RuinedPortalStructure.Setup::vines), Codec.BOOL.fieldOf("can_be_cold").forGetter(RuinedPortalStructure.Setup::canBeCold), Codec.BOOL.fieldOf("replace_with_blackstone").forGetter(RuinedPortalStructure.Setup::replaceWithBlackstone), ExtraCodecs.POSITIVE_FLOAT.fieldOf("weight").forGetter(RuinedPortalStructure.Setup::weight)).apply(instance, RuinedPortalStructure.Setup::new));
-
-        public RuinedPortalPiece.VerticalPlacement placement() {
-            return this.placement;
-        }
-
-        public float airPocketProbability() {
-            return this.airPocketProbability;
-        }
-
-        public float mossiness() {
-            return this.mossiness;
-        }
-
-        public boolean overgrown() {
-            return this.overgrown;
-        }
-
-        public boolean vines() {
-            return this.vines;
-        }
-
-        public boolean canBeCold() {
-            return this.canBeCold;
-        }
-
-        public boolean replaceWithBlackstone() {
-            return this.replaceWithBlackstone;
-        }
-
-        public float weight() {
-            return this.weight;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
index cef4f2c88e0bdd231db1d8d6d90b0591739df555..0c3fdb32bfb717d790bbce5d1d731e6af3e373fc 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
@@ -130,7 +130,7 @@ public class StructureTemplate {
     }
 
     private static List<StructureTemplate.StructureBlockInfo> buildInfoList(List<StructureTemplate.StructureBlockInfo> list, List<StructureTemplate.StructureBlockInfo> list2, List<StructureTemplate.StructureBlockInfo> list3) {
-        Comparator<StructureTemplate.StructureBlockInfo> comparator = Comparator.comparingInt((structureBlockInfo) -> structureBlockInfo.pos.getY()).thenComparingInt((structureBlockInfo) -> structureBlockInfo.pos.getX()).thenComparingInt((structureBlockInfo) -> structureBlockInfo.pos.getZ());
+        Comparator<StructureTemplate.StructureBlockInfo> comparator = Comparator.<StructureBlockInfo>comparingInt((structureBlockInfo) -> structureBlockInfo.pos.getY()).thenComparingInt((structureBlockInfo) -> structureBlockInfo.pos.getX()).thenComparingInt((structureBlockInfo) -> structureBlockInfo.pos.getZ());
         list.sort(comparator);
         list3.sort(comparator);
         list2.sort(comparator);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager.java
index 26efa33a91a2bb3282d1afb3204e5738be16f996..72ff951b73f92a270d4bb96e801fae4d96a78b2c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager.java
@@ -341,16 +341,6 @@ public class StructureTemplateManager {
         InputStream open() throws IOException;
     }
 
-    static record Source(Function<ResourceLocation, Optional<StructureTemplate>> a, Supplier<Stream<ResourceLocation>> b) {
-        private final Function<ResourceLocation, Optional<StructureTemplate>> loader;
-        private final Supplier<Stream<ResourceLocation>> lister;
-
-        public Function<ResourceLocation, Optional<StructureTemplate>> loader() {
-            return this.loader;
-        }
-
-        public Supplier<Stream<ResourceLocation>> lister() {
-            return this.lister;
-        }
+    static record Source(Function<ResourceLocation, Optional<StructureTemplate>> loader, Supplier<Stream<ResourceLocation>> lister) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/synth/NormalNoise.java b/src/main/java/net/minecraft/world/level/levelgen/synth/NormalNoise.java
index 2fa7f973be8f2a3df81d5300b05faa32825fb14b..68d511e19ca8ded19ddb9b543345228610a3c3c7 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/synth/NormalNoise.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/synth/NormalNoise.java
@@ -94,9 +94,7 @@ public class NormalNoise {
         stringBuilder.append("}");
     }
 
-    public static record NoiseParameters(int c, DoubleList d) {
-        final int firstOctave;
-        final DoubleList amplitudes;
+    public static record NoiseParameters(int firstOctave, DoubleList amplitudes) {
         public static final Codec<NormalNoise.NoiseParameters> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("firstOctave").forGetter(NormalNoise.NoiseParameters::firstOctave), Codec.DOUBLE.listOf().fieldOf("amplitudes").forGetter(NormalNoise.NoiseParameters::amplitudes)).apply(instance, NormalNoise.NoiseParameters::new));
         public static final Codec<Holder<NormalNoise.NoiseParameters>> CODEC = RegistryFileCodec.create(Registry.NOISE_REGISTRY, DIRECT_CODEC);
 
@@ -107,13 +105,5 @@ public class NormalNoise {
         public NoiseParameters(int i, double d, double... doubles) {
             this(i, Util.make(new DoubleArrayList(doubles), (doubleArrayList) -> doubleArrayList.add(0, d)));
         }
-
-        public int firstOctave() {
-            return this.firstOctave;
-        }
-
-        public DoubleList amplitudes() {
-            return this.amplitudes;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java b/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
index fd9bed60f07038c1b5bd9340d2e203b65505cdf1..a4d4751b3500deea050139fe6bcff5744cad4258 100644
--- a/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
+++ b/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
@@ -85,13 +85,13 @@ public abstract class DynamicGraphMinFixedPoint {
 
     public void removeIf(LongPredicate longPredicate) {
         LongList longList = new LongArrayList();
-        this.computedLevels.keySet().forEach((l) -> {
+        this.computedLevels.keySet().forEach((java.util.function.LongConsumer) (l) -> {
             if (longPredicate.test(l)) {
                 longList.add(l);
             }
 
         });
-        longList.forEach(this::removeFromQueue);
+        longList.forEach((java.util.function.LongConsumer) this::removeFromQueue);
     }
 
     private void dequeue(long l, int i, int i2, boolean flag) {
diff --git a/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java b/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java
index bed2a98ffc45aae6dd4812fb611e1e7bfdce4abe..5c9ec183e477e488c582509972dd09e1dddb1b15 100644
--- a/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java
@@ -203,10 +203,10 @@ public abstract class LayerLightSectionStorage<M extends DataLayerStorageMap<M>>
 
             this.toRemove.clear();
             this.hasToRemove = false;
-            ObjectIterator<Entry<DataLayer>> objectIterator = this.queuedSections.long2ObjectEntrySet().iterator();
+            ObjectIterator<Entry<DataLayer>> objectIteratorIn = this.queuedSections.long2ObjectEntrySet().iterator();
 
-            while(objectIterator.hasNext()) {
-                Entry<DataLayer> entry = (Entry)objectIterator.next();
+            while(objectIteratorIn.hasNext()) {
+                Entry<DataLayer> entry = objectIteratorIn.next();
                 long l3 = entry.getLongKey();
                 if (this.storingLightForSection(l3)) {
                     DataLayer dataLayer3 = (DataLayer)entry.getValue();
@@ -236,13 +236,13 @@ public abstract class LayerLightSectionStorage<M extends DataLayerStorageMap<M>>
             }
 
             this.untrustedSections.clear();
-            objectIterator = this.queuedSections.long2ObjectEntrySet().iterator();
+            objectIteratorIn = this.queuedSections.long2ObjectEntrySet().iterator();
 
-            while(objectIterator.hasNext()) {
-                Entry<DataLayer> entry2 = (Entry)objectIterator.next();
+            while(objectIteratorIn.hasNext()) {
+                Entry<DataLayer> entry2 = (Entry)objectIteratorIn.next();
                 long l6 = entry2.getLongKey();
                 if (this.storingLightForSection(l6)) {
-                    objectIterator.remove();
+                    objectIteratorIn.remove();
                 }
             }
 
diff --git a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
index 8cef607e91cae47d58eda965bbfff7332a9007f2..d14fb555951bf480db03af9bc3088c0102eb472c 100644
--- a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
+++ b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
@@ -262,16 +262,16 @@ public abstract class FlowingFluid extends Fluid {
                 BlockPos blockPos3 = blockPos.relative(direction2);
                 short s = getCacheKey(blockPos2, blockPos3);
                 Pair<BlockState, FluidState> pair = short2ObjectMap.computeIfAbsent(s, (sx) -> {
-                    BlockState blockState = levelReader.getBlockState(blockPos3);
-                    return Pair.of(blockState, blockState.getFluidState());
+                    BlockState blockStateIn = levelReader.getBlockState(blockPos3);
+                    return Pair.of(blockStateIn, blockStateIn.getFluidState());
                 });
                 BlockState blockState2 = (BlockState)pair.getFirst();
                 FluidState fluidState = (FluidState)pair.getSecond();
                 if (this.canPassThrough(levelReader, this.getFlowing(), blockPos, blockState, direction2, blockPos3, blockState2, fluidState)) {
                     boolean flag = short2BooleanMap.computeIfAbsent(s, (sx) -> {
-                        BlockPos blockPos2 = blockPos3.below();
-                        BlockState blockState2 = levelReader.getBlockState(blockPos2);
-                        return this.isWaterHole(levelReader, this.getFlowing(), blockPos3, blockState2, blockPos2, blockState2);
+                        BlockPos blockPos2In = blockPos3.below();
+                        BlockState blockState2In = levelReader.getBlockState(blockPos2In);
+                        return this.isWaterHole(levelReader, this.getFlowing(), blockPos3, blockState2, blockPos2In, blockState2In);
                     });
                     if (flag) {
                         return i;
@@ -332,8 +332,8 @@ public abstract class FlowingFluid extends Fluid {
             BlockPos blockPos2 = blockPos.relative(direction);
             short s = getCacheKey(blockPos, blockPos2);
             Pair<BlockState, FluidState> pair = short2ObjectMap.computeIfAbsent(s, (sx) -> {
-                BlockState blockState = levelReader.getBlockState(blockPos2);
-                return Pair.of(blockState, blockState.getFluidState());
+                BlockState blockStateIn = levelReader.getBlockState(blockPos2);
+                return Pair.of(blockStateIn, blockStateIn.getFluidState());
             });
             BlockState blockState2 = (BlockState)pair.getFirst();
             FluidState fluidState = (FluidState)pair.getSecond();
@@ -341,8 +341,8 @@ public abstract class FlowingFluid extends Fluid {
             if (this.canPassThrough(levelReader, fluidState2.getType(), blockPos, blockState, direction, blockPos2, blockState2, fluidState)) {
                 BlockPos blockPos3 = blockPos2.below();
                 boolean flag = short2BooleanMap.computeIfAbsent(s, (sx) -> {
-                    BlockState blockState2 = levelReader.getBlockState(blockPos3);
-                    return this.isWaterHole(levelReader, this.getFlowing(), blockPos2, blockState2, blockPos3, blockState2);
+                    BlockState blockState2In = levelReader.getBlockState(blockPos3);
+                    return this.isWaterHole(levelReader, this.getFlowing(), blockPos2, blockState2, blockPos3, blockState2In);
                 });
                 int i2;
                 if (flag) {
diff --git a/src/main/java/net/minecraft/world/level/portal/PortalForcer.java b/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
index 3dd02afc9f73d30bc0bdb802cdbb622e39dbb5df..f66a9804a5edb43782960e41215c342140bc4c69 100644
--- a/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
+++ b/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
@@ -43,12 +43,12 @@ public class PortalForcer {
         PoiManager poiManager = this.level.getPoiManager();
         int i = flag ? 16 : 128;
         poiManager.ensureLoadedAndValid(this.level, blockPos, i);
-        Optional<PoiRecord> optional = poiManager.getInSquare((holder) -> holder.is(PoiTypes.NETHER_PORTAL), blockPos, i, PoiManager.Occupancy.ANY).filter((poiRecord) -> worldBorder.isWithinBounds(poiRecord.getPos())).sorted(Comparator.comparingDouble((poiRecord) -> poiRecord.getPos().distSqr(blockPos)).thenComparingInt((poiRecord) -> poiRecord.getPos().getY())).filter((poiRecord) -> this.level.getBlockState(poiRecord.getPos()).hasProperty(BlockStateProperties.HORIZONTAL_AXIS)).findFirst();
+        Optional<PoiRecord> optional = poiManager.getInSquare((holder) -> holder.is(PoiTypes.NETHER_PORTAL), blockPos, i, PoiManager.Occupancy.ANY).filter((poiRecord) -> worldBorder.isWithinBounds(poiRecord.getPos())).sorted(Comparator.<PoiRecord>comparingDouble((poiRecord) -> poiRecord.getPos().distSqr(blockPos)).thenComparingInt((poiRecord) -> poiRecord.getPos().getY())).filter((poiRecord) -> this.level.getBlockState(poiRecord.getPos()).hasProperty(BlockStateProperties.HORIZONTAL_AXIS)).findFirst();
         return optional.map((poiRecord) -> {
-            BlockPos blockPos = poiRecord.getPos();
-            this.level.getChunkSource().addRegionTicket(TicketType.PORTAL, new ChunkPos(blockPos), 3, blockPos);
-            BlockState blockState = this.level.getBlockState(blockPos);
-            return BlockUtil.getLargestRectangleAround(blockPos, blockState.getValue(BlockStateProperties.HORIZONTAL_AXIS), 21, Direction.Axis.Y, 21, (blockPosx) -> this.level.getBlockState(blockPosx) == blockState);
+            BlockPos pos = poiRecord.getPos();
+            this.level.getChunkSource().addRegionTicket(TicketType.PORTAL, new ChunkPos(pos), 3, pos);
+            BlockState blockState = this.level.getBlockState(pos);
+            return BlockUtil.getLargestRectangleAround(pos, blockState.getValue(BlockStateProperties.HORIZONTAL_AXIS), 21, Direction.Axis.Y, 21, (blockPosx) -> this.level.getBlockState(blockPosx) == blockState);
         });
     }
 
diff --git a/src/main/java/net/minecraft/world/level/redstone/CollectingNeighborUpdater.java b/src/main/java/net/minecraft/world/level/redstone/CollectingNeighborUpdater.java
index 9cdee322ade2b5a5f5067796fabf5f8cdc32ede4..d73db4ad4c65027b95f3f5a4ce1ff160292c08b5 100644
--- a/src/main/java/net/minecraft/world/level/redstone/CollectingNeighborUpdater.java
+++ b/src/main/java/net/minecraft/world/level/redstone/CollectingNeighborUpdater.java
@@ -86,37 +86,11 @@ public class CollectingNeighborUpdater implements NeighborUpdater {
 
     }
 
-    static record FullNeighborUpdate(BlockState a, BlockPos b, Block c, BlockPos d, boolean e) implements CollectingNeighborUpdater.NeighborUpdates {
-        private final BlockState state;
-        private final BlockPos pos;
-        private final Block block;
-        private final BlockPos neighborPos;
-        private final boolean movedByPiston;
-
+    static record FullNeighborUpdate(BlockState state, BlockPos pos, Block block, BlockPos neighborPos, boolean movedByPiston) implements CollectingNeighborUpdater.NeighborUpdates {
         public boolean runNext(Level level) {
             NeighborUpdater.executeUpdate(level, this.state, this.pos, this.block, this.neighborPos, this.movedByPiston);
             return false;
         }
-
-        public BlockState state() {
-            return this.state;
-        }
-
-        public BlockPos pos() {
-            return this.pos;
-        }
-
-        public Block block() {
-            return this.block;
-        }
-
-        public BlockPos neighborPos() {
-            return this.neighborPos;
-        }
-
-        public boolean movedByPiston() {
-            return this.movedByPiston;
-        }
     }
 
     static final class MultiNeighborUpdate implements CollectingNeighborUpdater.NeighborUpdates {
@@ -152,60 +126,18 @@ public class CollectingNeighborUpdater implements NeighborUpdater {
         boolean runNext(Level var1);
     }
 
-    static record ShapeUpdate(Direction a, BlockState b, BlockPos c, BlockPos d, int e) implements CollectingNeighborUpdater.NeighborUpdates {
-        private final Direction direction;
-        private final BlockState state;
-        private final BlockPos pos;
-        private final BlockPos neighborPos;
-        private final int updateFlags;
-
+    static record ShapeUpdate(Direction direction, BlockState state, BlockPos pos, BlockPos neighborPos, int updateFlags) implements CollectingNeighborUpdater.NeighborUpdates {
         public boolean runNext(Level level) {
             NeighborUpdater.executeShapeUpdate(level, this.direction, this.state, this.pos, this.neighborPos, this.updateFlags, 512);
             return false;
         }
-
-        public Direction direction() {
-            return this.direction;
-        }
-
-        public BlockState state() {
-            return this.state;
-        }
-
-        public BlockPos pos() {
-            return this.pos;
-        }
-
-        public BlockPos neighborPos() {
-            return this.neighborPos;
-        }
-
-        public int updateFlags() {
-            return this.updateFlags;
-        }
     }
 
-    static record SimpleNeighborUpdate(BlockPos a, Block b, BlockPos c) implements CollectingNeighborUpdater.NeighborUpdates {
-        private final BlockPos pos;
-        private final Block block;
-        private final BlockPos neighborPos;
-
+    static record SimpleNeighborUpdate(BlockPos pos, Block block, BlockPos neighborPos) implements CollectingNeighborUpdater.NeighborUpdates {
         public boolean runNext(Level level) {
             BlockState blockState = level.getBlockState(this.pos);
             NeighborUpdater.executeUpdate(level, blockState, this.pos, this.block, this.neighborPos, false);
             return false;
         }
-
-        public BlockPos pos() {
-            return this.pos;
-        }
-
-        public Block block() {
-            return this.block;
-        }
-
-        public BlockPos neighborPos() {
-            return this.neighborPos;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
index d1ffb30d84252a8174f2c4b80fe88d136284a4b5..bc3f11cf92b5b9c19d5402b323c29568931604c9 100644
--- a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -99,10 +99,10 @@ public class LevelStorageSource {
             }
         }
 
-        Dynamic<T> dynamic3 = dataFixer.update(References.WORLD_GEN_SETTINGS, dynamic2, i, SharedConstants.getCurrentVersion().getWorldVersion());
-        DataResult<WorldGenSettings> dataResult = WorldGenSettings.CODEC.parse(dynamic3);
+        Dynamic<T> dynamic3In = dataFixer.update(References.WORLD_GEN_SETTINGS, dynamic2, i, SharedConstants.getCurrentVersion().getWorldVersion());
+        DataResult<WorldGenSettings> dataResult = WorldGenSettings.CODEC.parse(dynamic3In);
         return Pair.of((WorldGenSettings)dataResult.resultOrPartial(Util.prefix("WorldGenSettings: ", LOGGER::error)).orElseGet(() -> {
-            RegistryAccess registryAccess = RegistryAccess.readFromDisk(dynamic3);
+            RegistryAccess registryAccess = RegistryAccess.readFromDisk(dynamic3In);
             return WorldPresets.createNormalWorldFromPreset(registryAccess);
         }), dataResult.lifecycle());
     }
@@ -285,9 +285,7 @@ public class LevelStorageSource {
         return new LevelStorageSource.LevelStorageAccess(s);
     }
 
-    public static record LevelCandidates(List<LevelStorageSource.LevelDirectory> a) implements Iterable<LevelStorageSource.LevelDirectory> {
-        final List<LevelStorageSource.LevelDirectory> levels;
-
+    public static record LevelCandidates(List<LevelStorageSource.LevelDirectory> levels) implements Iterable<LevelStorageSource.LevelDirectory> {
         public boolean isEmpty() {
             return this.levels.isEmpty();
         }
@@ -295,15 +293,9 @@ public class LevelStorageSource {
         public Iterator<LevelStorageSource.LevelDirectory> iterator() {
             return this.levels.iterator();
         }
-
-        public List<LevelStorageSource.LevelDirectory> levels() {
-            return this.levels;
-        }
     }
 
-    public static record LevelDirectory(Path a) {
-        private final Path path;
-
+    public static record LevelDirectory(Path path) {
         public String directoryName() {
             return this.path.getFileName().toString();
         }
@@ -331,10 +323,6 @@ public class LevelStorageSource {
         public Path resourcePath(LevelResource levelResource) {
             return this.path.resolve(levelResource.getId());
         }
-
-        public Path path() {
-            return this.path;
-        }
     }
 
     public class LevelStorageAccess implements AutoCloseable {
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/GsonAdapterFactory.java b/src/main/java/net/minecraft/world/level/storage/loot/GsonAdapterFactory.java
index d4de70655e0c38754598ae3d89e19ee5e00c8204..e43e4f5127b065c3be86439cef25738e8f305cf9 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/GsonAdapterFactory.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/GsonAdapterFactory.java
@@ -111,7 +111,7 @@ public class GsonAdapterFactory {
             } else {
                 JsonObject jsonObject = new JsonObject();
                 jsonObject.addProperty(this.typeKey, this.registry.getKey(serializerType).toString());
-                serializerType.getSerializer().serialize(jsonObject, object, jsonSerializationContext);
+                ((Serializer) serializerType.getSerializer()).serialize(jsonObject, object, jsonSerializationContext);
                 return jsonObject;
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java b/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java
index 96e168fa3dc2abad90e1061d511b38061ceef994..e43914bad2c13a75a1868f452d1a54e6a2112004 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java
@@ -53,12 +53,12 @@ public class ValidationContext {
     }
 
     public ValidationContext enterTable(String s, ResourceLocation resourceLocation) {
-        ImmutableSet<ResourceLocation> immutableSet = ImmutableSet.builder().addAll(this.visitedTables).add(resourceLocation).build();
+        ImmutableSet<ResourceLocation> immutableSet = ImmutableSet.<ResourceLocation>builder().addAll(this.visitedTables).add(resourceLocation).build();
         return new ValidationContext(this.problems, () -> this.getContext() + s, this.params, this.conditionResolver, this.visitedConditions, this.tableResolver, immutableSet);
     }
 
     public ValidationContext enterCondition(String s, ResourceLocation resourceLocation) {
-        ImmutableSet<ResourceLocation> immutableSet = ImmutableSet.builder().addAll(this.visitedConditions).add(resourceLocation).build();
+        ImmutableSet<ResourceLocation> immutableSet = ImmutableSet.<ResourceLocation>builder().addAll(this.visitedConditions).add(resourceLocation).build();
         return new ValidationContext(this.problems, () -> this.getContext() + s, this.params, this.conditionResolver, immutableSet, this.tableResolver, this.visitedTables);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/EntryGroup.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/EntryGroup.java
index 595502c2cbc893dec5666131b1a1224a5c695a55..2c1ca826c513cbeb11188bcd5ddc318730356104 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/EntryGroup.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/EntryGroup.java
@@ -29,8 +29,8 @@ public class EntryGroup extends CompositeEntryBase {
             };
         default:
             return (lootContext, consumer) -> {
-                for(ComposableEntryContainer composableEntryContainer : composableEntryContainers) {
-                    composableEntryContainer.expand(lootContext, consumer);
+                for(ComposableEntryContainer composableEntryContainerIn : composableEntryContainers) {
+                    composableEntryContainerIn.expand(lootContext, consumer);
                 }
 
                 return true;
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
index cc93fe827f94d44b94e973c4e12e087f29cfe009..d7d3d4b90e6dabe673afba52369531f156538412 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
@@ -47,7 +47,7 @@ public class EnchantRandomlyFunction extends LootItemConditionalFunction {
         Enchantment enchantment;
         if (this.enchantments.isEmpty()) {
             boolean flag = itemStack.is(Items.BOOK);
-            List<Enchantment> list = Registry.ENCHANTMENT.stream().filter(Enchantment::isDiscoverable).filter((enchantment) -> flag || enchantment.canEnchant(itemStack)).collect(Collectors.toList());
+            List<Enchantment> list = Registry.ENCHANTMENT.stream().filter(Enchantment::isDiscoverable).filter((enchantmentIn) -> flag || enchantmentIn.canEnchant(itemStack)).collect(Collectors.toList());
             if (list.isEmpty()) {
                 LOGGER.warn("Couldn't find a compatible enchantment for {}", itemStack);
                 return itemStack;
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java
index d6de07fc3a72934c3de5075a432403aad2683b92..4e63afa749b3b800dcb96d5cd5fd730dce7f211f 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java
@@ -56,8 +56,8 @@ public class LootItemFunctions {
             return (itemStack, lootContext) -> (ItemStack)biFunction2.apply((ItemStack)biFunction.apply(itemStack, lootContext), lootContext);
         default:
             return (itemStack, lootContext) -> {
-                for(BiFunction<ItemStack, LootContext, ItemStack> biFunction : biFunctions) {
-                    itemStack = (ItemStack)biFunction.apply(itemStack, lootContext);
+                for(BiFunction<ItemStack, LootContext, ItemStack> biFunctionIn : biFunctions) {
+                    itemStack = (ItemStack)biFunctionIn.apply(itemStack, lootContext);
                 }
 
                 return itemStack;
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction.java
index dfb5972b756d416a4ca9f762d4d5ce36062a7132..8acac0fc044ae5c2c9f502df4263b9294c8fc6f6 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction.java
@@ -95,10 +95,10 @@ public class SetBannerPatternFunction extends LootItemConditionalFunction {
             super.serialize(jsonObject, setBannerPatternFunction, jsonSerializationContext);
             JsonArray jsonArray = new JsonArray();
             setBannerPatternFunction.patterns.forEach((pair) -> {
-                JsonObject jsonObject = new JsonObject();
-                jsonObject.addProperty("pattern", ((ResourceKey)((Holder)pair.getFirst()).unwrapKey().orElseThrow(() -> new JsonSyntaxException("Unknown pattern: " + pair.getFirst()))).location().toString());
-                jsonObject.addProperty("color", ((DyeColor)pair.getSecond()).getName());
-                jsonArray.add(jsonObject);
+                JsonObject jsonObjectIn = new JsonObject();
+                jsonObjectIn.addProperty("pattern", pair.getFirst().unwrapKey().orElseThrow(() -> new JsonSyntaxException("Unknown pattern: " + pair.getFirst())).location().toString());
+                jsonObjectIn.addProperty("color", ((DyeColor)pair.getSecond()).getName());
+                jsonArray.add(jsonObjectIn);
             });
             jsonObject.add("patterns", jsonArray);
             jsonObject.addProperty("append", setBannerPatternFunction.append);
diff --git a/src/main/java/net/minecraft/world/level/timers/TimerQueue.java b/src/main/java/net/minecraft/world/level/timers/TimerQueue.java
index 325c558b6fcd738579d5e2cdcb6f5595d325162f..3ebc89f4bcfa87d4bc68696556ef2d89812d7f79 100644
--- a/src/main/java/net/minecraft/world/level/timers/TimerQueue.java
+++ b/src/main/java/net/minecraft/world/level/timers/TimerQueue.java
@@ -28,7 +28,7 @@ public class TimerQueue<T> {
     private final Table<String, Long, TimerQueue.Event<T>> events = HashBasedTable.create();
 
     private static <T> Comparator<TimerQueue.Event<T>> createComparator() {
-        return Comparator.comparingLong((event) -> event.triggerTime).thenComparing((event) -> event.sequentialId);
+        return Comparator.<Event<T>>comparingLong((event) -> event.triggerTime).thenComparing((event) -> event.sequentialId);
     }
 
     public TimerQueue(TimerCallbacks<T> timerCallbacks, Stream<Dynamic<Tag>> stream) {
diff --git a/src/main/java/net/minecraft/world/ticks/BlackholeTickAccess.java b/src/main/java/net/minecraft/world/ticks/BlackholeTickAccess.java
index 1454d50ade65cac9c90a31eaf85014a66f7697e0..eacb549cb0c2fcd0bfe03cd561e3bbeadedf143a 100644
--- a/src/main/java/net/minecraft/world/ticks/BlackholeTickAccess.java
+++ b/src/main/java/net/minecraft/world/ticks/BlackholeTickAccess.java
@@ -33,10 +33,10 @@ public class BlackholeTickAccess {
     };
 
     public static <T> TickContainerAccess<T> emptyContainer() {
-        return CONTAINER_BLACKHOLE;
+        return (TickContainerAccess<T>) CONTAINER_BLACKHOLE;
     }
 
     public static <T> LevelTickAccess<T> emptyLevelList() {
-        return LEVEL_BLACKHOLE;
+        return (LevelTickAccess<T>) LEVEL_BLACKHOLE;
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/ticks/LevelTicks.java b/src/main/java/net/minecraft/world/ticks/LevelTicks.java
index 8d34f778a96b7a9974129089cc4eca42564d6c6a..6d70fa1c7c96125b07faee8de23f80747c2e70ed 100644
--- a/src/main/java/net/minecraft/world/ticks/LevelTicks.java
+++ b/src/main/java/net/minecraft/world/ticks/LevelTicks.java
@@ -75,7 +75,7 @@ public class LevelTicks<T> implements LevelTickAccess<T> {
         long l = ChunkPos.asLong(scheduledTick.pos());
         LevelChunkTicks<T> levelChunkTicks = (LevelChunkTicks)this.allContainers.get(l);
         if (levelChunkTicks == null) {
-            Util.pauseInIde((T)(new IllegalStateException("Trying to schedule tick in not loaded position " + scheduledTick.pos())));
+            Util.pauseInIde((new IllegalStateException("Trying to schedule tick in not loaded position " + scheduledTick.pos())));
         } else {
             levelChunkTicks.schedule(scheduledTick);
         }
diff --git a/src/main/java/net/minecraft/world/ticks/SavedTick.java b/src/main/java/net/minecraft/world/ticks/SavedTick.java
index f628e44286b7ffc22f1b923808d336da23e1dd59..2d90418bab686fff98e17c0805c2aed64f3bd539 100644
--- a/src/main/java/net/minecraft/world/ticks/SavedTick.java
+++ b/src/main/java/net/minecraft/world/ticks/SavedTick.java
@@ -10,11 +10,7 @@ import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.world.level.ChunkPos;
 
-public record SavedTick<T>(T b, BlockPos c, int d, TickPriority e) {
-    private final T type;
-    private final BlockPos pos;
-    private final int delay;
-    private final TickPriority priority;
+public record SavedTick<T>(T type, BlockPos pos, int delay, TickPriority priority) {
     private static final String TAG_ID = "i";
     private static final String TAG_X = "x";
     private static final String TAG_Y = "y";
@@ -85,20 +81,4 @@ public record SavedTick<T>(T b, BlockPos c, int d, TickPriority e) {
     public static <T> SavedTick<T> probe(T object, BlockPos blockPos) {
         return new SavedTick<>(object, blockPos, 0, TickPriority.NORMAL);
     }
-
-    public T type() {
-        return this.type;
-    }
-
-    public BlockPos pos() {
-        return this.pos;
-    }
-
-    public int delay() {
-        return this.delay;
-    }
-
-    public TickPriority priority() {
-        return this.priority;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/ticks/ScheduledTick.java b/src/main/java/net/minecraft/world/ticks/ScheduledTick.java
index 534a1c3f862b4535dcca8f74ab541389d4900d19..7e853be6fc25c293310f621c7482e1232b7a1c82 100644
--- a/src/main/java/net/minecraft/world/ticks/ScheduledTick.java
+++ b/src/main/java/net/minecraft/world/ticks/ScheduledTick.java
@@ -5,12 +5,7 @@ import java.util.Comparator;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 
-public record ScheduledTick<T>(T d, BlockPos e, long f, TickPriority g, long h) {
-    private final T type;
-    private final BlockPos pos;
-    private final long triggerTick;
-    private final TickPriority priority;
-    private final long subTickOrder;
+public record ScheduledTick<T>(T type, BlockPos pos, long triggerTick, TickPriority priority, long subTickOrder) {
     public static final Comparator<ScheduledTick<?>> DRAIN_ORDER = (scheduledTick, scheduledTick2) -> {
         int i = Long.compare(scheduledTick.triggerTick, scheduledTick2.triggerTick);
         if (i != 0) {
@@ -45,30 +40,10 @@ public record ScheduledTick<T>(T d, BlockPos e, long f, TickPriority g, long h)
     }
 
     public ScheduledTick {
-        blockPos = blockPos.immutable();
+        pos = pos.immutable();
     }
 
     public static <T> ScheduledTick<T> probe(T object, BlockPos blockPos) {
         return new ScheduledTick<>(object, blockPos, 0L, TickPriority.NORMAL, 0L);
     }
-
-    public T type() {
-        return this.type;
-    }
-
-    public BlockPos pos() {
-        return this.pos;
-    }
-
-    public long triggerTick() {
-        return this.triggerTick;
-    }
-
-    public TickPriority priority() {
-        return this.priority;
-    }
-
-    public long subTickOrder() {
-        return this.subTickOrder;
-    }
 }
\ No newline at end of file
diff --git a/src/main/resources/META-INF/MANIFEST.MF b/src/main/resources/META-INF/MANIFEST.MF
index 54f165d5b7667fdf8dc7d999ef532ab39eda546f..d43ed607295b14c114a19860f02ed5a38e7b3c87 100644
--- a/src/main/resources/META-INF/MANIFEST.MF
+++ b/src/main/resources/META-INF/MANIFEST.MF
@@ -1,3 +1,3 @@
 Manifest-Version: 1.0
 Main-Class: net.minecraft.client.main.Main
-
+Multi-Release: true
