From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Sat, 26 Sep 2020 00:02:07 +0900
Subject: [PATCH] decompile fix


diff --git a/pom.xml b/pom.xml
index cff9e48b15a33b337c8c80d5b4a5ab1c26c507bb..5fe4d080892524f152e09f835982a754ef9b6dcc 100644
--- a/pom.xml
+++ b/pom.xml
@@ -5,12 +5,13 @@
     <parent>
         <artifactId>minecraft-parent</artifactId>
         <groupId>xyz.acrylicstyle.minecraft</groupId>
-        <version>1.16.3</version>
+        <version>1.16.4</version>
     </parent>
     <modelVersion>4.0.0</modelVersion>
     
     <properties>
         <log4j.version>2.12.1</log4j.version>
+        <lwjgl.version>3.2.2</lwjgl.version>
     </properties>
 
     <artifactId>Minecraft</artifactId>
@@ -81,7 +82,7 @@
         <dependency>
             <groupId>com.mojang</groupId>
             <artifactId>authlib</artifactId>
-            <version>1.6.25</version>
+            <version>2.0.27</version>
         </dependency>
         <dependency>
             <groupId>net.minecrell</groupId>
@@ -126,162 +127,162 @@
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-openal</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-opengl</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-jemalloc</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-jemalloc</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-linux</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-jemalloc</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-macos</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-jemalloc</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-windows</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-openal</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-linux</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-openal</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-macos</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-openal</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-windows</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-opengl</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-linux</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-opengl</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-macos</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-opengl</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-windows</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-linux</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-macos</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-windows</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-glfw</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-linux</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-glfw</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-macos</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-glfw</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-windows</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-glfw</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-stb</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-stb</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-linux</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-stb</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-macos</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-stb</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-windows</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-tinyfd</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-tinyfd</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-linux</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-tinyfd</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-macos</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-tinyfd</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-windows</classifier>
         </dependency>
         <dependency>
@@ -338,6 +339,7 @@
             <groupId>org.apache.logging.log4j</groupId>
             <artifactId>log4j-to-slf4j</artifactId>
             <version>${log4j.version}</version>
+            <scope>provided</scope>
         </dependency>
         <dependency>
             <groupId>org.apache.logging.log4j</groupId>
@@ -348,6 +350,7 @@
             <groupId>org.slf4j</groupId>
             <artifactId>slf4j-log4j12</artifactId>
             <version>1.7.9</version>
+            <scope>provided</scope>
             <exclusions>
                 <exclusion>
                     <groupId>org.apache.logging.log4j</groupId>
diff --git a/src/main/java/com/mojang/blaze3d/audio/Library.java b/src/main/java/com/mojang/blaze3d/audio/Library.java
index bf767f9a10bf80f94bb17fc594e25c5c303417d9..c27a33a48c55ac5ac6e0427bd3e9c605a1dfb40a 100644
--- a/src/main/java/com/mojang/blaze3d/audio/Library.java
+++ b/src/main/java/com/mojang/blaze3d/audio/Library.java
@@ -166,7 +166,7 @@ public class Library
         private final Set<Channel> activeChannels;
         
         public CountingChannelPool(final int i) {
-            this.activeChannels = (Set<Channel>)Sets.newIdentityHashSet();
+            this.activeChannels = Sets.newIdentityHashSet(); // MagmaCube - decompile error
             this.limit = i;
         }
         
diff --git a/src/main/java/com/mojang/blaze3d/font/RawGlyph.java b/src/main/java/com/mojang/blaze3d/font/RawGlyph.java
index 432319b32aeee25cf571cec6eb7bd330345e82b2..cbcd3590939ae5f113e0dbd99eebc0ecc1588d9b 100644
--- a/src/main/java/com/mojang/blaze3d/font/RawGlyph.java
+++ b/src/main/java/com/mojang/blaze3d/font/RawGlyph.java
@@ -13,11 +13,11 @@ public interface RawGlyph extends GlyphInfo
     float getOversample();
     
     default float getLeft() {
-        return super.getBearingX();
+        return GlyphInfo.super.getBearingX(); // MagmaCube - decompile fix
     }
     
     default float getRight() {
-        return this.getLeft() + this.getPixelWidth() / this.getOversample();
+        return this.getLeft() + (float) this.getPixelWidth() / this.getOversample();
     }
     
     default float getUp() {
@@ -25,7 +25,7 @@ public interface RawGlyph extends GlyphInfo
     }
     
     default float getDown() {
-        return this.getUp() + this.getPixelHeight() / this.getOversample();
+        return this.getUp() + (float) this.getPixelHeight() / this.getOversample();
     }
     
     default float getBearingY() {
diff --git a/src/main/java/com/mojang/blaze3d/platform/InputConstants.java b/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
index 7e227282f8c06b9a469b7607f5be84fe84587a33..d21a3b4d32e467efe79b53142ec8ffc7affda68a 100644
--- a/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
+++ b/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
@@ -74,7 +74,7 @@ public class InputConstants
     
     public static boolean isRawMouseInputSupported() {
         try {
-            return InputConstants.glfwRawMouseMotionSupported != null && InputConstants.glfwRawMouseMotionSupported.invokeExact();
+            return InputConstants.glfwRawMouseMotionSupported != null && (boolean) InputConstants.glfwRawMouseMotionSupported.invokeExact(); // MagmaCube - decompile error
         }
         catch (Throwable throwable) {
             throw new RuntimeException(throwable);
@@ -95,7 +95,7 @@ public class InputConstants
         try {
             methodHandle = lookup.findStatic(GLFW.class, "glfwRawMouseMotionSupported", methodType);
             final MethodHandle methodHandle2 = lookup.findStaticGetter(GLFW.class, "GLFW_RAW_MOUSE_MOTION", Integer.TYPE);
-            i = methodHandle2.invokeExact();
+            i = (int) methodHandle2.invokeExact(); // MagmaCube - decompile error
         }
         catch (NoSuchMethodException | NoSuchFieldException ex) {}
         catch (Throwable throwable) {
@@ -109,39 +109,46 @@ public class InputConstants
     public enum Type
     {
         KEYSYM("key.keyboard", (integer, s) -> {
-            s2 = GLFW.glfwGetKeyName((int)integer, -1);
+            // MagmaCube start - decompile error
+            Component component;
+            String s2 = GLFW.glfwGetKeyName((int)integer, -1);
+            // MagmaCube end - decompile error
             if (s2 != null) {
                 // new(net.minecraft.network.chat.TextComponent.class)
-                new TextComponent(s2);
+                component = new TextComponent(s2); // MagmaCube - decompile error
             }
             else {
                 // new(net.minecraft.network.chat.TranslatableComponent.class)
-                new TranslatableComponent(s);
+                component = new TranslatableComponent(s); // MagmaCube - decompile error
             }
-            return o3;
+            return component; // MagmaCube - decompile error
         }), 
         SCANCODE("scancode", (integer, s) -> {
-            s3 = GLFW.glfwGetKeyName(-1, (int)integer);
+            // MagmaCube start - decompile error
+            Component component;
+            String s3 = GLFW.glfwGetKeyName(-1, (int)integer);
+            // MagmaCube end - decompile error
             if (s3 != null) {
                 // new(net.minecraft.network.chat.TextComponent.class)
-                new TextComponent(s3);
+                component = new TextComponent(s3); // MagmaCube - decompile error
             }
             else {
                 // new(net.minecraft.network.chat.TranslatableComponent.class)
-                new TranslatableComponent(s);
+                component = new TranslatableComponent(s); // MagmaCube - decompile error
             }
-            return o6;
+            return component;
         }), 
         MOUSE("key.mouse", (integer, s) -> {
+            Component component; // MagmaCube - decompile error
             if (Language.getInstance().has(s)) {
                 // new(net.minecraft.network.chat.TranslatableComponent.class)
-                new TranslatableComponent(s);
+                component = new TranslatableComponent(s); // MagmaCube - decompile error
             }
             else {
                 // new(net.minecraft.network.chat.TranslatableComponent.class)
-                new TranslatableComponent("key.mouse", new Object[] { integer + 1 });
+                component = new TranslatableComponent("key.mouse", new Object[] { integer + 1 }); // MagmaCube - decompile error
             }
-            return o9;
+            return component; // MagmaCube - decompile error
         });
         
         private final Int2ObjectMap<Key> map;
@@ -160,15 +167,17 @@ public class InputConstants
         }
         
         public Key getOrCreate(final int i) {
-            int i2;
-            final String s;
-            return (Key)this.map.computeIfAbsent(i, i -> {
-                i2 = i;
+            // MagmaCube start - decompile error
+            return (Key)this.map.computeIfAbsent(i, i1 -> {
+                int i2 = i1;
+                // MagmaCube end - decompile error
                 if (this == Type.MOUSE) {
                     ++i2;
                 }
-                s = this.defaultPrefix + "." + i2;
-                return new Key(s, this, i);
+                // MagmaCube start - decompile error
+                String s = this.defaultPrefix + "." + i2;
+                return new Key(s, this, i1);
+                // MagmaCube end - decompile error
             });
         }
         
diff --git a/src/main/java/com/mojang/blaze3d/platform/Monitor.java b/src/main/java/com/mojang/blaze3d/platform/Monitor.java
index 2a8092a75f1930e54698b53aa10c62665bdbe2b3..97bb366057c89ea4572726cb195a8f9c200b3e80 100644
--- a/src/main/java/com/mojang/blaze3d/platform/Monitor.java
+++ b/src/main/java/com/mojang/blaze3d/platform/Monitor.java
@@ -18,7 +18,7 @@ public final class Monitor
     
     public Monitor(final long l) {
         this.monitor = l;
-        this.videoModes = (List<VideoMode>)Lists.newArrayList();
+        this.videoModes = Lists.newArrayList(); // MagmaCube - decompile error
         this.refreshVideoModes();
     }
     
diff --git a/src/main/java/com/mojang/blaze3d/platform/NativeImage.java b/src/main/java/com/mojang/blaze3d/platform/NativeImage.java
index ed7639a5ecea02dec215b14c518cf1604435e0be..488251a08fa2f9f15c7a0f957da50883d313e05b 100644
--- a/src/main/java/com/mojang/blaze3d/platform/NativeImage.java
+++ b/src/main/java/com/mojang/blaze3d/platform/NativeImage.java
@@ -112,7 +112,7 @@ public final class NativeImage implements AutoCloseable
             if (byteBuffer2 == null) {
                 throw new IOException("Could not load image: " + STBImage.stbi_failure_reason());
             }
-            return new NativeImage((format == null) ? getStbFormat(intBuffer3.get(0)) : format, intBuffer.get(0), intBuffer2.get(0), true, MemoryUtil.memAddress(byteBuffer2));
+            return new NativeImage((format == null) ? Format.getStbFormat(intBuffer3.get(0)) : format, intBuffer.get(0), intBuffer2.get(0), true, MemoryUtil.memAddress(byteBuffer2)); // MagmaCube - decompile error
         }
     }
     
diff --git a/src/main/java/com/mojang/blaze3d/shaders/Program.java b/src/main/java/com/mojang/blaze3d/shaders/Program.java
index 9f23a90ed441f79b732ccfd36ba4edd409c3980e..0a6dace494c60f1b71e83d09e941d5896ba8730f 100644
--- a/src/main/java/com/mojang/blaze3d/shaders/Program.java
+++ b/src/main/java/com/mojang/blaze3d/shaders/Program.java
@@ -70,7 +70,7 @@ public class Program
         private final Map<String, Program> programs;
         
         private Type(final String s, final String s2, final int i) {
-            this.programs = (Map<String, Program>)Maps.newHashMap();
+            this.programs = Maps.newHashMap(); // MagmaCube - decompile error
             this.name = s;
             this.extension = s2;
             this.glType = i;
diff --git a/src/main/java/com/mojang/blaze3d/shaders/Uniform.java b/src/main/java/com/mojang/blaze3d/shaders/Uniform.java
index 1c210d822a8da57ca3ece4fdafd42f26b43365af..ceaefeaae893541d8d70add753544b9f98e8fede 100644
--- a/src/main/java/com/mojang/blaze3d/shaders/Uniform.java
+++ b/src/main/java/com/mojang/blaze3d/shaders/Uniform.java
@@ -189,6 +189,7 @@ public class Uniform extends AbstractUniform implements AutoCloseable
     }
     
     public void upload() {
+        //noinspection StatementWithEmptyBody
         if (!this.dirty) {}
         this.dirty = false;
         if (this.type <= 3) {
diff --git a/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java b/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
index 707c1eef4ca1a2379846b4367a72d3239b4f5841..d9e4198a41e2feff54fd2eb6fd685126aa7c5943 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
@@ -34,7 +34,7 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
     private boolean building;
     
     public BufferBuilder(final int i) {
-        this.vertexCounts = (List<DrawState>)Lists.newArrayList();
+        this.vertexCounts = Lists.newArrayList(); // MagmaCube - decompile error
         this.lastRenderedCountIndex = 0;
         this.totalRenderedBytes = 0;
         this.nextElementByte = 0;
@@ -87,7 +87,7 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
         for (int i3 = 0; i3 < ints.length; ++i3) {
             ints[i3] = i3;
         }
-        IntArrays.mergeSort(ints, (i, i2) -> Floats.compare(floats[i2], floats[i]));
+        IntArrays.mergeSort(ints, (i1, i2) -> Floats.compare(floats[i2], floats[i1])); // MagmaCube - decompile error
         final BitSet bitSet = new BitSet();
         final FloatBuffer floatBuffer2 = MemoryTracker.createFloatBuffer(this.format.getIntegerSize() * 4);
         for (int i4 = bitSet.nextClearBit(0); i4 < ints.length; i4 = bitSet.nextClearBit(i4 + 1)) {
@@ -229,7 +229,7 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
             this.nextElement();
         }
         if (this.defaultColorSet && this.currentElement.getUsage() == VertexFormatElement.Usage.COLOR) {
-            super.color(this.defaultR, this.defaultG, this.defaultB, this.defaultA);
+            BufferVertexConsumer.super.color(this.defaultR, this.defaultG, this.defaultB, this.defaultA); // MagmaCube - decompile error
         }
     }
     
@@ -238,7 +238,7 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
         if (this.defaultColorSet) {
             throw new IllegalStateException();
         }
-        return super.color(i, i2, i3, i4);
+        return BufferVertexConsumer.super.color(i, i2, i3, i4); // MagmaCube - decompile error
     }
     
     @Override
@@ -260,7 +260,7 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
             if (this.fullFormat) {
                 this.putShort(24, (short)(i & 0xFFFF));
                 this.putShort(26, (short)(i >> 16 & 0xFFFF));
-                final int i3 = 28;
+                i4 = 28; // MagmaCube - decompile error
             }
             else {
                 i4 = 24;
diff --git a/src/main/java/com/mojang/blaze3d/vertex/BufferVertexConsumer.java b/src/main/java/com/mojang/blaze3d/vertex/BufferVertexConsumer.java
index caa321b7666530156da1167e8b4efa7bc6a52848..03e8e95edb74c7c43697836598f8e2cf009f2c3c 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/BufferVertexConsumer.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/BufferVertexConsumer.java
@@ -92,7 +92,8 @@ public interface BufferVertexConsumer extends VertexConsumer
         return this;
     }
     
-    default byte normalIntValue(final float f) {
+    // MagmaCube - default -> static
+    static byte normalIntValue(final float f) {
         return (byte)((int)(Mth.clamp(f, -1.0f, 1.0f) * 127.0f) & 0xFF);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/com/mojang/blaze3d/vertex/DefaultedVertexConsumer.java b/src/main/java/com/mojang/blaze3d/vertex/DefaultedVertexConsumer.java
index 214488e125285c3d93070307ec3a756b2089aadc..76d49e6d49b4aa6870bc9c89e1e69dfb2a30bc44 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/DefaultedVertexConsumer.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/DefaultedVertexConsumer.java
@@ -2,19 +2,11 @@ package com.mojang.blaze3d.vertex;
 
 public abstract class DefaultedVertexConsumer implements VertexConsumer
 {
-    protected boolean defaultColorSet;
-    protected int defaultR;
-    protected int defaultG;
-    protected int defaultB;
-    protected int defaultA;
-    
-    public DefaultedVertexConsumer() {
-        this.defaultColorSet = false;
-        this.defaultR = 255;
-        this.defaultG = 255;
-        this.defaultB = 255;
-        this.defaultA = 255;
-    }
+    protected boolean defaultColorSet = false;
+    protected int defaultR = 255; // MagmaCube - decompile fix
+    protected int defaultG = 255; // MagmaCube - decompile fix
+    protected int defaultB = 255; // MagmaCube - decompile fix
+    protected int defaultA = 255; // MagmaCube - decompile fix
     
     public void defaultColor(final int i, final int i2, final int i3, final int i4) {
         this.defaultR = i;
diff --git a/src/main/java/com/mojang/blaze3d/vertex/PoseStack.java b/src/main/java/com/mojang/blaze3d/vertex/PoseStack.java
index 60ee555ba7bd91a4a22dea003779ea39804d4784..3d4f69b1eba2924ac07f9f7ef9bfd36f5f0b5d00 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/PoseStack.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/PoseStack.java
@@ -14,12 +14,10 @@ public class PoseStack
     private final Deque<Pose> poseStack;
     
     public PoseStack() {
-        final Matrix4f matrix4f;
-        final Matrix3f matrix3f;
-        this.poseStack = Util.make((Deque<Pose>)Queues.newArrayDeque(), arrayDeque -> {
-            matrix4f = new Matrix4f();
+        this.poseStack = Util.make(Queues.newArrayDeque(), arrayDeque -> { // MagmaCube - decompile error
+            Matrix4f matrix4f = new Matrix4f(); // MagmaCube - decompile error
             matrix4f.setIdentity();
-            matrix3f = new Matrix3f();
+            Matrix3f matrix3f = new Matrix3f(); // MagmaCube - decompile error
             matrix3f.setIdentity();
             arrayDeque.add(new Pose(matrix4f, matrix3f));
         });
diff --git a/src/main/java/com/mojang/realmsclient/client/FileDownload.java b/src/main/java/com/mojang/realmsclient/client/FileDownload.java
index 17cd0672e1a6ddc9223495ad0daff5a65fe1d5d7..d27ce54f90a375c73ead798829f20eb7d594f473 100644
--- a/src/main/java/com/mojang/realmsclient/client/FileDownload.java
+++ b/src/main/java/com/mojang/realmsclient/client/FileDownload.java
@@ -15,6 +15,7 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.nio.file.Path;
+import java.util.Iterator;
 import java.util.Locale;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -136,17 +137,19 @@ public class FileDownload {
                                 this.request.abort();
                                 return;
                             }
+                            // MagmaCube start - decompile error
+                            FileOutputStream outputStream4 = new FileOutputStream(this.tempFile);
+                            ResourcePackProgressListener resourcePackProgressListener3 = new ResourcePackProgressListener(this.tempFile, downloadStatus, worldDownload);
+                            DownloadCountingOutputStream downloadCountingOutputStream4 = new DownloadCountingOutputStream(outputStream4);
+                            downloadCountingOutputStream4.setListener(resourcePackProgressListener3);
+                            IOUtils.copy((InputStream) httpResponse4.getEntity().getContent(), (OutputStream) (downloadCountingOutputStream4));
+                            break block40;
+                            // MagmaCube end - decompile error
                         }
                         catch (Exception exception4) {
                             LOGGER.error("Caught exception while downloading: " + exception4.getMessage());
                             this.error = true;
                         }
-                        FileOutputStream outputStream4 = new FileOutputStream(this.tempFile);
-                        ResourcePackProgressListener resourcePackProgressListener3 = new ResourcePackProgressListener(this.tempFile, downloadStatus, worldDownload);
-                        DownloadCountingOutputStream downloadCountingOutputStream4 = new DownloadCountingOutputStream(outputStream4);
-                        downloadCountingOutputStream4.setListener(resourcePackProgressListener3);
-                        IOUtils.copy((InputStream)httpResponse4.getEntity().getContent(), (OutputStream)(downloadCountingOutputStream4));
-                        break block40;
                         finally {
                             this.request.releaseConnection();
                             if (this.tempFile != null) {
@@ -221,16 +224,18 @@ public class FileDownload {
                     Object object = SharedConstants.ILLEGAL_FILE_CHARACTERS;
                     int n = ((char[])object).length;
                     for (int n2 = 0; n2 < n; s = s.replace(c, '_'), ++n2) {
-                        c = object[n2];
+                        c = ((char[])object)[n2]; // MagmaCube - decompile error
                     }
                     if (StringUtils.isEmpty((CharSequence)s)) {
                         s = "Realm";
                     }
-                    s = FileDownload.findAvailableFolderName(s);
+                    s3 = FileDownload.findAvailableFolderName(s); // MagmaCube - decompile error
                     try {
-                        object = levelStorageSource.getLevelList().iterator();
-                        while (object.hasNext()) {
-                            LevelSummary levelSummary = (LevelSummary)object.next();
+                        // MagmaCube start - decompile error
+                        Iterator<LevelSummary> iterator = levelStorageSource.getLevelList().iterator();
+                        while (iterator.hasNext()) {
+                            LevelSummary levelSummary = (LevelSummary)iterator.next();
+                        // MagmaCube end - decompile error
                             if (!levelSummary.getLevelId().toLowerCase(Locale.ROOT).startsWith(s.toLowerCase(Locale.ROOT))) continue;
                             Matcher matcher = pattern.matcher(levelSummary.getLevelId());
                             if (matcher.matches()) {
@@ -246,7 +251,7 @@ public class FileDownload {
                         this.error = true;
                         return;
                     }
-                    if (levelStorageSource.isNewLevelIdAcceptable(s) && i <= true) break block65;
+                    if (levelStorageSource.isNewLevelIdAcceptable(s) && i <= 1) break block65; // MagmaCube - decompile error
                     s2 = s + (i == 1 ? "" : "-" + i);
                     if (levelStorageSource.isNewLevelIdAcceptable(s2)) break block66;
                     flag = false;
diff --git a/src/main/java/com/mojang/realmsclient/client/RealmsClient.java b/src/main/java/com/mojang/realmsclient/client/RealmsClient.java
index 9e2ad6354086c212365ed29fffa2e073390be833..d015dc5091f1e178c9f7218b28505d7d0e78c55c 100644
--- a/src/main/java/com/mojang/realmsclient/client/RealmsClient.java
+++ b/src/main/java/com/mojang/realmsclient/client/RealmsClient.java
@@ -130,11 +130,11 @@ public class RealmsClient {
      * WARNING - void declaration
      */
     public CompatibleVersionResponse clientCompatible() throws RealmsServiceException {
-        void compatibleVersionResponse2;
+        CompatibleVersionResponse compatibleVersionResponse2; // MagmaCube - decompile error
         String s = this.url("mco/client/compatible");
         String s2 = this.execute(Request.get(s));
         try {
-            CompatibleVersionResponse compatibleVersionResponse = CompatibleVersionResponse.valueOf(s2);
+            compatibleVersionResponse2 = CompatibleVersionResponse.valueOf(s2); // MagmaCube - decompile error
         }
         catch (IllegalArgumentException illegalArgumentException) {
             throw new RealmsServiceException(500, "Could not check compatible version, got response: " + s2, -1, "");
@@ -372,7 +372,7 @@ public class RealmsClient {
     public static enum CompatibleVersionResponse {
         COMPATIBLE,
         OUTDATED,
-        OTHER;
+        OTHER
 
     }
 
diff --git a/src/main/java/com/mojang/realmsclient/dto/Backup.java b/src/main/java/com/mojang/realmsclient/dto/Backup.java
index 9edce045593169a2028d9af0d882cd8c94bc946f..08c7eda4d907edd9ebb45e012664a68bcf993276 100644
--- a/src/main/java/com/mojang/realmsclient/dto/Backup.java
+++ b/src/main/java/com/mojang/realmsclient/dto/Backup.java
@@ -1,7 +1,7 @@
 package com.mojang.realmsclient.dto;
 
 import org.apache.logging.log4j.LogManager;
-import java.util.Iterator;
+
 import java.util.Set;
 import com.google.gson.JsonObject;
 import com.mojang.realmsclient.util.JsonUtils;
@@ -22,8 +22,8 @@ public class Backup extends ValueObject
     public Map<String, String> changeList;
     
     public Backup() {
-        this.metadata = (Map<String, String>)Maps.newHashMap();
-        this.changeList = (Map<String, String>)Maps.newHashMap();
+        this.metadata = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.changeList = Maps.newHashMap(); // MagmaCube - decompile fix
     }
     
     public static Backup parse(final JsonElement jsonElement) {
diff --git a/src/main/java/com/mojang/realmsclient/dto/BackupList.java b/src/main/java/com/mojang/realmsclient/dto/BackupList.java
index cfea796522117ac4314b61cf08c584631c342b83..aacacd0421278e25275aae17da48fe7d14207d4d 100644
--- a/src/main/java/com/mojang/realmsclient/dto/BackupList.java
+++ b/src/main/java/com/mojang/realmsclient/dto/BackupList.java
@@ -16,7 +16,7 @@ public class BackupList extends ValueObject
     public static BackupList parse(final String s) {
         final JsonParser jsonParser = new JsonParser();
         final BackupList backupList = new BackupList();
-        backupList.backups = (List<Backup>)Lists.newArrayList();
+        backupList.backups = Lists.newArrayList(); // MagmaCube - decompile error
         try {
             final JsonElement jsonElement = jsonParser.parse(s).getAsJsonObject().get("backups");
             if (jsonElement.isJsonArray()) {
diff --git a/src/main/java/com/mojang/realmsclient/dto/Ops.java b/src/main/java/com/mojang/realmsclient/dto/Ops.java
index fe46f68cccb61692150336a32deca3a23d29672d..3b82ed2d293a2b6668fc1de0a62c9912e8e9e4c7 100644
--- a/src/main/java/com/mojang/realmsclient/dto/Ops.java
+++ b/src/main/java/com/mojang/realmsclient/dto/Ops.java
@@ -1,6 +1,5 @@
 package com.mojang.realmsclient.dto;
 
-import java.util.Iterator;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonParser;
@@ -12,7 +11,7 @@ public class Ops extends ValueObject
     public Set<String> ops;
     
     public Ops() {
-        this.ops = (Set<String>)Sets.newHashSet();
+        this.ops = Sets.newHashSet(); // MagmaCube - decompile fix
     }
     
     public static Ops parse(final String s) {
diff --git a/src/main/java/com/mojang/realmsclient/dto/PendingInvitesList.java b/src/main/java/com/mojang/realmsclient/dto/PendingInvitesList.java
index 299165ebc0e8fb2476e9840e95a43099b744db72..a7159e68cd5e55375f160c0ef7ce5593ee01a9d5 100644
--- a/src/main/java/com/mojang/realmsclient/dto/PendingInvitesList.java
+++ b/src/main/java/com/mojang/realmsclient/dto/PendingInvitesList.java
@@ -15,7 +15,7 @@ public class PendingInvitesList extends ValueObject
     public List<PendingInvite> pendingInvites;
     
     public PendingInvitesList() {
-        this.pendingInvites = (List<PendingInvite>)Lists.newArrayList();
+        this.pendingInvites = Lists.newArrayList(); // MagmaCube - decompile fix
     }
     
     public static PendingInvitesList parse(final String s) {
diff --git a/src/main/java/com/mojang/realmsclient/dto/PingResult.java b/src/main/java/com/mojang/realmsclient/dto/PingResult.java
index fbf318156692ec813300732e4f0955c57441bf6a..c66394bff96b1f732685a7e05657b49b86850d45 100644
--- a/src/main/java/com/mojang/realmsclient/dto/PingResult.java
+++ b/src/main/java/com/mojang/realmsclient/dto/PingResult.java
@@ -12,7 +12,7 @@ public class PingResult extends ValueObject implements ReflectionBasedSerializat
     public List<Long> worldIds;
     
     public PingResult() {
-        this.pingResults = (List<RegionPingResult>)Lists.newArrayList();
-        this.worldIds = (List<Long>)Lists.newArrayList();
+        this.pingResults = Lists.newArrayList(); // MagmaCube - decompile fix
+        this.worldIds = Lists.newArrayList(); // MagmaCube - decompile fix
     }
 }
\ No newline at end of file
diff --git a/src/main/java/com/mojang/realmsclient/dto/RealmsServer.java b/src/main/java/com/mojang/realmsclient/dto/RealmsServer.java
index 4923750e3e51aa195a746e030b73484ee1d7428d..458d3a08bbee718e9b0b7d8e65e58724b66ba163 100644
--- a/src/main/java/com/mojang/realmsclient/dto/RealmsServer.java
+++ b/src/main/java/com/mojang/realmsclient/dto/RealmsServer.java
@@ -153,7 +153,7 @@ extends ValueObject {
                 JsonParser jsonParser = new JsonParser();
                 JsonElement jsonElement2 = jsonParser.parse(jsonObject.get("options").getAsString());
                 if (jsonElement2 == null) {
-                    RealmsWorldOptions realmsWorldOptions = RealmsWorldOptions.createDefaults();
+                    realmsWorldOptions2 = RealmsWorldOptions.createDefaults(); // MagmaCube - decompile error
                 } else {
                     realmsWorldOptions2 = RealmsWorldOptions.parse(jsonElement2.getAsJsonObject());
                 }
@@ -264,10 +264,6 @@ extends ValueObject {
         return new ServerData(this.name, s, false);
     }
 
-    public /* synthetic */ Object clone() throws CloneNotSupportedException {
-        return this.clone();
-    }
-
     public static enum WorldType {
         NORMAL,
         MINIGAME,
@@ -296,10 +292,5 @@ extends ValueObject {
         public int compare(RealmsServer realmsServer, RealmsServer realmsServer2) {
             return ComparisonChain.start().compareTrueFirst(realmsServer.state == State.UNINITIALIZED, realmsServer2.state == State.UNINITIALIZED).compareTrueFirst(realmsServer.expiredTrial, realmsServer2.expiredTrial).compareTrueFirst(realmsServer.owner.equals(this.refOwner), realmsServer2.owner.equals(this.refOwner)).compareFalseFirst(realmsServer.expired, realmsServer2.expired).compareTrueFirst(realmsServer.state == State.OPEN, realmsServer2.state == State.OPEN).compare(realmsServer.id, realmsServer2.id).result();
         }
-
-        @Override
-        public /* synthetic */ int compare(Object object, Object object2) {
-            return this.compare((RealmsServer)object, (RealmsServer)object2);
-        }
     }
 }
diff --git a/src/main/java/com/mojang/realmsclient/dto/RegionPingResult.java b/src/main/java/com/mojang/realmsclient/dto/RegionPingResult.java
index 16e6c801b0653ee7b0499ec1e945579aee3cf8cb..c5a54ac06d5c864623d0ae9ed7fe297f1a708bbd 100644
--- a/src/main/java/com/mojang/realmsclient/dto/RegionPingResult.java
+++ b/src/main/java/com/mojang/realmsclient/dto/RegionPingResult.java
@@ -21,6 +21,6 @@ public class RegionPingResult extends ValueObject implements ReflectionBasedSeri
     
     @Override
     public String toString() {
-        return String.format(Locale.ROOT, "%s --> %.2f ms", this.regionName, this.ping);
+        return String.format(Locale.ROOT, "%s --> %.2f ms", this.regionName, (float) this.ping);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/com/mojang/realmsclient/dto/Subscription.java b/src/main/java/com/mojang/realmsclient/dto/Subscription.java
index 53afe51d7acd24f2dbcdc37df97cd463239bf6e3..3469116673c8fbba351cfb979394839f1050842c 100644
--- a/src/main/java/com/mojang/realmsclient/dto/Subscription.java
+++ b/src/main/java/com/mojang/realmsclient/dto/Subscription.java
@@ -48,6 +48,6 @@ public class Subscription extends ValueObject
     public enum SubscriptionType
     {
         NORMAL, 
-        RECURRING;
+        RECURRING
     }
 }
\ No newline at end of file
diff --git a/src/main/java/com/mojang/realmsclient/dto/ValueObject.java b/src/main/java/com/mojang/realmsclient/dto/ValueObject.java
index a04c13252b922e9a0a7c5446e4da26ab03d7b274..8fc5a1f52a5b1cf4c9a1b8f5faf40c434d4ff0d7 100644
--- a/src/main/java/com/mojang/realmsclient/dto/ValueObject.java
+++ b/src/main/java/com/mojang/realmsclient/dto/ValueObject.java
@@ -1,9 +1,5 @@
 package com.mojang.realmsclient.dto;
 
-import java.io.ObjectInputStream;
-import java.io.IOException;
-import java.io.ObjectOutputStream;
-import java.io.Serializable;
 import java.lang.reflect.Modifier;
 import com.google.gson.annotations.SerializedName;
 import java.lang.reflect.Field;
diff --git a/src/main/java/com/mojang/realmsclient/dto/WorldTemplate.java b/src/main/java/com/mojang/realmsclient/dto/WorldTemplate.java
index 8b9ff9be199bcb596dc84d34c1430503e3a079b8..f1345c69ab07ce945360c8f520e7036ab3b70ea7 100644
--- a/src/main/java/com/mojang/realmsclient/dto/WorldTemplate.java
+++ b/src/main/java/com/mojang/realmsclient/dto/WorldTemplate.java
@@ -60,6 +60,6 @@ public class WorldTemplate extends ValueObject
         MINIGAME, 
         ADVENTUREMAP, 
         EXPERIENCE, 
-        INSPIRATION;
+        INSPIRATION
     }
 }
\ No newline at end of file
diff --git a/src/main/java/com/mojang/realmsclient/gui/RealmsDataFetcher.java b/src/main/java/com/mojang/realmsclient/gui/RealmsDataFetcher.java
index 8ab31f3d6b49777953f61f3f46c1bebc055e0e06..a4ea06ae0fbd09159a2f5826174de419538296d7 100644
--- a/src/main/java/com/mojang/realmsclient/gui/RealmsDataFetcher.java
+++ b/src/main/java/com/mojang/realmsclient/gui/RealmsDataFetcher.java
@@ -40,7 +40,7 @@ public class RealmsDataFetcher {
     private ScheduledFuture<?> trialAvailableScheduledFuture;
     private ScheduledFuture<?> liveStatsScheduledFuture;
     private ScheduledFuture<?> unreadNewsScheduledFuture;
-    private final Map<Task, Boolean> fetchStatus = new ConcurrentHashMap<Task, Boolean>(Task.values().length);
+    private final Map<Task, Boolean> fetchStatus = new ConcurrentHashMap<>(Task.values().length);
 
     public boolean isStopped() {
         return this.stopped;
@@ -172,7 +172,7 @@ public class RealmsDataFetcher {
         PENDING_INVITE,
         TRIAL_AVAILABLE,
         LIVE_STATS,
-        UNREAD_NEWS;
+        UNREAD_NEWS
 
     }
 
diff --git a/src/main/java/com/mojang/realmsclient/util/RealmsTextureManager.java b/src/main/java/com/mojang/realmsclient/util/RealmsTextureManager.java
index c1542cbe3ecd4cef629ac437f5d77af5261e29a6..f023c67a34b87c412a6533efca93abdcc1b9a82e 100644
--- a/src/main/java/com/mojang/realmsclient/util/RealmsTextureManager.java
+++ b/src/main/java/com/mojang/realmsclient/util/RealmsTextureManager.java
@@ -108,7 +108,7 @@ public class RealmsTextureManager {
                                 return;
                             }
                             try {
-                                BufferedImage bufferedImage = ImageIO.read(httpURLConnection.getInputStream());
+                                bufferedImage2 = ImageIO.read(httpURLConnection.getInputStream()); // MagmaCube - decompile error
                             }
                             catch (Exception exception) {
                                 SKIN_FETCH_STATUS.remove(s);
@@ -122,6 +122,10 @@ public class RealmsTextureManager {
                             }
                             bufferedImage2 = new SkinProcessor().process(bufferedImage2);
                             byteArrayOutputStream = new ByteArrayOutputStream();
+                            // MagmaCube start - decompile error
+                            ImageIO.write((RenderedImage)bufferedImage2, "png", byteArrayOutputStream);
+                            FETCHED_SKINS.put(s, new Base64().encodeToString(byteArrayOutputStream.toByteArray()));
+                            // MagmaCube end - decompile error
                         }
                         catch (Exception exception2) {
                             LOGGER.error("Couldn't download http texture", (Throwable)exception2);
@@ -132,8 +136,6 @@ public class RealmsTextureManager {
                                 httpURLConnection.disconnect();
                             }
                         }
-                        ImageIO.write((RenderedImage)bufferedImage2, "png", byteArrayOutputStream);
-                        FETCHED_SKINS.put(s, new Base64().encodeToString(byteArrayOutputStream.toByteArray()));
                         SKIN_FETCH_STATUS.put(s, true);
                         break block17;
                     }
@@ -157,7 +159,7 @@ public class RealmsTextureManager {
                 return realmsTexture.textureId;
             }
             RenderSystem.deleteTexture(realmsTexture.textureId);
-            int i = realmsTexture.textureId;
+            i2 = realmsTexture.textureId; // MagmaCube - decompile error
         } else {
             i2 = GlStateManager._genTexture();
         }
@@ -165,10 +167,10 @@ public class RealmsTextureManager {
         int i3 = 0;
         int i4 = 0;
         try {
-            void bufferedImage2;
+            BufferedImage bufferedImage2; // MagmaCube - decompile error
             ByteArrayInputStream inputStream = new ByteArrayInputStream(new Base64().decode(s2));
             try {
-                BufferedImage bufferedImage = ImageIO.read(inputStream);
+                bufferedImage2 = ImageIO.read(inputStream); // MagmaCube - decompile error
             }
             finally {
                 IOUtils.closeQuietly((InputStream)inputStream);
diff --git a/src/main/java/com/mojang/realmsclient/util/SkinProcessor.java b/src/main/java/com/mojang/realmsclient/util/SkinProcessor.java
index 4a1cf4c49f7e59bfe3275cf4a35766170c862ab7..9990eed1195b74b37359303497c952e273a1af23 100644
--- a/src/main/java/com/mojang/realmsclient/util/SkinProcessor.java
+++ b/src/main/java/com/mojang/realmsclient/util/SkinProcessor.java
@@ -4,8 +4,6 @@ import javax.annotation.Nullable;
 import java.awt.Graphics;
 import java.awt.image.DataBufferInt;
 import java.awt.Color;
-import java.awt.image.ImageObserver;
-import java.awt.Image;
 import java.awt.image.BufferedImage;
 
 public class SkinProcessor
diff --git a/src/main/java/com/mojang/realmsclient/util/task/CloseServerTask.java b/src/main/java/com/mojang/realmsclient/util/task/CloseServerTask.java
index 21e8d9d9d2f1e19f91c8b1871aaae5c408922378..92d69a592c6ca9fb8c6192c745969041e6a22bdf 100644
--- a/src/main/java/com/mojang/realmsclient/util/task/CloseServerTask.java
+++ b/src/main/java/com/mojang/realmsclient/util/task/CloseServerTask.java
@@ -1,9 +1,7 @@
 package com.mojang.realmsclient.util.task;
 
 import com.mojang.realmsclient.exception.RetryCallException;
-import net.minecraft.client.gui.screens.Screen;
 import com.mojang.realmsclient.client.RealmsClient;
-import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TranslatableComponent;
 import com.mojang.realmsclient.gui.screens.RealmsConfigureWorldScreen;
 import com.mojang.realmsclient.dto.RealmsServer;
diff --git a/src/main/java/com/mojang/realmsclient/util/task/DownloadTask.java b/src/main/java/com/mojang/realmsclient/util/task/DownloadTask.java
index 4a496995942ce385fc3ef6fa5a3e78ec1fdfd9f9..1fd2ceb0e10d3f10c3695f4d53037ec8ff81984f 100644
--- a/src/main/java/com/mojang/realmsclient/util/task/DownloadTask.java
+++ b/src/main/java/com/mojang/realmsclient/util/task/DownloadTask.java
@@ -6,7 +6,6 @@ import com.mojang.realmsclient.gui.screens.RealmsGenericErrorScreen;
 import com.mojang.realmsclient.exception.RetryCallException;
 import com.mojang.realmsclient.gui.screens.RealmsDownloadLatestWorldScreen;
 import com.mojang.realmsclient.client.RealmsClient;
-import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.client.gui.screens.Screen;
 
diff --git a/src/main/java/com/mojang/realmsclient/util/task/OpenServerTask.java b/src/main/java/com/mojang/realmsclient/util/task/OpenServerTask.java
index 87e67ae7b8a20988426164818f4c8a31a6af385d..6b87c8245e72ca0d456a25bf0cccf2d816d39657 100644
--- a/src/main/java/com/mojang/realmsclient/util/task/OpenServerTask.java
+++ b/src/main/java/com/mojang/realmsclient/util/task/OpenServerTask.java
@@ -3,7 +3,6 @@ package com.mojang.realmsclient.util.task;
 import com.mojang.realmsclient.exception.RetryCallException;
 import com.mojang.realmsclient.gui.screens.RealmsConfigureWorldScreen;
 import com.mojang.realmsclient.client.RealmsClient;
-import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TranslatableComponent;
 import com.mojang.realmsclient.RealmsMainScreen;
 import net.minecraft.client.gui.screens.Screen;
diff --git a/src/main/java/com/mojang/realmsclient/util/task/RestoreTask.java b/src/main/java/com/mojang/realmsclient/util/task/RestoreTask.java
index 74bbc5c6dc9744d0f85a538bf5fb7238a9e56324..cf405b8e58348fa29816d1b81048768f998a4c1a 100644
--- a/src/main/java/com/mojang/realmsclient/util/task/RestoreTask.java
+++ b/src/main/java/com/mojang/realmsclient/util/task/RestoreTask.java
@@ -3,9 +3,7 @@ package com.mojang.realmsclient.util.task;
 import com.mojang.realmsclient.exception.RealmsServiceException;
 import com.mojang.realmsclient.gui.screens.RealmsGenericErrorScreen;
 import com.mojang.realmsclient.exception.RetryCallException;
-import net.minecraft.client.gui.screens.Screen;
 import com.mojang.realmsclient.client.RealmsClient;
-import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TranslatableComponent;
 import com.mojang.realmsclient.gui.screens.RealmsConfigureWorldScreen;
 import com.mojang.realmsclient.dto.Backup;
diff --git a/src/main/java/com/mojang/realmsclient/util/task/SwitchMinigameTask.java b/src/main/java/com/mojang/realmsclient/util/task/SwitchMinigameTask.java
index c06acef4547e85b54a556ce1302e64ad456c116f..75bac4af8d1d109042bd9a9ec4fb73465b24b82f 100644
--- a/src/main/java/com/mojang/realmsclient/util/task/SwitchMinigameTask.java
+++ b/src/main/java/com/mojang/realmsclient/util/task/SwitchMinigameTask.java
@@ -1,8 +1,6 @@
 package com.mojang.realmsclient.util.task;
 
 import com.mojang.realmsclient.exception.RetryCallException;
-import net.minecraft.client.gui.screens.Screen;
-import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TranslatableComponent;
 import com.mojang.realmsclient.client.RealmsClient;
 import com.mojang.realmsclient.gui.screens.RealmsConfigureWorldScreen;
diff --git a/src/main/java/com/mojang/realmsclient/util/task/SwitchSlotTask.java b/src/main/java/com/mojang/realmsclient/util/task/SwitchSlotTask.java
index 3b734539d43cb52ce27020dea7d617202d715572..af7382469443af44a804a5709ce5e680d19ffaa0 100644
--- a/src/main/java/com/mojang/realmsclient/util/task/SwitchSlotTask.java
+++ b/src/main/java/com/mojang/realmsclient/util/task/SwitchSlotTask.java
@@ -1,7 +1,6 @@
 package com.mojang.realmsclient.util.task;
 
 import com.mojang.realmsclient.exception.RetryCallException;
-import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TranslatableComponent;
 import com.mojang.realmsclient.client.RealmsClient;
 
diff --git a/src/main/java/com/mojang/realmsclient/util/task/WorldCreationTask.java b/src/main/java/com/mojang/realmsclient/util/task/WorldCreationTask.java
index 38e42fd2e0b25a2be6fe4cbd47ce5deb387d58a1..45c94ed285095e0905cf9bdd6dda09ec92fead63 100644
--- a/src/main/java/com/mojang/realmsclient/util/task/WorldCreationTask.java
+++ b/src/main/java/com/mojang/realmsclient/util/task/WorldCreationTask.java
@@ -2,7 +2,6 @@ package com.mojang.realmsclient.util.task;
 
 import com.mojang.realmsclient.exception.RealmsServiceException;
 import com.mojang.realmsclient.client.RealmsClient;
-import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.client.gui.screens.Screen;
 
diff --git a/src/main/java/magmacube/DebugMain.java b/src/main/java/magmacube/DebugMain.java
new file mode 100644
index 0000000000000000000000000000000000000000..be5bfeed686ea2114a96edb21e12998ed86a3b13
--- /dev/null
+++ b/src/main/java/magmacube/DebugMain.java
@@ -0,0 +1,11 @@
+package magmacube;
+
+import net.minecraft.SharedConstants;
+import net.minecraft.client.main.Main;
+
+public class DebugMain {
+    public static void main(String[] args) {
+        SharedConstants.IS_RUNNING_IN_IDE = true;
+        Main.main(args);
+    }
+}
diff --git a/src/main/java/net/minecraft/CrashReportCategory.java b/src/main/java/net/minecraft/CrashReportCategory.java
index 2defcaa88689ec6af4fc2aeed96a7dfa472704eb..d01dc3337472f5d79dea9e928eaddd6155839791 100644
--- a/src/main/java/net/minecraft/CrashReportCategory.java
+++ b/src/main/java/net/minecraft/CrashReportCategory.java
@@ -16,7 +16,7 @@ public class CrashReportCategory
     private StackTraceElement[] stackTrace;
     
     public CrashReportCategory(final CrashReport crashReport, final String s) {
-        this.entries = (List<Entry>)Lists.newArrayList();
+        this.entries = Lists.newArrayList(); // MagmaCube - decompile error
         this.stackTrace = new StackTraceElement[0];
         this.report = crashReport;
         this.title = s;
diff --git a/src/main/java/net/minecraft/Util.java b/src/main/java/net/minecraft/Util.java
index a7c2392d95f196ed11f40e9cf0a8a071dc2768e8..6d4efc342733ecbd6b142473f2e716b03160c04b 100644
--- a/src/main/java/net/minecraft/Util.java
+++ b/src/main/java/net/minecraft/Util.java
@@ -24,6 +24,7 @@ import java.nio.file.LinkOption;
 import java.nio.file.Path;
 import java.security.AccessController;
 import java.security.PrivilegedActionException;
+import java.security.PrivilegedExceptionAction;
 import java.time.Instant;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -80,7 +81,7 @@ public class Util {
     }
 
     public static <T extends Comparable<T>> String getPropertyName(Property<T> property, Object object) {
-        return property.getName((Comparable)object);
+        return property.getName((T)object); // MagmaCube - decompile error
     }
 
     public static String makeDescriptionId(String s, @Nullable ResourceLocation resourceLocation) {
@@ -103,10 +104,10 @@ public class Util {
     }
 
     private static ExecutorService makeExecutor(String s) {
-        ForkJoinPool executorService2;
+        ExecutorService executorService2; // MagmaCube - decompile error
         int i = Mth.clamp(Runtime.getRuntime().availableProcessors() - 1, 1, 7);
         if (i <= 0) {
-            ListeningExecutorService executorService = MoreExecutors.newDirectExecutorService();
+            executorService2 = MoreExecutors.newDirectExecutorService(); // MagmaCube - decompile error
         } else {
             executorService2 = new ForkJoinPool(i, forkJoinPool -> {
                 ForkJoinWorkerThread forkJoinWorkerThread = new ForkJoinWorkerThread(forkJoinPool){
@@ -149,7 +150,7 @@ public class Util {
         boolean flag2;
         executorService.shutdown();
         try {
-            boolean flag = executorService.awaitTermination(3L, TimeUnit.SECONDS);
+            flag2 = executorService.awaitTermination(3L, TimeUnit.SECONDS); // MagmaCube - decompile error
         }
         catch (InterruptedException interruptedException) {
             flag2 = false;
@@ -289,7 +290,7 @@ public class Util {
     }
 
     public static <K> Hash.Strategy<K> identityStrategy() {
-        return IdentityStrategy.INSTANCE;
+        return (Hash.Strategy<K>) IdentityStrategy.INSTANCE; // MagmaCube - decompile error
     }
 
     public static <V> CompletableFuture<List<V>> sequence(List<? extends CompletableFuture<? extends V>> list) {
@@ -571,7 +572,7 @@ public class Util {
 
         public void openUrl(URL uRL) {
             try {
-                Process process = AccessController.doPrivileged(() -> Runtime.getRuntime().exec(this.getOpenUrlArguments(uRL)));
+                Process process = AccessController.doPrivileged((PrivilegedExceptionAction<Process>) () -> Runtime.getRuntime().exec(this.getOpenUrlArguments(uRL))); // MagmaCube - decompile error
                 for (String s : IOUtils.readLines((InputStream)process.getErrorStream())) {
                     LOGGER.error(s);
                 }
diff --git a/src/main/java/net/minecraft/advancements/Advancement.java b/src/main/java/net/minecraft/advancements/Advancement.java
index e2c24e7b99cc8cca59e87d0001652d20a5682329..15c8cd0dd9cdaa8b75a89db2c25c755191ce2f8f 100644
--- a/src/main/java/net/minecraft/advancements/Advancement.java
+++ b/src/main/java/net/minecraft/advancements/Advancement.java
@@ -41,7 +41,7 @@ public class Advancement
     private final Component chatComponent;
     
     public Advancement(final ResourceLocation resourceLocation, @Nullable final Advancement advancement, @Nullable final DisplayInfo displayInfo, final AdvancementRewards advancementRewards, final Map<String, Criterion> map, final String[][] strings) {
-        this.children = (Set<Advancement>)Sets.newLinkedHashSet();
+        this.children = Sets.newLinkedHashSet(); // MagmaCube - decompile error
         this.id = resourceLocation;
         this.display = displayInfo;
         this.criteria = (Map<String, Criterion>)ImmutableMap.copyOf((Map)map);
@@ -58,7 +58,7 @@ public class Advancement
             final Component component = displayInfo.getTitle();
             final ChatFormatting chatFormatting = displayInfo.getFrame().getChatColor();
             final Component component2 = ComponentUtils.mergeStyles(component.copy(), Style.EMPTY.withColor(chatFormatting)).append("\n").append(displayInfo.getDescription());
-            final Component component3 = component.copy().withStyle(style -> style.withHoverEvent(new HoverEvent((HoverEvent.Action<T>)HoverEvent.Action.SHOW_TEXT, (T)component2)));
+            final Component component3 = component.copy().withStyle(style -> style.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, component2))); // MagmaCube - decompile error
             this.chatComponent = ComponentUtils.wrapInSquareBrackets(component3).withStyle(chatFormatting);
         }
     }
@@ -143,7 +143,7 @@ public class Advancement
         
         private Builder(@Nullable final ResourceLocation resourceLocation, @Nullable final DisplayInfo displayInfo, final AdvancementRewards advancementRewards, final Map<String, Criterion> map, final String[][] strings) {
             this.rewards = AdvancementRewards.EMPTY;
-            this.criteria = (Map<String, Criterion>)Maps.newLinkedHashMap();
+            this.criteria = Maps.newLinkedHashMap(); // MagmaCube - decompile error
             this.requirementsStrategy = RequirementsStrategy.AND;
             this.parentId = resourceLocation;
             this.display = displayInfo;
@@ -154,7 +154,7 @@ public class Advancement
         
         private Builder() {
             this.rewards = AdvancementRewards.EMPTY;
-            this.criteria = (Map<String, Criterion>)Maps.newLinkedHashMap();
+            this.criteria = Maps.newLinkedHashMap(); // MagmaCube - decompile error
             this.requirementsStrategy = RequirementsStrategy.AND;
         }
         
@@ -222,7 +222,7 @@ public class Advancement
         }
         
         public Advancement build(final ResourceLocation resourceLocation) {
-            if (!this.canBuild(resourceLocation -> null)) {
+            if (!this.canBuild(resourceLocation1 -> null)) { // MagmaCube - decompile error
                 throw new IllegalStateException("Tried to build incomplete advancement!");
             }
             if (this.requirements == null) {
diff --git a/src/main/java/net/minecraft/advancements/AdvancementList.java b/src/main/java/net/minecraft/advancements/AdvancementList.java
index 28c90a453cd859350055f905e8e9a7d7774e2a2c..bafe5319dfb7ca0ac3b23ba9ce79b385c10f131b 100644
--- a/src/main/java/net/minecraft/advancements/AdvancementList.java
+++ b/src/main/java/net/minecraft/advancements/AdvancementList.java
@@ -22,9 +22,9 @@ public class AdvancementList
     private Listener listener;
     
     public AdvancementList() {
-        this.advancements = (Map<ResourceLocation, Advancement>)Maps.newHashMap();
-        this.roots = (Set<Advancement>)Sets.newLinkedHashSet();
-        this.tasks = (Set<Advancement>)Sets.newLinkedHashSet();
+        this.advancements = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.roots = Sets.newLinkedHashSet(); // MagmaCube - decompile fix
+        this.tasks = Sets.newLinkedHashSet(); // MagmaCube - decompile fix
     }
     
     private void remove(final Advancement advancement) {
diff --git a/src/main/java/net/minecraft/advancements/AdvancementProgress.java b/src/main/java/net/minecraft/advancements/AdvancementProgress.java
index d0a9620c1ec51ce5ac47ec0779a60a5fcd806dee..0b32ce346ec9d89222f4c83a89f70111cdbc78be 100644
--- a/src/main/java/net/minecraft/advancements/AdvancementProgress.java
+++ b/src/main/java/net/minecraft/advancements/AdvancementProgress.java
@@ -26,7 +26,7 @@ public class AdvancementProgress implements Comparable<AdvancementProgress>
     private String[][] requirements;
     
     public AdvancementProgress() {
-        this.criteria = (Map<String, CriterionProgress>)Maps.newHashMap();
+        this.criteria = Maps.newHashMap(); // MagmaCube - decompile error
         this.requirements = new String[0][];
     }
     
@@ -155,7 +155,7 @@ public class AdvancementProgress implements Comparable<AdvancementProgress>
     }
     
     public Iterable<String> getRemainingCriteria() {
-        final List<String> list = (List<String>)Lists.newArrayList();
+        final List<String> list = Lists.newArrayList(); // MagmaCube - decompile error
         for (final Map.Entry<String, CriterionProgress> entry : this.criteria.entrySet()) {
             if (!entry.getValue().isDone()) {
                 list.add(entry.getKey());
@@ -165,7 +165,7 @@ public class AdvancementProgress implements Comparable<AdvancementProgress>
     }
     
     public Iterable<String> getCompletedCriteria() {
-        final List<String> list = (List<String>)Lists.newArrayList();
+        final List<String> list = Lists.newArrayList(); // MagmaCube - decompile error
         for (final Map.Entry<String, CriterionProgress> entry : this.criteria.entrySet()) {
             if (entry.getValue().isDone()) {
                 list.add(entry.getKey());
diff --git a/src/main/java/net/minecraft/advancements/AdvancementRewards.java b/src/main/java/net/minecraft/advancements/AdvancementRewards.java
index 5de3c07989469c3694b229cc8736b3b94e5ff212..642e90774a2b6567b9cfacd622ccc105bb8a2334 100644
--- a/src/main/java/net/minecraft/advancements/AdvancementRewards.java
+++ b/src/main/java/net/minecraft/advancements/AdvancementRewards.java
@@ -118,6 +118,7 @@ public class AdvancementRewards {
 
     public static class Builder {
         private int experience;
+        @SuppressWarnings("MismatchedQueryAndUpdateOfCollection") // probably intended for now
         private final List<ResourceLocation> loot = Lists.newArrayList();
         private final List<ResourceLocation> recipes = Lists.newArrayList();
         @Nullable
diff --git a/src/main/java/net/minecraft/advancements/DisplayInfo.java b/src/main/java/net/minecraft/advancements/DisplayInfo.java
index 56eaea165c0774eccd8984e859849c164840210d..34c0df18e46e4e576f96b6ae1d2432de109a68bb 100644
--- a/src/main/java/net/minecraft/advancements/DisplayInfo.java
+++ b/src/main/java/net/minecraft/advancements/DisplayInfo.java
@@ -7,7 +7,6 @@ import net.minecraft.nbt.CompoundTag;
 import net.minecraft.world.item.Item;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import net.minecraft.nbt.TagParser;
-import net.minecraft.world.level.ItemLike;
 import com.google.gson.JsonParseException;
 import net.minecraft.util.GsonHelper;
 import com.google.gson.JsonSyntaxException;
diff --git a/src/main/java/net/minecraft/advancements/RequirementsStrategy.java b/src/main/java/net/minecraft/advancements/RequirementsStrategy.java
index ae55912623f14d6fe7f4a15592c4522ab32af8a6..896cddbb57731e12e86eb3ff8e131e50d5f670a2 100644
--- a/src/main/java/net/minecraft/advancements/RequirementsStrategy.java
+++ b/src/main/java/net/minecraft/advancements/RequirementsStrategy.java
@@ -6,26 +6,19 @@ import java.util.Collection;
 public interface RequirementsStrategy
 {
     public static final RequirementsStrategy AND = collection -> {
-        strings = new String[collection.size()][];
-        i = 0;
-        collection.iterator();
+        // MagmaCube start - decompile error
+        String[][] strings = new String[collection.size()][];
+        int i = 0;
+        Iterator<String> iterator = collection.iterator();
         while (iterator.hasNext()) {
-            s = iterator.next();
+            String s = iterator.next();
             i++;
-            o[n] = new String[] { s };
+            strings[i] = new String[] { s };
         }
+        // MagmaCube end - decompile error
         return strings;
     };
     public static final RequirementsStrategy OR = collection -> new String[][] { collection.toArray(new String[0]) };
     
     String[][] createRequirements(final Collection<String> p0);
-    
-    default static {
-        final String[][] strings;
-        int i;
-        final Iterator<String> iterator;
-        String s;
-        final Object o;
-        final int n;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/advancements/critereon/BeeNestDestroyedTrigger.java b/src/main/java/net/minecraft/advancements/critereon/BeeNestDestroyedTrigger.java
index c55c696887a3f8c1be8cc618fe278a7f8d86c3af..5b1a3183a5091c8c2ba03614aff1ce4cc0c72406 100644
--- a/src/main/java/net/minecraft/advancements/critereon/BeeNestDestroyedTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/BeeNestDestroyedTrigger.java
@@ -10,7 +10,7 @@ import net.minecraft.world.level.block.Block;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class BeeNestDestroyedTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class BeeNestDestroyedTrigger extends SimpleCriterionTrigger<BeeNestDestroyedTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
@@ -30,11 +30,8 @@ public class BeeNestDestroyedTrigger extends SimpleCriterionTrigger<TriggerInsta
     private static Block deserializeBlock(final JsonObject jsonObject) {
         if (jsonObject.has("block")) {
             final ResourceLocation resourceLocation = new ResourceLocation(GsonHelper.getAsString(jsonObject, "block"));
-            final Object o;
-            final Object obj;
             return Registry.BLOCK.getOptional(resourceLocation).orElseThrow(() -> {
-                new JsonSyntaxException("Unknown block type '" + obj + "'");
-                return o;
+                return new JsonSyntaxException("Unknown block type '" + jsonObject + "'"); // MagmaCube - decompile error
             });
         }
         return null;
diff --git a/src/main/java/net/minecraft/advancements/critereon/BredAnimalsTrigger.java b/src/main/java/net/minecraft/advancements/critereon/BredAnimalsTrigger.java
index a6d135e7558ebc87b1e9e5cbccc73da73f9c9e22..059bd6355bef413785460f314babd5e2f16e2986 100644
--- a/src/main/java/net/minecraft/advancements/critereon/BredAnimalsTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/BredAnimalsTrigger.java
@@ -9,7 +9,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class BredAnimalsTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class BredAnimalsTrigger extends SimpleCriterionTrigger<BredAnimalsTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/BrewedPotionTrigger.java b/src/main/java/net/minecraft/advancements/critereon/BrewedPotionTrigger.java
index 49a1843d2acb6eeccc70d7a2ee7c82a891962b52..c300c82b62434272277b8d22e64d3255e6e2189f 100644
--- a/src/main/java/net/minecraft/advancements/critereon/BrewedPotionTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/BrewedPotionTrigger.java
@@ -9,7 +9,7 @@ import net.minecraft.util.GsonHelper;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class BrewedPotionTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class BrewedPotionTrigger extends SimpleCriterionTrigger<BrewedPotionTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
@@ -22,11 +22,8 @@ public class BrewedPotionTrigger extends SimpleCriterionTrigger<TriggerInstance>
         Potion potion = null;
         if (jsonObject.has("potion")) {
             final ResourceLocation resourceLocation = new ResourceLocation(GsonHelper.getAsString(jsonObject, "potion"));
-            final Object o;
-            final Object obj;
             potion = Registry.POTION.getOptional(resourceLocation).orElseThrow(() -> {
-                new JsonSyntaxException("Unknown potion '" + obj + "'");
-                return o;
+                return new JsonSyntaxException("Unknown potion '" + jsonObject + "'"); // MagmaCube - decompile error
             });
         }
         return new TriggerInstance(composite, potion);
diff --git a/src/main/java/net/minecraft/advancements/critereon/ChangeDimensionTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ChangeDimensionTrigger.java
index bd6aa491228558d8ec2b0fd749cefd048de01619..aa85762bc10c0bdc902592283bf6825982954580 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ChangeDimensionTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ChangeDimensionTrigger.java
@@ -9,7 +9,7 @@ import net.minecraft.core.Registry;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class ChangeDimensionTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class ChangeDimensionTrigger extends SimpleCriterionTrigger<ChangeDimensionTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/ChanneledLightningTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ChanneledLightningTrigger.java
index 5917c54ab18f3322c56f7deb41d064ffdd11e5cb..f299d931b8ee28bf92fc2402b9f67763baebdb5a 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ChanneledLightningTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ChanneledLightningTrigger.java
@@ -16,7 +16,7 @@ import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.storage.loot.LootContext;
 
 public class ChanneledLightningTrigger
-extends SimpleCriterionTrigger<TriggerInstance> {
+extends SimpleCriterionTrigger<ChanneledLightningTrigger.TriggerInstance> { // MagmaCube - decompile error
     private static final ResourceLocation ID = new ResourceLocation("channeled_lightning");
 
     @Override
@@ -30,15 +30,10 @@ extends SimpleCriterionTrigger<TriggerInstance> {
         return new TriggerInstance(composite, composites);
     }
 
-    @Override
+    // @Override // MagmaCube
     public void trigger(ServerPlayer serverPlayer, Collection<? extends Entity> collection) {
         List list = collection.stream().map(entity -> EntityPredicate.createContext(serverPlayer, entity)).collect(Collectors.toList());
-        this.trigger(serverPlayer, (T triggerInstance) -> triggerInstance.matches(list));
-    }
-
-    @Override
-    public /* synthetic */ AbstractCriterionTriggerInstance createInstance(JsonObject jsonObject, EntityPredicate.Composite composite, DeserializationContext deserializationContext) {
-        return this.createInstance(jsonObject, composite, deserializationContext);
+        this.trigger(serverPlayer, (TriggerInstance triggerInstance) -> triggerInstance.matches(list)); // MagmaCube - decompile error
     }
 
     public static class TriggerInstance
diff --git a/src/main/java/net/minecraft/advancements/critereon/ConstructBeaconTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ConstructBeaconTrigger.java
index e9f10b93825e169a085e3e2c08934fb67d033860..da2caac12dd9d67179016851dfab0f30ca28ba87 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ConstructBeaconTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ConstructBeaconTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class ConstructBeaconTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class ConstructBeaconTrigger extends SimpleCriterionTrigger<ConstructBeaconTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/ConsumeItemTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ConsumeItemTrigger.java
index a5608ae990f7afb11c87a4c070951f89a4dcfe50..89b202b90dd0e1dfc540721e4b46356270f6df12 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ConsumeItemTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ConsumeItemTrigger.java
@@ -9,7 +9,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class ConsumeItemTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class ConsumeItemTrigger extends SimpleCriterionTrigger<ConsumeItemTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/CuredZombieVillagerTrigger.java b/src/main/java/net/minecraft/advancements/critereon/CuredZombieVillagerTrigger.java
index f0de4d8a91aaaa9ce4eb50292a78a5162e411ebd..03d4246333a514e73c8ba1bfa1d5743a87d94fde 100644
--- a/src/main/java/net/minecraft/advancements/critereon/CuredZombieVillagerTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/CuredZombieVillagerTrigger.java
@@ -8,7 +8,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class CuredZombieVillagerTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class CuredZombieVillagerTrigger extends SimpleCriterionTrigger<CuredZombieVillagerTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/EffectsChangedTrigger.java b/src/main/java/net/minecraft/advancements/critereon/EffectsChangedTrigger.java
index c677120c5a18f4f55e1241765ca500d171b58bc4..e3eca6e650a4b0ea84118b172b779821f53a132e 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EffectsChangedTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EffectsChangedTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class EffectsChangedTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class EffectsChangedTrigger extends SimpleCriterionTrigger<EffectsChangedTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/EnchantedItemTrigger.java b/src/main/java/net/minecraft/advancements/critereon/EnchantedItemTrigger.java
index 802cdde5051afa873c263ffe917756fbe62ca926..f6223aa248dd8db0d0e24b102299d9daecff6e4f 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EnchantedItemTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EnchantedItemTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class EnchantedItemTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class EnchantedItemTrigger extends SimpleCriterionTrigger<EnchantedItemTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/EnterBlockTrigger.java b/src/main/java/net/minecraft/advancements/critereon/EnterBlockTrigger.java
index f767e34f9e24c2d46f392523d493e93d30883b9d..deeda0b61821c103bd6076f3125e27a74635bbb8 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EnterBlockTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EnterBlockTrigger.java
@@ -11,7 +11,7 @@ import com.google.gson.JsonSyntaxException;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class EnterBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class EnterBlockTrigger extends SimpleCriterionTrigger<EnterBlockTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
@@ -24,11 +24,8 @@ public class EnterBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
         final Block block = deserializeBlock(jsonObject);
         final StatePropertiesPredicate statePropertiesPredicate = StatePropertiesPredicate.fromJson(jsonObject.get("state"));
         if (block != null) {
-            final JsonSyntaxException ex;
-            final Object obj;
             statePropertiesPredicate.checkState(block.getStateDefinition(), s -> {
-                new JsonSyntaxException("Block " + obj + " has no property " + s);
-                throw ex;
+                throw new JsonSyntaxException("Block " + block + " has no property " + s); // MagmaCube - decompile error
             });
         }
         return new TriggerInstance(composite, block, statePropertiesPredicate);
@@ -38,11 +35,8 @@ public class EnterBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
     private static Block deserializeBlock(final JsonObject jsonObject) {
         if (jsonObject.has("block")) {
             final ResourceLocation resourceLocation = new ResourceLocation(GsonHelper.getAsString(jsonObject, "block"));
-            final Object o;
-            final Object obj;
             return Registry.BLOCK.getOptional(resourceLocation).orElseThrow(() -> {
-                new JsonSyntaxException("Unknown block type '" + obj + "'");
-                return o;
+                return new JsonSyntaxException("Unknown block type '" + jsonObject + "'"); // MagmaCube - decompile error
             });
         }
         return null;
diff --git a/src/main/java/net/minecraft/advancements/critereon/EntityEquipmentPredicate.java b/src/main/java/net/minecraft/advancements/critereon/EntityEquipmentPredicate.java
index 376ca1ca19cd4b2694960d3ab45759323894a23f..420b2ff39fb9362c1f9d71a8f0007c99d56289b0 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EntityEquipmentPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EntityEquipmentPredicate.java
@@ -1,7 +1,6 @@
 package net.minecraft.advancements.critereon;
 
 import net.minecraft.world.entity.raid.Raid;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.item.Items;
 import com.google.gson.JsonNull;
 import com.google.gson.JsonObject;
diff --git a/src/main/java/net/minecraft/advancements/critereon/EntityHurtPlayerTrigger.java b/src/main/java/net/minecraft/advancements/critereon/EntityHurtPlayerTrigger.java
index a58fd0220edaf2de68bebad3fb5dabee1a6cff96..15351919fe0a9cc293842400e60b30fd8d4ee2a0 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EntityHurtPlayerTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EntityHurtPlayerTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class EntityHurtPlayerTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class EntityHurtPlayerTrigger extends SimpleCriterionTrigger<EntityHurtPlayerTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/EntityPredicate.java b/src/main/java/net/minecraft/advancements/critereon/EntityPredicate.java
index 25245aac34a2b6733cb0a3452e903d43e8b3c07b..d900a8cba630b9c54ca622118b6277759c464e9c 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EntityPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EntityPredicate.java
@@ -300,7 +300,7 @@ public class EntityPredicate
         }
         
         public EntityPredicate build() {
-            return new EntityPredicate(this.entityType, this.distanceToPlayer, this.location, this.effects, this.nbt, this.flags, this.equipment, this.player, this.fishingHook, this.vehicle, this.targetedEntity, this.team, this.catType, null);
+            return new EntityPredicate(this.entityType, this.distanceToPlayer, this.location, this.effects, this.nbt, this.flags, this.equipment, this.player, this.fishingHook, this.vehicle, this.targetedEntity, this.team, this.catType); // MagmaCube - decompile fix
         }
     }
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/FilledBucketTrigger.java b/src/main/java/net/minecraft/advancements/critereon/FilledBucketTrigger.java
index 4cf8bff20ead96c023d6d222ed502ac2e2f4ac54..3a253792f71a1ddf31645346a735f825a84509a7 100644
--- a/src/main/java/net/minecraft/advancements/critereon/FilledBucketTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/FilledBucketTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class FilledBucketTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class FilledBucketTrigger extends SimpleCriterionTrigger<FilledBucketTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/FishingRodHookedTrigger.java b/src/main/java/net/minecraft/advancements/critereon/FishingRodHookedTrigger.java
index 3dde32260ccf26bd97cf7ff7a1d0267999d94294..9437269df5f4e6d2ac2799e73290916c03f4afe4 100644
--- a/src/main/java/net/minecraft/advancements/critereon/FishingRodHookedTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/FishingRodHookedTrigger.java
@@ -12,7 +12,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class FishingRodHookedTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class FishingRodHookedTrigger extends SimpleCriterionTrigger<FishingRodHookedTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/ImpossibleTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ImpossibleTrigger.java
index 4bb8f99f14f5cc0b86dd2065b680ab4a8d222f16..eab3ef9d18c93161529e11a028944ac3279faad5 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ImpossibleTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ImpossibleTrigger.java
@@ -6,7 +6,7 @@ import net.minecraft.server.PlayerAdvancements;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.advancements.CriterionTrigger;
 
-public class ImpossibleTrigger implements CriterionTrigger<TriggerInstance>
+public class ImpossibleTrigger implements CriterionTrigger<ImpossibleTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/InventoryChangeTrigger.java b/src/main/java/net/minecraft/advancements/critereon/InventoryChangeTrigger.java
index 586d0c1d9ba269507f13654ff93f0081b97f174c..94ed56ff5ad59532df48389c8175076e97cdf9e9 100644
--- a/src/main/java/net/minecraft/advancements/critereon/InventoryChangeTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/InventoryChangeTrigger.java
@@ -15,7 +15,7 @@ import net.minecraft.util.GsonHelper;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class InventoryChangeTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class InventoryChangeTrigger extends SimpleCriterionTrigger<InventoryChangeTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/ItemDurabilityTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ItemDurabilityTrigger.java
index 6299aed1771676290e17968550f847061c306b9a..0c0d8cd9117a111ac38948866b34fd9f07bc89ac 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ItemDurabilityTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ItemDurabilityTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class ItemDurabilityTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class ItemDurabilityTrigger extends SimpleCriterionTrigger<ItemDurabilityTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/ItemPickedUpByEntityTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ItemPickedUpByEntityTrigger.java
index 10944253b19f15ba8b58003c53e89913eed0b9e5..a3a9560e06b5144ade8352e85771def2f749257c 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ItemPickedUpByEntityTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ItemPickedUpByEntityTrigger.java
@@ -7,7 +7,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class ItemPickedUpByEntityTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class ItemPickedUpByEntityTrigger extends SimpleCriterionTrigger<ItemPickedUpByEntityTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/ItemPredicate.java b/src/main/java/net/minecraft/advancements/critereon/ItemPredicate.java
index ec777cde4e1240c463b5e66c7faf1ce50d3ac11a..c6bef192e5a1647f683aed0b6d94c80c55460441 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ItemPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ItemPredicate.java
@@ -118,12 +118,7 @@ public class ItemPredicate
         Item item = null;
         if (jsonObject.has("item")) {
             final ResourceLocation resourceLocation = new ResourceLocation(GsonHelper.getAsString(jsonObject, "item"));
-            final Object o;
-            final Object obj;
-            item = Registry.ITEM.getOptional(resourceLocation).orElseThrow(() -> {
-                new JsonSyntaxException("Unknown item id '" + obj + "'");
-                return o;
-            });
+            item = Registry.ITEM.getOptional(resourceLocation).orElseThrow(() -> new JsonSyntaxException("Unknown item id '" + jsonObject + "'")); // MagmaCube - decompile error
         }
         Tag<Item> tag = null;
         if (jsonObject.has("tag")) {
@@ -138,10 +133,7 @@ public class ItemPredicate
             final ResourceLocation resourceLocation3 = new ResourceLocation(GsonHelper.getAsString(jsonObject, "potion"));
             final Object o2;
             final Object obj2;
-            potion = Registry.POTION.getOptional(resourceLocation3).orElseThrow(() -> {
-                new JsonSyntaxException("Unknown potion '" + obj2 + "'");
-                return o2;
-            });
+            potion = Registry.POTION.getOptional(resourceLocation3).orElseThrow(() -> new JsonSyntaxException("Unknown potion '" + jsonObject + "'")); // MagmaCube - decompile error
         }
         final EnchantmentPredicate[] enchantmentPredicates = EnchantmentPredicate.fromJsonArray(jsonObject.get("enchantments"));
         final EnchantmentPredicate[] enchantmentPredicates2 = EnchantmentPredicate.fromJsonArray(jsonObject.get("stored_enchantments"));
@@ -213,8 +205,10 @@ public class ItemPredicate
         private NbtPredicate nbt;
         
         private Builder() {
-            this.enchantments = (List<EnchantmentPredicate>)Lists.newArrayList();
-            this.storedEnchantments = (List<EnchantmentPredicate>)Lists.newArrayList();
+            // MagmaCube start - decompile error
+            this.enchantments = Lists.newArrayList();
+            this.storedEnchantments = Lists.newArrayList();
+            // MagmaCube end - decompile error
             this.count = MinMaxBounds.Ints.ANY;
             this.durability = MinMaxBounds.Ints.ANY;
             this.nbt = NbtPredicate.ANY;
diff --git a/src/main/java/net/minecraft/advancements/critereon/ItemUsedOnBlockTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ItemUsedOnBlockTrigger.java
index e3dc736a96108558807bdf4e2f1810f36ce6b69e..f0fff18f55747ac0ec673fe1e1a4197d4aeae290 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ItemUsedOnBlockTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ItemUsedOnBlockTrigger.java
@@ -8,7 +8,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class ItemUsedOnBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class ItemUsedOnBlockTrigger extends SimpleCriterionTrigger<ItemUsedOnBlockTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/KilledByCrossbowTrigger.java b/src/main/java/net/minecraft/advancements/critereon/KilledByCrossbowTrigger.java
index 96001baf0980d812c0a3889cd824e6454b7958f3..689314a018367470e9cae00a56f77b331592a972 100644
--- a/src/main/java/net/minecraft/advancements/critereon/KilledByCrossbowTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/KilledByCrossbowTrigger.java
@@ -13,7 +13,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class KilledByCrossbowTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class KilledByCrossbowTrigger extends SimpleCriterionTrigger<KilledByCrossbowTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
@@ -29,8 +29,10 @@ public class KilledByCrossbowTrigger extends SimpleCriterionTrigger<TriggerInsta
     }
     
     public void trigger(final ServerPlayer serverPlayer, final Collection<Entity> collection) {
-        final List<LootContext> list = (List<LootContext>)Lists.newArrayList();
-        final Set<EntityType<?>> set = (Set<EntityType<?>>)Sets.newHashSet();
+        // MagmaCube start - decompile error
+        final List<LootContext> list = Lists.newArrayList();
+        final Set<EntityType<?>> set = Sets.newHashSet();
+        // MagmaCube end - decompile error
         for (final Entity entity : collection) {
             set.add(entity.getType());
             list.add(EntityPredicate.createContext(serverPlayer, entity));
diff --git a/src/main/java/net/minecraft/advancements/critereon/KilledTrigger.java b/src/main/java/net/minecraft/advancements/critereon/KilledTrigger.java
index 71041910832d145985ed138ca09f4da14fed5c88..9f87327e1ff361b7a12d26b017c59da8f2620017 100644
--- a/src/main/java/net/minecraft/advancements/critereon/KilledTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/KilledTrigger.java
@@ -8,7 +8,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class KilledTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class KilledTrigger extends SimpleCriterionTrigger<KilledTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private final ResourceLocation id;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/LevitationTrigger.java b/src/main/java/net/minecraft/advancements/critereon/LevitationTrigger.java
index 40407f953c0b7f39c30f8175d887fde8aa2a6690..0fd9fcd84261da3dd1a7ac21d4afe2e15d47163f 100644
--- a/src/main/java/net/minecraft/advancements/critereon/LevitationTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/LevitationTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class LevitationTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class LevitationTrigger extends SimpleCriterionTrigger<LevitationTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/LocationTrigger.java b/src/main/java/net/minecraft/advancements/critereon/LocationTrigger.java
index 19d5919e51dcfe010a7b18ede62dee3a32683e84..4fbf5c5589da356fff056b67e3dec8a03f54ff55 100644
--- a/src/main/java/net/minecraft/advancements/critereon/LocationTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/LocationTrigger.java
@@ -8,7 +8,7 @@ import net.minecraft.util.GsonHelper;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class LocationTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class LocationTrigger extends SimpleCriterionTrigger<LocationTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private final ResourceLocation id;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/LootTableTrigger.java b/src/main/java/net/minecraft/advancements/critereon/LootTableTrigger.java
index f65099060b78751161e139bfabf9066acfcad8e9..f138e3b84eb2894775d38be913805f47384fe5a9 100644
--- a/src/main/java/net/minecraft/advancements/critereon/LootTableTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/LootTableTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.util.GsonHelper;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class LootTableTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class LootTableTrigger extends SimpleCriterionTrigger<LootTableTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/MinMaxBounds.java b/src/main/java/net/minecraft/advancements/critereon/MinMaxBounds.java
index 6c42ce5e6bc7d8ee5dcf507c802602263a63e228..f8b51d28a1a6e2f90f396b506604b9954b5cbf2e 100644
--- a/src/main/java/net/minecraft/advancements/critereon/MinMaxBounds.java
+++ b/src/main/java/net/minecraft/advancements/critereon/MinMaxBounds.java
@@ -85,8 +85,8 @@ public abstract class MinMaxBounds<T extends Number>
             if (stringReader.canRead(2) && stringReader.peek() == '.' && stringReader.peek(1) == '.') {
                 stringReader.skip();
                 stringReader.skip();
-                final T number2 = optionallyFormat((T)readNumber(stringReader, (Function<String, T>)function, supplier), function2);
-                if (number == null && number2 == null) {
+                number3 = optionallyFormat((T)readNumber(stringReader, (Function<String, T>)function, supplier), function2);
+                if (number == null && number3 == null) {
                     throw MinMaxBounds.ERROR_EMPTY.createWithContext((ImmutableStringReader)stringReader);
                 }
             }
@@ -152,7 +152,7 @@ public abstract class MinMaxBounds<T extends Number>
         
         @Nullable
         private static Long squareOpt(@Nullable final Integer integer) {
-            return (Long)((integer == null) ? null : (integer * integer));
+            return ((integer == null) ? null : (long)(integer * integer)); // MagmaCube - decompile error
         }
         
         private Ints(@Nullable final Integer integer, @Nullable final Integer integer2) {
@@ -205,7 +205,7 @@ public abstract class MinMaxBounds<T extends Number>
         
         @Nullable
         private static Double squareOpt(@Nullable final Float f) {
-            return (Double)((f == null) ? null : (f * f));
+            return ((f == null) ? null : (double)(f * f)); // MagmaCube - decompile error
         }
         
         private Floats(@Nullable final Float f, @Nullable final Float f2) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/NetherTravelTrigger.java b/src/main/java/net/minecraft/advancements/critereon/NetherTravelTrigger.java
index c990217abd26eaac7606546d8ef43c6e675c81b7..cd292bda3ddf0f5085cc3d0ce30aca30e78668e6 100644
--- a/src/main/java/net/minecraft/advancements/critereon/NetherTravelTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/NetherTravelTrigger.java
@@ -6,7 +6,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class NetherTravelTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class NetherTravelTrigger extends SimpleCriterionTrigger<NetherTravelTrigger.TriggerInstance>
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/PlacedBlockTrigger.java b/src/main/java/net/minecraft/advancements/critereon/PlacedBlockTrigger.java
index 4830b5b5a78677fe2e34d81ff491c4dd727b712d..3c6ce2da3af6ca332536c426e5d6b6cb0c7e35d9 100644
--- a/src/main/java/net/minecraft/advancements/critereon/PlacedBlockTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/PlacedBlockTrigger.java
@@ -14,7 +14,7 @@ import com.google.gson.JsonSyntaxException;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class PlacedBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class PlacedBlockTrigger extends SimpleCriterionTrigger<PlacedBlockTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
@@ -27,11 +27,8 @@ public class PlacedBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
         final Block block = deserializeBlock(jsonObject);
         final StatePropertiesPredicate statePropertiesPredicate = StatePropertiesPredicate.fromJson(jsonObject.get("state"));
         if (block != null) {
-            final JsonSyntaxException ex;
-            final Object obj;
             statePropertiesPredicate.checkState(block.getStateDefinition(), s -> {
-                new JsonSyntaxException("Block " + obj + " has no property " + s + ":");
-                throw ex;
+                throw new JsonSyntaxException("Block " + jsonObject + " has no property " + s + ":"); // MagmaCube - decompile error
             });
         }
         final LocationPredicate locationPredicate = LocationPredicate.fromJson(jsonObject.get("location"));
@@ -43,11 +40,8 @@ public class PlacedBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
     private static Block deserializeBlock(final JsonObject jsonObject) {
         if (jsonObject.has("block")) {
             final ResourceLocation resourceLocation = new ResourceLocation(GsonHelper.getAsString(jsonObject, "block"));
-            final Object o;
-            final Object obj;
             return Registry.BLOCK.getOptional(resourceLocation).orElseThrow(() -> {
-                new JsonSyntaxException("Unknown block type '" + obj + "'");
-                return o;
+                return new JsonSyntaxException("Unknown block type '" + jsonObject + "'"); // MagmaCube - decompile error
             });
         }
         return null;
diff --git a/src/main/java/net/minecraft/advancements/critereon/PlayerHurtEntityTrigger.java b/src/main/java/net/minecraft/advancements/critereon/PlayerHurtEntityTrigger.java
index d2a44b3ac542060b4a1ffde7ea226f6b4277a87c..026c2c7152314425040dc9e0036b5e418500b773 100644
--- a/src/main/java/net/minecraft/advancements/critereon/PlayerHurtEntityTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/PlayerHurtEntityTrigger.java
@@ -7,7 +7,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class PlayerHurtEntityTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class PlayerHurtEntityTrigger extends SimpleCriterionTrigger<PlayerHurtEntityTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/PlayerInteractTrigger.java b/src/main/java/net/minecraft/advancements/critereon/PlayerInteractTrigger.java
index 58543de6f3468db69f9fe900f7379a57ef66b3d6..208924c66c85384609dcd9abfa27f81c5c7d96cf 100644
--- a/src/main/java/net/minecraft/advancements/critereon/PlayerInteractTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/PlayerInteractTrigger.java
@@ -7,7 +7,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class PlayerInteractTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class PlayerInteractTrigger extends SimpleCriterionTrigger<PlayerInteractTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/RecipeUnlockedTrigger.java b/src/main/java/net/minecraft/advancements/critereon/RecipeUnlockedTrigger.java
index 97570eb3b0528dc83e13659958110d9c6db44d11..e2bed369a4b6d8a8fe9f5fd12f46a515e1e0b435 100644
--- a/src/main/java/net/minecraft/advancements/critereon/RecipeUnlockedTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/RecipeUnlockedTrigger.java
@@ -6,7 +6,7 @@ import net.minecraft.util.GsonHelper;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class RecipeUnlockedTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class RecipeUnlockedTrigger extends SimpleCriterionTrigger<RecipeUnlockedTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/ShotCrossbowTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ShotCrossbowTrigger.java
index 3df9f2e7eb1d7308f1a1fb5f1a66e15094dbad50..7c11ae16b0ea153091ab90156fa7c89c8c31bac0 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ShotCrossbowTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ShotCrossbowTrigger.java
@@ -6,7 +6,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class ShotCrossbowTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class ShotCrossbowTrigger extends SimpleCriterionTrigger<ShotCrossbowTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java b/src/main/java/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java
index 39c8454415f7aead6df616d71cbc22bd48f49ac5..25e32cfb8e4532b6a5be65ab7864cf22038a08f6 100644
--- a/src/main/java/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java
@@ -21,12 +21,12 @@ public abstract class SimpleCriterionTrigger<T extends AbstractCriterionTriggerI
     private final Map<PlayerAdvancements, Set<Listener<T>>> players;
     
     public SimpleCriterionTrigger() {
-        this.players = (Map<PlayerAdvancements, Set<Listener<T>>>)Maps.newIdentityHashMap();
+        this.players = Maps.newIdentityHashMap(); // MagmaCube - decompile error
     }
     
     @Override
     public final void addPlayerListener(final PlayerAdvancements playerAdvancements, final Listener<T> listener) {
-        this.players.computeIfAbsent(playerAdvancements, playerAdvancements -> Sets.newHashSet()).add(listener);
+        this.players.computeIfAbsent(playerAdvancements, playerAdvancements1 -> Sets.newHashSet()).add(listener); // MagmaCube - decompile error
     }
     
     @Override
@@ -65,7 +65,7 @@ public abstract class SimpleCriterionTrigger<T extends AbstractCriterionTriggerI
             final T abstractCriterionTriggerInstance = listener.getTriggerInstance();
             if (abstractCriterionTriggerInstance.getPlayerPredicate().matches(lootContext) && predicate.test(abstractCriterionTriggerInstance)) {
                 if (list == null) {
-                    list = (List<Listener<T>>)Lists.newArrayList();
+                    list = Lists.newArrayList(); // MagmaCube - decompile error
                 }
                 list.add(listener);
             }
diff --git a/src/main/java/net/minecraft/advancements/critereon/SlideDownBlockTrigger.java b/src/main/java/net/minecraft/advancements/critereon/SlideDownBlockTrigger.java
index aae10fbede41bc0bf90ec0aec15f13047ab1a453..e3dee0ce07d230314a25905c2d182bb874be157b 100644
--- a/src/main/java/net/minecraft/advancements/critereon/SlideDownBlockTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/SlideDownBlockTrigger.java
@@ -11,7 +11,7 @@ import com.google.gson.JsonSyntaxException;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class SlideDownBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class SlideDownBlockTrigger extends SimpleCriterionTrigger<SlideDownBlockTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
@@ -24,11 +24,8 @@ public class SlideDownBlockTrigger extends SimpleCriterionTrigger<TriggerInstanc
         final Block block = deserializeBlock(jsonObject);
         final StatePropertiesPredicate statePropertiesPredicate = StatePropertiesPredicate.fromJson(jsonObject.get("state"));
         if (block != null) {
-            final JsonSyntaxException ex;
-            final Object obj;
             statePropertiesPredicate.checkState(block.getStateDefinition(), s -> {
-                new JsonSyntaxException("Block " + obj + " has no property " + s);
-                throw ex;
+                throw new JsonSyntaxException("Block " + block + " has no property " + s); // MagmaCube - decompile error
             });
         }
         return new TriggerInstance(composite, block, statePropertiesPredicate);
@@ -38,11 +35,8 @@ public class SlideDownBlockTrigger extends SimpleCriterionTrigger<TriggerInstanc
     private static Block deserializeBlock(final JsonObject jsonObject) {
         if (jsonObject.has("block")) {
             final ResourceLocation resourceLocation = new ResourceLocation(GsonHelper.getAsString(jsonObject, "block"));
-            final Object o;
-            final Object obj;
             return Registry.BLOCK.getOptional(resourceLocation).orElseThrow(() -> {
-                new JsonSyntaxException("Unknown block type '" + obj + "'");
-                return o;
+                return new JsonSyntaxException("Unknown block type '" + jsonObject + "'"); // MagmaCube - decompile error
             });
         }
         return null;
diff --git a/src/main/java/net/minecraft/advancements/critereon/SummonedEntityTrigger.java b/src/main/java/net/minecraft/advancements/critereon/SummonedEntityTrigger.java
index 03b9b266c772d088a79a815fd6971414b8dc93e3..4428bee860b2dbb25aa30b6b0cbb819dc5d9b7ac 100644
--- a/src/main/java/net/minecraft/advancements/critereon/SummonedEntityTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/SummonedEntityTrigger.java
@@ -6,7 +6,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class SummonedEntityTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class SummonedEntityTrigger extends SimpleCriterionTrigger<SummonedEntityTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/TameAnimalTrigger.java b/src/main/java/net/minecraft/advancements/critereon/TameAnimalTrigger.java
index b2824284411af4dacd763717fbea2faba82a4a4e..cd1aa1eac444c5a678a35ed18a24841c6977204f 100644
--- a/src/main/java/net/minecraft/advancements/critereon/TameAnimalTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/TameAnimalTrigger.java
@@ -7,7 +7,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class TameAnimalTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class TameAnimalTrigger extends SimpleCriterionTrigger<TameAnimalTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/TargetBlockTrigger.java b/src/main/java/net/minecraft/advancements/critereon/TargetBlockTrigger.java
index 7039766fc1a81b819ff4c15103129dd804bdce40..06b9536396c719e39424078bd3454dbf497e993c 100644
--- a/src/main/java/net/minecraft/advancements/critereon/TargetBlockTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/TargetBlockTrigger.java
@@ -7,7 +7,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class TargetBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class TargetBlockTrigger extends SimpleCriterionTrigger<TargetBlockTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/TickTrigger.java b/src/main/java/net/minecraft/advancements/critereon/TickTrigger.java
index aaf8cd52a833a9cc2aa513e98fd51f580bf15670..57b4d6cdf349c480c658d9aa024be91c1b319dc0 100644
--- a/src/main/java/net/minecraft/advancements/critereon/TickTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/TickTrigger.java
@@ -4,7 +4,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class TickTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class TickTrigger extends SimpleCriterionTrigger<TickTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     public static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/TradeTrigger.java b/src/main/java/net/minecraft/advancements/critereon/TradeTrigger.java
index ce16fdb4d43e19ea61e5a094118d4522c58e7fef..f5ec940448360ecbdbbf26982947d8ebd9af7b61 100644
--- a/src/main/java/net/minecraft/advancements/critereon/TradeTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/TradeTrigger.java
@@ -8,7 +8,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class TradeTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class TradeTrigger extends SimpleCriterionTrigger<TradeTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/UsedEnderEyeTrigger.java b/src/main/java/net/minecraft/advancements/critereon/UsedEnderEyeTrigger.java
index 1d260fdad2dbdde699633998ba3d8bb94392410e..26951a33a99e3302ba5c18585020a40a611c4b0d 100644
--- a/src/main/java/net/minecraft/advancements/critereon/UsedEnderEyeTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/UsedEnderEyeTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class UsedEnderEyeTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class UsedEnderEyeTrigger extends SimpleCriterionTrigger<UsedEnderEyeTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/UsedTotemTrigger.java b/src/main/java/net/minecraft/advancements/critereon/UsedTotemTrigger.java
index b2ff2706d8bd30532fd12e977d5c4c62324ea537..a3e98c47c0887e89868215a423278c01b0ebbbcf 100644
--- a/src/main/java/net/minecraft/advancements/critereon/UsedTotemTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/UsedTotemTrigger.java
@@ -6,7 +6,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class UsedTotemTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class UsedTotemTrigger extends SimpleCriterionTrigger<UsedTotemTrigger.TriggerInstance> // MagmaCube - decompile error
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/client/ClientBrandRetriever.java b/src/main/java/net/minecraft/client/ClientBrandRetriever.java
index 4e17f509d7caa366ddc71217b6e00f649d634782..16025bc137e6127bcb179532818ecdaf03f83355 100644
--- a/src/main/java/net/minecraft/client/ClientBrandRetriever.java
+++ b/src/main/java/net/minecraft/client/ClientBrandRetriever.java
@@ -3,6 +3,6 @@ package net.minecraft.client;
 public class ClientBrandRetriever
 {
     public static String getClientModName() {
-        return "vanilla";
+        return "magmacube"; // MagmaCube > Vanilla!
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/ClientRecipeBook.java b/src/main/java/net/minecraft/client/ClientRecipeBook.java
index 1500d5396da6418f9756901fb2c359a8ae4e3784..5ddfc93f03b9d6482d580a9c778a4f5c1e49184b 100644
--- a/src/main/java/net/minecraft/client/ClientRecipeBook.java
+++ b/src/main/java/net/minecraft/client/ClientRecipeBook.java
@@ -43,8 +43,8 @@ extends RecipeBook {
     }
 
     private static Map<RecipeBookCategories, List<List<Recipe<?>>>> categorizeAndGroupRecipes(Iterable<Recipe<?>> iterable) {
-        HashMap map = Maps.newHashMap();
-        HashBasedTable table = HashBasedTable.create();
+        HashMap<RecipeBookCategories, List<List<Recipe<?>>>> map = Maps.newHashMap(); // MagmaCube - type
+        HashBasedTable<RecipeBookCategories, String, List<Recipe<?>>> table = HashBasedTable.create(); // MagmaCube - type
         for (Recipe<?> recipe : iterable) {
             if (recipe.isSpecial()) continue;
             RecipeBookCategories recipeBookCategories2 = ClientRecipeBook.getCategory(recipe);
@@ -53,7 +53,7 @@ extends RecipeBook {
                 map.computeIfAbsent(recipeBookCategories2, recipeBookCategories -> Lists.newArrayList()).add(ImmutableList.of(recipe));
                 continue;
             }
-            List list = (List)table.get(recipeBookCategories2, s);
+            List<Recipe<?>> list = table.get(recipeBookCategories2, s); // MagmaCube - type
             if (list == null) {
                 list = Lists.newArrayList();
                 table.put(recipeBookCategories2, s, list);
diff --git a/src/main/java/net/minecraft/client/ComponentCollector.java b/src/main/java/net/minecraft/client/ComponentCollector.java
index d737c4b6214720e4fe3fd23b840b843566bb11e9..d29a1cedd224308e937bd84d371a92f190796f0a 100644
--- a/src/main/java/net/minecraft/client/ComponentCollector.java
+++ b/src/main/java/net/minecraft/client/ComponentCollector.java
@@ -10,7 +10,7 @@ public class ComponentCollector
     private final List<FormattedText> parts;
     
     public ComponentCollector() {
-        this.parts = (List<FormattedText>)Lists.newArrayList();
+        this.parts = Lists.newArrayList(); // MagmaCube - decompile fix
     }
     
     public void append(final FormattedText formattedText) {
diff --git a/src/main/java/net/minecraft/client/HotbarManager.java b/src/main/java/net/minecraft/client/HotbarManager.java
index 6695322b4c4c83aabdf0011d59d5b5505a06b605..5457200ad2a8965c8121fd0aa1c60e3a7b67902a 100644
--- a/src/main/java/net/minecraft/client/HotbarManager.java
+++ b/src/main/java/net/minecraft/client/HotbarManager.java
@@ -1,7 +1,6 @@
 package net.minecraft.client;
 
 import org.apache.logging.log4j.LogManager;
-import net.minecraft.nbt.Tag;
 import net.minecraft.SharedConstants;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtUtils;
diff --git a/src/main/java/net/minecraft/client/KeyMapping.java b/src/main/java/net/minecraft/client/KeyMapping.java
index 555177b47f3f349c675c545ef9d6b7cb726eb60f..f95173811ec49aed3ecf49d6f486d5f486d91b6d 100644
--- a/src/main/java/net/minecraft/client/KeyMapping.java
+++ b/src/main/java/net/minecraft/client/KeyMapping.java
@@ -16,6 +16,7 @@ public class KeyMapping
 implements Comparable<KeyMapping> {
     private static final Map<String, KeyMapping> ALL = Maps.newHashMap();
     private static final Map<InputConstants.Key, KeyMapping> MAP = Maps.newHashMap();
+    @SuppressWarnings("MismatchedQueryAndUpdateOfCollection")
     private static final Set<String> CATEGORIES = Sets.newHashSet();
     private static final Map<String, Integer> CATEGORY_SORT_ORDER = Util.make(Maps.newHashMap(), hashMap -> {
         hashMap.put("key.categories.movement", 1);
@@ -163,9 +164,4 @@ implements Comparable<KeyMapping> {
     public void setDown(boolean flag) {
         this.isDown = flag;
     }
-
-    @Override
-    public /* synthetic */ int compareTo(Object object) {
-        return this.compareTo((KeyMapping)object);
-    }
 }
diff --git a/src/main/java/net/minecraft/client/Minecraft.java b/src/main/java/net/minecraft/client/Minecraft.java
index 319d3e3b8cbc929989f5305ba77bf2af5e98f76f..955f9ce71b6080e40c5bddf87ac66e9f29370860 100644
--- a/src/main/java/net/minecraft/client/Minecraft.java
+++ b/src/main/java/net/minecraft/client/Minecraft.java
@@ -24,7 +24,6 @@ import com.mojang.blaze3d.vertex.Tesselator;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Function4;
 import com.mojang.serialization.DataResult;
-import com.mojang.serialization.DynamicOps;
 import com.mojang.serialization.JsonOps;
 import com.mojang.serialization.Lifecycle;
 import java.io.File;
@@ -56,20 +55,6 @@ import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
 import net.minecraft.SharedConstants;
 import net.minecraft.Util;
-import net.minecraft.client.AmbientOcclusionStatus;
-import net.minecraft.client.CameraType;
-import net.minecraft.client.ClientBrandRetriever;
-import net.minecraft.client.CloudStatus;
-import net.minecraft.client.Game;
-import net.minecraft.client.GraphicsStatus;
-import net.minecraft.client.HotbarManager;
-import net.minecraft.client.KeyMapping;
-import net.minecraft.client.KeyboardHandler;
-import net.minecraft.client.MouseHandler;
-import net.minecraft.client.Option;
-import net.minecraft.client.Options;
-import net.minecraft.client.Timer;
-import net.minecraft.client.User;
 import net.minecraft.client.color.block.BlockColors;
 import net.minecraft.client.color.item.ItemColors;
 import net.minecraft.client.gui.Font;
@@ -398,8 +383,10 @@ WindowEventHandler {
         this.is64bit = Minecraft.checkIs64Bit();
         this.singleplayerServer = null;
         if (this.allowsMultiplayer() && gameConfig.server.hostname != null) {
-            String s = gameConfig.server.hostname;
-            int i = gameConfig.server.port;
+            // MagmaCube start - decompile error
+            s2 = gameConfig.server.hostname;
+            i2 = gameConfig.server.port;
+            // MagmaCube end - decompile error
         } else {
             s2 = null;
             i2 = 0;
@@ -413,7 +400,7 @@ WindowEventHandler {
         this.hotbarManager = new HotbarManager(this.gameDirectory, this.fixerUpper);
         LOGGER.info("Backend library: {}", RenderSystem.getBackendDescription());
         if (this.options.overrideHeight > 0 && this.options.overrideWidth > 0) {
-            DisplayData displayData = new DisplayData(this.options.overrideWidth, this.options.overrideHeight, gameConfig.display.fullscreenWidth, gameConfig.display.fullscreenHeight, gameConfig.display.isFullscreen);
+            displayData2 = new DisplayData(this.options.overrideWidth, this.options.overrideHeight, gameConfig.display.fullscreenWidth, gameConfig.display.fullscreenHeight, gameConfig.display.isFullscreen); // MagmaCube - decompile error
         } else {
             displayData2 = gameConfig.display;
         }
@@ -556,7 +543,7 @@ WindowEventHandler {
         if (this.resourcePackRepository.getSelectedIds().size() > 1) {
             Component component2;
             if (throwable instanceof SimpleReloadableResourceManager.ResourcePackLoadingFailure) {
-                TextComponent component = new TextComponent(((SimpleReloadableResourceManager.ResourcePackLoadingFailure)throwable).getPack().getName());
+                component2 = new TextComponent(((SimpleReloadableResourceManager.ResourcePackLoadingFailure)throwable).getPack().getName()); // MagmaCube - decompile error
             } else {
                 component2 = null;
             }
@@ -1492,14 +1479,14 @@ WindowEventHandler {
     }
 
     public void loadLevel(String s) {
-        this.doLoadLevel(s, RegistryAccess.builtin(), Minecraft::loadDataPacks, (Function4<LevelStorageSource.LevelStorageAccess, RegistryAccess.RegistryHolder, ResourceManager, DataPackConfig, WorldData>)((Function4)Minecraft::loadWorldData), false, ExperimentalDialogType.BACKUP);
+        this.doLoadLevel(s, RegistryAccess.builtin(), Minecraft::loadDataPacks, (Function4<LevelStorageSource.LevelStorageAccess, RegistryAccess.RegistryHolder, ResourceManager, DataPackConfig, WorldData>)(Minecraft::loadWorldData), false, ExperimentalDialogType.BACKUP); // MagmaCube - decompile error
     }
 
     public void createLevel(String s, LevelSettings levelSettings, RegistryAccess.RegistryHolder registryHolder, WorldGenSettings worldGenSettings) {
-        this.doLoadLevel(s, registryHolder, levelStorageAccess -> levelSettings.getDataPackConfig(), (Function4<LevelStorageSource.LevelStorageAccess, RegistryAccess.RegistryHolder, ResourceManager, DataPackConfig, WorldData>)((Function4)(levelStorageAccess, registryHolder2, resourceManager, dataPackConfig) -> {
+        this.doLoadLevel(s, registryHolder, levelStorageAccess -> levelSettings.getDataPackConfig(), (Function4<LevelStorageSource.LevelStorageAccess, RegistryAccess.RegistryHolder, ResourceManager, DataPackConfig, WorldData>)((levelStorageAccess, registryHolder2, resourceManager, dataPackConfig) -> { // MagmaCube - decompile error
             RegistryWriteOps registryWriteOps = RegistryWriteOps.create(JsonOps.INSTANCE, registryHolder);
             RegistryReadOps registryReadOps = RegistryReadOps.create(JsonOps.INSTANCE, resourceManager, registryHolder);
-            DataResult dataResult = WorldGenSettings.CODEC.encodeStart(registryWriteOps, worldGenSettings).setLifecycle(Lifecycle.stable()).flatMap(jsonElement -> WorldGenSettings.CODEC.parse((DynamicOps)registryReadOps, jsonElement));
+            DataResult<WorldGenSettings> dataResult = WorldGenSettings.CODEC.encodeStart(registryWriteOps, worldGenSettings).setLifecycle(Lifecycle.stable()).flatMap(jsonElement -> WorldGenSettings.CODEC.parse(registryReadOps, jsonElement)); // MagmaCube - decompile error
             WorldGenSettings worldGenSettings2 = dataResult.resultOrPartial(Util.prefix("Error reading worldgen settings after loading data packs: ", ((Logger)LOGGER)::error)).orElse(worldGenSettings);
             return new PrimaryLevelData(levelSettings, worldGenSettings2, dataResult.lifecycle());
         }), false, ExperimentalDialogType.CREATE);
@@ -1510,11 +1497,13 @@ WindowEventHandler {
      */
     private void doLoadLevel(String s, RegistryAccess.RegistryHolder registryHolder, Function<LevelStorageSource.LevelStorageAccess, DataPackConfig> function, Function4<LevelStorageSource.LevelStorageAccess, RegistryAccess.RegistryHolder, ResourceManager, DataPackConfig, WorldData> function4, boolean flag, ExperimentalDialogType experimentalDialogType) {
         boolean flag3;
-        void serverStem2;
-        void levelStorageAccess2;
+        // MagmaCube start - decompile error
+        ServerStem serverStem2;
+        LevelStorageSource.LevelStorageAccess levelStorageAccess2;
         try {
-            LevelStorageSource.LevelStorageAccess levelStorageAccess = this.levelSource.createAccess(s);
+            levelStorageAccess2 = this.levelSource.createAccess(s);
         }
+        // MagmaCube end - decompile error
         catch (IOException iOException) {
             LOGGER.warn("Failed to read level {} data", s, iOException);
             SystemToast.onWorldAccessFailure(this, s);
@@ -1522,7 +1511,8 @@ WindowEventHandler {
             return;
         }
         try {
-            ServerStem serverStem = this.makeServerStem(registryHolder, function, function4, flag, (LevelStorageSource.LevelStorageAccess)levelStorageAccess2);
+            // MagmaCube - decompile error
+            serverStem2 = this.makeServerStem(registryHolder, function, function4, flag, (LevelStorageSource.LevelStorageAccess)levelStorageAccess2);
         }
         catch (Exception exception) {
             LOGGER.warn("Failed to load datapacks, can't proceed with server load", (Throwable)exception);
@@ -1561,7 +1551,14 @@ WindowEventHandler {
             SkullBlockEntity.setProfileCache(gameProfileCache);
             SkullBlockEntity.setSessionService(minecraftSessionService);
             GameProfileCache.setUsesAuthentication(false);
-            this.singleplayerServer = MinecraftServer.spin(arg_0 -> this.lambda$doLoadLevel$27(registryHolder, (LevelStorageSource.LevelStorageAccess)levelStorageAccess2, (ServerStem)serverStem2, worldData, minecraftSessionService, gameProfileRepository, gameProfileCache, arg_0));
+            // MagmaCube start - lambda
+            this.singleplayerServer = MinecraftServer.spin(arg_0 -> new IntegratedServer(arg_0, this, registryHolder, levelStorageAccess2, serverStem2.packRepository(), serverStem2.serverResources(), worldData, minecraftSessionService, gameProfileRepository, gameProfileCache, i -> {
+                StoringChunkProgressListener storingChunkProgressListener = new StoringChunkProgressListener(i + 0);
+                storingChunkProgressListener.start();
+                this.progressListener.set(storingChunkProgressListener);
+                return new ProcessorChunkProgressListener(storingChunkProgressListener, this.progressTasks::add);
+            }));
+            // MagmaCube end - lambda
             this.isLocalServer = true;
         }
         catch (Throwable throwable) {
@@ -1604,8 +1601,10 @@ WindowEventHandler {
             TranslatableComponent component4;
             TranslatableComponent component3;
             if (flag3) {
-                TranslatableComponent component = new TranslatableComponent("selectWorld.backupQuestion.customized");
-                TranslatableComponent component2 = new TranslatableComponent("selectWorld.backupWarning.customized");
+                // MagmaCube start - decompile error
+                component3 = new TranslatableComponent("selectWorld.backupQuestion.customized");
+                component4 = new TranslatableComponent("selectWorld.backupWarning.customized");
+                // MagmaCube end - decompile error
             } else {
                 component3 = new TranslatableComponent("selectWorld.backupQuestion.experimental");
                 component4 = new TranslatableComponent("selectWorld.backupWarning.experimental");
@@ -1771,7 +1770,7 @@ WindowEventHandler {
      * WARNING - void declaration
      */
     private void pickBlock() {
-        void itemStack12;
+        ItemStack itemStack12;
         if (this.hitResult == null || this.hitResult.getType() == HitResult.Type.MISS) {
             return;
         }
@@ -1785,8 +1784,10 @@ WindowEventHandler {
             if (blockState.isAir()) {
                 return;
             }
-            ItemStack itemStack = block.getCloneItemStack(this.level, blockPos, blockState);
-            if (itemStack.isEmpty()) {
+            // MagmaCube start - decompile error
+            itemStack12 = block.getCloneItemStack(this.level, blockPos, blockState);
+            if (itemStack12.isEmpty()) {
+            // MagmaCube end - decompile error
                 return;
             }
             if (flag && Screen.hasControlDown() && block.isEntityBlock()) {
@@ -1795,58 +1796,58 @@ WindowEventHandler {
         } else if (type == HitResult.Type.ENTITY && flag) {
             Entity entity = ((EntityHitResult)this.hitResult).getEntity();
             if (entity instanceof Painting) {
-                ItemStack itemStack2 = new ItemStack(Items.PAINTING);
+                itemStack12 = new ItemStack(Items.PAINTING); // MagmaCube - decompile error
             } else if (entity instanceof LeashFenceKnotEntity) {
-                ItemStack itemStack3 = new ItemStack(Items.LEAD);
+                itemStack12 = new ItemStack(Items.LEAD); // MagmaCube - decompile error
             } else if (entity instanceof ItemFrame) {
                 ItemFrame itemFrame = (ItemFrame)entity;
                 ItemStack itemStack4 = itemFrame.getItem();
                 if (itemStack4.isEmpty()) {
-                    ItemStack itemStack5 = new ItemStack(Items.ITEM_FRAME);
+                    itemStack12 = new ItemStack(Items.ITEM_FRAME); // MagmaCube - decompile error
                 } else {
-                    ItemStack itemStack6 = itemStack4.copy();
+                    itemStack12 = itemStack4.copy(); // MagmaCube - decompile error
                 }
             } else if (entity instanceof AbstractMinecart) {
                 Item item6;
                 AbstractMinecart abstractMinecart = (AbstractMinecart)entity;
                 switch (abstractMinecart.getMinecartType()) {
                     case FURNACE: {
-                        Item item = Items.FURNACE_MINECART;
+                        item6 = Items.FURNACE_MINECART; // MagmaCube - decompile error
                         break;
                     }
                     case CHEST: {
-                        Item item2 = Items.CHEST_MINECART;
+                        item6 = Items.CHEST_MINECART; // MagmaCube - decompile error
                         break;
                     }
                     case TNT: {
-                        Item item3 = Items.TNT_MINECART;
+                        item6 = Items.TNT_MINECART; // MagmaCube - decompile error
                         break;
                     }
                     case HOPPER: {
-                        Item item4 = Items.HOPPER_MINECART;
+                        item6 = Items.HOPPER_MINECART; // MagmaCube - decompile error
                         break;
                     }
                     case COMMAND_BLOCK: {
-                        Item item5 = Items.COMMAND_BLOCK_MINECART;
+                        item6 = Items.COMMAND_BLOCK_MINECART; // MagmaCube - decompile error
                         break;
                     }
                     default: {
                         item6 = Items.MINECART;
                     }
                 }
-                ItemStack itemStack7 = new ItemStack(item6);
+                itemStack12 = new ItemStack(item6); // MagmaCube - decompile error
             } else if (entity instanceof Boat) {
-                ItemStack itemStack8 = new ItemStack(((Boat)entity).getDropItem());
+                itemStack12 = new ItemStack(((Boat)entity).getDropItem()); // MagmaCube - decompile error
             } else if (entity instanceof ArmorStand) {
-                ItemStack itemStack9 = new ItemStack(Items.ARMOR_STAND);
+                itemStack12 = new ItemStack(Items.ARMOR_STAND); // MagmaCube - decompile error
             } else if (entity instanceof EndCrystal) {
-                ItemStack itemStack10 = new ItemStack(Items.END_CRYSTAL);
+                itemStack12 = new ItemStack(Items.END_CRYSTAL); // MagmaCube - decompile error
             } else {
                 SpawnEggItem spawnEggItem = SpawnEggItem.byId(entity.getType());
                 if (spawnEggItem == null) {
                     return;
                 }
-                ItemStack itemStack11 = new ItemStack(spawnEggItem);
+                itemStack12 = new ItemStack(spawnEggItem); // MagmaCube - decompile error
             }
         } else {
             return;
@@ -1910,10 +1911,12 @@ WindowEventHandler {
         crashReportCategory.setDetail("GL Caps", RenderSystem::getCapsString);
         crashReportCategory.setDetail("Using VBOs", () -> "Yes");
         crashReportCategory.setDetail("Is Modded", () -> {
-            String s = ClientBrandRetriever.getClientModName();
-            if (!"vanilla".equals(s)) {
-                return "Definitely; Client brand changed to '" + s + "'";
+            // MagmaCube start - decompile error
+            String clientModName = ClientBrandRetriever.getClientModName();
+            if (!"vanilla".equals(clientModName)) {
+                return "Definitely; Client brand changed to '" + clientModName + "'";
             }
+            // MagmaCube end - decompile error
             if (Minecraft.class.getSigners() == null) {
                 return "Very likely; Jar signature invalidated";
             }
@@ -1928,12 +1931,14 @@ WindowEventHandler {
             crashReportCategory.setDetail("Graphics mode", options.graphicsMode);
             crashReportCategory.setDetail("Resource Packs", () -> {
                 StringBuilder stringBuilder = new StringBuilder();
-                for (String s : options.resourcePacks) {
+                for (String resourcePack : options.resourcePacks) { // MagmaCube - decompile error
                     if (stringBuilder.length() > 0) {
                         stringBuilder.append(", ");
                     }
-                    stringBuilder.append(s);
-                    if (!options.incompatibleResourcePacks.contains(s)) continue;
+                    // MagmaCube start - decompile error
+                    stringBuilder.append(resourcePack);
+                    if (!options.incompatibleResourcePacks.contains(resourcePack)) continue;
+                    // MagmaCube end - decompile error
                     stringBuilder.append(" (incompatible)");
                 }
                 return stringBuilder.toString();
@@ -2281,15 +2286,6 @@ WindowEventHandler {
         this.modelManager.updateMaxMipLevel(i);
     }
 
-    private /* synthetic */ IntegratedServer lambda$doLoadLevel$27(RegistryAccess.RegistryHolder registryHolder, LevelStorageSource.LevelStorageAccess levelStorageAccess, ServerStem serverStem, WorldData worldData, MinecraftSessionService minecraftSessionService, GameProfileRepository gameProfileRepository, GameProfileCache gameProfileCache, Thread thread) {
-        return new IntegratedServer(thread, this, registryHolder, levelStorageAccess, serverStem.packRepository(), serverStem.serverResources(), worldData, minecraftSessionService, gameProfileRepository, gameProfileCache, i -> {
-            StoringChunkProgressListener storingChunkProgressListener = new StoringChunkProgressListener(i + 0);
-            storingChunkProgressListener.start();
-            this.progressListener.set(storingChunkProgressListener);
-            return new ProcessorChunkProgressListener(storingChunkProgressListener, this.progressTasks::add);
-        });
-    }
-
     static {
         LOGGER = LogManager.getLogger();
         ON_OSX = Util.getPlatform() == Util.OS.OSX;
diff --git a/src/main/java/net/minecraft/client/Options.java b/src/main/java/net/minecraft/client/Options.java
index dc40e1cb7e67a1ac9004a325cc7218c844cde88f..f7654e594834f5874a172436fa010890838b8e65 100644
--- a/src/main/java/net/minecraft/client/Options.java
+++ b/src/main/java/net/minecraft/client/Options.java
@@ -77,7 +77,7 @@ public class Options {
     public boolean hideServerAddress;
     public boolean advancedItemTooltips;
     public boolean pauseOnLostFocus = true;
-    private final Set<PlayerModelPart> modelParts = Sets.newHashSet((Object[])PlayerModelPart.values());
+    private final Set<PlayerModelPart> modelParts = Sets.newHashSet(PlayerModelPart.values()); // MagmaCube - decompile error
     public HumanoidArm mainHand = HumanoidArm.RIGHT;
     public int overrideWidth;
     public int overrideHeight;
diff --git a/src/main/java/net/minecraft/client/color/block/BlockColors.java b/src/main/java/net/minecraft/client/color/block/BlockColors.java
index b34bc1461fc4bc9bab6c33dddbd6805f7ce7a496..e369cf575d6d9c7022f2209af1ef7240a9e99c9b 100644
--- a/src/main/java/net/minecraft/client/color/block/BlockColors.java
+++ b/src/main/java/net/minecraft/client/color/block/BlockColors.java
@@ -110,10 +110,10 @@ public class BlockColors {
     }
 
     private void addColoringState(Property<?> property, Block ... blocks) {
-        this.addColoringStates((Set<Property<?>>)ImmutableSet.of(property), blocks);
+        this.addColoringStates(ImmutableSet.of(property), blocks); // MagmaCube - decompile error
     }
 
     public Set<Property<?>> getColoringProperties(Block block) {
-        return (Set)this.coloringStates.getOrDefault(block, (Set<Property<?>>)ImmutableSet.of());
+        return (Set)this.coloringStates.getOrDefault(block, ImmutableSet.of()); // MagmaCube - decompile error
     }
 }
diff --git a/src/main/java/net/minecraft/client/gui/Font.java b/src/main/java/net/minecraft/client/gui/Font.java
index c2e0d2d3f2a1e1d523c40201bae82a09a76048ab..e5cf1062a88b953629bc5a6e42f5510896bf9890 100644
--- a/src/main/java/net/minecraft/client/gui/Font.java
+++ b/src/main/java/net/minecraft/client/gui/Font.java
@@ -251,7 +251,7 @@ public class Font
         
         private void addEffect(final BakedGlyph.Effect effect) {
             if (this.effects == null) {
-                this.effects = (List<BakedGlyph.Effect>)Lists.newArrayList();
+                this.effects = Lists.newArrayList(); // MagmaCube - decompile error
             }
             this.effects.add(effect);
         }
@@ -284,9 +284,11 @@ public class Font
             final float f7;
             if (textColor != null) {
                 final int i3 = textColor.getValue();
-                final float f2 = (i3 >> 16 & 0xFF) / 255.0f * this.dimFactor;
-                final float f3 = (i3 >> 8 & 0xFF) / 255.0f * this.dimFactor;
-                final float f4 = (i3 & 0xFF) / 255.0f * this.dimFactor;
+                // MagmaCube start - decompile error
+                f5 = (i3 >> 16 & 0xFF) / 255.0f * this.dimFactor;
+                f6 = (i3 >> 8 & 0xFF) / 255.0f * this.dimFactor;
+                f7 = (i3 & 0xFF) / 255.0f * this.dimFactor;
+                // MagmaCube end - decompile error
             }
             else {
                 f5 = this.r;
diff --git a/src/main/java/net/minecraft/client/gui/Gui.java b/src/main/java/net/minecraft/client/gui/Gui.java
index 0264f29b549754f8dff69aff035a2ec238fcf5d6..03af58ba08d9b5596dd93e775b88f48c303cbf72 100644
--- a/src/main/java/net/minecraft/client/gui/Gui.java
+++ b/src/main/java/net/minecraft/client/gui/Gui.java
@@ -232,7 +232,7 @@ extends GuiComponent {
                 }
                 if (i3 > 8) {
                     RenderSystem.pushMatrix();
-                    RenderSystem.translatef(this.screenWidth / 2, this.screenHeight - 68, 0.0f);
+                    RenderSystem.translatef((float) this.screenWidth / 2, this.screenHeight - 68, 0.0f); // MagmaCube - math
                     RenderSystem.enableBlend();
                     RenderSystem.defaultBlendFunc();
                     int i4 = 0xFFFFFF;
@@ -261,7 +261,7 @@ extends GuiComponent {
                 }
                 if ((i7 = Mth.clamp(i7, 0, 255)) > 8) {
                     RenderSystem.pushMatrix();
-                    RenderSystem.translatef(this.screenWidth / 2, this.screenHeight / 2, 0.0f);
+                    RenderSystem.translatef((float) this.screenWidth / 2, (float) this.screenHeight / 2, 0.0f); // MagmaCube - decompile error
                     RenderSystem.enableBlend();
                     RenderSystem.defaultBlendFunc();
                     RenderSystem.pushMatrix();
@@ -335,7 +335,7 @@ extends GuiComponent {
         }
         if (options.renderDebug && !options.hideGui && !this.minecraft.player.isReducedDebugInfo() && !options.reducedDebugInfo) {
             RenderSystem.pushMatrix();
-            RenderSystem.translatef(this.screenWidth / 2, this.screenHeight / 2, this.getBlitOffset());
+            RenderSystem.translatef((float) this.screenWidth / 2, (float) this.screenHeight / 2, this.getBlitOffset()); // MagmaCube - math
             Camera camera = this.minecraft.gameRenderer.getMainCamera();
             RenderSystem.rotatef(camera.getXRot(), -1.0f, 0.0f, 0.0f);
             RenderSystem.rotatef(camera.getYRot(), 0.0f, 1.0f, 0.0f);
@@ -390,7 +390,7 @@ extends GuiComponent {
         int i = 0;
         int i2 = 0;
         MobEffectTextureManager mobEffectTextureManager = this.minecraft.getMobEffectTextures();
-        ArrayList list = Lists.newArrayListWithExpectedSize((int)collection.size());
+        ArrayList<Runnable> list = Lists.newArrayListWithExpectedSize((int)collection.size()); // MagmaCube - type
         this.minecraft.getTextureManager().bind(AbstractContainerScreen.INVENTORY_LOCATION);
         for (MobEffectInstance mobEffectInstance : Ordering.natural().reverse().sortedCopy(collection)) {
             MobEffect mobEffect = mobEffectInstance.getEffect();
@@ -561,10 +561,10 @@ extends GuiComponent {
     }
 
     public void renderDemoOverlay(PoseStack poseStack) {
-        TranslatableComponent component2;
+        Component component2; // MagmaCube - decompile error
         this.minecraft.getProfiler().push("demo");
         if (this.minecraft.level.getGameTime() >= 120500L) {
-            Component component = DEMO_EXPIRED_TEXT;
+            component2 = DEMO_EXPIRED_TEXT; // MagmaCube - decompile error
         } else {
             component2 = new TranslatableComponent("demo.remainingTime", StringUtil.formatTickDuration((int)(120500L - this.minecraft.level.getGameTime())));
         }
@@ -576,10 +576,10 @@ extends GuiComponent {
     private void displayScoreboardSidebar(PoseStack poseStack, Objective objective) {
         int i;
         Scoreboard scoreboard = objective.getScoreboard();
-        List<Object> collection = scoreboard.getPlayerScores(objective);
+        Collection<Score> collection = scoreboard.getPlayerScores(objective); // MagmaCube - type
         List list = collection.stream().filter(score -> score.getOwner() != null && !score.getOwner().startsWith("#")).collect(Collectors.toList());
         collection = list.size() > 15 ? Lists.newArrayList((Iterable)Iterables.skip(list, (int)(collection.size() - 15))) : list;
-        ArrayList list2 = Lists.newArrayListWithCapacity((int)collection.size());
+        ArrayList<Pair<Score, Component>> list2 = Lists.newArrayListWithCapacity((int)collection.size()); // MagmaCube - type
         Component component = objective.getDisplayName();
         int i2 = i = this.getFont().width(component);
         int i3 = this.getFont().width(": ");
@@ -615,7 +615,7 @@ extends GuiComponent {
             Gui.fill(poseStack, i11 - 2, i12 - 9 - 1, i13, i12 - 1, i10);
             Gui.fill(poseStack, i11 - 2, i12 - 1, i13, i12, i9);
             Font font = this.getFont();
-            float f = i11 + i2 / 2 - i / 2;
+            float f = i11 + (float) i2 / 2 - (float) i / 2; // MagmaCube - math
             this.getFont().getClass();
             font.draw(poseStack, component, f, (float)(i12 - 9), -1);
         }
diff --git a/src/main/java/net/minecraft/client/gui/components/AbstractSelectionList.java b/src/main/java/net/minecraft/client/gui/components/AbstractSelectionList.java
index 15327755a5a9015061e5774d7870de79ce22a94b..6ca13687dddb847eab85a65945c61d075bf7ba1d 100644
--- a/src/main/java/net/minecraft/client/gui/components/AbstractSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/components/AbstractSelectionList.java
@@ -20,7 +20,7 @@ import net.minecraft.client.gui.components.events.AbstractContainerEventHandler;
 import net.minecraft.client.gui.components.events.GuiEventListener;
 import net.minecraft.util.Mth;
 
-public abstract class AbstractSelectionList<E extends Entry<E>>
+public abstract class AbstractSelectionList<E extends AbstractSelectionList.Entry<E>> // MagmaCube - decompile error
 extends AbstractContainerEventHandler
 implements Widget {
     protected final Minecraft minecraft;
@@ -256,7 +256,7 @@ implements Widget {
     }
 
     protected void centerScrollOn(E entry) {
-        this.setScrollAmount(this.children().indexOf(entry) * this.itemHeight + this.itemHeight / 2 - (this.y1 - this.y0) / 2);
+        this.setScrollAmount((double)(this.children().indexOf(entry) * this.itemHeight + this.itemHeight / 2 - (this.y1 - this.y0) / 2)); // MagmaCube - math
     }
 
     protected void ensureVisible(E entry) {
@@ -386,7 +386,7 @@ implements Widget {
             int i3;
             int i2 = this.children().indexOf(this.getSelected());
             while (i2 != (i3 = Mth.clamp(i2 + i, 0, this.getItemCount() - 1))) {
-                Entry entry = (Entry)this.children().get(i3);
+                E entry = this.children().get(i3); // MagmaCube - decompile error
                 if (predicate.test(entry)) {
                     this.setSelected(entry);
                     this.ensureVisible(entry);
@@ -462,7 +462,7 @@ implements Widget {
 
     protected E remove(int i) {
         Entry entry = (Entry)this.children.get(i);
-        if (this.removeEntry((Entry)this.children.get(i))) {
+        if (this.removeEntry(this.children.get(i))) { // MagmaCube - decompile error
             return (E)entry;
         }
         return null;
@@ -480,12 +480,6 @@ implements Widget {
         ((Entry)entry).list = this;
     }
 
-    @Override
-    @Nullable
-    public /* synthetic */ GuiEventListener getFocused() {
-        return this.getFocused();
-    }
-
     class TrackedList
     extends AbstractList<E> {
         private final List<E> delegate = Lists.newArrayList();
@@ -495,7 +489,7 @@ implements Widget {
 
         @Override
         public E get(int i) {
-            return (Entry)this.delegate.get(i);
+            return this.delegate.get(i); // MagmaCube - decompile error
         }
 
         @Override
@@ -505,7 +499,7 @@ implements Widget {
 
         @Override
         public E set(int i, E entry) {
-            Entry entry2 = (Entry)this.delegate.set(i, entry);
+            E entry2 = this.delegate.set(i, entry); // MagmaCube - decompile error
             AbstractSelectionList.this.bindEntryToSelf(entry);
             return entry2;
         }
@@ -518,27 +512,7 @@ implements Widget {
 
         @Override
         public E remove(int i) {
-            return (Entry)this.delegate.remove(i);
-        }
-
-        @Override
-        public /* synthetic */ Object remove(int n) {
-            return this.remove(n);
-        }
-
-        @Override
-        public /* synthetic */ void add(int n, Object object) {
-            this.add(n, (E)((Entry)object));
-        }
-
-        @Override
-        public /* synthetic */ Object set(int n, Object object) {
-            return this.set(n, (E)((Entry)object));
-        }
-
-        @Override
-        public /* synthetic */ Object get(int n) {
-            return this.get(n);
+            return this.delegate.remove(i); // MagmaCube - decompile error
         }
     }
 
diff --git a/src/main/java/net/minecraft/client/gui/components/ContainerObjectSelectionList.java b/src/main/java/net/minecraft/client/gui/components/ContainerObjectSelectionList.java
index 940db313dbb00eb867ccd6eaa3eb09b6d9dbfdf9..f23b1ac2560aa3df22d7f0566ac4b764fb9ce68a 100644
--- a/src/main/java/net/minecraft/client/gui/components/ContainerObjectSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/components/ContainerObjectSelectionList.java
@@ -6,7 +6,7 @@ import net.minecraft.client.gui.components.AbstractSelectionList;
 import net.minecraft.client.gui.components.events.ContainerEventHandler;
 import net.minecraft.client.gui.components.events.GuiEventListener;
 
-public abstract class ContainerObjectSelectionList<E extends Entry<E>>
+public abstract class ContainerObjectSelectionList<E extends ContainerObjectSelectionList.Entry<E>> // MagmaCube - decompile fix
 extends AbstractSelectionList<E> {
     public ContainerObjectSelectionList(Minecraft minecraft, int i, int i2, int i3, int i4, int i5) {
         super(minecraft, i, i2, i3, i4, i5);
diff --git a/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java b/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
index aed8ce4821d7f76393c9e2a5a98faec3166dfdde..6941338f10ad847938f62e5c4025f437ce1df0a6 100644
--- a/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
+++ b/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
@@ -12,6 +12,7 @@ import com.mojang.blaze3d.vertex.Tesselator;
 import com.mojang.datafixers.DataFixUtils;
 import com.mojang.math.Matrix4f;
 import com.mojang.math.Transformation;
+import it.unimi.dsi.fastutil.longs.LongSet;
 import it.unimi.dsi.fastutil.longs.LongSets;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import java.util.ArrayList;
@@ -154,31 +155,31 @@ extends GuiComponent {
         float f = connection.getAverageSentPackets();
         float f2 = connection.getAverageReceivedPackets();
         if (integratedServer != null) {
-            String s = String.format("Integrated server @ %.0f ms ticks, %.0f tx, %.0f rx", Float.valueOf(integratedServer.getAverageTickTime()), Float.valueOf(f), Float.valueOf(f2));
+            s2 = String.format("Integrated server @ %.0f ms ticks, %.0f tx, %.0f rx", Float.valueOf(integratedServer.getAverageTickTime()), Float.valueOf(f), Float.valueOf(f2)); // MagmaCube - decompile error
         } else {
             s2 = String.format("\"%s\" server, %.0f tx, %.0f rx", this.minecraft.player.getServerBrand(), Float.valueOf(f), Float.valueOf(f2));
         }
         BlockPos blockPos = this.minecraft.getCameraEntity().blockPosition();
         if (this.minecraft.showOnlyReducedInfo()) {
-            return Lists.newArrayList((Object[])new String[]{"Minecraft " + SharedConstants.getCurrentVersion().getName() + " (" + this.minecraft.getLaunchedVersion() + "/" + ClientBrandRetriever.getClientModName() + ")", this.minecraft.fpsString, s2, this.minecraft.levelRenderer.getChunkStatistics(), this.minecraft.levelRenderer.getEntityStatistics(), "P: " + this.minecraft.particleEngine.countParticles() + ". T: " + this.minecraft.level.getEntityCount(), this.minecraft.level.gatherChunkSourceStats(), "", String.format("Chunk-relative: %d %d %d", blockPos.getX() & 0xF, blockPos.getY() & 0xF, blockPos.getZ() & 0xF)});
+            return Lists.newArrayList(new String[]{"Minecraft " + SharedConstants.getCurrentVersion().getName() + " (" + this.minecraft.getLaunchedVersion() + "/" + ClientBrandRetriever.getClientModName() + ")", this.minecraft.fpsString, s2, this.minecraft.levelRenderer.getChunkStatistics(), this.minecraft.levelRenderer.getEntityStatistics(), "P: " + this.minecraft.particleEngine.countParticles() + ". T: " + this.minecraft.level.getEntityCount(), this.minecraft.level.gatherChunkSourceStats(), "", String.format("Chunk-relative: %d %d %d", blockPos.getX() & 0xF, blockPos.getY() & 0xF, blockPos.getZ() & 0xF)}); // MagmaCube - decompile error
         }
         Entity entity = this.minecraft.getCameraEntity();
         Direction direction = entity.getDirection();
         switch (direction) {
             case NORTH: {
-                String s3 = "Towards negative Z";
+                s7 = "Towards negative Z"; // MagmaCube - decompile error
                 break;
             }
             case SOUTH: {
-                String s4 = "Towards positive Z";
+                s7 = "Towards positive Z"; // MagmaCube - decompile error
                 break;
             }
             case WEST: {
-                String s5 = "Towards negative X";
+                s7 = "Towards negative X"; // MagmaCube - decompile error
                 break;
             }
             case EAST: {
-                String s6 = "Towards positive X";
+                s7 = "Towards positive X"; // MagmaCube - decompile error
                 break;
             }
             default: {
@@ -190,7 +191,7 @@ extends GuiComponent {
             this.lastPos = chunkPos;
             this.clearChunkCache();
         }
-        LongSets.EmptySet longSet = (level = this.getLevel()) instanceof ServerLevel ? ((ServerLevel)level).getForcedChunks() : LongSets.EMPTY_SET;
+        LongSet longSet = (level = this.getLevel()) instanceof ServerLevel ? ((ServerLevel)level).getForcedChunks() : LongSets.EMPTY_SET; // MagmaCube - decompile error
         ArrayList list = Lists.newArrayList((Object[])new String[]{"Minecraft " + SharedConstants.getCurrentVersion().getName() + " (" + this.minecraft.getLaunchedVersion() + "/" + ClientBrandRetriever.getClientModName() + ("release".equalsIgnoreCase(this.minecraft.getVersionType()) ? "" : "/" + this.minecraft.getVersionType()) + ")", this.minecraft.fpsString, s2, this.minecraft.levelRenderer.getChunkStatistics(), this.minecraft.levelRenderer.getEntityStatistics(), "P: " + this.minecraft.particleEngine.countParticles() + ". T: " + this.minecraft.level.getEntityCount(), this.minecraft.level.gatherChunkSourceStats()});
         String s8 = this.getServerChunkStats();
         if (s8 != null) {
diff --git a/src/main/java/net/minecraft/client/gui/components/OptionsList.java b/src/main/java/net/minecraft/client/gui/components/OptionsList.java
index 59361c9002f72ac8220ae57d19ed8e9c82d2dd00..c8a07d1400c704ccb457bd15bed235577d7f14e7 100644
--- a/src/main/java/net/minecraft/client/gui/components/OptionsList.java
+++ b/src/main/java/net/minecraft/client/gui/components/OptionsList.java
@@ -14,7 +14,7 @@ import net.minecraft.client.gui.components.OptionButton;
 import net.minecraft.client.gui.components.events.GuiEventListener;
 
 public class OptionsList
-extends ContainerObjectSelectionList<Entry> {
+extends ContainerObjectSelectionList<OptionsList.Entry> { // MagmaCube - decompile error
     public OptionsList(Minecraft minecraft, int i, int i2, int i3, int i4, int i5) {
         super(minecraft, i, i2, i3, i4, i5);
         this.centerListVertically = false;
diff --git a/src/main/java/net/minecraft/client/gui/components/PlayerTabOverlay.java b/src/main/java/net/minecraft/client/gui/components/PlayerTabOverlay.java
index 7ea468ae72c061718ee1d5f81ecf97fd86c31405..4fa3485e5935f346b4d5a48fb6702a0a5095fb75 100644
--- a/src/main/java/net/minecraft/client/gui/components/PlayerTabOverlay.java
+++ b/src/main/java/net/minecraft/client/gui/components/PlayerTabOverlay.java
@@ -66,7 +66,7 @@ extends GuiComponent {
         boolean flag;
         int i5;
         ClientPacketListener clientPacketListener = this.minecraft.player.connection;
-        List list = PLAYER_ORDERING.sortedCopy(clientPacketListener.getOnlinePlayers());
+        List<PlayerInfo> list = PLAYER_ORDERING.sortedCopy(clientPacketListener.getOnlinePlayers()); // MagmaCube - decompile error
         int i2 = 0;
         int i3 = 0;
         for (PlayerInfo playerInfo : list) {
@@ -85,9 +85,9 @@ extends GuiComponent {
         boolean bl = flag = this.minecraft.isLocalServer() || this.minecraft.getConnection().getConnection().isEncrypted();
         if (objective != null) {
             if (objective.getRenderType() == ObjectiveCriteria.RenderType.HEARTS) {
-                int i8 = 90;
+                i10 = 90; // MagmaCube - decompile error
             } else {
-                int i9 = i3;
+                i10 = i3; // MagmaCube - decompile error
             }
         } else {
             i10 = 0;
@@ -182,15 +182,15 @@ extends GuiComponent {
         this.minecraft.getTextureManager().bind(GUI_ICONS_LOCATION);
         boolean i4 = false;
         if (playerInfo.getLatency() < 0) {
-            int i5 = 5;
+            i10 = 5; // MagmaCube - decompile error
         } else if (playerInfo.getLatency() < 150) {
-            boolean i6 = false;
+            i10 = 0; // MagmaCube - decompile error
         } else if (playerInfo.getLatency() < 300) {
-            boolean i7 = true;
+            i10 = 1; // MagmaCube - decompile error
         } else if (playerInfo.getLatency() < 600) {
-            int i8 = 2;
+            i10 = 2; // MagmaCube - decompile error
         } else if (playerInfo.getLatency() < 1000) {
-            int i9 = 3;
+            i10 = 3; // MagmaCube - decompile error
         } else {
             i10 = 4;
         }
@@ -222,7 +222,7 @@ extends GuiComponent {
             playerInfo.setRenderVisibilityId(this.visibilityId);
             playerInfo.setLastHealth(i4);
             int i5 = Mth.ceil((float)Math.max(i4, playerInfo.getDisplayHealth()) / 2.0f);
-            int i6 = Math.max(Mth.ceil(i4 / 2), Math.max(Mth.ceil(playerInfo.getDisplayHealth() / 2), 10));
+            int i6 = Math.max(Mth.ceil((float) i4 / 2), Math.max(Mth.ceil((float) playerInfo.getDisplayHealth() / 2), 10)); // MagmaCube - math
             boolean bl = flag = playerInfo.getHealthBlinkTime() > (long)this.gui.getGuiTicks() && (playerInfo.getHealthBlinkTime() - (long)this.gui.getGuiTicks()) / 3L % 2L == 1L;
             if (i5 > 0) {
                 int i7 = Mth.floor(Math.min((float)(i3 - i2 - 4) / (float)i6, 9.0f));
@@ -286,10 +286,5 @@ extends GuiComponent {
             PlayerTeam playerTeam2 = playerInfo2.getTeam();
             return ComparisonChain.start().compareTrueFirst(playerInfo.getGameMode() != GameType.SPECTATOR, playerInfo2.getGameMode() != GameType.SPECTATOR).compare((Comparable)((playerTeam != null ? playerTeam.getName() : "")), (Comparable)((playerTeam2 != null ? playerTeam2.getName() : ""))).compare(playerInfo.getProfile().getName(), playerInfo2.getProfile().getName(), String::compareToIgnoreCase).result();
         }
-
-        @Override
-        public /* synthetic */ int compare(Object object, Object object2) {
-            return this.compare((PlayerInfo)object, (PlayerInfo)object2);
-        }
     }
 }
diff --git a/src/main/java/net/minecraft/client/gui/components/events/ContainerEventHandler.java b/src/main/java/net/minecraft/client/gui/components/events/ContainerEventHandler.java
index a2fa12fe0aae0afa3d98c017aba8d8c4f2d63020..29862a7f756efa7c3678c1fc39d0c0ac4fc1e000 100644
--- a/src/main/java/net/minecraft/client/gui/components/events/ContainerEventHandler.java
+++ b/src/main/java/net/minecraft/client/gui/components/events/ContainerEventHandler.java
@@ -87,17 +87,17 @@ public interface ContainerEventHandler extends GuiEventListener
         final int i = list.indexOf(guiEventListener);
         final int i4;
         if (flag2 && i >= 0) {
-            final int i2 = i + (flag ? 1 : 0);
+            i4 = i + (flag ? 1 : 0); // MagmaCube - decompile error
         }
         else if (flag) {
-            final int i3 = 0;
+            i4 = 0; // MagmaCube - decompile error
         }
         else {
             i4 = list.size();
         }
         final ListIterator<? extends GuiEventListener> listIterator = list.listIterator(i4);
         final BooleanSupplier booleanSupplier = flag ? listIterator::hasNext : listIterator::hasPrevious;
-        final Supplier<? extends GuiEventListener> supplier = (Supplier<? extends GuiEventListener>)(flag ? listIterator::next : listIterator::previous);
+        final Supplier<? extends GuiEventListener> supplier = (flag ? listIterator::next : listIterator::previous); // MagmaCube - decompile error
         while (booleanSupplier.getAsBoolean()) {
             final GuiEventListener guiEventListener2 = (GuiEventListener)supplier.get();
             if (guiEventListener2.changeFocus(flag)) {
diff --git a/src/main/java/net/minecraft/client/gui/components/toasts/SystemToast.java b/src/main/java/net/minecraft/client/gui/components/toasts/SystemToast.java
index bfdc1409e3b99c199f690b1328f2a139b0b003dd..68cb6c0ed2689afc1e2aaa7e5ea0f335231bf609 100644
--- a/src/main/java/net/minecraft/client/gui/components/toasts/SystemToast.java
+++ b/src/main/java/net/minecraft/client/gui/components/toasts/SystemToast.java
@@ -128,11 +128,6 @@ implements Toast {
         SystemToast.add(minecraft.getToasts(), SystemToastIds.PACK_COPY_FAILURE, new TranslatableComponent("pack.copyFailure"), new TextComponent(s));
     }
 
-    @Override
-    public /* synthetic */ Object getToken() {
-        return this.getToken();
-    }
-
     public static enum SystemToastIds {
         TUTORIAL_HINT,
         NARRATOR_TOGGLE,
diff --git a/src/main/java/net/minecraft/client/gui/components/toasts/Toast.java b/src/main/java/net/minecraft/client/gui/components/toasts/Toast.java
index fd88ea9410ec1a2ed4860f87845cc05f8d88e1c2..439b8b392679eb10ba658c027fc1281b86b516e1 100644
--- a/src/main/java/net/minecraft/client/gui/components/toasts/Toast.java
+++ b/src/main/java/net/minecraft/client/gui/components/toasts/Toast.java
@@ -1,7 +1,6 @@
 package net.minecraft.client.gui.components.toasts;
 
 import net.minecraft.sounds.SoundEvents;
-import net.minecraft.client.resources.sounds.SoundInstance;
 import net.minecraft.client.resources.sounds.SimpleSoundInstance;
 import net.minecraft.client.sounds.SoundManager;
 import net.minecraft.sounds.SoundEvent;
diff --git a/src/main/java/net/minecraft/client/gui/components/toasts/ToastComponent.java b/src/main/java/net/minecraft/client/gui/components/toasts/ToastComponent.java
index 86ea8bbe36ad593a1bce25b2dbbec8339ce7b25f..7f1ede4a2b1cb4e0be188d0713b62fd6269b6324 100644
--- a/src/main/java/net/minecraft/client/gui/components/toasts/ToastComponent.java
+++ b/src/main/java/net/minecraft/client/gui/components/toasts/ToastComponent.java
@@ -32,7 +32,7 @@ extends GuiComponent {
                 this.visible[i] = null;
             }
             if (this.visible[i] != null || this.queued.isEmpty()) continue;
-            this.visible[i] = new ToastInstance(this, this.queued.removeFirst());
+            this.visible[i] = new ToastInstance(this.queued.removeFirst()); // MagmaCube - decompile error
         }
     }
 
@@ -62,15 +62,13 @@ extends GuiComponent {
         return this.minecraft;
     }
 
-    static class ToastInstance<T extends Toast> {
+    class ToastInstance<T extends Toast> { // MagmaCube - not static
         private final T toast;
         private long animationTime = -1L;
         private long visibleTime = -1L;
         private Toast.Visibility visibility = Toast.Visibility.SHOW;
-        final /* synthetic */ ToastComponent this$0;
 
         private ToastInstance(T toast) {
-            this.this$0 = var1_1;
             this.toast = toast;
         }
 
@@ -91,19 +89,19 @@ extends GuiComponent {
             long l = Util.getMillis();
             if (this.animationTime == -1L) {
                 this.animationTime = l;
-                this.visibility.playSound(this.this$0.minecraft.getSoundManager());
+                this.visibility.playSound(ToastComponent.this.minecraft.getSoundManager()); // MagmaCube - decompile error
             }
             if (this.visibility == Toast.Visibility.SHOW && l - this.animationTime <= 600L) {
                 this.visibleTime = l;
             }
             RenderSystem.pushMatrix();
             RenderSystem.translatef((float)i - (float)this.toast.width() * this.getVisibility(l), i2 * this.toast.height(), 800 + i2);
-            Toast.Visibility visibility = this.toast.render(poseStack, this.this$0, l - this.visibleTime);
+            Toast.Visibility visibility = this.toast.render(poseStack, ToastComponent.this, l - this.visibleTime); // MagmaCube - decompile error
             RenderSystem.popMatrix();
             if (visibility != this.visibility) {
                 this.animationTime = l - (long)((int)((1.0f - this.getVisibility(l)) * 600.0f));
                 this.visibility = visibility;
-                this.visibility.playSound(this.this$0.minecraft.getSoundManager());
+                this.visibility.playSound(ToastComponent.this.minecraft.getSoundManager()); // MagmaCube - decompile error
             }
             return this.visibility == Toast.Visibility.HIDE && l - this.animationTime > 600L;
         }
diff --git a/src/main/java/net/minecraft/client/gui/font/FontManager.java b/src/main/java/net/minecraft/client/gui/font/FontManager.java
index d40183ea95ea404217a27151e1c481812c1eeac5..a8642927a85c11b7005949fab16d845aef7a901c 100644
--- a/src/main/java/net/minecraft/client/gui/font/FontManager.java
+++ b/src/main/java/net/minecraft/client/gui/font/FontManager.java
@@ -32,6 +32,8 @@ import com.google.common.collect.Maps;
 import net.minecraft.server.packs.resources.PreparableReloadListener;
 import net.minecraft.client.renderer.texture.TextureManager;
 import java.util.Map;
+import java.util.function.IntConsumer;
+
 import net.minecraft.resources.ResourceLocation;
 import org.apache.logging.log4j.Logger;
 
@@ -46,18 +48,18 @@ public class FontManager implements AutoCloseable
     private final PreparableReloadListener reloadListener;
     
     public FontManager(final TextureManager textureManager) {
-        this.fontSets = (Map<ResourceLocation, FontSet>)Maps.newHashMap();
-        this.renames = (Map<ResourceLocation, ResourceLocation>)ImmutableMap.of();
+        this.fontSets = Maps.newHashMap(); // MagmaCube - decompile error
+        this.renames = ImmutableMap.of(); // MagmaCube - decompile error
         this.reloadListener = new SimplePreparableReloadListener<Map<ResourceLocation, List<GlyphProvider>>>() {
             @Override
             protected Map<ResourceLocation, List<GlyphProvider>> prepare(final ResourceManager resourceManager, final ProfilerFiller profilerFiller) {
                 profilerFiller.startTick();
                 final Gson gson = new GsonBuilder().setPrettyPrinting().disableHtmlEscaping().create();
-                final Map<ResourceLocation, List<GlyphProvider>> map = (Map<ResourceLocation, List<GlyphProvider>>)Maps.newHashMap();
+                final Map<ResourceLocation, List<GlyphProvider>> map = Maps.newHashMap(); // MagmaCube - decompile error
                 for (final ResourceLocation resourceLocation : resourceManager.listResources("font", s -> s.endsWith(".json"))) {
                     final String s2 = resourceLocation.getPath();
                     final ResourceLocation resourceLocation2 = new ResourceLocation(resourceLocation.getNamespace(), s2.substring("font/".length(), s2.length() - ".json".length()));
-                    final List<GlyphProvider> list = map.computeIfAbsent(resourceLocation2, resourceLocation -> Lists.newArrayList((Object[])new GlyphProvider[] { new AllMissingGlyphProvider() }));
+                    final List<GlyphProvider> list = map.computeIfAbsent(resourceLocation2, resourceLocation1 -> Lists.newArrayList(new GlyphProvider[] { new AllMissingGlyphProvider() })); // MagmaCube - decompile error
                     profilerFiller.push(resourceLocation2::toString);
                     try {
                         for (final Resource resource : resourceManager.getResources(resourceLocation)) {
@@ -99,17 +101,14 @@ public class FontManager implements AutoCloseable
                     for (final GlyphProvider glyphProvider2 : list) {
                         intSet.addAll((IntCollection)glyphProvider2.getSupportedGlyphs());
                     }
-                    final List list2;
-                    final Iterator<GlyphProvider> iterator4;
-                    GlyphProvider glyphProvider3;
-                    intSet.forEach(i -> {
+                    intSet.forEach((IntConsumer) i -> { // MagmaCube - decompile error
                         if (i == 32) {
                             return;
                         }
                         else {
-                            Lists.reverse(list2).iterator();
+                            Iterator<GlyphProvider> iterator4 = Lists.reverse(list).iterator(); // MagmaCube - decompile error
                             while (iterator4.hasNext()) {
-                                glyphProvider3 = iterator4.next();
+                                GlyphProvider glyphProvider3 = iterator4.next(); // MagmaCube - decompile error
                                 if (glyphProvider3.getGlyph(i) != null) {
                                     break;
                                 }
@@ -131,9 +130,8 @@ public class FontManager implements AutoCloseable
                 FontManager.this.fontSets.values().forEach(FontSet::close);
                 FontManager.this.fontSets.clear();
                 profilerFiller.popPush("reloading");
-                final FontSet fontSet;
                 map.forEach((resourceLocation, list) -> {
-                    fontSet = new FontSet(FontManager.this.textureManager, resourceLocation);
+                    FontSet fontSet = new FontSet(FontManager.this.textureManager, resourceLocation); // MagmaCube - decompile error
                     fontSet.reload(Lists.reverse(list));
                     FontManager.this.fontSets.put(resourceLocation, fontSet);
                     return;
@@ -148,7 +146,7 @@ public class FontManager implements AutoCloseable
             }
         };
         this.textureManager = textureManager;
-        this.missingFontSet = Util.make(new FontSet(textureManager, FontManager.MISSING_FONT), fontSet -> fontSet.reload(Lists.newArrayList((Object[])new GlyphProvider[] { new AllMissingGlyphProvider() })));
+        this.missingFontSet = Util.make(new FontSet(textureManager, FontManager.MISSING_FONT), fontSet -> fontSet.reload(Lists.newArrayList(new GlyphProvider[] { new AllMissingGlyphProvider() }))); // MagmaCube - decompile error
     }
     
     public void setRenames(final Map<ResourceLocation, ResourceLocation> map) {
diff --git a/src/main/java/net/minecraft/client/gui/font/FontSet.java b/src/main/java/net/minecraft/client/gui/font/FontSet.java
index 06f0ea43c7a5496cfc7ecef5494b2caa268b48a0..f05707d206cdaa6e7ad0e83649791252bb3bcc22 100644
--- a/src/main/java/net/minecraft/client/gui/font/FontSet.java
+++ b/src/main/java/net/minecraft/client/gui/font/FontSet.java
@@ -5,6 +5,7 @@ import java.util.Set;
 import java.util.Iterator;
 import it.unimi.dsi.fastutil.ints.IntSet;
 import java.util.function.Consumer;
+import java.util.function.IntConsumer;
 import java.util.function.Predicate;
 import it.unimi.dsi.fastutil.ints.IntArrayList;
 import net.minecraft.util.Mth;
@@ -43,11 +44,13 @@ public class FontSet implements AutoCloseable
     private final List<FontTexture> textures;
     
     public FontSet(final TextureManager textureManager, final ResourceLocation resourceLocation) {
-        this.providers = (List<GlyphProvider>)Lists.newArrayList();
-        this.glyphs = (Int2ObjectMap<BakedGlyph>)new Int2ObjectOpenHashMap();
-        this.glyphInfos = (Int2ObjectMap<GlyphInfo>)new Int2ObjectOpenHashMap();
-        this.glyphsByWidth = (Int2ObjectMap<IntList>)new Int2ObjectOpenHashMap();
-        this.textures = (List<FontTexture>)Lists.newArrayList();
+        // MagmaCube start - decompile error
+        this.providers = Lists.newArrayList();
+        this.glyphs = new Int2ObjectOpenHashMap<>();
+        this.glyphInfos = new Int2ObjectOpenHashMap<>();
+        this.glyphsByWidth = new Int2ObjectOpenHashMap<>();
+        this.textures = Lists.newArrayList();
+        // MagmaCube end - decompile error
         this.textureManager = textureManager;
         this.name = resourceLocation;
     }
@@ -64,20 +67,18 @@ public class FontSet implements AutoCloseable
         for (final GlyphProvider glyphProvider : list) {
             intSet.addAll((IntCollection)glyphProvider.getSupportedGlyphs());
         }
-        final Set<GlyphProvider> set = (Set<GlyphProvider>)Sets.newHashSet();
-        final Iterator<GlyphProvider> iterator2;
-        GlyphProvider glyphProvider2;
-        GlyphInfo glyphInfo;
-        final Set<GlyphProvider> set2;
-        intSet.forEach(i -> {
-            list.iterator();
+        // MagmaCube start - decompile error
+        final Set<GlyphProvider> set = Sets.newHashSet();
+        intSet.forEach((IntConsumer) i -> {
+            Iterator<GlyphProvider> iterator2 = list.iterator();
             while (iterator2.hasNext()) {
-                glyphProvider2 = iterator2.next();
-                glyphInfo = ((i == 32) ? FontSet.SPACE_INFO : glyphProvider2.getGlyph(i));
+                GlyphProvider glyphProvider2 = iterator2.next();
+                GlyphInfo glyphInfo = ((i == 32) ? FontSet.SPACE_INFO : glyphProvider2.getGlyph(i));
                 if (glyphInfo != null) {
-                    set2.add(glyphProvider2);
+                    set.add(glyphProvider2);
+                    // MagmaCube end - decompile error
                     if (glyphInfo != MissingGlyph.INSTANCE) {
-                        ((IntList)this.glyphsByWidth.computeIfAbsent(Mth.ceil(glyphInfo.getAdvance(false)), i -> new IntArrayList())).add(i);
+                        ((IntList)this.glyphsByWidth.computeIfAbsent(Mth.ceil(glyphInfo.getAdvance(false)), il -> new IntArrayList())).add(i); // MagmaCube - decompile error
                         break;
                     }
                     else {
@@ -111,7 +112,7 @@ public class FontSet implements AutoCloseable
     }
     
     public GlyphInfo getGlyphInfo(final int i) {
-        return (GlyphInfo)this.glyphInfos.computeIfAbsent(i, i -> (i == 32) ? FontSet.SPACE_INFO : this.getRaw(i));
+        return (GlyphInfo)this.glyphInfos.computeIfAbsent(i, il -> (il == 32) ? FontSet.SPACE_INFO : this.getRaw(il)); // MagmaCube - decompile error
     }
     
     private RawGlyph getRaw(final int i) {
@@ -125,7 +126,7 @@ public class FontSet implements AutoCloseable
     }
     
     public BakedGlyph getGlyph(final int i) {
-        return (BakedGlyph)this.glyphs.computeIfAbsent(i, i -> (i == 32) ? FontSet.SPACE_GLYPH : this.stitch(this.getRaw(i)));
+        return (BakedGlyph)this.glyphs.computeIfAbsent(i, il -> (il == 32) ? FontSet.SPACE_GLYPH : this.stitch(this.getRaw(il))); // MagmaCube - decompile error
     }
     
     private BakedGlyph stitch(final RawGlyph rawGlyph) {
diff --git a/src/main/java/net/minecraft/client/gui/screens/AccessibilityOptionsScreen.java b/src/main/java/net/minecraft/client/gui/screens/AccessibilityOptionsScreen.java
index f84373c3918f583b2f2a127393b68f76edf31016..cc9250fcf463984a6dc3fd1ebeaddd8aacf8ce78 100644
--- a/src/main/java/net/minecraft/client/gui/screens/AccessibilityOptionsScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/AccessibilityOptionsScreen.java
@@ -1,6 +1,8 @@
 package net.minecraft.client.gui.screens;
 
+import net.minecraft.Util;
 import net.minecraft.client.gui.components.Button;
+import net.minecraft.network.chat.CommonComponents;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.client.Options;
@@ -16,129 +18,13 @@ public class AccessibilityOptionsScreen extends SimpleOptionsSubScreen
     
     @Override
     protected void createFooter() {
-        // 
-        // This method could not be decompiled.
-        // 
-        // Original Bytecode:
-        // 
-        //     1: new             Lnet/minecraft/client/gui/components/Button;
-        //     4: dup            
-        //     5: aload_0         /* this */
-        //     6: getfield        net/minecraft/client/gui/screens/AccessibilityOptionsScreen.width:I
-        //     9: iconst_2       
-        //    10: idiv           
-        //    11: sipush          155
-        //    14: isub           
-        //    15: aload_0         /* this */
-        //    16: getfield        net/minecraft/client/gui/screens/AccessibilityOptionsScreen.height:I
-        //    19: bipush          27
-        //    21: isub           
-        //    22: sipush          150
-        //    25: bipush          20
-        //    27: new             Lnet/minecraft/network/chat/TranslatableComponent;
-        //    30: dup            
-        //    31: ldc             "options.accessibility.link"
-        //    33: invokespecial   net/minecraft/network/chat/TranslatableComponent.<init>:(Ljava/lang/String;)V
-        //    36: aload_0         /* this */
-        //    37: invokedynamic   BootstrapMethod #0, onPress:(Lnet/minecraft/client/gui/screens/AccessibilityOptionsScreen;)Lnet/minecraft/client/gui/components/Button$OnPress;
-        //    42: invokespecial   net/minecraft/client/gui/components/Button.<init>:(IIIILnet/minecraft/network/chat/Component;Lnet/minecraft/client/gui/components/Button$OnPress;)V
-        //    45: invokevirtual   net/minecraft/client/gui/screens/AccessibilityOptionsScreen.addButton:(Lnet/minecraft/client/gui/components/AbstractWidget;)Lnet/minecraft/client/gui/components/AbstractWidget;
-        //    48: pop            
-        //    49: aload_0         /* this */
-        //    50: new             Lnet/minecraft/client/gui/components/Button;
-        //    53: dup            
-        //    54: aload_0         /* this */
-        //    55: getfield        net/minecraft/client/gui/screens/AccessibilityOptionsScreen.width:I
-        //    58: iconst_2       
-        //    59: idiv           
-        //    60: iconst_5       
-        //    61: iadd           
-        //    62: aload_0         /* this */
-        //    63: getfield        net/minecraft/client/gui/screens/AccessibilityOptionsScreen.height:I
-        //    66: bipush          27
-        //    68: isub           
-        //    69: sipush          150
-        //    72: bipush          20
-        //    74: getstatic       net/minecraft/network/chat/CommonComponents.GUI_DONE:Lnet/minecraft/network/chat/Component;
-        //    77: aload_0         /* this */
-        //    78: invokedynamic   BootstrapMethod #1, onPress:(Lnet/minecraft/client/gui/screens/AccessibilityOptionsScreen;)Lnet/minecraft/client/gui/components/Button$OnPress;
-        //    83: invokespecial   net/minecraft/client/gui/components/Button.<init>:(IIIILnet/minecraft/network/chat/Component;Lnet/minecraft/client/gui/components/Button$OnPress;)V
-        //    86: invokevirtual   net/minecraft/client/gui/screens/AccessibilityOptionsScreen.addButton:(Lnet/minecraft/client/gui/components/AbstractWidget;)Lnet/minecraft/client/gui/components/AbstractWidget;
-        //    89: pop            
-        //    90: return         
-        // 
-        // The error that occurred was:
-        // 
-        // java.lang.IllegalArgumentException: Argument 'type' cannot be null.
-        //     at com.strobel.core.VerifyArgument.notNull(VerifyArgument.java:38)
-        //     at com.strobel.assembler.ir.attributes.LocalVariableTableEntry.<init>(LocalVariableTableEntry.java:41)
-        //     at com.strobel.assembler.ir.MetadataReader.readAttributeCore(MetadataReader.java:183)
-        //     at com.strobel.assembler.metadata.ClassFileReader.readAttributeCore(ClassFileReader.java:260)
-        //     at com.strobel.assembler.ir.MetadataReader.readAttribute(MetadataReader.java:50)
-        //     at com.strobel.assembler.ir.MetadataReader.readAttributes(MetadataReader.java:40)
-        //     at com.strobel.assembler.metadata.ClassFileReader.readAttributeCore(ClassFileReader.java:202)
-        //     at com.strobel.assembler.ir.MetadataReader.inflateAttribute(MetadataReader.java:368)
-        //     at com.strobel.assembler.ir.MetadataReader.inflateAttributes(MetadataReader.java:345)
-        //     at com.strobel.assembler.metadata.ClassFileReader.defineMethods(ClassFileReader.java:977)
-        //     at com.strobel.assembler.metadata.ClassFileReader.readClass(ClassFileReader.java:440)
-        //     at com.strobel.assembler.metadata.ClassFileReader.readClass(ClassFileReader.java:376)
-        //     at com.strobel.assembler.metadata.MetadataSystem.resolveType(MetadataSystem.java:124)
-        //     at com.strobel.decompiler.NoRetryMetadataSystem.resolveType(DecompilerDriver.java:482)
-        //     at com.strobel.assembler.metadata.MetadataSystem.resolveCore(MetadataSystem.java:76)
-        //     at com.strobel.assembler.metadata.MetadataResolver.resolve(MetadataResolver.java:104)
-        //     at com.strobel.assembler.metadata.CoreMetadataFactory$UnresolvedType.resolve(CoreMetadataFactory.java:614)
-        //     at com.strobel.assembler.metadata.MetadataResolver.resolve(MetadataResolver.java:91)
-        //     at com.strobel.assembler.metadata.CoreMetadataFactory$UnresolvedType.resolve(CoreMetadataFactory.java:614)
-        //     at com.strobel.assembler.metadata.ClassFileReader.populateNamedInnerTypes(ClassFileReader.java:697)
-        //     at com.strobel.assembler.metadata.ClassFileReader.readClass(ClassFileReader.java:441)
-        //     at com.strobel.assembler.metadata.ClassFileReader.readClass(ClassFileReader.java:376)
-        //     at com.strobel.assembler.metadata.MetadataSystem.resolveType(MetadataSystem.java:124)
-        //     at com.strobel.decompiler.NoRetryMetadataSystem.resolveType(DecompilerDriver.java:482)
-        //     at com.strobel.assembler.metadata.MetadataSystem.resolveCore(MetadataSystem.java:76)
-        //     at com.strobel.assembler.metadata.MetadataResolver.resolve(MetadataResolver.java:104)
-        //     at com.strobel.assembler.metadata.CoreMetadataFactory$UnresolvedType.resolve(CoreMetadataFactory.java:614)
-        //     at com.strobel.assembler.metadata.MetadataResolver.resolve(MetadataResolver.java:91)
-        //     at com.strobel.assembler.metadata.CoreMetadataFactory$UnresolvedType.resolve(CoreMetadataFactory.java:614)
-        //     at com.strobel.assembler.metadata.ClassFileReader.populateNamedInnerTypes(ClassFileReader.java:697)
-        //     at com.strobel.assembler.metadata.ClassFileReader.readClass(ClassFileReader.java:441)
-        //     at com.strobel.assembler.metadata.ClassFileReader.readClass(ClassFileReader.java:376)
-        //     at com.strobel.assembler.metadata.MetadataSystem.resolveType(MetadataSystem.java:124)
-        //     at com.strobel.decompiler.NoRetryMetadataSystem.resolveType(DecompilerDriver.java:482)
-        //     at com.strobel.assembler.metadata.MetadataSystem.resolveCore(MetadataSystem.java:76)
-        //     at com.strobel.assembler.metadata.MetadataResolver.resolve(MetadataResolver.java:104)
-        //     at com.strobel.assembler.metadata.CoreMetadataFactory$UnresolvedType.resolve(CoreMetadataFactory.java:614)
-        //     at com.strobel.assembler.metadata.MetadataResolver.resolve(MetadataResolver.java:128)
-        //     at com.strobel.assembler.metadata.CoreMetadataFactory$UnresolvedType.resolve(CoreMetadataFactory.java:624)
-        //     at com.strobel.assembler.metadata.MethodReference.resolve(MethodReference.java:177)
-        //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2428)
-        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
-        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
-        //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
-        //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:655)
-        //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:365)
-        //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
-        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
-        //     at com.strobel.decompiler.ast.AstOptimizer$InlineLambdasOptimization.tryInlineLambda(AstOptimizer.java:3605)
-        //     at com.strobel.decompiler.ast.AstOptimizer$InlineLambdasOptimization.run(AstOptimizer.java:3472)
-        //     at com.strobel.decompiler.ast.AstOptimizer.runOptimization(AstOptimizer.java:3860)
-        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:220)
-        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
-        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
-        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
-        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
-        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
-        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
-        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
-        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
-        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
-        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
-        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
-        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
-        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:336)
-        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:257)
-        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
-        // 
-        throw new IllegalStateException("An error occurred while decompiling this method.");
+        addButton(new Button(this.width / 2 - 155, this.height - 27, 150, 20, (Component)new TranslatableComponent("options.accessibility.link"), debug1 -> this.minecraft.setScreen(new ConfirmLinkScreen(flag -> {
+            if (flag) {
+                Util.getPlatform().openUri("https://aka.ms/MinecraftJavaAccessibility");
+            }
+            this.minecraft.setScreen(this);
+        }, "https://aka.ms/MinecraftJavaAccessibility", true))));
+        addButton(new Button(this.width / 2 + 5, this.height - 27, 150, 20, CommonComponents.GUI_DONE, debug1 -> this.minecraft.setScreen(this.lastScreen)));
     }
     
     static {
diff --git a/src/main/java/net/minecraft/client/gui/screens/ChatOptionsScreen.java b/src/main/java/net/minecraft/client/gui/screens/ChatOptionsScreen.java
index cf5a91f2455d2fdf9b16cb53be193c602011f4f6..07a181ef9003663668a82bb97ae07e89b89d80ca 100644
--- a/src/main/java/net/minecraft/client/gui/screens/ChatOptionsScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/ChatOptionsScreen.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.gui.screens;
 
-import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.client.Options;
 import net.minecraft.client.Option;
diff --git a/src/main/java/net/minecraft/client/gui/screens/CreateBuffetWorldScreen.java b/src/main/java/net/minecraft/client/gui/screens/CreateBuffetWorldScreen.java
index d4d394d2da8dfa48dd8773271afbb1f597603a76..ade8c2f1ab12e208a83b3bce49c766ea49d40e4c 100644
--- a/src/main/java/net/minecraft/client/gui/screens/CreateBuffetWorldScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/CreateBuffetWorldScreen.java
@@ -72,7 +72,7 @@ extends Screen {
     }
 
     class BiomeList
-    extends ObjectSelectionList<Entry> {
+    extends ObjectSelectionList<BiomeList.Entry> { // MagmaCube - decompile error
         private BiomeList() {
             super(CreateBuffetWorldScreen.this.minecraft, CreateBuffetWorldScreen.this.width, CreateBuffetWorldScreen.this.height, 40, CreateBuffetWorldScreen.this.height - 37, 16);
             CreateBuffetWorldScreen.this.biomes.entrySet().stream().sorted(Comparator.comparing(entry -> ((ResourceKey)entry.getKey()).location().toString())).forEach(entry -> this.addEntry(new Entry((Biome)entry.getValue())));
diff --git a/src/main/java/net/minecraft/client/gui/screens/CreateFlatWorldScreen.java b/src/main/java/net/minecraft/client/gui/screens/CreateFlatWorldScreen.java
index 4be1e83f1a2ba5c80ab983627d038beb0a2f84e0..ef20e7ef736d68ab8df7b64737e4ee9809cb35c5 100644
--- a/src/main/java/net/minecraft/client/gui/screens/CreateFlatWorldScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/CreateFlatWorldScreen.java
@@ -111,7 +111,7 @@ extends Screen {
     }
 
     class DetailsList
-    extends ObjectSelectionList<Entry> {
+    extends ObjectSelectionList<DetailsList.Entry> { // MagmaCube - decompile error
         public DetailsList() {
             super(CreateFlatWorldScreen.this.minecraft, CreateFlatWorldScreen.this.width, CreateFlatWorldScreen.this.height, 43, CreateFlatWorldScreen.this.height - 60, 24);
             for (int i = 0; i < CreateFlatWorldScreen.this.generator.getLayersInfo().size(); ++i) {
@@ -174,9 +174,9 @@ extends Screen {
                 this.blitSlot(poseStack, i3, i2, itemStack);
                 CreateFlatWorldScreen.this.font.draw(poseStack, item.getName(itemStack), (float)(i3 + 18 + 5), (float)(i2 + 3), 0xFFFFFF);
                 if (i == 0) {
-                    String s = I18n.get("createWorld.customize.flat.layer.top", flatLayerInfo.getHeight());
+                    s3 = I18n.get("createWorld.customize.flat.layer.top", flatLayerInfo.getHeight()); // MagmaCube - decompile error
                 } else if (i == CreateFlatWorldScreen.this.generator.getLayersInfo().size() - 1) {
-                    String s2 = I18n.get("createWorld.customize.flat.layer.bottom", flatLayerInfo.getHeight());
+                    s3 = I18n.get("createWorld.customize.flat.layer.bottom", flatLayerInfo.getHeight()); // MagmaCube - decompile error
                 } else {
                     s3 = I18n.get("createWorld.customize.flat.layer", flatLayerInfo.getHeight());
                 }
diff --git a/src/main/java/net/minecraft/client/gui/screens/LanguageSelectScreen.java b/src/main/java/net/minecraft/client/gui/screens/LanguageSelectScreen.java
index 41898a172c9589eb94eaeab27314a649c15cd4aa..946f02cc4d032763ebb8d92bdc5559fd84d2fa6f 100644
--- a/src/main/java/net/minecraft/client/gui/screens/LanguageSelectScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/LanguageSelectScreen.java
@@ -66,7 +66,7 @@ extends OptionsSubScreen {
     }
 
     class LanguageSelectionList
-    extends ObjectSelectionList<Entry> {
+    extends ObjectSelectionList<LanguageSelectionList.Entry> { // MagmaCube - decompile error
         public LanguageSelectionList(Minecraft minecraft) {
             super(minecraft, LanguageSelectScreen.this.width, LanguageSelectScreen.this.height, 32, LanguageSelectScreen.this.height - 65 + 4, 18);
             for (LanguageInfo languageInfo : LanguageSelectScreen.this.languageManager.getLanguages()) {
@@ -119,7 +119,7 @@ extends OptionsSubScreen {
             @Override
             public void render(PoseStack poseStack, int i, int i2, int i3, int i4, int i5, int i6, int i7, boolean flag, float f) {
                 String s = this.language.toString();
-                LanguageSelectScreen.this.font.drawShadow(poseStack, s, LanguageSelectionList.this.width / 2 - LanguageSelectScreen.this.font.width(s) / 2, i2 + 1, 0xFFFFFF, true);
+                LanguageSelectScreen.this.font.drawShadow(poseStack, s, (float)(LanguageSelectionList.this.width / 2 - LanguageSelectScreen.this.font.width(s) / 2), i2 + 1, 0xFFFFFF, true); // MagmaCube - math
             }
 
             @Override
diff --git a/src/main/java/net/minecraft/client/gui/screens/PresetFlatWorldScreen.java b/src/main/java/net/minecraft/client/gui/screens/PresetFlatWorldScreen.java
index d7e1fcf392fade6410685d7654f649f522c575ea..1f7e7bdce93ba631deaa7adfa42e7daf0fa4dfcb 100644
--- a/src/main/java/net/minecraft/client/gui/screens/PresetFlatWorldScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/PresetFlatWorldScreen.java
@@ -66,12 +66,12 @@ extends Screen {
      */
     @Nullable
     private static FlatLayerInfo getLayerInfoFromString(String s, int i) {
-        void block2;
+        Block block2; // MagmaCube - decompile error
         int i3;
         String[] strings = s.split("\\*", 2);
         if (strings.length == 2) {
             try {
-                int i2 = Math.max(Integer.parseInt(strings[0]), 0);
+                i3 = Math.max(Integer.parseInt(strings[0]), 0); // MagmaCube - decompile error
             }
             catch (NumberFormatException numberFormatException) {
                 LOGGER.error("Error while parsing flat world string => {}", numberFormatException.getMessage());
@@ -84,7 +84,7 @@ extends Screen {
         int i5 = i4 - i;
         String s2 = strings[strings.length - 1];
         try {
-            Block block = Registry.BLOCK.getOptional(new ResourceLocation(s2)).orElse(null);
+            block2 = Registry.BLOCK.getOptional(new ResourceLocation(s2)).orElse(null); // MagmaCube - decompile error
         }
         catch (Exception exception) {
             LOGGER.error("Error while parsing flat world string => {}", exception.getMessage());
@@ -273,7 +273,7 @@ extends Screen {
     }
 
     class PresetsList
-    extends ObjectSelectionList<Entry> {
+    extends ObjectSelectionList<PresetsList.Entry> { // MagmaCube - decompile error
         public PresetsList() {
             super(PresetFlatWorldScreen.this.minecraft, PresetFlatWorldScreen.this.width, PresetFlatWorldScreen.this.height, 80, PresetFlatWorldScreen.this.height - 37, 24);
             for (int i = 0; i < PRESETS.size(); ++i) {
diff --git a/src/main/java/net/minecraft/client/gui/screens/Screen.java b/src/main/java/net/minecraft/client/gui/screens/Screen.java
index e68f8912cfaf679f7d1f498a9dd421958e192f63..ae26a7e4a569c6ca374618c6813311ef90330af5 100644
--- a/src/main/java/net/minecraft/client/gui/screens/Screen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/Screen.java
@@ -48,7 +48,7 @@ extends AbstractContainerEventHandler
 implements TickableWidget,
 Widget {
     private static final Logger LOGGER = LogManager.getLogger();
-    private static final Set<String> ALLOWED_PROTOCOLS = Sets.newHashSet((Object[])new String[]{"http", "https"});
+    private static final Set<String> ALLOWED_PROTOCOLS = Sets.newHashSet(new String[]{"http", "https"}); // MagmaCube - decompile error
     protected final Component title;
     protected final List<GuiEventListener> children = Lists.newArrayList();
     @Nullable
@@ -156,7 +156,7 @@ Widget {
             i5 -= 28 + i3;
         }
         if (n2 + i8 + 6 > this.height) {
-            n = this.height - i8 - 6;
+            n2 = this.height - i8 - 6;
         }
         poseStack.pushPose();
         int i9 = -267386864;
@@ -167,15 +167,17 @@ Widget {
         BufferBuilder bufferBuilder = tesselator.getBuilder();
         bufferBuilder.begin(7, DefaultVertexFormat.POSITION_COLOR);
         Matrix4f matrix4f = poseStack.last().pose();
-        Screen.fillGradient(matrix4f, bufferBuilder, i5 - 3, n - 4, i5 + i7 + 3, n - 3, 400, -267386864, -267386864);
-        Screen.fillGradient(matrix4f, bufferBuilder, i5 - 3, n + i8 + 3, i5 + i7 + 3, n + i8 + 4, 400, -267386864, -267386864);
-        Screen.fillGradient(matrix4f, bufferBuilder, i5 - 3, n - 3, i5 + i7 + 3, n + i8 + 3, 400, -267386864, -267386864);
-        Screen.fillGradient(matrix4f, bufferBuilder, i5 - 4, n - 3, i5 - 3, n + i8 + 3, 400, -267386864, -267386864);
-        Screen.fillGradient(matrix4f, bufferBuilder, i5 + i7 + 3, n - 3, i5 + i7 + 4, n + i8 + 3, 400, -267386864, -267386864);
-        Screen.fillGradient(matrix4f, bufferBuilder, i5 - 3, n - 3 + 1, i5 - 3 + 1, n + i8 + 3 - 1, 400, 0x505000FF, 1344798847);
-        Screen.fillGradient(matrix4f, bufferBuilder, i5 + i7 + 2, n - 3 + 1, i5 + i7 + 3, n + i8 + 3 - 1, 400, 0x505000FF, 1344798847);
-        Screen.fillGradient(matrix4f, bufferBuilder, i5 - 3, n - 3, i5 + i7 + 3, n - 3 + 1, 400, 0x505000FF, 0x505000FF);
-        Screen.fillGradient(matrix4f, bufferBuilder, i5 - 3, n + i8 + 2, i5 + i7 + 3, n + i8 + 3, 400, 1344798847, 1344798847);
+        // MagmaCube start - decompile error
+        Screen.fillGradient(matrix4f, bufferBuilder, i5 - 3, n2 - 4, i5 + i7 + 3, n2 - 3, 400, -267386864, -267386864);
+        Screen.fillGradient(matrix4f, bufferBuilder, i5 - 3, n2 + i8 + 3, i5 + i7 + 3, n2 + i8 + 4, 400, -267386864, -267386864);
+        Screen.fillGradient(matrix4f, bufferBuilder, i5 - 3, n2 - 3, i5 + i7 + 3, n2 + i8 + 3, 400, -267386864, -267386864);
+        Screen.fillGradient(matrix4f, bufferBuilder, i5 - 4, n2 - 3, i5 - 3, n2 + i8 + 3, 400, -267386864, -267386864);
+        Screen.fillGradient(matrix4f, bufferBuilder, i5 + i7 + 3, n2 - 3, i5 + i7 + 4, n2 + i8 + 3, 400, -267386864, -267386864);
+        Screen.fillGradient(matrix4f, bufferBuilder, i5 - 3, n2 - 3 + 1, i5 - 3 + 1, n2 + i8 + 3 - 1, 400, 0x505000FF, 1344798847);
+        Screen.fillGradient(matrix4f, bufferBuilder, i5 + i7 + 2, n2 - 3 + 1, i5 + i7 + 3, n2 + i8 + 3 - 1, 400, 0x505000FF, 1344798847);
+        Screen.fillGradient(matrix4f, bufferBuilder, i5 - 3, n2 - 3, i5 + i7 + 3, n2 - 3 + 1, 400, 0x505000FF, 0x505000FF);
+        Screen.fillGradient(matrix4f, bufferBuilder, i5 - 3, n2 + i8 + 2, i5 + i7 + 3, n2 + i8 + 3, 400, 1344798847, 1344798847);
+        // MagmaCube end - decompile error
         RenderSystem.enableDepthTest();
         RenderSystem.disableTexture();
         RenderSystem.enableBlend();
@@ -191,13 +193,13 @@ Widget {
         for (int i13 = 0; i13 < list.size(); ++i13) {
             FormattedCharSequence formattedCharSequence2 = list.get(i13);
             if (formattedCharSequence2 != null) {
-                void var7_11;
-                this.font.drawInBatch(formattedCharSequence2, (float)i5, (float)var7_11, -1, true, matrix4f, (MultiBufferSource)bufferSource, false, 0, 0xF000F0);
+                // MagmaCube - decompile error
+                this.font.drawInBatch(formattedCharSequence2, (float)i5, (float)n2, -1, true, matrix4f, (MultiBufferSource)bufferSource, false, 0, 0xF000F0);
             }
             if (i13 == 0) {
-                var7_11 += 2;
+                n2 += 2; // MagmaCube - decompile error
             }
-            var7_11 += 10;
+            n2 += 10; // MagmaCube - decompile error
         }
         bufferSource.endBatch();
         poseStack.popPose();
diff --git a/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java b/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
index 65b3f5d3bce35c2291079f4698555961052be652..2347a006672da9b02eb1cc8c4f2326c8623ad074 100644
--- a/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
@@ -5,7 +5,6 @@ import com.mojang.blaze3d.platform.GlStateManager;
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.PoseStack;
 import java.io.IOException;
-import java.lang.invoke.LambdaMetafactory;
 import java.util.Random;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
@@ -16,12 +15,6 @@ import net.minecraft.client.gui.components.AbstractWidget;
 import net.minecraft.client.gui.components.Button;
 import net.minecraft.client.gui.components.ImageButton;
 import net.minecraft.client.gui.components.toasts.SystemToast;
-import net.minecraft.client.gui.screens.AccessibilityOptionsScreen;
-import net.minecraft.client.gui.screens.ConfirmScreen;
-import net.minecraft.client.gui.screens.LanguageSelectScreen;
-import net.minecraft.client.gui.screens.OptionsScreen;
-import net.minecraft.client.gui.screens.Screen;
-import net.minecraft.client.gui.screens.WinScreen;
 import net.minecraft.client.gui.screens.multiplayer.JoinMultiplayerScreen;
 import net.minecraft.client.gui.screens.multiplayer.SafetyScreen;
 import net.minecraft.client.gui.screens.worldselection.SelectWorldScreen;
@@ -135,8 +128,10 @@ extends Screen {
                 this.renderTooltip(poseStack, this.minecraft.font.split(new TranslatableComponent("title.multiplayer.disabled"), Math.max(this.width / 2 - 43, 170)), i, i2);
             }
         };
-        this.addButton(new Button((int)(this.width / 2 - 100), (int)(i3 + i22 * 1), (int)200, (int)20, (Component)new TranslatableComponent((String)"menu.multiplayer"), (Button.OnPress)(Button.OnPress)LambdaMetafactory.metafactory(null, null, null, (Lnet/minecraft/client/gui/components/Button;)V, lambda$createNormalMenuOptions$6(net.minecraft.client.gui.components.Button ), (Lnet/minecraft/client/gui/components/Button;)V)((TitleScreen)this), (Button.OnTooltip)onTooltip)).active = flag;
-        this.addButton(new Button((int)(this.width / 2 - 100), (int)(i3 + i22 * 2), (int)200, (int)20, (Component)new TranslatableComponent((String)"menu.online"), (Button.OnPress)(Button.OnPress)LambdaMetafactory.metafactory(null, null, null, (Lnet/minecraft/client/gui/components/Button;)V, lambda$createNormalMenuOptions$7(net.minecraft.client.gui.components.Button ), (Lnet/minecraft/client/gui/components/Button;)V)((TitleScreen)this), (Button.OnTooltip)onTooltip)).active = flag;
+        // MagmaCube start - decompile error
+        this.addButton(new Button((int)(this.width / 2 - 100), (int)(i3 + i22 * 1), (int)200, (int)20, (Component)new TranslatableComponent((String)"menu.multiplayer"), (Button.OnPress)(Button.OnPress)this::_lambda$createNormalMenuOptions$6, onTooltip)).active = flag;
+        this.addButton(new Button((int)(this.width / 2 - 100), (int)(i3 + i22 * 2), (int)200, (int)20, (Component)new TranslatableComponent((String)"menu.online"), (Button.OnPress)(Button.OnPress)this::_lambda$createNormalMenuOptions$7, onTooltip)).active = flag;
+        // MagmaCube end - decompile error
     }
 
     private void createDemoMenuOptions(int i, int i2) {
@@ -228,7 +223,7 @@ extends Screen {
         TitleScreen.blit(poseStack, i4 + 88, 67, 0.0f, 0.0f, 98, 14, 128, 16);
         if (this.splash != null) {
             RenderSystem.pushMatrix();
-            RenderSystem.translatef(this.width / 2 + 90, 70.0f, 0.0f);
+            RenderSystem.translatef((float)(this.width / 2 + 90), 70.0f, 0.0f); // MagmaCube - math
             RenderSystem.rotatef(-20.0f, 0.0f, 0.0f, 1.0f);
             float f4 = 1.8f - Mth.abs(Mth.sin((float)(Util.getMillis() % 1000L) / 1000.0f * ((float)Math.PI * 2)) * 0.1f);
             f4 = f4 * 100.0f / (float)(this.font.width(this.splash) + 32);
@@ -289,11 +284,11 @@ extends Screen {
         this.minecraft.setScreen(this);
     }
 
-    private /* synthetic */ void lambda$createNormalMenuOptions$7(Button button) {
+    private /* synthetic */ void _lambda$createNormalMenuOptions$7(Button button) {
         this.realmsButtonClicked();
     }
 
-    private /* synthetic */ void lambda$createNormalMenuOptions$6(Button button) {
+    private /* synthetic */ void _lambda$createNormalMenuOptions$6(Button button) {
         Screen screen = this.minecraft.options.skipMultiplayerWarning ? new JoinMultiplayerScreen(this) : new SafetyScreen(this);
         this.minecraft.setScreen(screen);
     }
diff --git a/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java b/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
index 8eb8961c966ac3ab3bdde2e8dd9c588340cf2053..c603af14b7587e219f67f80c54f13b2799e297c7 100644
--- a/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
@@ -151,9 +151,8 @@ implements StatsUpdateListener {
     }
 
     class MobsStatisticsList
-    extends ObjectSelectionList<MobRow> {
+    extends ObjectSelectionList<MobsStatisticsList.MobRow> { // MagmaCube - decompile error
         public MobsStatisticsList(Minecraft minecraft) {
-            StatsScreen.this.font.getClass();
             super(minecraft, StatsScreen.this.width, StatsScreen.this.height, 32, StatsScreen.this.height - 64, 9 * 4);
             for (EntityType entityType : Registry.ENTITY_TYPE) {
                 if (StatsScreen.this.stats.getValue(Stats.ENTITY_KILLED.get(entityType)) <= 0 && StatsScreen.this.stats.getValue(Stats.ENTITY_KILLED_BY.get(entityType)) <= 0) continue;
@@ -210,7 +209,7 @@ implements StatsUpdateListener {
     }
 
     class ItemStatisticsList
-    extends ObjectSelectionList<ItemRow> {
+    extends ObjectSelectionList<ItemStatisticsList.ItemRow> { // MagmaCube - decompile error
         protected final List<StatType<Block>> blockColumns;
         protected final List<StatType<Item>> itemColumns;
         private final int[] iconOffsets;
@@ -228,7 +227,7 @@ implements StatsUpdateListener {
             this.itemStatSorter = new ItemComparator();
             this.blockColumns = Lists.newArrayList();
             this.blockColumns.add(Stats.BLOCK_MINED);
-            this.itemColumns = Lists.newArrayList((Object[])new StatType[]{Stats.ITEM_BROKEN, Stats.ITEM_CRAFTED, Stats.ITEM_USED, Stats.ITEM_PICKED_UP, Stats.ITEM_DROPPED});
+            this.itemColumns = Lists.newArrayList(new StatType[]{Stats.ITEM_BROKEN, Stats.ITEM_CRAFTED, Stats.ITEM_USED, Stats.ITEM_PICKED_UP, Stats.ITEM_DROPPED}); // MagmaCube - decompile error
             this.setRenderHeader(true, 20);
             Set set = Sets.newIdentityHashSet();
             for (Item item : Registry.ITEM) {
@@ -242,7 +241,7 @@ implements StatsUpdateListener {
             }
             for (Block block : Registry.BLOCK) {
                 boolean flag2 = false;
-                for (StatType<ItemLike> statType : this.blockColumns) {
+                for (StatType<Block> statType : this.blockColumns) { // MagmaCube - decompile error
                     if (!statType.contains(block) || StatsScreen.this.stats.getValue(statType.get(block)) <= 0) continue;
                     flag2 = true;
                 }
@@ -390,7 +389,7 @@ implements StatsUpdateListener {
                 for (int i8 = 0; i8 < ((StatsScreen)StatsScreen.this).itemStatsList.blockColumns.size(); ++i8) {
                     Stat<?> stat2;
                     if (item instanceof BlockItem) {
-                        Stat<Block> stat = ((StatsScreen)StatsScreen.this).itemStatsList.blockColumns.get(i8).get(((BlockItem)item).getBlock());
+                        stat2 = ((StatsScreen)StatsScreen.this).itemStatsList.blockColumns.get(i8).get(((BlockItem)item).getBlock()); // MagmaCube - decompile error
                     } else {
                         stat2 = null;
                     }
@@ -417,35 +416,36 @@ implements StatsUpdateListener {
                 int i6;
                 int i5;
                 if (ItemStatisticsList.this.sortColumn == null) {
-                    boolean i = false;
-                    boolean i2 = false;
+                    // MagmaCube start - decompile error
+                    i5 = 0;
+                    i6 = 0;
+                    // MagmaCube end - decompile error
                 } else if (ItemStatisticsList.this.blockColumns.contains(ItemStatisticsList.this.sortColumn)) {
                     StatType<?> statType = ItemStatisticsList.this.sortColumn;
-                    int i3 = item instanceof BlockItem ? StatsScreen.this.stats.getValue(statType, ((BlockItem)item).getBlock()) : -1;
-                    int i4 = item2 instanceof BlockItem ? StatsScreen.this.stats.getValue(statType, ((BlockItem)item2).getBlock()) : -1;
+                    // MagmaCube start - decompile error
+                    i5 = item instanceof BlockItem ? StatsScreen.this.stats.getValue((StatType) statType, ((BlockItem)item).getBlock()) : -1;
+                    i6 = item2 instanceof BlockItem ? StatsScreen.this.stats.getValue((StatType) statType, ((BlockItem)item2).getBlock()) : -1;
+                    // MagmaCube end - decompile error
                 } else {
                     StatType<?> statType2 = ItemStatisticsList.this.sortColumn;
-                    i5 = StatsScreen.this.stats.getValue(statType2, item);
-                    i6 = StatsScreen.this.stats.getValue(statType2, item2);
+                    // MagmaCube start - decompile error
+                    i5 = StatsScreen.this.stats.getValue((StatType) statType2, item);
+                    i6 = StatsScreen.this.stats.getValue((StatType) statType2, item2);
+                    // MagmaCube end - decompile error
                 }
                 if (i5 == i6) {
                     return ItemStatisticsList.this.sortOrder * Integer.compare(Item.getId(item), Item.getId(item2));
                 }
                 return ItemStatisticsList.this.sortOrder * Integer.compare(i5, i6);
             }
-
-            @Override
-            public /* synthetic */ int compare(Object object, Object object2) {
-                return this.compare((Item)object, (Item)object2);
-            }
         }
     }
 
     class GeneralStatisticsList
-    extends ObjectSelectionList<Entry> {
+    extends ObjectSelectionList<GeneralStatisticsList.Entry> { // MagmaCube - decompile error
         public GeneralStatisticsList(Minecraft minecraft) {
             super(minecraft, StatsScreen.this.width, StatsScreen.this.height, 32, StatsScreen.this.height - 64, 10);
-            ObjectArrayList objectArrayList = new ObjectArrayList(Stats.CUSTOM.iterator());
+            ObjectArrayList<Stat> objectArrayList = new ObjectArrayList(Stats.CUSTOM.iterator()); // MagmaCube - type
             objectArrayList.sort(Comparator.comparing(stat -> I18n.get(StatsScreen.getTranslationKey(stat), new Object[0])));
             for (Stat stat2 : objectArrayList) {
                 this.addEntry(new Entry(stat2));
diff --git a/src/main/java/net/minecraft/client/gui/screens/advancements/AdvancementTab.java b/src/main/java/net/minecraft/client/gui/screens/advancements/AdvancementTab.java
index 00e7b6aa23b7d5d5e61b3d9599f94edfe85aaed9..6c234c96a72d28819b7151b3fd87422939efdb9e 100644
--- a/src/main/java/net/minecraft/client/gui/screens/advancements/AdvancementTab.java
+++ b/src/main/java/net/minecraft/client/gui/screens/advancements/AdvancementTab.java
@@ -71,8 +71,8 @@ extends GuiComponent {
 
     public void drawContents(PoseStack poseStack) {
         if (!this.centered) {
-            this.scrollX = 117 - (this.maxX + this.minX) / 2;
-            this.scrollY = 56 - (this.maxY + this.minY) / 2;
+            this.scrollX = (double) (117 - (float) (this.maxX + this.minX) / 2.0F);
+            this.scrollY = (double) (56 - (float) (this.maxY + this.minY) / 2.0F);
             this.centered = true;
         }
         RenderSystem.pushMatrix();
diff --git a/src/main/java/net/minecraft/client/gui/screens/controls/ControlList.java b/src/main/java/net/minecraft/client/gui/screens/controls/ControlList.java
index dd569797bef99ab9dac205ff73f9831d2b8ac33f..e0f178a6fd23d7f9ef1a1f6b8aedcdb150a0cb4c 100644
--- a/src/main/java/net/minecraft/client/gui/screens/controls/ControlList.java
+++ b/src/main/java/net/minecraft/client/gui/screens/controls/ControlList.java
@@ -19,7 +19,7 @@ import net.minecraft.network.chat.TranslatableComponent;
 import org.apache.commons.lang3.ArrayUtils;
 
 public class ControlList
-extends ContainerObjectSelectionList<Entry> {
+extends ContainerObjectSelectionList<ControlList.Entry> { // MagmaCube - decompile error
     private final ControlsScreen controlsScreen;
     private int maxNameWidth;
 
@@ -149,7 +149,7 @@ extends ContainerObjectSelectionList<Entry> {
 
         @Override
         public void render(PoseStack poseStack, int i, int i2, int i3, int i4, int i5, int i6, int i7, boolean flag, float f) {
-            float f2 = ((ControlList)ControlList.this).minecraft.screen.width / 2 - this.width / 2;
+            float f2 = (float)(((ControlList)ControlList.this).minecraft.screen.width / 2 - this.width / 2); // MagmaCube - math
             ((ControlList)ControlList.this).minecraft.font.getClass();
             ((ControlList)ControlList.this).minecraft.font.draw(poseStack, this.name, f2, (float)(i2 + i5 - 9 - 1), 0xFFFFFF);
         }
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/BlastFurnaceScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/BlastFurnaceScreen.java
index 66e446489238091078bfa76b1e8c87eb8ecdd890..f03fef0bbd752e0923b2e2a882d5876857b79166 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/BlastFurnaceScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/BlastFurnaceScreen.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.gui.screens.inventory;
 
-import net.minecraft.client.gui.screens.recipebook.AbstractFurnaceRecipeBookComponent;
 import net.minecraft.client.gui.screens.recipebook.BlastingRecipeBookComponent;
 import net.minecraft.network.chat.Component;
 import net.minecraft.world.entity.player.Inventory;
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/CreativeModeInventoryScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/CreativeModeInventoryScreen.java
index 4d055ac3c822dfb96a1cb89a9dfd28832bf0395c..0b05190620b6c3f82da16beb4107f5b1bceae3b8 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/CreativeModeInventoryScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/CreativeModeInventoryScreen.java
@@ -53,7 +53,7 @@ import net.minecraft.world.item.enchantment.Enchantment;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 
 public class CreativeModeInventoryScreen
-extends EffectRenderingInventoryScreen<ItemPickerMenu> {
+extends EffectRenderingInventoryScreen<CreativeModeInventoryScreen.ItemPickerMenu> { // MagmaCube - decompile error
     private static final ResourceLocation CREATIVE_TABS_LOCATION = new ResourceLocation("textures/gui/container/creative_inventory/tabs.png");
     private static final SimpleContainer CONTAINER = new SimpleContainer(45);
     private static final Component TRASH_SLOT_TOOLTIP = new TranslatableComponent("inventory.binSlot");
@@ -333,7 +333,7 @@ extends EffectRenderingInventoryScreen<ItemPickerMenu> {
             MutableSearchTree<ItemStack> searchTree2;
             if (s.startsWith("#")) {
                 s = s.substring(1);
-                MutableSearchTree<ItemStack> searchTree = this.minecraft.getSearchTree(SearchRegistry.CREATIVE_TAGS);
+                searchTree2 = this.minecraft.getSearchTree(SearchRegistry.CREATIVE_TAGS); // MagmaCube - decompile error
                 this.updateVisibleTags(s);
             } else {
                 searchTree2 = this.minecraft.getSearchTree(SearchRegistry.CREATIVE_NAMES);
@@ -348,7 +348,7 @@ extends EffectRenderingInventoryScreen<ItemPickerMenu> {
         Predicate<ResourceLocation> predicate2;
         int i = s.indexOf(58);
         if (i == -1) {
-            Predicate<ResourceLocation> predicate = resourceLocation -> resourceLocation.getPath().contains(s);
+            predicate2 = resourceLocation -> resourceLocation.getPath().contains(s); // MagmaCube - decompile error
         } else {
             String s2 = s.substring(0, i).trim();
             String s3 = s.substring(i + 1).trim();
@@ -445,21 +445,27 @@ extends EffectRenderingInventoryScreen<ItemPickerMenu> {
                     int i5 = i4 - 5;
                     int i6 = i5 / 2;
                     int i7 = i5 % 2;
-                    int i8 = 54 + i6 * 54;
-                    int i9 = 6 + i7 * 27;
+                    // MagmaCube start - decompile error
+                    i17 = 54 + i6 * 54;
+                    i19 = 6 + i7 * 27;
+                    // MagmaCube end - decompile error
                 } else if (i4 >= 0 && i4 < 5) {
-                    int i10 = -2000;
-                    int i11 = -2000;
+                    // MagmaCube start - decompile error
+                    i17 = -2000;
+                    i19 = -2000;
+                    // MagmaCube end - decompile error
                 } else if (i4 == 45) {
-                    int i12 = 35;
-                    int i13 = 20;
+                    // MagmaCube start - decompile error
+                    i17 = 35;
+                    i19 = 20;
+                    // MagmaCube end - decompile error
                 } else {
                     int i14 = i4 - 9;
                     int i15 = i14 % 9;
                     int i16 = i14 / 9;
                     i17 = 9 + i15 * 18;
                     if (i4 >= 36) {
-                        int i18 = 112;
+                        i19 = 112; // MagmaCube - decompile error
                     } else {
                         i19 = 54 + i16 * 18;
                     }
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/FurnaceScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/FurnaceScreen.java
index 30489ca59fc3af64e7966d61c0291771118d7254..3f51e161503c051c954719f2ee9c5e140537f7e4 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/FurnaceScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/FurnaceScreen.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.gui.screens.inventory;
 
-import net.minecraft.client.gui.screens.recipebook.AbstractFurnaceRecipeBookComponent;
 import net.minecraft.client.gui.screens.recipebook.SmeltingRecipeBookComponent;
 import net.minecraft.network.chat.Component;
 import net.minecraft.world.entity.player.Inventory;
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/LecternScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/LecternScreen.java
index 0856b6e279f18157895ab52654d7d1369682b439..f3cf1540c2801c8f3003c0e2407c46f7bcbf458f 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/LecternScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/LecternScreen.java
@@ -110,9 +110,4 @@ implements MenuAccess<LecternMenu> {
     private void pageChanged() {
         this.setPage(this.menu.getPage());
     }
-
-    @Override
-    public /* synthetic */ AbstractContainerMenu getMenu() {
-        return this.getMenu();
-    }
 }
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/SmokerScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/SmokerScreen.java
index d3db3662c9286766b6f940d1f0d549cd1a6da585..87fc16d5eafc776679da4a37df7350a50581a0e7 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/SmokerScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/SmokerScreen.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.gui.screens.inventory;
 
-import net.minecraft.client.gui.screens.recipebook.AbstractFurnaceRecipeBookComponent;
 import net.minecraft.client.gui.screens.recipebook.SmokingRecipeBookComponent;
 import net.minecraft.network.chat.Component;
 import net.minecraft.world.entity.player.Inventory;
diff --git a/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java b/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java
index a81c87f0377019f16e702d285135025f82cf35e6..455ed8c8fb74c5871806176192608442ab663d88 100644
--- a/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java
@@ -39,7 +39,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class ServerSelectionList
-extends ObjectSelectionList<Entry> {
+extends ObjectSelectionList<ServerSelectionList.Entry> { // MagmaCube - decompile error
     private static final Logger LOGGER = LogManager.getLogger();
     private static final ThreadPoolExecutor THREAD_POOL = new ScheduledThreadPoolExecutor(5, new ThreadFactoryBuilder().setNameFormat("Server Pinger #%d").setDaemon(true).setUncaughtExceptionHandler((Thread.UncaughtExceptionHandler)new DefaultUncaughtExceptionHandler(LOGGER)).build());
     private static final ResourceLocation ICON_MISSING = new ResourceLocation("textures/misc/unknown_server.png");
@@ -173,29 +173,35 @@ extends ObjectSelectionList<Entry> {
             this.minecraft.font.draw(poseStack, component, (float)(i3 + i4 - i9 - 15 - 2), (float)(i2 + 1), 0x808080);
             int i10 = 0;
             if (flag2) {
-                int i11 = 5;
-                Component component2 = INCOMPATIBLE_TOOLTIP;
-                List<Component> list2 = this.serverData.playerList;
+                // MagmaCube start - decompile error
+                i18 = 5;
+                component5 = INCOMPATIBLE_TOOLTIP;
+                list5 = this.serverData.playerList;
+                // MagmaCube end - decompile error
             } else if (this.serverData.pinged && this.serverData.ping != -2L) {
                 if (this.serverData.ping < 0L) {
-                    int i12 = 5;
+                    i18 = 5; // MagmaCube - decompile error
                 } else if (this.serverData.ping < 150L) {
-                    boolean i13 = false;
+                    i18 = 0; // MagmaCube - decompile error
                 } else if (this.serverData.ping < 300L) {
-                    boolean i14 = true;
+                    i18 = 1; // MagmaCube - decompile error
                 } else if (this.serverData.ping < 600L) {
-                    int i15 = 2;
+                    i18 = 2; // MagmaCube - decompile error
                 } else if (this.serverData.ping < 1000L) {
-                    int i16 = 3;
+                    i18 = 3; // MagmaCube - decompile error
                 } else {
-                    int i17 = 4;
+                    i18 = 4; // MagmaCube - decompile error
                 }
                 if (this.serverData.ping < 0L) {
-                    Component component3 = NO_CONNECTION_TOOLTIP;
-                    List list3 = Collections.emptyList();
+                    // MagmaCube start - decompile error
+                    component5 = NO_CONNECTION_TOOLTIP;
+                    list5 = Collections.emptyList();
+                    // MagmaCube end - decompile error
                 } else {
-                    TranslatableComponent component4 = new TranslatableComponent("multiplayer.status.ping", this.serverData.ping);
-                    List<Component> list4 = this.serverData.playerList;
+                    // MagmaCube start - decompile error
+                    component5 = new TranslatableComponent("multiplayer.status.ping", this.serverData.ping);
+                    list5 = this.serverData.playerList;
+                    // MagmaCube end - decompile error
                 }
             } else {
                 i10 = 1;
@@ -411,19 +417,19 @@ extends ObjectSelectionList<Entry> {
             this.minecraft.font.draw(poseStack, SCANNING_LABEL, (float)(this.minecraft.screen.width / 2 - this.minecraft.font.width(SCANNING_LABEL) / 2), (float)i8, 0xFFFFFF);
             switch ((int)(Util.getMillis() / 300L % 4L)) {
                 default: {
-                    String s = "O o o";
+                    s3 = "O o o"; // MagmaCube - decompile error
                     break;
                 }
                 case 1: 
                 case 3: {
-                    String s2 = "o O o";
+                    s3 = "o O o"; // MagmaCube - decompile error
                     break;
                 }
                 case 2: {
                     s3 = "o o O";
                 }
             }
-            float f2 = this.minecraft.screen.width / 2 - this.minecraft.font.width(s3) / 2;
+            float f2 = (float)(this.minecraft.screen.width / 2 - this.minecraft.font.width(s3) / 2); // MagmaCube - math
             this.minecraft.font.getClass();
             this.minecraft.font.draw(poseStack, s3, f2, (float)(i8 + 9), 0x808080);
         }
diff --git a/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java b/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
index 9730a4428786626c681516b3ec5992017dfa1f35..618df82deced84aab6a231536b0146b370c8c766 100644
--- a/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
@@ -1,9 +1,13 @@
 package net.minecraft.client.gui.screens.packs;
 
 import com.google.common.collect.Maps;
+import com.google.common.hash.Hashing;
+import com.mojang.blaze3d.platform.NativeImage;
 import com.mojang.blaze3d.vertex.PoseStack;
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.io.IOException;
+import java.io.InputStream;
 import java.nio.file.DirectoryStream;
 import java.nio.file.FileVisitOption;
 import java.nio.file.Files;
@@ -28,14 +32,17 @@ import net.minecraft.client.gui.screens.ConfirmScreen;
 import net.minecraft.client.gui.screens.Screen;
 import net.minecraft.client.gui.screens.packs.PackSelectionModel;
 import net.minecraft.client.gui.screens.packs.TransferableSelectionList;
+import net.minecraft.client.renderer.texture.DynamicTexture;
 import net.minecraft.client.renderer.texture.TextureManager;
 import net.minecraft.network.chat.CommonComponents;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.packs.PackResources;
 import net.minecraft.server.packs.repository.Pack;
 import net.minecraft.server.packs.repository.PackRepository;
+import net.minecraft.server.packs.repository.PackSource;
 import org.apache.commons.lang3.mutable.MutableBoolean;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -123,7 +130,7 @@ extends Screen {
 
     private void updateList(TransferableSelectionList transferableSelectionList, Stream<PackSelectionModel.Entry> stream) {
         transferableSelectionList.children().clear();
-        stream.forEach(entry -> transferableSelectionList.children().add(new TransferableSelectionList.PackEntry(this.minecraft, transferableSelectionList, this, (PackSelectionModel.Entry)entry)));
+        stream.forEach(entry -> transferableSelectionList.children().add(new TransferableSelectionList.PackEntry(this.minecraft, transferableSelectionList, this, entry))); // MagmaCube - decompile error
     }
 
     private void reload() {
@@ -183,25 +190,23 @@ extends Screen {
      * Exception decompiling
      */
     private ResourceLocation loadPackIcon(TextureManager textureManager, Pack pack) {
-        /*
-         * This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
-         * org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [1[TRYBLOCK]], but top level block is 5[TRYBLOCK]
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:429)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:478)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:728)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:806)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:258)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:192)
-         * org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:94)
-         * org.benf.cfr.reader.entities.Method.analyse(Method.java:521)
-         * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1035)
-         * org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:922)
-         * org.benf.cfr.reader.Driver.doJarVersionTypes(Driver.java:253)
-         * org.benf.cfr.reader.Driver.doJar(Driver.java:135)
-         * org.benf.cfr.reader.CfrDriverImpl.analyse(CfrDriverImpl.java:65)
-         * org.benf.cfr.reader.Main.main(Main.java:49)
-         */
-        throw new IllegalStateException(Decompilation failed);
+        // MagmaCube start - whole method
+        try (
+                PackResources packResources = pack.open();
+                InputStream inputstream = packResources.getRootResource("pack.png");
+        ) {
+            String s = pack.getId();
+            ResourceLocation resourcelocation = new ResourceLocation("minecraft", "pack/" + Util.sanitizeName(s, ResourceLocation::validPathChar) + "/" + Hashing.sha1().hashUnencodedChars(s) + "/icon");
+            NativeImage nativeimage = NativeImage.read(inputstream);
+            textureManager.register(resourcelocation, new DynamicTexture(nativeimage));
+            return resourcelocation;
+        } catch (FileNotFoundException filenotfoundexception) {
+        } catch (Exception exception) {
+            LOGGER.warn("Failed to load icon from pack {}", pack.getId(), exception);
+        }
+
+        return DEFAULT_ICON;
+        // MagmaCube end - whole method
     }
 
     private ResourceLocation getPackIcon(Pack pack) {
diff --git a/src/main/java/net/minecraft/client/gui/screens/packs/TransferableSelectionList.java b/src/main/java/net/minecraft/client/gui/screens/packs/TransferableSelectionList.java
index f8c2608229c1a4601f1301eebd511040ae3903bb..69fea4a9a11fb3d7b9fd16c476ee38a0318c1d9f 100644
--- a/src/main/java/net/minecraft/client/gui/screens/packs/TransferableSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/screens/packs/TransferableSelectionList.java
@@ -22,7 +22,7 @@ import net.minecraft.server.packs.repository.PackCompatibility;
 import net.minecraft.util.FormattedCharSequence;
 
 public class TransferableSelectionList
-extends ObjectSelectionList<PackEntry> {
+extends ObjectSelectionList<TransferableSelectionList.PackEntry> { // MagmaCube - decompile error
     private static final ResourceLocation ICON_OVERLAY_LOCATION = new ResourceLocation("textures/gui/resource_packs.png");
     private static final Component INCOMPATIBLE_TITLE = new TranslatableComponent("pack.incompatible");
     private static final Component INCOMPATIBLE_CONFIRM_TITLE = new TranslatableComponent("pack.incompatible.confirm.title");
diff --git a/src/main/java/net/minecraft/client/gui/screens/recipebook/RecipeCollection.java b/src/main/java/net/minecraft/client/gui/screens/recipebook/RecipeCollection.java
index 4e894278a760433d51d335254f35c634947834cb..beae237921283c59cfe4f50a2f10548914d34983 100644
--- a/src/main/java/net/minecraft/client/gui/screens/recipebook/RecipeCollection.java
+++ b/src/main/java/net/minecraft/client/gui/screens/recipebook/RecipeCollection.java
@@ -22,9 +22,11 @@ public class RecipeCollection
     private final Set<Recipe<?>> known;
     
     public RecipeCollection(final List<Recipe<?>> list) {
-        this.craftable = (Set<Recipe<?>>)Sets.newHashSet();
-        this.fitsDimensions = (Set<Recipe<?>>)Sets.newHashSet();
-        this.known = (Set<Recipe<?>>)Sets.newHashSet();
+        // MagmaCube start - decompile error
+        this.craftable = Sets.newHashSet();
+        this.fitsDimensions = Sets.newHashSet();
+        this.known = Sets.newHashSet();
+        // MagmaCube end - decompile error
         this.recipes = (List<Recipe<?>>)ImmutableList.copyOf((Collection)list);
         if (list.size() <= 1) {
             this.singleResultItem = true;
@@ -93,7 +95,7 @@ public class RecipeCollection
     }
     
     public List<Recipe<?>> getRecipes(final boolean flag) {
-        final List<Recipe<?>> list = (List<Recipe<?>>)Lists.newArrayList();
+        final List<Recipe<?>> list = Lists.newArrayList(); // MagmaCube - decompile error
         final Set<Recipe<?>> set = flag ? this.craftable : this.fitsDimensions;
         for (final Recipe<?> recipe : this.recipes) {
             if (set.contains(recipe)) {
@@ -104,7 +106,7 @@ public class RecipeCollection
     }
     
     public List<Recipe<?>> getDisplayRecipes(final boolean flag) {
-        final List<Recipe<?>> list = (List<Recipe<?>>)Lists.newArrayList();
+        final List<Recipe<?>> list = Lists.newArrayList(); // MagmaCube - decompile error
         for (final Recipe<?> recipe : this.recipes) {
             if (this.fitsDimensions.contains(recipe) && this.craftable.contains(recipe) == flag) {
                 list.add(recipe);
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldGenSettingsComponent.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldGenSettingsComponent.java
index fc02ec5decb15e128d3efa782ae921d6860a9164..5d3f4202a54f20c8383e65e41505eea118794aa4 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldGenSettingsComponent.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldGenSettingsComponent.java
@@ -112,11 +112,13 @@ Widget {
         this.featuresButton.visible = false;
         this.typeButton = createWorldScreen.addButton(new Button(i2, 100, 150, 20, new TranslatableComponent("selectWorld.mapType"), button -> {
             while (this.preset.isPresent()) {
-                int i = WorldPreset.PRESETS.indexOf(this.preset.get()) + 1;
-                if (i >= WorldPreset.PRESETS.size()) {
-                    i = 0;
+                // MagmaCube - decompile error
+                int j = WorldPreset.PRESETS.indexOf(this.preset.get()) + 1;
+                if (j >= WorldPreset.PRESETS.size()) {
+                    j = 0;
+                // MagmaCube end - decompile error
                 }
-                WorldPreset worldPreset = WorldPreset.PRESETS.get(i);
+                WorldPreset worldPreset = WorldPreset.PRESETS.get(j); // MagmaCube - decompile error
                 this.preset = Optional.of(worldPreset);
                 this.settings = worldPreset.create(this.registryHolder, this.settings.seed(), this.settings.generateFeatures(), this.settings.generateBonusChest());
                 if (this.settings.isDebug() && !Screen.hasShiftDown()) continue;
@@ -160,7 +162,7 @@ Widget {
         this.bonusItemsButton.visible = false;
         this.importSettingsButton = createWorldScreen.addButton(new Button(i, 185, 150, 20, new TranslatableComponent("selectWorld.import_worldgen_settings"), button -> {
             DataResult dataResult3;
-            void serverResources2;
+            ServerResources serverResources2; // MagmaCube - decompile error
             TranslatableComponent translatableComponent = new TranslatableComponent("selectWorld.import_worldgen_settings.select_file");
             String s = TinyFileDialogs.tinyfd_openFileDialog((CharSequence)translatableComponent.getString(), null, null, null, (boolean)false);
             if (s == null) {
@@ -172,7 +174,7 @@ Widget {
                 MinecraftServer.configurePackRepository(packRepository, createWorldScreen.dataPacks, false);
                 CompletableFuture<ServerResources> completableFuture = ServerResources.loadResources(packRepository.openAllSelected(), Commands.CommandSelection.INTEGRATED, 2, Util.backgroundExecutor(), minecraft);
                 minecraft.managedBlock(completableFuture::isDone);
-                ServerResources serverResources = completableFuture.get();
+                serverResources2 = completableFuture.get(); // MagmaCube - decompile error
             }
             catch (InterruptedException | ExecutionException exception) {
                 LOGGER.error("Error loading data packs when importing world settings", (Throwable)exception);
@@ -186,7 +188,7 @@ Widget {
             JsonParser jsonParser = new JsonParser();
             try (BufferedReader bufferedReader = Files.newBufferedReader(Paths.get(s, new String[0]));){
                 JsonElement jsonElement = jsonParser.parse((Reader)bufferedReader);
-                DataResult dataResult = WorldGenSettings.CODEC.parse(registryReadOps, jsonElement);
+                dataResult3 = WorldGenSettings.CODEC.parse(registryReadOps, jsonElement); // MagmaCube - decompile error
             }
             catch (JsonIOException | JsonSyntaxException | IOException exception2) {
                 dataResult3 = DataResult.error((String)("Failed to parse file: " + exception2.getMessage()));
@@ -275,11 +277,11 @@ Widget {
         OptionalLong optionalLong4;
         String s = this.seedEdit.getValue();
         if (StringUtils.isEmpty((CharSequence)s)) {
-            OptionalLong optionalLong = OptionalLong.empty();
+            optionalLong4 = OptionalLong.empty(); // MagmaCube - decompile error
         } else {
             OptionalLong optionalLong2 = WorldGenSettingsComponent.parseLong(s);
             if (optionalLong2.isPresent() && optionalLong2.getAsLong() != 0L) {
-                OptionalLong optionalLong3 = optionalLong2;
+                optionalLong4 = optionalLong2; // MagmaCube - decompile error
             } else {
                 optionalLong4 = OptionalLong.of(s.hashCode());
             }
@@ -315,7 +317,7 @@ Widget {
         RegistryAccess.RegistryHolder registryHolder = RegistryAccess.builtin();
         RegistryWriteOps registryWriteOps = RegistryWriteOps.create(JsonOps.INSTANCE, this.registryHolder);
         RegistryReadOps registryReadOps = RegistryReadOps.create(JsonOps.INSTANCE, serverResources.getResourceManager(), registryHolder);
-        DataResult dataResult = WorldGenSettings.CODEC.encodeStart(registryWriteOps, this.settings).flatMap(jsonElement -> WorldGenSettings.CODEC.parse((DynamicOps)registryReadOps, jsonElement));
+        DataResult<WorldGenSettings> dataResult = WorldGenSettings.CODEC.encodeStart(registryWriteOps, this.settings).flatMap(jsonElement -> WorldGenSettings.CODEC.parse((DynamicOps)registryReadOps, jsonElement)); // MagmaCube - type
         dataResult.resultOrPartial(Util.prefix("Error parsing worldgen settings after loading data packs: ", ((Logger)LOGGER)::error)).ifPresent(worldGenSettings -> {
             this.settings = worldGenSettings;
             this.registryHolder = registryHolder;
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
index 5f142372a7fd17f4f5ffe9361eeac8c772cb38f1..3ef9124ab215154c57e22b960e13ffcee68b8d65 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
@@ -64,7 +64,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class WorldSelectionList
-extends ObjectSelectionList<WorldListEntry> {
+extends ObjectSelectionList<WorldSelectionList.WorldListEntry> { // MagmaCube - decompile error
     private static final Logger LOGGER = LogManager.getLogger();
     private static final DateFormat DATE_FORMAT = new SimpleDateFormat();
     private static final ResourceLocation ICON_MISSING = new ResourceLocation("textures/misc/unknown_server.png");
@@ -333,7 +333,7 @@ extends ObjectSelectionList<WorldListEntry> {
             this.queueLoadScreen();
             RegistryAccess.RegistryHolder registryHolder = RegistryAccess.builtin();
             try (LevelStorageSource.LevelStorageAccess levelStorageAccess = this.minecraft.getLevelSource().createAccess(this.summary.getLevelId());
-                 Minecraft.ServerStem serverStem = this.minecraft.makeServerStem(registryHolder, Minecraft::loadDataPacks, (Function4<LevelStorageSource.LevelStorageAccess, RegistryAccess.RegistryHolder, ResourceManager, DataPackConfig, WorldData>)((Function4)Minecraft::loadWorldData), false, levelStorageAccess);){
+                 Minecraft.ServerStem serverStem = this.minecraft.makeServerStem(registryHolder, Minecraft::loadDataPacks, (Minecraft::loadWorldData), false, levelStorageAccess);){ // MagmaCube - decompile error
                 LevelSettings levelSettings = serverStem.worldData().getLevelSettings();
                 DataPackConfig dataPackConfig = levelSettings.getDataPackConfig();
                 WorldGenSettings worldGenSettings = serverStem.worldData().worldGenSettings();
diff --git a/src/main/java/net/minecraft/client/gui/spectator/RootSpectatorMenuCategory.java b/src/main/java/net/minecraft/client/gui/spectator/RootSpectatorMenuCategory.java
index b43853077040c909b1756be7cad8ceb791afa0d8..a1a7e0e1487284e66911b3bde6dea85c4f4f3778 100644
--- a/src/main/java/net/minecraft/client/gui/spectator/RootSpectatorMenuCategory.java
+++ b/src/main/java/net/minecraft/client/gui/spectator/RootSpectatorMenuCategory.java
@@ -13,7 +13,7 @@ public class RootSpectatorMenuCategory implements SpectatorMenuCategory
     private final List<SpectatorMenuItem> items;
     
     public RootSpectatorMenuCategory() {
-        (this.items = (List<SpectatorMenuItem>)Lists.newArrayList()).add(new TeleportToPlayerMenuCategory());
+        (this.items = Lists.newArrayList()).add(new TeleportToPlayerMenuCategory()); // MagmaCube - decompile fix
         this.items.add(new TeleportToTeamMenuCategory());
     }
     
diff --git a/src/main/java/net/minecraft/client/gui/spectator/categories/TeleportToTeamMenuCategory.java b/src/main/java/net/minecraft/client/gui/spectator/categories/TeleportToTeamMenuCategory.java
index ad8ec5d662caf39cdd8482a3ca61cf501f805f53..0922eda86f968ba247ce0c76cb2b02878062265f 100644
--- a/src/main/java/net/minecraft/client/gui/spectator/categories/TeleportToTeamMenuCategory.java
+++ b/src/main/java/net/minecraft/client/gui/spectator/categories/TeleportToTeamMenuCategory.java
@@ -70,7 +70,7 @@ SpectatorMenuItem {
         return false;
     }
 
-    class TeamSelectionItem
+    static class TeamSelectionItem
     implements SpectatorMenuItem {
         private final PlayerTeam team;
         private final ResourceLocation location;
diff --git a/src/main/java/net/minecraft/client/main/Main.java b/src/main/java/net/minecraft/client/main/Main.java
index 4088d6c5280ae76ea97d05eeb562e0e68c0e7108..4e942304e5e533f0e8170a135f9375224226a874 100644
--- a/src/main/java/net/minecraft/client/main/Main.java
+++ b/src/main/java/net/minecraft/client/main/Main.java
@@ -42,7 +42,7 @@ public class Main {
      */
     public static void main(String[] strings) {
         Thread thread3;
-        void minecraft2;
+        final Minecraft[] minecraft2 = new Minecraft[1]; // MagmaCube - decompile error
         OptionParser optionParser = new OptionParser();
         optionParser.allowsUnrecognizedOptions();
         optionParser.accepts("demo");
@@ -50,29 +50,31 @@ public class Main {
         optionParser.accepts("disableChat");
         optionParser.accepts("fullscreen");
         optionParser.accepts("checkGlErrors");
+        // MagmaCube start - decompile error
         ArgumentAcceptingOptionSpec optionSpec = optionParser.accepts("server").withRequiredArg();
-        ArgumentAcceptingOptionSpec optionSpec2 = optionParser.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(25565, (Object[])new Integer[0]);
-        ArgumentAcceptingOptionSpec optionSpec3 = optionParser.accepts("gameDir").withRequiredArg().ofType(File.class).defaultsTo(new File("."), (Object[])new File[0]);
+        ArgumentAcceptingOptionSpec optionSpec2 = optionParser.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(25565, new Integer[0]);
+        ArgumentAcceptingOptionSpec optionSpec3 = optionParser.accepts("gameDir").withRequiredArg().ofType(File.class).defaultsTo(new File("."), new File[0]);
         ArgumentAcceptingOptionSpec optionSpec4 = optionParser.accepts("assetsDir").withRequiredArg().ofType(File.class);
         ArgumentAcceptingOptionSpec optionSpec5 = optionParser.accepts("resourcePackDir").withRequiredArg().ofType(File.class);
         ArgumentAcceptingOptionSpec optionSpec6 = optionParser.accepts("dataPackDir").withRequiredArg().ofType(File.class);
         ArgumentAcceptingOptionSpec optionSpec7 = optionParser.accepts("proxyHost").withRequiredArg();
-        ArgumentAcceptingOptionSpec optionSpec8 = optionParser.accepts("proxyPort").withRequiredArg().defaultsTo("8080", (Object[])new String[0]).ofType(Integer.class);
+        ArgumentAcceptingOptionSpec optionSpec8 = optionParser.accepts("proxyPort").withRequiredArg().defaultsTo("8080", new String[0]).ofType(Integer.class);
         ArgumentAcceptingOptionSpec optionSpec9 = optionParser.accepts("proxyUser").withRequiredArg();
         ArgumentAcceptingOptionSpec optionSpec10 = optionParser.accepts("proxyPass").withRequiredArg();
-        ArgumentAcceptingOptionSpec optionSpec11 = optionParser.accepts("username").withRequiredArg().defaultsTo(("Player" + Util.getMillis() % 1000L), (Object[])new String[0]);
+        ArgumentAcceptingOptionSpec optionSpec11 = optionParser.accepts("username").withRequiredArg().defaultsTo(("Player" + Util.getMillis() % 1000L), new String[0]);
         ArgumentAcceptingOptionSpec optionSpec12 = optionParser.accepts("uuid").withRequiredArg();
         ArgumentAcceptingOptionSpec optionSpec13 = optionParser.accepts("accessToken").withRequiredArg().required();
         ArgumentAcceptingOptionSpec optionSpec14 = optionParser.accepts("version").withRequiredArg().required();
-        ArgumentAcceptingOptionSpec optionSpec15 = optionParser.accepts("width").withRequiredArg().ofType(Integer.class).defaultsTo(854, (Object[])new Integer[0]);
-        ArgumentAcceptingOptionSpec optionSpec16 = optionParser.accepts("height").withRequiredArg().ofType(Integer.class).defaultsTo(480, (Object[])new Integer[0]);
+        ArgumentAcceptingOptionSpec optionSpec15 = optionParser.accepts("width").withRequiredArg().ofType(Integer.class).defaultsTo(854, new Integer[0]);
+        ArgumentAcceptingOptionSpec optionSpec16 = optionParser.accepts("height").withRequiredArg().ofType(Integer.class).defaultsTo(480, new Integer[0]);
         ArgumentAcceptingOptionSpec optionSpec17 = optionParser.accepts("fullscreenWidth").withRequiredArg().ofType(Integer.class);
         ArgumentAcceptingOptionSpec optionSpec18 = optionParser.accepts("fullscreenHeight").withRequiredArg().ofType(Integer.class);
-        ArgumentAcceptingOptionSpec optionSpec19 = optionParser.accepts("userProperties").withRequiredArg().defaultsTo("{}", (Object[])new String[0]);
-        ArgumentAcceptingOptionSpec optionSpec20 = optionParser.accepts("profileProperties").withRequiredArg().defaultsTo("{}", (Object[])new String[0]);
+        ArgumentAcceptingOptionSpec optionSpec19 = optionParser.accepts("userProperties").withRequiredArg().defaultsTo("{}", new String[0]);
+        ArgumentAcceptingOptionSpec optionSpec20 = optionParser.accepts("profileProperties").withRequiredArg().defaultsTo("{}", new String[0]);
         ArgumentAcceptingOptionSpec optionSpec21 = optionParser.accepts("assetIndex").withRequiredArg();
-        ArgumentAcceptingOptionSpec optionSpec22 = optionParser.accepts("userType").withRequiredArg().defaultsTo("legacy", (Object[])new String[0]);
-        ArgumentAcceptingOptionSpec optionSpec23 = optionParser.accepts("versionType").withRequiredArg().defaultsTo("release", (Object[])new String[0]);
+        ArgumentAcceptingOptionSpec optionSpec22 = optionParser.accepts("userType").withRequiredArg().defaultsTo("legacy", new String[0]);
+        ArgumentAcceptingOptionSpec optionSpec23 = optionParser.accepts("versionType").withRequiredArg().defaultsTo("release", new String[0]);
+        // MagmaCube end - decompile error
         NonOptionArgumentSpec optionSpec24 = optionParser.nonOptions();
         OptionSet optionSet = optionParser.parse(strings);
         List list = optionSet.valuesOf((OptionSpec)optionSpec24);
@@ -130,11 +132,13 @@ public class Main {
 
             @Override
             public void run() {
-                Minecraft minecraft = Minecraft.getInstance();
-                if (minecraft == null) {
+                // MagmaCube start - decompile error
+                minecraft2[0] = Minecraft.getInstance();
+                if (minecraft2[0] == null) {
+                // MagmaCube end - decompile error
                     return;
                 }
-                IntegratedServer integratedServer = minecraft.getSingleplayerServer();
+                IntegratedServer integratedServer = minecraft2[0].getSingleplayerServer(); // MagmaCube - decompile error
                 if (integratedServer != null) {
                     integratedServer.halt(true);
                 }
@@ -161,40 +165,38 @@ public class Main {
             Minecraft.crash(crashReport);
             return;
         }
-        if (minecraft2.renderOnThread()) {
-            Thread thread2 = new Thread("Game thread", (Minecraft)minecraft2){
-                final /* synthetic */ Minecraft val$minecraft;
-                {
-                    this.val$minecraft = minecraft;
-                    super(s);
-                }
-
+        // MagmaCube start - decompile error
+        if (minecraft2[0].renderOnThread()) {
+            thread3 = new Thread("Game thread"){
+        // MagmaCube end - decompile error
                 @Override
                 public void run() {
                     try {
                         RenderSystem.initGameThread(true);
-                        this.val$minecraft.run();
+                        minecraft2[0].run(); // MagmaCube - decompile error
                     }
                     catch (Throwable throwable) {
                         LOGGER.error("Exception in client thread", throwable);
                     }
                 }
             };
-            thread2.start();
-            while (minecraft2.isRunning()) {
+            // MagmaCube start - decompile error
+            thread3.start();
+            while (minecraft2[0].isRunning()) {
+            // MagmaCube end - decompile error
             }
         } else {
             thread3 = null;
             try {
                 RenderSystem.initGameThread(false);
-                minecraft2.run();
+                minecraft2[0].run(); // MagmaCube - decompile error
             }
             catch (Throwable throwable2) {
                 LOGGER.error("Unhandled game exception", throwable2);
             }
         }
         try {
-            minecraft2.stop();
+            minecraft2[0].stop(); // MagmaCube - decompile error
             if (thread3 != null) {
                 thread3.join();
             }
@@ -203,7 +205,7 @@ public class Main {
             LOGGER.error("Exception during client thread shutdown", (Throwable)interruptedException);
         }
         finally {
-            minecraft2.destroy();
+            minecraft2[0].destroy(); // MagmaCube - decompile error
         }
     }
 
diff --git a/src/main/java/net/minecraft/client/model/AbstractZombieModel.java b/src/main/java/net/minecraft/client/model/AbstractZombieModel.java
index 48e754041805dfdb3983d73eee594b84485661cb..99e4b5c8888f6da59a5723fd8d0745d14cdda38e 100644
--- a/src/main/java/net/minecraft/client/model/AbstractZombieModel.java
+++ b/src/main/java/net/minecraft/client/model/AbstractZombieModel.java
@@ -1,7 +1,5 @@
 package net.minecraft.client.model;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.monster.Monster;
 
 public abstract class AbstractZombieModel<T extends Monster> extends HumanoidModel<T>
diff --git a/src/main/java/net/minecraft/client/model/ArmorStandArmorModel.java b/src/main/java/net/minecraft/client/model/ArmorStandArmorModel.java
index 0ad64cf5fba8b6f547a9d53a8813e779ee2b078e..7dd4c698ad94b142494010b5df30e98ac15518a2 100644
--- a/src/main/java/net/minecraft/client/model/ArmorStandArmorModel.java
+++ b/src/main/java/net/minecraft/client/model/ArmorStandArmorModel.java
@@ -1,7 +1,5 @@
 package net.minecraft.client.model;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.decoration.ArmorStand;
 
 public class ArmorStandArmorModel extends HumanoidModel<ArmorStand>
diff --git a/src/main/java/net/minecraft/client/model/ArmorStandModel.java b/src/main/java/net/minecraft/client/model/ArmorStandModel.java
index 6d904d7bea341608d0338c0407ccf528b1904661..c4ca67438e8dff0a7602407120f46dad56b6ea57 100644
--- a/src/main/java/net/minecraft/client/model/ArmorStandModel.java
+++ b/src/main/java/net/minecraft/client/model/ArmorStandModel.java
@@ -1,7 +1,5 @@
 package net.minecraft.client.model;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
 import com.mojang.blaze3d.vertex.PoseStack;
 import net.minecraft.world.entity.HumanoidArm;
 import com.google.common.collect.Iterables;
diff --git a/src/main/java/net/minecraft/client/model/BoatModel.java b/src/main/java/net/minecraft/client/model/BoatModel.java
index 3938f7c9848dbb9ea9b19b1b6dfa15e7e5ec7817..f4e32b2a6d27aa5d03d8aa38ce52e133123d4b11 100644
--- a/src/main/java/net/minecraft/client/model/BoatModel.java
+++ b/src/main/java/net/minecraft/client/model/BoatModel.java
@@ -43,7 +43,7 @@ public class BoatModel extends ListModel<Boat>
         (this.waterPatch = new ModelPart(this, 0, 0).setTexSize(128, 64)).addBox(-14.0f, -9.0f, -3.0f, 28.0f, 16.0f, 3.0f, 0.0f);
         this.waterPatch.setPos(0.0f, -3.0f, 1.0f);
         this.waterPatch.xRot = 1.5707964f;
-        final ImmutableList.Builder<ModelPart> builder = (ImmutableList.Builder<ModelPart>)ImmutableList.builder();
+        final ImmutableList.Builder<ModelPart> builder = ImmutableList.builder(); // MagmaCube - decompile error
         builder.addAll((Iterable)Arrays.asList(modelParts));
         builder.addAll((Iterable)Arrays.asList(this.paddles));
         this.parts = (ImmutableList<ModelPart>)builder.build();
diff --git a/src/main/java/net/minecraft/client/model/CatModel.java b/src/main/java/net/minecraft/client/model/CatModel.java
index 64dacbe48a0fe4fe786fff840b5a175d6ea6a71c..a0ab7ca0539c93c6c4cb662fca197f2a4e135726 100644
--- a/src/main/java/net/minecraft/client/model/CatModel.java
+++ b/src/main/java/net/minecraft/client/model/CatModel.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.model;
 
-import net.minecraft.world.entity.Entity;
 import net.minecraft.client.model.geom.ModelPart;
 import net.minecraft.world.entity.animal.Cat;
 
diff --git a/src/main/java/net/minecraft/client/model/ChestedHorseModel.java b/src/main/java/net/minecraft/client/model/ChestedHorseModel.java
index d113b5e1881a066a4853b727772c8fa6d5e02a68..dccba7ff2ca374f7966bc11cfab3bcf69506cd5d 100644
--- a/src/main/java/net/minecraft/client/model/ChestedHorseModel.java
+++ b/src/main/java/net/minecraft/client/model/ChestedHorseModel.java
@@ -1,7 +1,5 @@
 package net.minecraft.client.model;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.animal.horse.AbstractHorse;
 import net.minecraft.client.model.geom.ModelPart;
 import net.minecraft.world.entity.animal.horse.AbstractChestedHorse;
 
diff --git a/src/main/java/net/minecraft/client/model/DrownedModel.java b/src/main/java/net/minecraft/client/model/DrownedModel.java
index 06ed75aeda1ce926433e570b614b43c6cb209113..c1d00b1b959f803da1831821a86bccacdf2eb814 100644
--- a/src/main/java/net/minecraft/client/model/DrownedModel.java
+++ b/src/main/java/net/minecraft/client/model/DrownedModel.java
@@ -1,8 +1,5 @@
 package net.minecraft.client.model;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.monster.Monster;
 import net.minecraft.util.Mth;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.entity.HumanoidArm;
diff --git a/src/main/java/net/minecraft/client/model/GiantZombieModel.java b/src/main/java/net/minecraft/client/model/GiantZombieModel.java
index b001c5b948a171e6ee25b41cacf5ad41d531bd7f..182a005f25ad646110a03410a5d0297b8db072a2 100644
--- a/src/main/java/net/minecraft/client/model/GiantZombieModel.java
+++ b/src/main/java/net/minecraft/client/model/GiantZombieModel.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.model;
 
-import net.minecraft.world.entity.monster.Monster;
 import net.minecraft.world.entity.monster.Giant;
 
 public class GiantZombieModel extends AbstractZombieModel<Giant>
diff --git a/src/main/java/net/minecraft/client/model/HoglinModel.java b/src/main/java/net/minecraft/client/model/HoglinModel.java
index 5a07ea6efd5762da9c0a3d4cc3142754dbbb044b..4b080e051796259cc911faa3c6f8c9266e3ac94a 100644
--- a/src/main/java/net/minecraft/client/model/HoglinModel.java
+++ b/src/main/java/net/minecraft/client/model/HoglinModel.java
@@ -2,6 +2,7 @@ package net.minecraft.client.model;
 
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.Mob; // MagmaCube
 import net.minecraft.world.entity.monster.hoglin.HoglinBase;
 import net.minecraft.util.Mth;
 import com.google.common.collect.ImmutableList;
diff --git a/src/main/java/net/minecraft/client/model/PiglinModel.java b/src/main/java/net/minecraft/client/model/PiglinModel.java
index b15aba4948cdfc23c8c16915d239c5d4155a18ae..e6cdd71aee7fb2f516b12ac2a757a975bc4e8874 100644
--- a/src/main/java/net/minecraft/client/model/PiglinModel.java
+++ b/src/main/java/net/minecraft/client/model/PiglinModel.java
@@ -1,9 +1,7 @@
 package net.minecraft.client.model;
 
-import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.monster.piglin.Piglin;
 import net.minecraft.world.entity.EntityType;
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.monster.piglin.PiglinArmPose;
 import net.minecraft.world.entity.monster.piglin.AbstractPiglin;
 import net.minecraft.util.Mth;
diff --git a/src/main/java/net/minecraft/client/model/PlayerModel.java b/src/main/java/net/minecraft/client/model/PlayerModel.java
index 1f7ab5fd02bc1a2306ef8b817c7e2b60c11814e5..9d249ec4529a9c581669340e935997892aea0eab 100644
--- a/src/main/java/net/minecraft/client/model/PlayerModel.java
+++ b/src/main/java/net/minecraft/client/model/PlayerModel.java
@@ -29,7 +29,7 @@ public class PlayerModel<T extends LivingEntity> extends HumanoidModel<T>
     
     public PlayerModel(final float f, final boolean flag) {
         super(RenderType::entityTranslucent, f, 0.0f, 64, 64);
-        this.cubes = (List<ModelPart>)Lists.newArrayList();
+        this.cubes = Lists.newArrayList(); // MagmaCube - decompile error
         this.slim = flag;
         (this.ear = new ModelPart(this, 24, 0)).addBox(-3.0f, -6.0f, -1.0f, 6.0f, 6.0f, 1.0f, f);
         (this.cloak = new ModelPart(this, 0, 0)).setTexSize(64, 32);
@@ -141,7 +141,7 @@ public class PlayerModel<T extends LivingEntity> extends HumanoidModel<T>
     @Override
     public void accept(final ModelPart modelPart) {
         if (this.cubes == null) {
-            this.cubes = (List<ModelPart>)Lists.newArrayList();
+            this.cubes = Lists.newArrayList(); // MagmaCube - decompile error
         }
         this.cubes.add(modelPart);
     }
diff --git a/src/main/java/net/minecraft/client/model/SheepFurModel.java b/src/main/java/net/minecraft/client/model/SheepFurModel.java
index 491e64cbde1ee14cf0f221eb14f04291434db7af..27e129574df699e116f4647206cda128f6ff5644 100644
--- a/src/main/java/net/minecraft/client/model/SheepFurModel.java
+++ b/src/main/java/net/minecraft/client/model/SheepFurModel.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.model;
 
-import net.minecraft.world.entity.Entity;
 import net.minecraft.client.model.geom.ModelPart;
 import net.minecraft.world.entity.animal.Sheep;
 
diff --git a/src/main/java/net/minecraft/client/model/SheepModel.java b/src/main/java/net/minecraft/client/model/SheepModel.java
index 88e35e2aa29e3c0fe68473903184e81758801238..0941235730cb627a8022f54d4a881513bd8e7296 100644
--- a/src/main/java/net/minecraft/client/model/SheepModel.java
+++ b/src/main/java/net/minecraft/client/model/SheepModel.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.model;
 
-import net.minecraft.world.entity.Entity;
 import net.minecraft.client.model.geom.ModelPart;
 import net.minecraft.world.entity.animal.Sheep;
 
diff --git a/src/main/java/net/minecraft/client/model/SkeletonModel.java b/src/main/java/net/minecraft/client/model/SkeletonModel.java
index d810bfee3bb6a7a8543493c92955984c15728869..358a911716f33d785b449137a1cad055099766cf 100644
--- a/src/main/java/net/minecraft/client/model/SkeletonModel.java
+++ b/src/main/java/net/minecraft/client/model/SkeletonModel.java
@@ -1,9 +1,9 @@
 package net.minecraft.client.model;
 
-import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
 import com.mojang.blaze3d.vertex.PoseStack;
 import net.minecraft.util.Mth;
+import net.minecraft.world.entity.Mob;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.entity.HumanoidArm;
 import net.minecraft.world.item.Items;
diff --git a/src/main/java/net/minecraft/client/model/TurtleModel.java b/src/main/java/net/minecraft/client/model/TurtleModel.java
index ed989324b2ea3c48e9a9a06196f2f3b051dd9be3..a8da2fc4e1fa79204668306c5158ee49cd6ba194 100644
--- a/src/main/java/net/minecraft/client/model/TurtleModel.java
+++ b/src/main/java/net/minecraft/client/model/TurtleModel.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.model;
 
-import net.minecraft.world.entity.Entity;
 import com.mojang.blaze3d.vertex.VertexConsumer;
 import com.mojang.blaze3d.vertex.PoseStack;
 import net.minecraft.util.Mth;
diff --git a/src/main/java/net/minecraft/client/model/VexModel.java b/src/main/java/net/minecraft/client/model/VexModel.java
index 6ef6780e770616e2b7aed17f04ef371894060614..4b048758029f3e2ccf74962e9a91221dc160db92 100644
--- a/src/main/java/net/minecraft/client/model/VexModel.java
+++ b/src/main/java/net/minecraft/client/model/VexModel.java
@@ -1,7 +1,5 @@
 package net.minecraft.client.model;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.HumanoidArm;
 import com.google.common.collect.Iterables;
diff --git a/src/main/java/net/minecraft/client/model/ZombieModel.java b/src/main/java/net/minecraft/client/model/ZombieModel.java
index d9cb7cbb8c9baf3a559c09e7c7e7bb213f316178..b6a6ea84114b50cbb26dcfb6d610b04d7bd84f95 100644
--- a/src/main/java/net/minecraft/client/model/ZombieModel.java
+++ b/src/main/java/net/minecraft/client/model/ZombieModel.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.model;
 
-import net.minecraft.world.entity.monster.Monster;
 import net.minecraft.world.entity.monster.Zombie;
 
 public class ZombieModel<T extends Zombie> extends AbstractZombieModel<T>
diff --git a/src/main/java/net/minecraft/client/model/ZombieVillagerModel.java b/src/main/java/net/minecraft/client/model/ZombieVillagerModel.java
index 8708ac838974cf8e3bd2abc8e51a0c50f21857b5..d779f510e452d50415ca7eb733bcc36a11210ca0 100644
--- a/src/main/java/net/minecraft/client/model/ZombieVillagerModel.java
+++ b/src/main/java/net/minecraft/client/model/ZombieVillagerModel.java
@@ -1,7 +1,5 @@
 package net.minecraft.client.model;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.client.model.geom.ModelPart;
 import net.minecraft.world.entity.monster.Zombie;
 
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientChunkCache.java b/src/main/java/net/minecraft/client/multiplayer/ClientChunkCache.java
index b219cdf701c27ee436fcb19eb43f47f7bd10945e..8187346ac4c29170433a0fa191642dc9c73d2ef2 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientChunkCache.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientChunkCache.java
@@ -172,12 +172,6 @@ extends ChunkSource {
         return this.hasChunk(Mth.floor(entity.getX()) >> 4, Mth.floor(entity.getZ()) >> 4);
     }
 
-    @Override
-    @Nullable
-    public /* synthetic */ ChunkAccess getChunk(int n, int n2, ChunkStatus chunkStatus, boolean bl) {
-        return this.getChunk(n, n2, chunkStatus, bl);
-    }
-
     final class Storage {
         private final AtomicReferenceArray<LevelChunk> chunks;
         private final int chunkRadius;
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientHandshakePacketListenerImpl.java b/src/main/java/net/minecraft/client/multiplayer/ClientHandshakePacketListenerImpl.java
index 7a7276c2837c6e2badaf9f2ac3dbdc86bce1565a..a410cf035c5f327cb76d1d2727ecf787325c309d 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientHandshakePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientHandshakePacketListenerImpl.java
@@ -61,17 +61,21 @@ implements ClientLoginPacketListener {
      */
     @Override
     public void handleHello(ClientboundHelloPacket clientboundHelloPacket) {
-        void cipher4;
-        void cipher3;
-        void serverboundKeyPacket2;
-        void s2;
+        // MagmaCube start - decompile error
+        Cipher cipher4;
+        Cipher cipher3;
+        ServerboundKeyPacket serverboundKeyPacket2;
+        String s2;
+        // MagmaCube end - decompile error
         try {
             SecretKey secretKey = Crypt.generateSecretKey();
             PublicKey publicKey = clientboundHelloPacket.getPublicKey();
-            String s = new BigInteger(Crypt.digestData(clientboundHelloPacket.getServerId(), publicKey, secretKey)).toString(16);
-            Cipher cipher = Crypt.getCipher(2, secretKey);
-            Cipher cipher2 = Crypt.getCipher(1, secretKey);
-            ServerboundKeyPacket serverboundKeyPacket = new ServerboundKeyPacket(secretKey, publicKey, clientboundHelloPacket.getNonce());
+            // MagmaCube start - decompile error
+            s2 = new BigInteger(Crypt.digestData(clientboundHelloPacket.getServerId(), publicKey, secretKey)).toString(16);
+            cipher4 = Crypt.getCipher(2, secretKey);
+            cipher3 = Crypt.getCipher(1, secretKey);
+            serverboundKeyPacket2 = new ServerboundKeyPacket(secretKey, publicKey, clientboundHelloPacket.getNonce());
+            // MagmaCube end - decompile error
         }
         catch (CryptException cryptException) {
             throw new IllegalStateException("Protocol error", cryptException);
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientLevel.java b/src/main/java/net/minecraft/client/multiplayer/ClientLevel.java
index 06019ac945f6d9c41137c901bda3ec2475c91bf7..13cbfe30121722f4aafb0e53a5de050e099648fa 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientLevel.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientLevel.java
@@ -750,16 +750,6 @@ extends Level {
         return this.clientLevelData;
     }
 
-    @Override
-    public /* synthetic */ LevelData getLevelData() {
-        return this.getLevelData();
-    }
-
-    @Override
-    public /* synthetic */ ChunkSource getChunkSource() {
-        return this.getChunkSource();
-    }
-
     public static class ClientLevelData
     implements WritableLevelData {
         private final boolean hardcore;
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
index 7251b122bf59a578c31545954482b4e26872e6f3..aafb5d53ee2e57e15d85843e03a69d1df3d2a3a1 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
@@ -400,115 +400,117 @@ implements ClientGamePacketListener {
 
     @Override
     public void handleAddEntity(ClientboundAddEntityPacket clientboundAddEntityPacket) {
-        Object entity41;
+        Entity entity; // MagmaCube - decompile error
         PacketUtils.ensureRunningOnSameThread(clientboundAddEntityPacket, this, this.minecraft);
         double d = clientboundAddEntityPacket.getX();
         double d2 = clientboundAddEntityPacket.getY();
         double d3 = clientboundAddEntityPacket.getZ();
         EntityType<?> entityType = clientboundAddEntityPacket.getType();
+        // MagmaCube start - decompile error
         if (entityType == EntityType.CHEST_MINECART) {
-            MinecartChest entity = new MinecartChest(this.level, d, d2, d3);
+            entity = new MinecartChest(this.level, d, d2, d3);
         } else if (entityType == EntityType.FURNACE_MINECART) {
-            MinecartFurnace entity2 = new MinecartFurnace(this.level, d, d2, d3);
+            entity = new MinecartFurnace(this.level, d, d2, d3);
         } else if (entityType == EntityType.TNT_MINECART) {
-            MinecartTNT entity3 = new MinecartTNT(this.level, d, d2, d3);
+            entity = new MinecartTNT(this.level, d, d2, d3);
         } else if (entityType == EntityType.SPAWNER_MINECART) {
-            MinecartSpawner entity4 = new MinecartSpawner(this.level, d, d2, d3);
+            entity = new MinecartSpawner(this.level, d, d2, d3);
         } else if (entityType == EntityType.HOPPER_MINECART) {
-            MinecartHopper entity5 = new MinecartHopper(this.level, d, d2, d3);
+            entity = new MinecartHopper(this.level, d, d2, d3);
         } else if (entityType == EntityType.COMMAND_BLOCK_MINECART) {
-            MinecartCommandBlock entity6 = new MinecartCommandBlock(this.level, d, d2, d3);
+            entity = new MinecartCommandBlock(this.level, d, d2, d3);
         } else if (entityType == EntityType.MINECART) {
-            Minecart entity7 = new Minecart(this.level, d, d2, d3);
+            entity = new Minecart(this.level, d, d2, d3);
         } else if (entityType == EntityType.FISHING_BOBBER) {
-            Entity entity8 = this.level.getEntity(clientboundAddEntityPacket.getData());
-            if (entity8 instanceof Player) {
-                FishingHook entity9 = new FishingHook(this.level, (Player)entity8, d, d2, d3);
+            entity = this.level.getEntity(clientboundAddEntityPacket.getData());
+            if (entity instanceof Player) {
+                entity = new FishingHook(this.level, (Player)entity, d, d2, d3);
             } else {
-                Object entity10 = null;
+                entity = null;
             }
         } else if (entityType == EntityType.ARROW) {
-            Arrow entity11 = new Arrow(this.level, d, d2, d3);
-            Entity entity12 = this.level.getEntity(clientboundAddEntityPacket.getData());
-            if (entity12 != null) {
-                ((AbstractArrow)entity11).setOwner(entity12);
+            entity = new Arrow(this.level, d, d2, d3);
+            Entity owner = this.level.getEntity(clientboundAddEntityPacket.getData());
+            if (owner != null) {
+                ((AbstractArrow)entity).setOwner(owner);
             }
         } else if (entityType == EntityType.SPECTRAL_ARROW) {
-            SpectralArrow entity13 = new SpectralArrow(this.level, d, d2, d3);
+            entity = new SpectralArrow(this.level, d, d2, d3);
             Entity entity14 = this.level.getEntity(clientboundAddEntityPacket.getData());
             if (entity14 != null) {
-                ((AbstractArrow)entity13).setOwner(entity14);
+                ((AbstractArrow)entity).setOwner(entity14);
             }
         } else if (entityType == EntityType.TRIDENT) {
-            ThrownTrident entity15 = new ThrownTrident(this.level, d, d2, d3);
+            entity = new ThrownTrident(this.level, d, d2, d3);
             Entity entity16 = this.level.getEntity(clientboundAddEntityPacket.getData());
             if (entity16 != null) {
-                ((AbstractArrow)entity15).setOwner(entity16);
+                ((AbstractArrow)entity).setOwner(entity16);
             }
         } else if (entityType == EntityType.SNOWBALL) {
-            Snowball entity17 = new Snowball(this.level, d, d2, d3);
+            entity = new Snowball(this.level, d, d2, d3);
         } else if (entityType == EntityType.LLAMA_SPIT) {
-            LlamaSpit entity18 = new LlamaSpit(this.level, d, d2, d3, clientboundAddEntityPacket.getXa(), clientboundAddEntityPacket.getYa(), clientboundAddEntityPacket.getZa());
+            entity = new LlamaSpit(this.level, d, d2, d3, clientboundAddEntityPacket.getXa(), clientboundAddEntityPacket.getYa(), clientboundAddEntityPacket.getZa());
         } else if (entityType == EntityType.ITEM_FRAME) {
-            ItemFrame entity19 = new ItemFrame(this.level, new BlockPos(d, d2, d3), Direction.from3DDataValue(clientboundAddEntityPacket.getData()));
+            entity = new ItemFrame(this.level, new BlockPos(d, d2, d3), Direction.from3DDataValue(clientboundAddEntityPacket.getData()));
         } else if (entityType == EntityType.LEASH_KNOT) {
-            LeashFenceKnotEntity entity20 = new LeashFenceKnotEntity(this.level, new BlockPos(d, d2, d3));
+            entity = new LeashFenceKnotEntity(this.level, new BlockPos(d, d2, d3));
         } else if (entityType == EntityType.ENDER_PEARL) {
-            ThrownEnderpearl entity21 = new ThrownEnderpearl(this.level, d, d2, d3);
+            entity = new ThrownEnderpearl(this.level, d, d2, d3);
         } else if (entityType == EntityType.EYE_OF_ENDER) {
-            EyeOfEnder entity22 = new EyeOfEnder(this.level, d, d2, d3);
+            entity = new EyeOfEnder(this.level, d, d2, d3);
         } else if (entityType == EntityType.FIREWORK_ROCKET) {
-            FireworkRocketEntity entity23 = new FireworkRocketEntity(this.level, d, d2, d3, ItemStack.EMPTY);
+            entity = new FireworkRocketEntity(this.level, d, d2, d3, ItemStack.EMPTY);
         } else if (entityType == EntityType.FIREBALL) {
-            LargeFireball entity24 = new LargeFireball(this.level, d, d2, d3, clientboundAddEntityPacket.getXa(), clientboundAddEntityPacket.getYa(), clientboundAddEntityPacket.getZa());
+            entity = new LargeFireball(this.level, d, d2, d3, clientboundAddEntityPacket.getXa(), clientboundAddEntityPacket.getYa(), clientboundAddEntityPacket.getZa());
         } else if (entityType == EntityType.DRAGON_FIREBALL) {
-            DragonFireball entity25 = new DragonFireball(this.level, d, d2, d3, clientboundAddEntityPacket.getXa(), clientboundAddEntityPacket.getYa(), clientboundAddEntityPacket.getZa());
+            entity = new DragonFireball(this.level, d, d2, d3, clientboundAddEntityPacket.getXa(), clientboundAddEntityPacket.getYa(), clientboundAddEntityPacket.getZa());
         } else if (entityType == EntityType.SMALL_FIREBALL) {
-            SmallFireball entity26 = new SmallFireball(this.level, d, d2, d3, clientboundAddEntityPacket.getXa(), clientboundAddEntityPacket.getYa(), clientboundAddEntityPacket.getZa());
+            entity = new SmallFireball(this.level, d, d2, d3, clientboundAddEntityPacket.getXa(), clientboundAddEntityPacket.getYa(), clientboundAddEntityPacket.getZa());
         } else if (entityType == EntityType.WITHER_SKULL) {
-            WitherSkull entity27 = new WitherSkull(this.level, d, d2, d3, clientboundAddEntityPacket.getXa(), clientboundAddEntityPacket.getYa(), clientboundAddEntityPacket.getZa());
+            entity = new WitherSkull(this.level, d, d2, d3, clientboundAddEntityPacket.getXa(), clientboundAddEntityPacket.getYa(), clientboundAddEntityPacket.getZa());
         } else if (entityType == EntityType.SHULKER_BULLET) {
-            ShulkerBullet entity28 = new ShulkerBullet(this.level, d, d2, d3, clientboundAddEntityPacket.getXa(), clientboundAddEntityPacket.getYa(), clientboundAddEntityPacket.getZa());
+            entity = new ShulkerBullet(this.level, d, d2, d3, clientboundAddEntityPacket.getXa(), clientboundAddEntityPacket.getYa(), clientboundAddEntityPacket.getZa());
         } else if (entityType == EntityType.EGG) {
-            ThrownEgg entity29 = new ThrownEgg(this.level, d, d2, d3);
+            entity = new ThrownEgg(this.level, d, d2, d3);
         } else if (entityType == EntityType.EVOKER_FANGS) {
-            EvokerFangs entity30 = new EvokerFangs(this.level, d, d2, d3, 0.0f, 0, null);
+            entity = new EvokerFangs(this.level, d, d2, d3, 0.0f, 0, null);
         } else if (entityType == EntityType.POTION) {
-            ThrownPotion entity31 = new ThrownPotion(this.level, d, d2, d3);
+            entity = new ThrownPotion(this.level, d, d2, d3);
         } else if (entityType == EntityType.EXPERIENCE_BOTTLE) {
-            ThrownExperienceBottle entity32 = new ThrownExperienceBottle(this.level, d, d2, d3);
+            entity = new ThrownExperienceBottle(this.level, d, d2, d3);
         } else if (entityType == EntityType.BOAT) {
-            Boat entity33 = new Boat(this.level, d, d2, d3);
+            entity = new Boat(this.level, d, d2, d3);
         } else if (entityType == EntityType.TNT) {
-            PrimedTnt entity34 = new PrimedTnt(this.level, d, d2, d3, null);
+            entity = new PrimedTnt(this.level, d, d2, d3, null);
         } else if (entityType == EntityType.ARMOR_STAND) {
-            ArmorStand entity35 = new ArmorStand(this.level, d, d2, d3);
+            entity = new ArmorStand(this.level, d, d2, d3);
         } else if (entityType == EntityType.END_CRYSTAL) {
-            EndCrystal entity36 = new EndCrystal(this.level, d, d2, d3);
+            entity = new EndCrystal(this.level, d, d2, d3);
         } else if (entityType == EntityType.ITEM) {
-            ItemEntity entity37 = new ItemEntity(this.level, d, d2, d3);
+            entity = new ItemEntity(this.level, d, d2, d3);
         } else if (entityType == EntityType.FALLING_BLOCK) {
-            FallingBlockEntity entity38 = new FallingBlockEntity(this.level, d, d2, d3, Block.stateById(clientboundAddEntityPacket.getData()));
+            entity = new FallingBlockEntity(this.level, d, d2, d3, Block.stateById(clientboundAddEntityPacket.getData()));
         } else if (entityType == EntityType.AREA_EFFECT_CLOUD) {
-            AreaEffectCloud entity39 = new AreaEffectCloud(this.level, d, d2, d3);
+            entity = new AreaEffectCloud(this.level, d, d2, d3);
         } else if (entityType == EntityType.LIGHTNING_BOLT) {
-            LightningBolt entity40 = new LightningBolt((EntityType<? extends LightningBolt>)EntityType.LIGHTNING_BOLT, (Level)this.level);
+            entity = new LightningBolt((EntityType<? extends LightningBolt>)EntityType.LIGHTNING_BOLT, (Level)this.level);
         } else {
-            entity41 = null;
+            entity = null;
         }
-        if (entity41 != null) {
+        if (entity != null) {
             int i = clientboundAddEntityPacket.getId();
-            entity41.setPacketCoordinates(d, d2, d3);
-            entity41.moveTo(d, d2, d3);
-            entity41.xRot = (float)(clientboundAddEntityPacket.getxRot() * 360) / 256.0f;
-            entity41.yRot = (float)(clientboundAddEntityPacket.getyRot() * 360) / 256.0f;
-            entity41.setId(i);
-            entity41.setUUID(clientboundAddEntityPacket.getUUID());
-            this.level.putNonPlayerEntity(i, entity41);
-            if (entity41 instanceof AbstractMinecart) {
-                this.minecraft.getSoundManager().play(new MinecartSoundInstance(entity41));
+            entity.setPacketCoordinates(d, d2, d3);
+            entity.moveTo(d, d2, d3);
+            entity.xRot = (float)(clientboundAddEntityPacket.getxRot() * 360) / 256.0f;
+            entity.yRot = (float)(clientboundAddEntityPacket.getyRot() * 360) / 256.0f;
+            entity.setId(i);
+            entity.setUUID(clientboundAddEntityPacket.getUUID());
+            this.level.putNonPlayerEntity(i, entity);
+            if (entity instanceof AbstractMinecart) {
+                this.minecraft.getSoundManager().play(new MinecartSoundInstance((AbstractMinecart) entity));
             }
         }
+        // MagmaCube end - decompile error
     }
 
     @Override
@@ -642,12 +644,13 @@ implements ClientGamePacketListener {
 
     @Override
     public void handleMovePlayer(ClientboundPlayerPositionPacket clientboundPlayerPositionPacket) {
-        double d12;
-        double d11;
-        double d8;
-        double d7;
-        double d4;
-        double d3;
+        // MagmaCube start - decompile error
+        double z;
+        double dz;
+        double y;
+        double dy;
+        double x;
+        double dx;
         PacketUtils.ensureRunningOnSameThread(clientboundPlayerPositionPacket, this, this.minecraft);
         LocalPlayer player = this.minecraft.player;
         Vec3 vec3 = player.getDeltaMovement();
@@ -655,37 +658,37 @@ implements ClientGamePacketListener {
         boolean flag2 = clientboundPlayerPositionPacket.getRelativeArguments().contains(ClientboundPlayerPositionPacket.RelativeArgument.Y);
         boolean flag3 = clientboundPlayerPositionPacket.getRelativeArguments().contains(ClientboundPlayerPositionPacket.RelativeArgument.Z);
         if (flag) {
-            double d = vec3.x();
-            double d2 = player.getX() + clientboundPlayerPositionPacket.getX();
+            dx = vec3.x();
+            x = player.getX() + clientboundPlayerPositionPacket.getX();
             player.xOld += clientboundPlayerPositionPacket.getX();
         } else {
-            d3 = 0.0;
-            player.xOld = d4 = clientboundPlayerPositionPacket.getX();
+            dx = 0.0;
+            player.xOld = x = clientboundPlayerPositionPacket.getX();
         }
         if (flag2) {
-            double d5 = vec3.y();
-            double d6 = player.getY() + clientboundPlayerPositionPacket.getY();
+            dy = vec3.y();
+            y = player.getY() + clientboundPlayerPositionPacket.getY();
             player.yOld += clientboundPlayerPositionPacket.getY();
         } else {
-            d7 = 0.0;
-            player.yOld = d8 = clientboundPlayerPositionPacket.getY();
+            dy = 0.0;
+            player.yOld = y = clientboundPlayerPositionPacket.getY();
         }
         if (flag3) {
-            double d9 = vec3.z();
-            double d10 = player.getZ() + clientboundPlayerPositionPacket.getZ();
+            dz = vec3.z();
+            z = player.getZ() + clientboundPlayerPositionPacket.getZ();
             player.zOld += clientboundPlayerPositionPacket.getZ();
         } else {
-            d11 = 0.0;
-            player.zOld = d12 = clientboundPlayerPositionPacket.getZ();
+            dz = 0.0;
+            player.zOld = z = clientboundPlayerPositionPacket.getZ();
         }
         if (player.tickCount > 0 && player.getVehicle() != null) {
             ((Player)player).removeVehicle();
         }
-        player.setPosRaw(d4, d8, d12);
-        player.xo = d4;
-        player.yo = d8;
-        player.zo = d12;
-        player.setDeltaMovement(d3, d7, d11);
+        player.setPosRaw(x, y, z);
+        player.xo = x;
+        player.yo = y;
+        player.zo = z;
+        player.setDeltaMovement(dx, dy, dz);
         float f = clientboundPlayerPositionPacket.getYRot();
         float f2 = clientboundPlayerPositionPacket.getXRot();
         if (clientboundPlayerPositionPacket.getRelativeArguments().contains(ClientboundPlayerPositionPacket.RelativeArgument.X_ROT)) {
@@ -694,7 +697,8 @@ implements ClientGamePacketListener {
         if (clientboundPlayerPositionPacket.getRelativeArguments().contains(ClientboundPlayerPositionPacket.RelativeArgument.Y_ROT)) {
             f += player.yRot;
         }
-        player.absMoveTo(d4, d8, d12, f, f2);
+        player.absMoveTo(x, y, z, f, f2);
+        // MagmaCube end - decompile error
         this.connection.send(new ServerboundAcceptTeleportationPacket(clientboundPlayerPositionPacket.getId()));
         this.connection.send(new ServerboundMovePlayerPacket.PosRot(player.getX(), player.getY(), player.getZ(), player.yRot, player.xRot, false));
         if (!this.started) {
@@ -859,10 +863,10 @@ implements ClientGamePacketListener {
             livingEntity.setDeltaMovement((float)clientboundAddMobPacket.getXd() / 8000.0f, (float)clientboundAddMobPacket.getYd() / 8000.0f, (float)clientboundAddMobPacket.getZd() / 8000.0f);
             this.level.putNonPlayerEntity(clientboundAddMobPacket.getId(), livingEntity);
             if (livingEntity instanceof Bee) {
-                BeeFlyingSoundInstance beeSoundInstance2;
+                net.minecraft.client.resources.sounds.TickableSoundInstance beeSoundInstance2; // MagmaCube - decompile error
                 boolean flag = ((Bee)livingEntity).isAngry();
                 if (flag) {
-                    BeeAggressiveSoundInstance beeSoundInstance = new BeeAggressiveSoundInstance((Bee)livingEntity);
+                    beeSoundInstance2 = new BeeAggressiveSoundInstance((Bee)livingEntity); // MagmaCube - decompile error
                 } else {
                     beeSoundInstance2 = new BeeFlyingSoundInstance((Bee)livingEntity);
                 }
@@ -1574,20 +1578,22 @@ implements ClientGamePacketListener {
         } else if (serverData == null || serverData.getResourcePackStatus() == ServerData.ServerPackStatus.PROMPT) {
             this.minecraft.execute(() -> this.minecraft.setScreen(new ConfirmScreen(flag -> {
                 this.minecraft = Minecraft.getInstance();
-                ServerData serverData = this.minecraft.getCurrentServer();
+                // MagmaCube start - decompile error
+                ServerData currentServer = this.minecraft.getCurrentServer();
                 if (flag) {
-                    if (serverData != null) {
-                        serverData.setResourcePackStatus(ServerData.ServerPackStatus.ENABLED);
+                    if (currentServer != null) {
+                        currentServer.setResourcePackStatus(ServerData.ServerPackStatus.ENABLED);
                     }
                     this.send(ServerboundResourcePackPacket.Action.ACCEPTED);
                     this.downloadCallback(this.minecraft.getClientPackSource().downloadAndSelectResourcePack(s, s2));
                 } else {
-                    if (serverData != null) {
-                        serverData.setResourcePackStatus(ServerData.ServerPackStatus.DISABLED);
+                    if (currentServer != null) {
+                        currentServer.setResourcePackStatus(ServerData.ServerPackStatus.DISABLED);
                     }
                     this.send(ServerboundResourcePackPacket.Action.DECLINED);
                 }
-                ServerList.saveSingleServer(serverData);
+                ServerList.saveSingleServer(currentServer);
+                // MagmaCube end - decompile error
                 this.minecraft.setScreen(null);
             }, new TranslatableComponent("multiplayer.texturePrompt.line1"), new TranslatableComponent("multiplayer.texturePrompt.line2"))));
         } else {
@@ -1761,7 +1767,7 @@ implements ClientGamePacketListener {
                 String s5 = friendlyByteBuf.readUtf();
                 boolean flag2 = friendlyByteBuf.readBoolean();
                 if (flag2) {
-                    Path path2 = Path.createFromStream(friendlyByteBuf);
+                    path3 = Path.createFromStream(friendlyByteBuf); // MagmaCube - decompile error
                 } else {
                     path3 = null;
                 }
@@ -1911,7 +1917,7 @@ implements ClientGamePacketListener {
         PacketUtils.ensureRunningOnSameThread(clientboundSetPlayerTeamPacket, this, this.minecraft);
         Scoreboard scoreboard = this.level.getScoreboard();
         if (clientboundSetPlayerTeamPacket.getMethod() == 0) {
-            PlayerTeam playerTeam = scoreboard.addPlayerTeam(clientboundSetPlayerTeamPacket.getName());
+            playerTeam2 = scoreboard.addPlayerTeam(clientboundSetPlayerTeamPacket.getName()); // MagmaCube - decompile error
         } else {
             playerTeam2 = scoreboard.getPlayerTeam(clientboundSetPlayerTeamPacket.getName());
         }
diff --git a/src/main/java/net/minecraft/client/particle/AshParticle.java b/src/main/java/net/minecraft/client/particle/AshParticle.java
index d29517ab5d81a025de8458e29cde1b51abb58bb3..a1d0fd1e0568de581bb4a8f605c82da59ea3e4f3 100644
--- a/src/main/java/net/minecraft/client/particle/AshParticle.java
+++ b/src/main/java/net/minecraft/client/particle/AshParticle.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.particle;
 
-import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.core.particles.SimpleParticleType;
 import net.minecraft.client.multiplayer.ClientLevel;
 
diff --git a/src/main/java/net/minecraft/client/particle/AttackSweepParticle.java b/src/main/java/net/minecraft/client/particle/AttackSweepParticle.java
index d024bf3a8d160262455105651306c70507855eff..e092d14eaf9e5585a0c88297e55d728ea62ef68c 100644
--- a/src/main/java/net/minecraft/client/particle/AttackSweepParticle.java
+++ b/src/main/java/net/minecraft/client/particle/AttackSweepParticle.java
@@ -51,7 +51,7 @@ public class AttackSweepParticle extends TextureSheetParticle
         
         @Override
         public Particle createParticle(final SimpleParticleType simpleParticleType, final ClientLevel clientLevel, final double d, final double d2, final double d3, final double d4, final double d5, final double d6) {
-            return new AttackSweepParticle(clientLevel, d, d2, d3, d4, this.sprites, null);
+            return new AttackSweepParticle(clientLevel, d, d2, d3, d4, this.sprites); // MagmaCube - decompile error
         }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/particle/BreakingItemParticle.java b/src/main/java/net/minecraft/client/particle/BreakingItemParticle.java
index 2e87bd19f1817ee98bc7c69c80130d3799a89a3d..e4ee0988cebc26ffa3a125a63955f7dd693a747f 100644
--- a/src/main/java/net/minecraft/client/particle/BreakingItemParticle.java
+++ b/src/main/java/net/minecraft/client/particle/BreakingItemParticle.java
@@ -42,22 +42,22 @@ extends TextureSheetParticle {
 
     @Override
     protected float getU0() {
-        return this.sprite.getU((this.uo + 1.0f) / 4.0f * 16.0f);
+        return this.sprite.getU((double) ((this.uo + 1.0f) / 4.0f * 16.0f));
     }
 
     @Override
     protected float getU1() {
-        return this.sprite.getU(this.uo / 4.0f * 16.0f);
+        return this.sprite.getU((double) (this.uo / 4.0f * 16.0f));
     }
 
     @Override
     protected float getV0() {
-        return this.sprite.getV(this.vo / 4.0f * 16.0f);
+        return this.sprite.getV((double) (this.vo / 4.0f * 16.0f));
     }
 
     @Override
     protected float getV1() {
-        return this.sprite.getV((this.vo + 1.0f) / 4.0f * 16.0f);
+        return this.sprite.getV((double) ((this.vo + 1.0f) / 4.0f * 16.0f));
     }
 
     public static class SnowballProvider
diff --git a/src/main/java/net/minecraft/client/particle/FallingDustParticle.java b/src/main/java/net/minecraft/client/particle/FallingDustParticle.java
index 55c46afe4f18ca4180a5080af1b706c5bc5307c9..7e56b9a380ce26c1c623ae9b7af0fadd2fc7e96f 100644
--- a/src/main/java/net/minecraft/client/particle/FallingDustParticle.java
+++ b/src/main/java/net/minecraft/client/particle/FallingDustParticle.java
@@ -32,7 +32,7 @@ extends TextureSheetParticle {
         this.lifetime = (int)Math.max((float)i * 0.9f, 1.0f);
         this.setSpriteFromAge(spriteSet);
         this.rotSpeed = ((float)Math.random() - 0.5f) * 0.1f;
-        this.roll = (float)Math.random() * ((float)Math.PI * 2);
+        this.roll = (float)Math.random() * ((float)Math.PI * 2.0F);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/client/particle/LargeSmokeParticle.java b/src/main/java/net/minecraft/client/particle/LargeSmokeParticle.java
index 79b90309e2c521f4cb31aa014ccdede8a85b583b..f66b4db78f5a31a2173cf2e979d83765909b5d27 100644
--- a/src/main/java/net/minecraft/client/particle/LargeSmokeParticle.java
+++ b/src/main/java/net/minecraft/client/particle/LargeSmokeParticle.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.particle;
 
-import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.core.particles.SimpleParticleType;
 import net.minecraft.client.multiplayer.ClientLevel;
 
diff --git a/src/main/java/net/minecraft/client/particle/ParticleEngine.java b/src/main/java/net/minecraft/client/particle/ParticleEngine.java
index f9cab6a1b66617a48374b9726850a12b741a581b..2d0d5d9f4e68087547c936b79a1695400dec2edc 100644
--- a/src/main/java/net/minecraft/client/particle/ParticleEngine.java
+++ b/src/main/java/net/minecraft/client/particle/ParticleEngine.java
@@ -211,9 +211,9 @@ implements PreparableReloadListener {
 
     @Override
     public CompletableFuture<Void> reload(PreparableReloadListener.PreparationBarrier preparationBarrier, ResourceManager resourceManager, ProfilerFiller profilerFiller, ProfilerFiller profilerFiller2, Executor executor, Executor executor2) {
-        ConcurrentMap map = Maps.newConcurrentMap();
+        ConcurrentMap<ResourceLocation, List<ResourceLocation>> map = Maps.newConcurrentMap(); // MagmaCube - type
         CompletableFuture[] completableFutures = (CompletableFuture[])Registry.PARTICLE_TYPE.keySet().stream().map(resourceLocation -> CompletableFuture.runAsync(() -> this.loadParticleDescription(resourceManager, (ResourceLocation)resourceLocation, map), executor)).toArray(CompletableFuture[]::new);
-        return ((CompletableFuture)((CompletableFuture)CompletableFuture.allOf(completableFutures).thenApplyAsync(void_ -> {
+        return ((CompletableFuture.allOf(completableFutures).thenApplyAsync(void_ -> { // MagmaCube - decompile error
             profilerFiller.startTick();
             profilerFiller.push("stitching");
             TextureAtlas.Preparations preparations = this.textureAtlas.prepareToStitch(resourceManager, map.values().stream().flatMap(Collection::stream), profilerFiller, 0);
@@ -351,7 +351,7 @@ implements PreparableReloadListener {
         RenderSystem.pushMatrix();
         RenderSystem.multMatrix(poseStack.last().pose());
         for (ParticleRenderType particleRenderType : RENDER_ORDER) {
-            Iterable iterable = this.particles.get(particleRenderType);
+            Iterable<Particle> iterable = this.particles.get(particleRenderType); // MagmaCube - type
             if (iterable == null) continue;
             RenderSystem.color4f(1.0f, 1.0f, 1.0f, 1.0f);
             Tesselator tesselator = Tesselator.getInstance();
@@ -393,10 +393,10 @@ implements PreparableReloadListener {
         VoxelShape voxelShape = blockState.getShape(this.level, blockPos);
         double d7 = 0.25;
         voxelShape.forAllBoxes((d, d2, d3, d4, d5, d6) -> {
-            double d7 = Math.min(1.0, d4 - d);
+            double d71 = Math.min(1.0, d4 - d); // MagmaCube - decompile error
             double d8 = Math.min(1.0, d5 - d2);
             double d9 = Math.min(1.0, d6 - d3);
-            int i = Math.max(2, Mth.ceil(d7 / 0.25));
+            int i = Math.max(2, Mth.ceil(d71 / 0.25)); // MagmaCube - decompile error
             int i2 = Math.max(2, Mth.ceil(d8 / 0.25));
             int i3 = Math.max(2, Mth.ceil(d9 / 0.25));
             for (int i4 = 0; i4 < i; ++i4) {
@@ -405,7 +405,7 @@ implements PreparableReloadListener {
                         double d10 = ((double)i4 + 0.5) / (double)i;
                         double d11 = ((double)i5 + 0.5) / (double)i2;
                         double d12 = ((double)i6 + 0.5) / (double)i3;
-                        double d13 = d10 * d7 + d;
+                        double d13 = d10 * d71 + d; // MagmaCube - decompile error
                         double d14 = d11 * d8 + d2;
                         double d15 = d12 * d9 + d3;
                         this.add(new TerrainParticle(this.level, (double)blockPos.getX() + d13, (double)blockPos.getY() + d14, (double)blockPos.getZ() + d15, d10 - 0.5, d11 - 0.5, d12 - 0.5, blockState).init(blockPos));
diff --git a/src/main/java/net/minecraft/client/particle/SmokeParticle.java b/src/main/java/net/minecraft/client/particle/SmokeParticle.java
index 58cbd94c5a63caefe59e74c99e0f875311870f91..6716595d42a7d36c920dac1a9cf0ebfe03b24ea1 100644
--- a/src/main/java/net/minecraft/client/particle/SmokeParticle.java
+++ b/src/main/java/net/minecraft/client/particle/SmokeParticle.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.particle;
 
-import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.core.particles.SimpleParticleType;
 import net.minecraft.client.multiplayer.ClientLevel;
 
diff --git a/src/main/java/net/minecraft/client/particle/TerrainParticle.java b/src/main/java/net/minecraft/client/particle/TerrainParticle.java
index 551cc9020ab763ad598a39957baf86a19a3ab7d2..e54a8958a39c802a7362bc5d604a9971a94366f9 100644
--- a/src/main/java/net/minecraft/client/particle/TerrainParticle.java
+++ b/src/main/java/net/minecraft/client/particle/TerrainParticle.java
@@ -65,22 +65,22 @@ extends TextureSheetParticle {
 
     @Override
     protected float getU0() {
-        return this.sprite.getU((this.uo + 1.0f) / 4.0f * 16.0f);
+        return this.sprite.getU((double) ((this.uo + 1.0f) / 4.0f * 16.0f));
     }
 
     @Override
     protected float getU1() {
-        return this.sprite.getU(this.uo / 4.0f * 16.0f);
+        return this.sprite.getU((double) (this.uo / 4.0f * 16.0f));
     }
 
     @Override
     protected float getV0() {
-        return this.sprite.getV(this.vo / 4.0f * 16.0f);
+        return this.sprite.getV((double) (this.vo / 4.0f * 16.0f));
     }
 
     @Override
     protected float getV1() {
-        return this.sprite.getV((this.vo + 1.0f) / 4.0f * 16.0f);
+        return this.sprite.getV((double) ((this.vo + 1.0f) / 4.0f * 16.0f));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/client/player/LocalPlayer.java b/src/main/java/net/minecraft/client/player/LocalPlayer.java
index 38a39d8ae0ac62b106feeb99e3d40af36332b062..fcf27b39adb6affc182284634fba62a292a4d674 100644
--- a/src/main/java/net/minecraft/client/player/LocalPlayer.java
+++ b/src/main/java/net/minecraft/client/player/LocalPlayer.java
@@ -885,7 +885,7 @@ extends AbstractClientPlayer {
                 }
                 ++i;
             }
-            break block0;
+            break; // MagmaCube - decompile error
         }
         if (f16 == Float.MIN_VALUE) {
             return;
diff --git a/src/main/java/net/minecraft/client/player/inventory/Hotbar.java b/src/main/java/net/minecraft/client/player/inventory/Hotbar.java
index 58e4fc4f3b4aabd67c4976107adaf35f85591f8d..b02402960d5f1baa061265563b93ad47abfd2fdd 100644
--- a/src/main/java/net/minecraft/client/player/inventory/Hotbar.java
+++ b/src/main/java/net/minecraft/client/player/inventory/Hotbar.java
@@ -26,7 +26,7 @@ public class Hotbar extends ForwardingList<ItemStack>
     public ListTag createTag() {
         final ListTag listTag = new ListTag();
         for (final ItemStack itemStack : this.delegate()) {
-            ((AbstractList<CompoundTag>)listTag).add(itemStack.save(new CompoundTag()));
+            listTag.add(itemStack.save(new CompoundTag())); // MagmaCube - decompile error
         }
         return listTag;
     }
diff --git a/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java b/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
index 4e636381e97a42e1208490b0020e0066254f4326..db5ef0148b7bd896fec7b4ef5ac56b4324bc798e 100644
--- a/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
@@ -17,9 +17,7 @@ import net.minecraft.world.level.block.ShulkerBoxBlock;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.BedBlock;
 import net.minecraft.world.level.block.AbstractBannerBlock;
-import net.minecraft.core.Direction;
 import net.minecraft.client.renderer.blockentity.SkullBlockRenderer;
-import net.minecraft.nbt.Tag;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
 import java.util.UUID;
@@ -154,8 +152,8 @@ public class BlockEntityWithoutLevelRenderer
     }
     
     static {
-        SHULKER_BOXES = Arrays.stream(DyeColor.values()).sorted(Comparator.comparingInt(DyeColor::getId)).map((Function<? super DyeColor, ?>)ShulkerBoxBlockEntity::new).toArray(ShulkerBoxBlockEntity[]::new);
-        DEFAULT_SHULKER_BOX = new ShulkerBoxBlockEntity((DyeColor)null);
+        SHULKER_BOXES = Arrays.stream(DyeColor.values()).sorted(Comparator.comparingInt(DyeColor::getId)).map(ShulkerBoxBlockEntity::new).toArray(ShulkerBoxBlockEntity[]::new);
+        DEFAULT_SHULKER_BOX = new ShulkerBoxBlockEntity(null);
         instance = new BlockEntityWithoutLevelRenderer();
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/renderer/GpuWarnlistManager.java b/src/main/java/net/minecraft/client/renderer/GpuWarnlistManager.java
index 64fc44ce2b494fc70e0510dc8891e0f8b3210ca7..0eaf2e54906cde475b87da6d5e0399e14de0fac1 100644
--- a/src/main/java/net/minecraft/client/renderer/GpuWarnlistManager.java
+++ b/src/main/java/net/minecraft/client/renderer/GpuWarnlistManager.java
@@ -29,7 +29,7 @@ import net.minecraft.resources.ResourceLocation;
 import org.apache.logging.log4j.Logger;
 import net.minecraft.server.packs.resources.SimplePreparableReloadListener;
 
-public class GpuWarnlistManager extends SimplePreparableReloadListener<Preparations>
+public class GpuWarnlistManager extends SimplePreparableReloadListener<GpuWarnlistManager.Preparations> // MagmaCube - decompile error
 {
     private static final Logger LOGGER;
     private static final ResourceLocation GPU_WARNLIST_LOCATION;
@@ -39,7 +39,7 @@ public class GpuWarnlistManager extends SimplePreparableReloadListener<Preparati
     private boolean skipFabulous;
     
     public GpuWarnlistManager() {
-        this.warnings = (ImmutableMap<String, String>)ImmutableMap.of();
+        this.warnings = ImmutableMap.of(); // MagmaCube - decompile error
     }
     
     public boolean hasWarnings() {
@@ -101,9 +101,11 @@ public class GpuWarnlistManager extends SimplePreparableReloadListener<Preparati
     
     @Override
     protected Preparations prepare(final ResourceManager resourceManager, final ProfilerFiller profilerFiller) {
-        final List<Pattern> list = (List<Pattern>)Lists.newArrayList();
-        final List<Pattern> list2 = (List<Pattern>)Lists.newArrayList();
-        final List<Pattern> list3 = (List<Pattern>)Lists.newArrayList();
+        // MagmaCube start - decompile error
+        final List<Pattern> list = Lists.newArrayList();
+        final List<Pattern> list2 = Lists.newArrayList();
+        final List<Pattern> list3 = Lists.newArrayList();
+        // MagmaCube end - decompile error
         profilerFiller.startTick();
         final JsonObject jsonObject = parseJson(resourceManager, profilerFiller);
         if (jsonObject != null) {
@@ -135,9 +137,7 @@ public class GpuWarnlistManager extends SimplePreparableReloadListener<Preparati
             jsonObject = new JsonParser().parse((Reader)bufferedReader).getAsJsonObject();
         }
         catch (IOException | JsonSyntaxException ex2) {
-            final Exception ex;
-            final Exception exception = ex;
-            GpuWarnlistManager.LOGGER.warn("Failed to load GPU warnlist");
+            GpuWarnlistManager.LOGGER.warn("Failed to load GPU warnlist", ex2); // MagmaCube - decompile error
         }
         profilerFiller.pop();
         return jsonObject;
@@ -161,7 +161,7 @@ public class GpuWarnlistManager extends SimplePreparableReloadListener<Preparati
         }
         
         private static String matchAny(final List<Pattern> list, final String s) {
-            final List<String> list2 = (List<String>)Lists.newArrayList();
+            final List<String> list2 = Lists.newArrayList(); // MagmaCube - decompile error
             for (final Pattern pattern : list) {
                 final Matcher matcher = pattern.matcher(s);
                 while (matcher.find()) {
diff --git a/src/main/java/net/minecraft/client/renderer/LevelRenderer.java b/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
index 9d6ae2972b2c2fcc26de245fbed0f012da64a070..12d30bf855d3f22ee12e8cb836eddd17bc5cc675 100644
--- a/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
@@ -458,7 +458,7 @@ AutoCloseable {
             if (this.minecraft.getResourcePackRepository().getSelectedIds().size() > 1) {
                 Component component2;
                 try {
-                    TextComponent component = new TextComponent(this.minecraft.getResourceManager().getResource(resourceLocation).getSourceName());
+                    component2 = new TextComponent(this.minecraft.getResourceManager().getResource(resourceLocation).getSourceName()); // MagmaCube - decompile error
                 }
                 catch (IOException iOException) {
                     component2 = null;
@@ -743,7 +743,7 @@ AutoCloseable {
                 int i3 = blockPos.getY() > 0 ? 248 : 8;
                 int i4 = Mth.floor(vec3.x / 16.0) * 16;
                 int i5 = Mth.floor(vec3.z / 16.0) * 16;
-                Direction[] list = Lists.newArrayList();
+                List<RenderChunkInfo> list = Lists.newArrayList(); // MagmaCube - type
                 for (int i6 = -this.lastViewDistance; i6 <= this.lastViewDistance; ++i6) {
                     for (int i7 = -this.lastViewDistance; i7 <= this.lastViewDistance; ++i7) {
                         ChunkRenderDispatcher.RenderChunk renderChunk2 = this.viewArea.getRenderChunkAt(new BlockPos(i4 + (i6 << 4) + 8, i3, i5 + (i7 << 4) + 8));
@@ -858,8 +858,10 @@ AutoCloseable {
         profilerFiller.popPush("culling");
         boolean bl = flag2 = this.capturedFrustum != null;
         if (flag2) {
-            Frustum frustum = this.capturedFrustum;
-            frustum.prepare(this.frustumPos.x, this.frustumPos.y, this.frustumPos.z);
+            // MagmaCube start - decompile error
+            frustum2 = this.capturedFrustum;
+            frustum2.prepare(this.frustumPos.x, this.frustumPos.y, this.frustumPos.z);
+            // MagmaCube end - decompile error
         } else {
             frustum2 = new Frustum(matrix4f2, matrix4f);
             frustum2.prepare(d, d2, d3);
@@ -888,7 +890,7 @@ AutoCloseable {
         int i2 = this.minecraft.options.framerateLimit;
         long l2 = 33333333L;
         if ((double)i2 == Option.FRAMERATE_LIMIT.getMaxValue()) {
-            long l3 = 0L;
+            l4 = 0L; // MagmaCube - decompile error
         } else {
             l4 = 1000000000 / i2;
         }
@@ -924,7 +926,7 @@ AutoCloseable {
         boolean flag4 = false;
         MultiBufferSource.BufferSource bufferSource = this.renderBuffers.bufferSource();
         for (Entity entity : this.level.entitiesForRendering()) {
-            MultiBufferSource.BufferSource multiBufferSource2;
+            MultiBufferSource multiBufferSource2; // MagmaCube - decompile error
             if (!this.entityRenderDispatcher.shouldRender(entity, frustum2, d, d2, d3) && !entity.hasIndirectPassenger(this.minecraft.player) || entity == camera.getEntity() && !camera.isDetached() && (!(camera.getEntity() instanceof LivingEntity) || !((LivingEntity)camera.getEntity()).isSleeping()) || entity instanceof LocalPlayer && camera.getEntity() != entity) continue;
             ++this.renderedEntities;
             if (entity.tickCount == 0) {
@@ -935,7 +937,7 @@ AutoCloseable {
             if (this.shouldShowEntityOutlines() && this.minecraft.shouldEntityAppearGlowing(entity)) {
                 flag4 = true;
                 OutlineBufferSource outlineBufferSource = this.renderBuffers.outlineBufferSource();
-                OutlineBufferSource multiBufferSource = outlineBufferSource;
+                multiBufferSource2 = outlineBufferSource; // MagmaCube - decompile error
                 int i3 = entity.getTeamColor();
                 int i4 = 255;
                 int i5 = i3 >> 16 & 0xFF;
@@ -1808,7 +1810,7 @@ AutoCloseable {
         for (int i2 = 0; i2 < list.size(); ++i2) {
             AABB aabb = list.get(i2);
             float f5 = ((float)i2 % (float)i + 1.0f) / (float)i;
-            float f6 = i2 / i;
+            float f6 = (float) i2 / i; // MagmaCube - decompile error
             float f7 = f5 * (float)(f6 == 0.0f ? 1 : 0);
             float f8 = f5 * (float)(f6 == 1.0f ? 1 : 0);
             float f9 = f5 * (float)(f6 == 2.0f ? 1 : 0);
diff --git a/src/main/java/net/minecraft/client/renderer/MultiBufferSource.java b/src/main/java/net/minecraft/client/renderer/MultiBufferSource.java
index 2eb8b06b441f7ee42d99a2b2064323d2e633dc6e..10b26ff5dbef46d3d99eb3227c90439c55c8f731 100644
--- a/src/main/java/net/minecraft/client/renderer/MultiBufferSource.java
+++ b/src/main/java/net/minecraft/client/renderer/MultiBufferSource.java
@@ -12,11 +12,11 @@ import com.mojang.blaze3d.vertex.BufferBuilder;
 
 public interface MultiBufferSource
 {
-    default BufferSource immediate(final BufferBuilder bufferBuilder) {
-        return immediateWithBuffers((Map<RenderType, BufferBuilder>)ImmutableMap.of(), bufferBuilder);
+    static BufferSource immediate(final BufferBuilder bufferBuilder) {
+        return immediateWithBuffers(ImmutableMap.of(), bufferBuilder);
     }
     
-    default BufferSource immediateWithBuffers(final Map<RenderType, BufferBuilder> map, final BufferBuilder bufferBuilder) {
+    static BufferSource immediateWithBuffers(final Map<RenderType, BufferBuilder> map, final BufferBuilder bufferBuilder) { // MagmaCube - decompile error
         return new BufferSource(bufferBuilder, map);
     }
     
@@ -31,7 +31,7 @@ public interface MultiBufferSource
         
         protected BufferSource(final BufferBuilder bufferBuilder, final Map<RenderType, BufferBuilder> map) {
             this.lastState = Optional.empty();
-            this.startedBuffers = (Set<BufferBuilder>)Sets.newHashSet();
+            this.startedBuffers = Sets.newHashSet(); // MagmaCube - decompile error
             this.builder = bufferBuilder;
             this.fixedBuffers = map;
         }
@@ -60,9 +60,8 @@ public interface MultiBufferSource
         }
         
         public void endBatch() {
-            final VertexConsumer vertexConsumer;
             this.lastState.ifPresent(renderType -> {
-                vertexConsumer = this.getBuffer(renderType);
+                VertexConsumer vertexConsumer = this.getBuffer(renderType); // MagmaCube - decompile error
                 if (vertexConsumer == this.builder) {
                     this.endBatch(renderType);
                 }
diff --git a/src/main/java/net/minecraft/client/renderer/RenderBuffers.java b/src/main/java/net/minecraft/client/renderer/RenderBuffers.java
index cbda794e206d752a11e427bbab8d1b3355a0a5c7..1d9388f2297a8ade60d27df44eb21385e7a1e57e 100644
--- a/src/main/java/net/minecraft/client/renderer/RenderBuffers.java
+++ b/src/main/java/net/minecraft/client/renderer/RenderBuffers.java
@@ -17,7 +17,7 @@ public class RenderBuffers
     
     public RenderBuffers() {
         this.fixedBufferPack = new ChunkBufferBuilderPack();
-        this.fixedBuffers = Util.make((SortedMap<RenderType, BufferBuilder>)new Object2ObjectLinkedOpenHashMap(), object2ObjectLinkedOpenHashMap -> {
+        this.fixedBuffers = Util.make(new Object2ObjectLinkedOpenHashMap(), object2ObjectLinkedOpenHashMap -> { // MagmaCube - decompile error
             object2ObjectLinkedOpenHashMap.put(Sheets.solidBlockSheet(), this.fixedBufferPack.builder(RenderType.solid()));
             object2ObjectLinkedOpenHashMap.put(Sheets.cutoutBlockSheet(), this.fixedBufferPack.builder(RenderType.cutout()));
             object2ObjectLinkedOpenHashMap.put(Sheets.bannerSheet(), this.fixedBufferPack.builder(RenderType.cutoutMipped()));
diff --git a/src/main/java/net/minecraft/client/renderer/RenderType.java b/src/main/java/net/minecraft/client/renderer/RenderType.java
index fd1b5b18f019c713f83a810de526a84f64c70aa5..2381725bcef7fe7472d5a7aa16d698f58cd5218d 100644
--- a/src/main/java/net/minecraft/client/renderer/RenderType.java
+++ b/src/main/java/net/minecraft/client/renderer/RenderType.java
@@ -239,10 +239,9 @@ public abstract class RenderType extends RenderStateShard
         final TransparencyStateShard transparencyStateShard2;
         final TextureStateShard textureStateShard2;
         if (i <= 1) {
-            final TransparencyStateShard transparencyStateShard = RenderType.TRANSLUCENT_TRANSPARENCY;
-            final TextureStateShard textureStateShard = new TextureStateShard(TheEndPortalRenderer.END_SKY_LOCATION, false, false);
-        }
-        else {
+            transparencyStateShard2 = RenderType.TRANSLUCENT_TRANSPARENCY; // MagmaCube - decompile error
+            textureStateShard2 = new TextureStateShard(TheEndPortalRenderer.END_SKY_LOCATION, false, false); // MagmaCube - decompile error
+        } else {
             transparencyStateShard2 = RenderType.ADDITIVE_TRANSPARENCY;
             textureStateShard2 = new TextureStateShard(TheEndPortalRenderer.END_PORTAL_LOCATION, false, false);
         }
@@ -268,7 +267,7 @@ public abstract class RenderType extends RenderStateShard
     }
     
     public static CompositeRenderType create(final String s, final VertexFormat vertexFormat, final int i, final int i2, final boolean flag, final boolean flag2, final CompositeState compositeState) {
-        return memoize(s, vertexFormat, i, i2, flag, flag2, compositeState);
+        return CompositeRenderType.memoize(s, vertexFormat, i, i2, flag, flag2, compositeState); // MagmaCube - decompile error
     }
     
     public void end(final BufferBuilder bufferBuilder, final int i, final int i2, final int i3) {
@@ -397,7 +396,7 @@ public abstract class RenderType extends RenderStateShard
             this.writeMaskState = writeMaskStateShard;
             this.lineState = lineStateShard;
             this.outlineProperty = outlineProperty;
-            this.states = (ImmutableList<RenderStateShard>)ImmutableList.of(this.textureState, this.transparencyState, this.diffuseLightingState, this.shadeModelState, this.alphaState, this.depthTestState, this.cullState, this.lightmapState, this.overlayState, this.fogState, this.layeringState, this.outputState, (Object[])new RenderStateShard[] { this.texturingState, this.writeMaskState, this.lineState });
+            this.states = ImmutableList.of(this.textureState, this.transparencyState, this.diffuseLightingState, this.shadeModelState, this.alphaState, this.depthTestState, this.cullState, this.lightmapState, this.overlayState, this.fogState, this.layeringState, this.outputState, new RenderStateShard[] { this.texturingState, this.writeMaskState, this.lineState }); // MagmaCube - decompile error
         }
         
         @Override
diff --git a/src/main/java/net/minecraft/client/renderer/block/BlockModelShaper.java b/src/main/java/net/minecraft/client/renderer/block/BlockModelShaper.java
index 4a3ae872842c9cbf04fd66d6b940c9f1e3c7309a..ff6efb436184deb0963c5b521e3bb270d56c2cd5 100644
--- a/src/main/java/net/minecraft/client/renderer/block/BlockModelShaper.java
+++ b/src/main/java/net/minecraft/client/renderer/block/BlockModelShaper.java
@@ -23,7 +23,7 @@ public class BlockModelShaper
     private final ModelManager modelManager;
     
     public BlockModelShaper(final ModelManager modelManager) {
-        this.modelByStateCache = (Map<BlockState, BakedModel>)Maps.newIdentityHashMap();
+        this.modelByStateCache = Maps.newIdentityHashMap(); // MagmaCube - decompile error
         this.modelManager = modelManager;
     }
     
@@ -46,8 +46,7 @@ public class BlockModelShaper
     public void rebuildCache() {
         this.modelByStateCache.clear();
         for (final Block block : Registry.BLOCK) {
-            final BakedModel bakedModel;
-            block.getStateDefinition().getPossibleStates().forEach(blockState -> bakedModel = this.modelByStateCache.put(blockState, this.modelManager.getModel(stateToModelLocation(blockState))));
+            block.getStateDefinition().getPossibleStates().forEach(blockState -> this.modelByStateCache.put(blockState, this.modelManager.getModel(stateToModelLocation(blockState)))); // MagmaCube - decompile error
         }
     }
     
diff --git a/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java b/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
index 9bc058c78a162db331057a6c91f098c9fdd98ca4..2614860fdb2f47df2972e7e6e59616d22d4dae35 100644
--- a/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
@@ -114,14 +114,16 @@ public class LiquidBlockRenderer {
             Vec3 vec3 = fluidState.getFlow(blockAndTintGetter, blockPos);
             if (vec3.x == 0.0 && vec3.z == 0.0) {
                 TextureAtlasSprite textureAtlasSprite = textureAtlasSprites[0];
-                float f142 = textureAtlasSprite.getU(0.0);
-                float f15 = textureAtlasSprite.getV(0.0);
-                float f16 = f142;
-                float f17 = textureAtlasSprite.getV(16.0);
-                float f18 = textureAtlasSprite.getU(16.0);
-                float f19 = f17;
-                float f20 = f18;
-                float f21 = f15;
+                // MagmaCube start - decompile error
+                f26 = textureAtlasSprite.getU(0.0);
+                f27 = textureAtlasSprite.getV(0.0);
+                f28 = f26;
+                f29 = textureAtlasSprite.getV(16.0);
+                f30 = textureAtlasSprite.getU(16.0);
+                f31 = f29;
+                f32 = f30;
+                f33 = f27;
+                // MagmaCube end - decompile error
             } else {
                 TextureAtlasSprite textureAtlasSprite2 = textureAtlasSprites[1];
                 float f22 = (float)Mth.atan2(vec3.z, vec3.x) - 1.5707964f;
@@ -137,8 +139,10 @@ public class LiquidBlockRenderer {
                 f32 = textureAtlasSprite2.getU(8.0f + (f24 - f23) * 16.0f);
                 f33 = textureAtlasSprite2.getV(8.0f + (-f24 - f23) * 16.0f);
             }
-            void f34 = (f26 + f28 + f30 + f32) / 4.0f;
-            void f35 = (f27 + f29 + f31 + f33) / 4.0f;
+            // MagmaCube start - decompile error
+            float f34 = (f26 + f28 + f30 + f32) / 4.0f;
+            float f35 = (f27 + f29 + f31 + f33) / 4.0f;
+            // MagmaCube end - decompile error
             float f36 = (float)textureAtlasSprites[0].getWidth() / (textureAtlasSprites[0].getU1() - textureAtlasSprites[0].getU0());
             float f37 = (float)textureAtlasSprites[0].getHeight() / (textureAtlasSprites[0].getV1() - textureAtlasSprites[0].getV0());
             float f38 = 4.0f / Math.max(f37, f36);
@@ -190,33 +194,35 @@ public class LiquidBlockRenderer {
             double d16;
             float f56;
             float f55;
+            // MagmaCube start - decompile error
             if (i4 == 0) {
-                float f49 = f8;
-                float f50 = f11;
-                double d4 = d;
-                double d5 = d + 1.0;
-                double d6 = d3 + (double)0.001f;
-                double d7 = d3 + (double)0.001f;
-                Direction direction = Direction.NORTH;
-                boolean flag9 = flag4;
+                f55 = f8;
+                f56 = f11;
+                d16 = d;
+                d17 = d + 1.0;
+                d18 = d3 + (double)0.001f;
+                d19 = d3 + (double)0.001f;
+                direction4 = Direction.NORTH;
+                flag12 = flag4;
             } else if (i4 == 1) {
-                float f51 = f10;
-                float f52 = f9;
-                double d8 = d + 1.0;
-                double d9 = d;
-                double d10 = d3 + 1.0 - (double)0.001f;
-                double d11 = d3 + 1.0 - (double)0.001f;
-                Direction direction2 = Direction.SOUTH;
-                boolean flag10 = flag5;
+                f55 = f10;
+                f56 = f9;
+                d16 = d + 1.0;
+                d17 = d;
+                d18 = d3 + 1.0 - (double)0.001f;
+                d19 = d3 + 1.0 - (double)0.001f;
+                direction4 = Direction.SOUTH;
+                flag12 = flag5;
             } else if (i4 == 2) {
-                float f53 = f9;
-                float f54 = f8;
-                double d12 = d + (double)0.001f;
-                double d13 = d + (double)0.001f;
-                double d14 = d3 + 1.0;
-                double d15 = d3;
-                Direction direction3 = Direction.WEST;
-                boolean flag11 = flag6;
+                f55 = f9;
+                f56 = f8;
+                d16 = d + (double)0.001f;
+                d17 = d + (double)0.001f;
+                d18 = d3 + 1.0;
+                d19 = d3;
+                direction4 = Direction.WEST;
+                flag12 = flag6;
+            // MagmaCube end - decompile error
             } else {
                 f55 = f11;
                 f56 = f10;
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/BlockElement.java b/src/main/java/net/minecraft/client/renderer/block/model/BlockElement.java
index e32e9b3b395d11f164ff7936d898051f99ed3be2..0a89919d0e3173e29e4ca3c891627a4e0990acfd 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/BlockElement.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/BlockElement.java
@@ -11,7 +11,7 @@ import com.google.gson.JsonDeserializationContext;
 import java.lang.reflect.Type;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonDeserializer;
-import java.util.Iterator;
+
 import javax.annotation.Nullable;
 import net.minecraft.core.Direction;
 import java.util.Map;
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/BlockModel.java b/src/main/java/net/minecraft/client/renderer/block/model/BlockModel.java
index b05561a1563fa7f658ddbcc645edd3d9defce13f..7f4c99c9293d8e1d25f180edde2c235673117121 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/BlockModel.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/BlockModel.java
@@ -379,9 +379,5 @@ implements UnbakedModel {
             }
             return list;
         }
-
-        public /* synthetic */ Object deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
-            return this.deserialize(jsonElement, type, jsonDeserializationContext);
-        }
     }
 }
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/BlockModelDefinition.java b/src/main/java/net/minecraft/client/renderer/block/model/BlockModelDefinition.java
index 1c1cb691fb008a7087579d9439bd20049f367986..6013fa3c62ab73d469c0f295035b27d04d6488aa 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/BlockModelDefinition.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/BlockModelDefinition.java
@@ -32,13 +32,13 @@ public class BlockModelDefinition
     }
     
     public BlockModelDefinition(final Map<String, MultiVariant> map, final MultiPart multiPart) {
-        this.variants = (Map<String, MultiVariant>)Maps.newLinkedHashMap();
+        this.variants = Maps.newLinkedHashMap(); // MagmaCube - decompile error
         this.multiPart = multiPart;
         this.variants.putAll(map);
     }
     
     public BlockModelDefinition(final List<BlockModelDefinition> list) {
-        this.variants = (Map<String, MultiVariant>)Maps.newLinkedHashMap();
+        this.variants = Maps.newLinkedHashMap(); // MagmaCube - decompile error
         BlockModelDefinition blockModelDefinition = null;
         for (final BlockModelDefinition blockModelDefinition2 : list) {
             if (blockModelDefinition2.isMultiPart()) {
@@ -114,7 +114,7 @@ public class BlockModelDefinition
         }
         
         protected Map<String, MultiVariant> getVariants(final JsonDeserializationContext jsonDeserializationContext, final JsonObject jsonObject) {
-            final Map<String, MultiVariant> map = (Map<String, MultiVariant>)Maps.newHashMap();
+            final Map<String, MultiVariant> map = Maps.newHashMap(); // MagmaCube - decompile error
             if (jsonObject.has("variants")) {
                 final JsonObject jsonObject2 = GsonHelper.getAsJsonObject(jsonObject, "variants");
                 for (final Map.Entry<String, JsonElement> entry : jsonObject2.entrySet()) {
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/ItemModelGenerator.java b/src/main/java/net/minecraft/client/renderer/block/model/ItemModelGenerator.java
index 5cc7e568d66dbeb68d069770514362f3282c0a33..69f967b3f4692f025c28fd2db55530133f7824ab 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/ItemModelGenerator.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/ItemModelGenerator.java
@@ -19,15 +19,17 @@ public class ItemModelGenerator
     public static final List<String> LAYERS;
     
     public BlockModel generateBlockModel(final Function<Material, TextureAtlasSprite> function, final BlockModel blockModel) {
-        final Map<String, Either<Material, String>> map = (Map<String, Either<Material, String>>)Maps.newHashMap();
-        final List<BlockElement> list = (List<BlockElement>)Lists.newArrayList();
+        // MagmaCube start - decompile error
+        final Map<String, Either<Material, String>> map = Maps.newHashMap();
+        final List<BlockElement> list = Lists.newArrayList();
+        // MagmaCube end - decompile error
         for (int i = 0; i < ItemModelGenerator.LAYERS.size(); ++i) {
             final String s = ItemModelGenerator.LAYERS.get(i);
             if (!blockModel.hasTexture(s)) {
                 break;
             }
             final Material material = blockModel.getMaterial(s);
-            map.put(s, (Either<Material, String>)Either.left(material));
+            map.put(s, Either.left(material)); // MagmaCube - decompile error
             final TextureAtlasSprite textureAtlasSprite = function.apply(material);
             list.addAll(this.processFrames(i, s, textureAtlasSprite));
         }
@@ -38,10 +40,10 @@ public class ItemModelGenerator
     }
     
     private List<BlockElement> processFrames(final int i, final String s, final TextureAtlasSprite textureAtlasSprite) {
-        final Map<Direction, BlockElementFace> map = (Map<Direction, BlockElementFace>)Maps.newHashMap();
+        final Map<Direction, BlockElementFace> map = Maps.newHashMap(); // MagmaCube - decompile error
         map.put(Direction.SOUTH, new BlockElementFace(null, i, s, new BlockFaceUV(new float[] { 0.0f, 0.0f, 16.0f, 16.0f }, 0)));
         map.put(Direction.NORTH, new BlockElementFace(null, i, s, new BlockFaceUV(new float[] { 16.0f, 0.0f, 0.0f, 16.0f }, 0)));
-        final List<BlockElement> list = (List<BlockElement>)Lists.newArrayList();
+        final List<BlockElement> list = Lists.newArrayList(); // MagmaCube - decompile error
         list.add(new BlockElement(new Vector3f(0.0f, 0.0f, 7.5f), new Vector3f(16.0f, 16.0f, 8.5f), map, null, true));
         list.addAll(this.createSideElements(textureAtlasSprite, s, i));
         return list;
@@ -50,7 +52,7 @@ public class ItemModelGenerator
     private List<BlockElement> createSideElements(final TextureAtlasSprite textureAtlasSprite, final String s, final int i) {
         final float f = textureAtlasSprite.getWidth();
         final float f2 = textureAtlasSprite.getHeight();
-        final List<BlockElement> list = (List<BlockElement>)Lists.newArrayList();
+        final List<BlockElement> list = Lists.newArrayList(); // MagmaCube - decompile error
         for (final Span span : this.getSpans(textureAtlasSprite)) {
             float f3 = 0.0f;
             float f4 = 0.0f;
@@ -112,7 +114,7 @@ public class ItemModelGenerator
             f8 *= f11;
             f9 *= f12;
             f10 *= f12;
-            final Map<Direction, BlockElementFace> map = (Map<Direction, BlockElementFace>)Maps.newHashMap();
+            final Map<Direction, BlockElementFace> map = Maps.newHashMap(); // MagmaCube - decompile error
             map.put(spanFacing.getDirection(), new BlockElementFace(null, i, s, new BlockFaceUV(new float[] { f7, f9, f8, f10 }, 0)));
             switch (spanFacing) {
                 case UP: {
@@ -139,7 +141,7 @@ public class ItemModelGenerator
     private List<Span> getSpans(final TextureAtlasSprite textureAtlasSprite) {
         final int i = textureAtlasSprite.getWidth();
         final int i2 = textureAtlasSprite.getHeight();
-        final List<Span> list = (List<Span>)Lists.newArrayList();
+        final List<Span> list = Lists.newArrayList(); // MagmaCube - decompile error
         for (int i3 = 0; i3 < textureAtlasSprite.getFrameCount(); ++i3) {
             for (int i4 = 0; i4 < i2; ++i4) {
                 for (int i5 = 0; i5 < i; ++i5) {
@@ -188,7 +190,7 @@ public class ItemModelGenerator
     }
     
     static {
-        LAYERS = Lists.newArrayList((Object[])new String[] { "layer0", "layer1", "layer2", "layer3", "layer4" });
+        LAYERS = Lists.newArrayList(new String[] { "layer0", "layer1", "layer2", "layer3", "layer4" }); // MagmaCube - decompile error
     }
     
     enum SpanFacing
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/MultiVariant.java b/src/main/java/net/minecraft/client/renderer/block/model/MultiVariant.java
index f1ce0b5d1f0532df87dc46ee882d2204c8c70943..c8470a75185d6252af81cf74fe1cf0b2194babe1 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/MultiVariant.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/MultiVariant.java
@@ -93,9 +93,5 @@ implements UnbakedModel {
             }
             return new MultiVariant(list);
         }
-
-        public /* synthetic */ Object deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
-            return this.deserialize(jsonElement, type, jsonDeserializationContext);
-        }
     }
 }
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/multipart/AndCondition.java b/src/main/java/net/minecraft/client/renderer/block/model/multipart/AndCondition.java
index 6376482f25e751ef264cef9d8b98255201b5c5e6..ea889eae8ca413e43c89adea88baafb360dcdf00 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/multipart/AndCondition.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/multipart/AndCondition.java
@@ -19,7 +19,7 @@ implements Condition {
 
     @Override
     public Predicate<BlockState> getPredicate(StateDefinition<Block, BlockState> stateDefinition) {
-        List list = Streams.stream(this.conditions).map(condition -> condition.getPredicate(stateDefinition)).collect(Collectors.toList());
+        List<Predicate<BlockState>> list = Streams.stream(this.conditions).map(condition -> condition.getPredicate(stateDefinition)).collect(Collectors.toList()); // MagmaCube - type
         return blockState -> list.stream().allMatch(predicate -> predicate.test(blockState));
     }
 }
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/multipart/MultiPart.java b/src/main/java/net/minecraft/client/renderer/block/model/multipart/MultiPart.java
index 0a06848f607f62cbe503750e421b4765041ea99a..cd092fd42d10e96196d5aa9d4040f471dcfe5d18 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/multipart/MultiPart.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/multipart/MultiPart.java
@@ -111,9 +111,5 @@ implements UnbakedModel {
             }
             return list;
         }
-
-        public /* synthetic */ Object deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
-            return this.deserialize(jsonElement, type, jsonDeserializationContext);
-        }
     }
 }
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/multipart/Selector.java b/src/main/java/net/minecraft/client/renderer/block/model/multipart/Selector.java
index 9b5759c01046d4da3372f253dd0d5fc8f0aef3ea..4588a3bfa7a11108d6e9ffe6f3c5ef84b7fc017c 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/multipart/Selector.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/multipart/Selector.java
@@ -70,17 +70,17 @@ public class Selector {
 
         @VisibleForTesting
         static Condition getCondition(JsonObject jsonObject) {
-            Set set = jsonObject.entrySet();
+            Set<Map.Entry<String, JsonElement>> set = jsonObject.entrySet(); // MagmaCube - type
             if (set.isEmpty()) {
                 throw new JsonParseException("No elements found in selector");
             }
             if (set.size() == 1) {
                 if (jsonObject.has("OR")) {
-                    List list = Streams.stream((Iterable)GsonHelper.getAsJsonArray(jsonObject, "OR")).map(jsonElement -> Deserializer.getCondition(jsonElement.getAsJsonObject())).collect(Collectors.toList());
+                    List list = Streams.stream(GsonHelper.getAsJsonArray(jsonObject, "OR")).map(jsonElement -> Deserializer.getCondition(jsonElement.getAsJsonObject())).collect(Collectors.toList()); // MagmaCube - decompile error
                     return new OrCondition(list);
                 }
                 if (jsonObject.has("AND")) {
-                    List list2 = Streams.stream((Iterable)GsonHelper.getAsJsonArray(jsonObject, "AND")).map(jsonElement -> Deserializer.getCondition(jsonElement.getAsJsonObject())).collect(Collectors.toList());
+                    List list2 = Streams.stream(GsonHelper.getAsJsonArray(jsonObject, "AND")).map(jsonElement -> Deserializer.getCondition(jsonElement.getAsJsonObject())).collect(Collectors.toList()); // MagmaCube - decompile error
                     return new AndCondition(list2);
                 }
                 return Deserializer.getKeyValueCondition((Map.Entry)set.iterator().next());
@@ -91,9 +91,5 @@ public class Selector {
         private static Condition getKeyValueCondition(Map.Entry<String, JsonElement> entry) {
             return new KeyValueCondition(entry.getKey(), entry.getValue().getAsString());
         }
-
-        public /* synthetic */ Object deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
-            return this.deserialize(jsonElement, type, jsonDeserializationContext);
-        }
     }
 }
diff --git a/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderDispatcher.java b/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderDispatcher.java
index 86a0b61d456f72e0bf11d5608a73db4646fe9897..d9e3c45c5a4cd954c7157a612224ce812f61b83f 100644
--- a/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderDispatcher.java
+++ b/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderDispatcher.java
@@ -4,31 +4,14 @@ import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
 import net.minecraft.CrashReport;
 import net.minecraft.client.renderer.texture.OverlayTexture;
-import net.minecraft.world.level.BlockAndTintGetter;
 import net.minecraft.client.renderer.LevelRenderer;
-import net.minecraft.core.Position;
-import net.minecraft.core.Vec3i;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.client.renderer.MultiBufferSource;
 import com.mojang.blaze3d.vertex.PoseStack;
 import javax.annotation.Nullable;
-import net.minecraft.world.level.block.entity.CampfireBlockEntity;
-import net.minecraft.world.level.block.entity.BellBlockEntity;
-import net.minecraft.world.level.block.entity.ConduitBlockEntity;
-import net.minecraft.world.level.block.entity.BedBlockEntity;
-import net.minecraft.world.level.block.entity.ShulkerBoxBlockEntity;
+
 import net.minecraft.client.model.ShulkerModel;
-import net.minecraft.world.level.block.entity.StructureBlockEntity;
-import net.minecraft.world.level.block.entity.BannerBlockEntity;
-import net.minecraft.world.level.block.entity.SkullBlockEntity;
-import net.minecraft.world.level.block.entity.BeaconBlockEntity;
-import net.minecraft.world.level.block.entity.TheEndGatewayBlockEntity;
-import net.minecraft.world.level.block.entity.LecternBlockEntity;
-import net.minecraft.world.level.block.entity.EnchantmentTableBlockEntity;
 import net.minecraft.world.level.block.entity.BlockEntity;
-import net.minecraft.world.level.block.piston.PistonMovingBlockEntity;
-import net.minecraft.world.level.block.entity.SpawnerBlockEntity;
-import net.minecraft.world.level.block.entity.SignBlockEntity;
 import com.google.common.collect.Maps;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.client.Camera;
@@ -51,23 +34,23 @@ public class BlockEntityRenderDispatcher
     public HitResult cameraHitResult;
     
     private BlockEntityRenderDispatcher() {
-        this.renderers = (Map<BlockEntityType<?>, BlockEntityRenderer<?>>)Maps.newHashMap();
+        this.renderers = Maps.newHashMap(); // MagmaCube - decompile fix
         this.singleRenderBuffer = new BufferBuilder(256);
         this.register(BlockEntityType.SIGN, new SignRenderer(this));
         this.register(BlockEntityType.MOB_SPAWNER, new SpawnerRenderer(this));
         this.register(BlockEntityType.PISTON, new PistonHeadRenderer(this));
-        this.register((BlockEntityType<BlockEntity>)BlockEntityType.CHEST, new ChestRenderer<BlockEntity>(this));
-        this.register((BlockEntityType<BlockEntity>)BlockEntityType.ENDER_CHEST, new ChestRenderer<BlockEntity>(this));
-        this.register((BlockEntityType<BlockEntity>)BlockEntityType.TRAPPED_CHEST, new ChestRenderer<BlockEntity>(this));
+        this.register(BlockEntityType.CHEST, new ChestRenderer<>(this)); // MagmaCube - decompile fix
+        this.register(BlockEntityType.ENDER_CHEST, new ChestRenderer<>(this)); // MagmaCube - decompile fix
+        this.register(BlockEntityType.TRAPPED_CHEST, new ChestRenderer<>(this)); // MagmaCube - decompile fix
         this.register(BlockEntityType.ENCHANTING_TABLE, new EnchantTableRenderer(this));
         this.register(BlockEntityType.LECTERN, new LecternRenderer(this));
-        this.register((BlockEntityType<BlockEntity>)BlockEntityType.END_PORTAL, new TheEndPortalRenderer<BlockEntity>(this));
+        this.register(BlockEntityType.END_PORTAL, new TheEndPortalRenderer<>(this)); // MagmaCube - decompile fix
         this.register(BlockEntityType.END_GATEWAY, new TheEndGatewayRenderer(this));
         this.register(BlockEntityType.BEACON, new BeaconRenderer(this));
         this.register(BlockEntityType.SKULL, new SkullBlockRenderer(this));
         this.register(BlockEntityType.BANNER, new BannerRenderer(this));
         this.register(BlockEntityType.STRUCTURE_BLOCK, new StructureBlockRenderer(this));
-        this.register(BlockEntityType.SHULKER_BOX, new ShulkerBoxRenderer(new ShulkerModel<Object>(), this));
+        this.register(BlockEntityType.SHULKER_BOX, new ShulkerBoxRenderer(new ShulkerModel<>(), this)); // MagmaCube - decompile fix
         this.register(BlockEntityType.BED, new BedRenderer(this));
         this.register(BlockEntityType.CONDUIT, new ConduitRenderer(this));
         this.register(BlockEntityType.BELL, new BellRenderer(this));
diff --git a/src/main/java/net/minecraft/client/renderer/blockentity/ChestRenderer.java b/src/main/java/net/minecraft/client/renderer/blockentity/ChestRenderer.java
index c24a70fd55180629f5a32c7bba95fb8038903532..678966e9ce56bbdd1d8e1c268ce9b902d94f0309 100644
--- a/src/main/java/net/minecraft/client/renderer/blockentity/ChestRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/blockentity/ChestRenderer.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.blockentity;
 
+import net.minecraft.world.level.block.entity.BlockEntity; // MagmaCube
 import net.minecraft.world.level.block.state.StateHolder;
 import com.mojang.blaze3d.vertex.VertexConsumer;
 import net.minecraft.client.resources.model.Material;
@@ -68,7 +69,7 @@ public class ChestRenderer<T extends BlockEntity> extends BlockEntityRenderer<T>
     public void render(final T blockEntity, final float f, final PoseStack poseStack, final MultiBufferSource multiBufferSource, final int i, final int i2) {
         final Level level = ((BlockEntity)blockEntity).getLevel();
         final boolean flag = level != null;
-        final BlockState blockState = flag ? ((BlockEntity)blockEntity).getBlockState() : ((StateHolder<O, BlockState>)Blocks.CHEST.defaultBlockState()).setValue((Property<Comparable>)ChestBlock.FACING, Direction.SOUTH);
+        final BlockState blockState = flag ? ((BlockEntity)blockEntity).getBlockState() : (Blocks.CHEST.defaultBlockState()).setValue(ChestBlock.FACING, Direction.SOUTH); // MagmaCube - decompile error
         final ChestType chestType = blockState.hasProperty(ChestBlock.TYPE) ? blockState.getValue(ChestBlock.TYPE) : ChestType.SINGLE;
         final Block block = blockState.getBlock();
         if (!(block instanceof AbstractChestBlock)) {
@@ -83,7 +84,7 @@ public class ChestRenderer<T extends BlockEntity> extends BlockEntityRenderer<T>
         poseStack.translate(-0.5, -0.5, -0.5);
         final DoubleBlockCombiner.NeighborCombineResult<? extends ChestBlockEntity> neighborCombineResult2;
         if (flag) {
-            final DoubleBlockCombiner.NeighborCombineResult<? extends ChestBlockEntity> neighborCombineResult = abstractChestBlock.combine(blockState, level, ((BlockEntity)blockEntity).getBlockPos(), true);
+            neighborCombineResult2 = abstractChestBlock.combine(blockState, level, ((BlockEntity)blockEntity).getBlockPos(), true); // MagmaCube - decompile error
         }
         else {
             neighborCombineResult2 = DoubleBlockCombiner.Combiner::acceptNone;
@@ -91,7 +92,7 @@ public class ChestRenderer<T extends BlockEntity> extends BlockEntityRenderer<T>
         float f3 = neighborCombineResult2.apply(ChestBlock.opennessCombiner((LidBlockEntity)blockEntity)).get(f);
         f3 = 1.0f - f3;
         f3 = 1.0f - f3 * f3 * f3;
-        final int i3 = neighborCombineResult2.apply((DoubleBlockCombiner.Combiner<? super ChestBlockEntity, Int2IntFunction>)new BrightnessCombiner<Object>()).applyAsInt(i);
+        final int i3 = neighborCombineResult2.apply((DoubleBlockCombiner.Combiner<? super ChestBlockEntity, Int2IntFunction>)new BrightnessCombiner<>()).applyAsInt(i); // MagmaCube - decompile error
         final Material material = Sheets.chooseMaterial((BlockEntity)blockEntity, chestType, this.xmasTextures);
         final VertexConsumer vertexConsumer = material.buffer(multiBufferSource, RenderType::entityCutout);
         if (flag2) {
diff --git a/src/main/java/net/minecraft/client/renderer/blockentity/LecternRenderer.java b/src/main/java/net/minecraft/client/renderer/blockentity/LecternRenderer.java
index 2f2dd301b5345c68214e584b8ff6868248a174d1..f1f2d3eba7dcb194991f0368d2335d819fa2225a 100644
--- a/src/main/java/net/minecraft/client/renderer/blockentity/LecternRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/blockentity/LecternRenderer.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.renderer.blockentity;
 
-import net.minecraft.world.level.block.entity.BlockEntity;
 import com.mojang.blaze3d.vertex.VertexConsumer;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.client.renderer.RenderType;
diff --git a/src/main/java/net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java b/src/main/java/net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java
index 48d70fd5b85cf5b6b78fec483f42ffe6507e98c2..389f8ac08da5fa0b6f04a5fa33bcb1b757f442e8 100644
--- a/src/main/java/net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java
+++ b/src/main/java/net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java
@@ -114,7 +114,7 @@ public class ChunkRenderDispatcher {
         ChunkBufferBuilderPack chunkBufferBuilderPack = this.freeBuffers.poll();
         this.toBatchCount = this.toBatch.size();
         this.freeBufferCount = this.freeBuffers.size();
-        ((CompletableFuture)CompletableFuture.runAsync(() -> {}, this.executor).thenCompose(void_ -> chunkCompileTask.doTask(chunkBufferBuilderPack))).whenComplete((chunkTaskResult, throwable) -> {
+        (CompletableFuture.runAsync(() -> {}, this.executor).thenCompose(void_ -> chunkCompileTask.doTask(chunkBufferBuilderPack))).whenComplete((chunkTaskResult, throwable) -> { // MagmaCube - decompile error
             if (throwable != null) {
                 CrashReport crashReport = CrashReport.forThrowable(throwable, "Batching chunks");
                 Minecraft.getInstance().delayCrash(Minecraft.getInstance().fillReport(crashReport));
@@ -416,11 +416,6 @@ public class ChunkRenderDispatcher {
             public int compareTo(ChunkCompileTask chunkCompileTask) {
                 return Doubles.compare((double)this.distAtCreation, (double)chunkCompileTask.distAtCreation);
             }
-
-            @Override
-            public /* synthetic */ int compareTo(Object object) {
-                return this.compareTo((ChunkCompileTask)object);
-            }
         }
 
         class ResortTransparencyTask
@@ -464,7 +459,7 @@ public class ChunkRenderDispatcher {
                 CompletionStage completableFuture = ChunkRenderDispatcher.this.uploadChunkLayer(chunkBufferBuilderPack.builder(RenderType.translucent()), RenderChunk.this.getBuffer(RenderType.translucent())).thenApply(void_ -> ChunkTaskResult.CANCELLED);
                 return ((CompletableFuture)completableFuture).handle((chunkTaskResult, throwable) -> {
                     if (throwable != null && !(throwable instanceof CancellationException) && !(throwable instanceof InterruptedException)) {
-                        Minecraft.getInstance().delayCrash(CrashReport.forThrowable(throwable, "Rendering chunk"));
+                        Minecraft.getInstance().delayCrash(CrashReport.forThrowable((Throwable) throwable, "Rendering chunk")); // MagmaCube - decompile error
                     }
                     return this.isCancelled.get() ? ChunkTaskResult.CANCELLED : ChunkTaskResult.SUCCESSFUL;
                 });
@@ -514,7 +509,7 @@ public class ChunkRenderDispatcher {
                 compiledChunk.hasLayer.forEach(renderType -> list2.add(ChunkRenderDispatcher.this.uploadChunkLayer(chunkBufferBuilderPack.builder((RenderType)renderType), RenderChunk.this.getBuffer((RenderType)renderType))));
                 return Util.sequence(list2).handle((list, throwable) -> {
                     if (throwable != null && !(throwable instanceof CancellationException) && !(throwable instanceof InterruptedException)) {
-                        Minecraft.getInstance().delayCrash(CrashReport.forThrowable(throwable, "Rendering chunk"));
+                        Minecraft.getInstance().delayCrash(CrashReport.forThrowable((Throwable) throwable, "Rendering chunk")); // MagmaCube - decompile error
                     }
                     if (this.isCancelled.get()) {
                         return ChunkTaskResult.CANCELLED;
diff --git a/src/main/java/net/minecraft/client/renderer/chunk/RenderChunkRegion.java b/src/main/java/net/minecraft/client/renderer/chunk/RenderChunkRegion.java
index c3c12099c8a496c7fe0fcb898c83ce25d0fee44b..31e2f3f766771b6402e18c0bc26d37ee513ad5f6 100644
--- a/src/main/java/net/minecraft/client/renderer/chunk/RenderChunkRegion.java
+++ b/src/main/java/net/minecraft/client/renderer/chunk/RenderChunkRegion.java
@@ -4,7 +4,7 @@ import net.minecraft.world.level.ColorResolver;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.lighting.LevelLightEngine;
 import net.minecraft.core.Direction;
-import java.util.Iterator;
+
 import javax.annotation.Nullable;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.material.FluidState;
diff --git a/src/main/java/net/minecraft/client/renderer/debug/BeeDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/BeeDebugRenderer.java
index 6b02b8305af10f9db438207abaf28c44b7468e46..2bc5b0c74eb9c56fda6611173f6a80b7cb97247b 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/BeeDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/BeeDebugRenderer.java
@@ -106,17 +106,17 @@ implements DebugRenderer.SimpleDebugRenderer {
     }
 
     private Map<BlockPos, Set<UUID>> createHiveBlacklistMap() {
-        HashMap map = Maps.newHashMap();
+        HashMap<BlockPos, Set<UUID>> map = Maps.newHashMap(); // MagmaCube - type
         this.beeInfosPerEntity.values().forEach(beeInfo -> beeInfo.blacklistedHives.forEach(blockPos2 -> map.computeIfAbsent(blockPos2, blockPos -> Sets.newHashSet()).add(beeInfo.getUuid())));
         return map;
     }
 
     private void renderFlowerInfos() {
-        HashMap map = Maps.newHashMap();
+        HashMap<BlockPos, Set<UUID>> map = Maps.newHashMap(); // MagmaCube - type
         this.beeInfosPerEntity.values().stream().filter(BeeInfo::hasFlower).forEach(beeInfo -> map.computeIfAbsent(beeInfo.flowerPos, blockPos -> Sets.newHashSet()).add(beeInfo.getUuid()));
         map.entrySet().forEach(entry -> {
             BlockPos blockPos = (BlockPos)entry.getKey();
-            Set set = (Set)entry.getValue();
+            Set<UUID> set = (Set)entry.getValue(); // MagmaCube - type
             Set set2 = set.stream().map(DebugEntityNameGenerator::getEntityName).collect(Collectors.toSet());
             int i = 1;
             BeeDebugRenderer.renderTextOverPos(set2.toString(), blockPos, i++, -256);
@@ -254,7 +254,7 @@ implements DebugRenderer.SimpleDebugRenderer {
     }
 
     private Map<BlockPos, List<String>> getGhostHives() {
-        HashMap map = Maps.newHashMap();
+        HashMap<BlockPos, List<String>> map = Maps.newHashMap(); // MagmaCube - type
         for (BeeInfo beeInfo : this.beeInfosPerEntity.values()) {
             if (beeInfo.hivePos == null || this.hives.containsKey(beeInfo.hivePos)) continue;
             map.computeIfAbsent(beeInfo.hivePos, blockPos -> Lists.newArrayList()).add(beeInfo.getName());
diff --git a/src/main/java/net/minecraft/client/renderer/debug/BrainDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/BrainDebugRenderer.java
index f78e72c83fd23846e307181df8f7cd0a7953e70c..d70b2f225980be4ff757d9a19b1e7f6de42cf393 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/BrainDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/BrainDebugRenderer.java
@@ -265,7 +265,7 @@ implements DebugRenderer.SimpleDebugRenderer {
     }
 
     private Map<BlockPos, List<String>> getGhostPois() {
-        HashMap map = Maps.newHashMap();
+        HashMap<BlockPos, List<String>> map = Maps.newHashMap(); // MagmaCube - type
         for (BrainDump brainDump : this.brainDumpsPerEntity.values()) {
             for (BlockPos blockPos2 : Iterables.concat(brainDump.pois, brainDump.potentialPois)) {
                 if (this.pois.containsKey(blockPos2)) continue;
diff --git a/src/main/java/net/minecraft/client/renderer/debug/CaveDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/CaveDebugRenderer.java
index 23d48702996713b7a6854cec1324dc9bf8283c80..c6488cbebc5d851ecc1d0211b29c078b57fb9271 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/CaveDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/CaveDebugRenderer.java
@@ -22,9 +22,11 @@ public class CaveDebugRenderer implements DebugRenderer.SimpleDebugRenderer
     private final List<BlockPos> startPoses;
     
     public CaveDebugRenderer() {
-        this.tunnelsList = (Map<BlockPos, BlockPos>)Maps.newHashMap();
-        this.thicknessMap = (Map<BlockPos, Float>)Maps.newHashMap();
-        this.startPoses = (List<BlockPos>)Lists.newArrayList();
+        // MagmaCube start - decompile error
+        this.tunnelsList = Maps.newHashMap();
+        this.thicknessMap = Maps.newHashMap();
+        this.startPoses = Lists.newArrayList();
+        // MagmaCube end - decompile error
     }
     
     public void addTunnel(final BlockPos blockPos, final List<BlockPos> list, final List<Float> list2) {
diff --git a/src/main/java/net/minecraft/client/renderer/debug/GameTestDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/GameTestDebugRenderer.java
index 7c290dda8d703bf32582f9175759d9897142c460..0f093d02b89fb0844e7fedf64c45667be054c693 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/GameTestDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/GameTestDebugRenderer.java
@@ -15,7 +15,7 @@ public class GameTestDebugRenderer implements DebugRenderer.SimpleDebugRenderer
     private final Map<BlockPos, Marker> markers;
     
     public GameTestDebugRenderer() {
-        this.markers = (Map<BlockPos, Marker>)Maps.newHashMap();
+        this.markers = Maps.newHashMap(); // MagmaCube - decompile error
     }
     
     public void addMarker(final BlockPos blockPos, final int i, final String s, final int i2) {
diff --git a/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
index c2d44efdb04386942b6d163dae7649204c5a60c9..6e6662a00974dc554acc8301a9183cfafdc8b144 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
@@ -41,11 +41,13 @@ implements DebugRenderer.SimpleDebugRenderer {
             for (int i = 0; i < list.size(); ++i) {
                 DebugGoal debugGoal = (DebugGoal)list.get(i);
                 if (!blockPos.closerThan(debugGoal.pos, 160.0)) continue;
-                double d = (double)debugGoal.pos.getX() + 0.5;
-                double d2 = (double)debugGoal.pos.getY() + 2.0 + (double)i * 0.25;
-                double d3 = (double)debugGoal.pos.getZ() + 0.5;
+                // MagmaCube start - decompile error
+                double d4 = (double)debugGoal.pos.getX() + 0.5;
+                double d5 = (double)debugGoal.pos.getY() + 2.0 + (double)i * 0.25;
+                double d6 = (double)debugGoal.pos.getZ() + 0.5;
+                // MagmaCube end - decompile error
                 int i2 = debugGoal.isRunning ? -16711936 : -3355444;
-                DebugRenderer.renderFloatingText(debugGoal.name, d, d2, d3, i2);
+                DebugRenderer.renderFloatingText(debugGoal.name, d4, d5, d6, i2); // MagmaCube - decompile error
             }
         });
         RenderSystem.enableDepthTest();
diff --git a/src/main/java/net/minecraft/client/renderer/debug/PathfindingRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/PathfindingRenderer.java
index 4ecfdab2bc01c693d639ca637d316a4c3eba1ad3..78864d66a2cb3db4779a00e2de428b02137c41cf 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/PathfindingRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/PathfindingRenderer.java
@@ -24,9 +24,11 @@ public class PathfindingRenderer implements DebugRenderer.SimpleDebugRenderer
     private final Map<Integer, Long> creationMap;
     
     public PathfindingRenderer() {
-        this.pathMap = (Map<Integer, Path>)Maps.newHashMap();
-        this.pathMaxDist = (Map<Integer, Float>)Maps.newHashMap();
-        this.creationMap = (Map<Integer, Long>)Maps.newHashMap();
+        // MagmaCube start - decompile error
+        this.pathMap = Maps.newHashMap();
+        this.pathMaxDist = Maps.newHashMap();
+        this.creationMap = Maps.newHashMap();
+        // MagmaCube end - decompile error
     }
     
     public void addPath(final int i, final Path path, final float f) {
@@ -111,7 +113,7 @@ public class PathfindingRenderer implements DebugRenderer.SimpleDebugRenderer
         for (int i = 0; i < path.getNodeCount(); ++i) {
             final Node node = path.getNode(i);
             if (distanceToCamera(node.asBlockPos(), d, d2, d3) <= 80.0f) {
-                final float f = i / path.getNodeCount() * 0.33f;
+                final float f = (float) i / path.getNodeCount() * 0.33f; // MagmaCube - decompile error
                 final int i2 = (i == 0) ? 0 : Mth.hsvToRgb(f, 0.9f, 0.9f);
                 final int i3 = i2 >> 16 & 0xFF;
                 final int i4 = i2 >> 8 & 0xFF;
diff --git a/src/main/java/net/minecraft/client/renderer/debug/VillageSectionsDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/VillageSectionsDebugRenderer.java
index 818074e0b74cc5005a2792ae85852538fdf1022b..d0ed58ed5cbd2960139bf2d90b252f9f54bbad7a 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/VillageSectionsDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/VillageSectionsDebugRenderer.java
@@ -14,7 +14,7 @@ public class VillageSectionsDebugRenderer implements DebugRenderer.SimpleDebugRe
     private final Set<SectionPos> villageSections;
     
     VillageSectionsDebugRenderer() {
-        this.villageSections = (Set<SectionPos>)Sets.newHashSet();
+        this.villageSections = Sets.newHashSet(); // MagmaCube - decompile error
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/renderer/entity/AbstractHorseRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/AbstractHorseRenderer.java
index ca5b8cfcaff8f77979052f60dd541cc403cc4544..ab4fecf1089a2303a81509452062310d2ab87afc 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/AbstractHorseRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/AbstractHorseRenderer.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.LivingEntity;
 import com.mojang.blaze3d.vertex.PoseStack;
 import net.minecraft.client.model.HorseModel;
 import net.minecraft.world.entity.animal.horse.AbstractHorse;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/AbstractZombieRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/AbstractZombieRenderer.java
index 66d932d879f6c665a539533fd08fdaa2905d6b05..a6ff5d29926f180afe97977c44c2030548a2aa01 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/AbstractZombieRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/AbstractZombieRenderer.java
@@ -16,7 +16,7 @@ public abstract class AbstractZombieRenderer<T extends Zombie, M extends ZombieM
     
     protected AbstractZombieRenderer(final EntityRenderDispatcher entityRenderDispatcher, final M zombieModel, final M zombieModel2, final M zombieModel3) {
         super(entityRenderDispatcher, zombieModel, 0.5f);
-        this.addLayer((RenderLayer<T, M>)new HumanoidArmorLayer((RenderLayerParent<LivingEntity, HumanoidModel>)this, zombieModel2, zombieModel3));
+        this.addLayer((RenderLayer<T, M>)new HumanoidArmorLayer(this, zombieModel2, zombieModel3)); // MagmaCube - decompile error
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/renderer/entity/AreaEffectCloudRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/AreaEffectCloudRenderer.java
index 254b76fc7877dbbba4bd41bcd8a4196cb6419944..8ee364d8802d8f2c938f97421b5cc73900830668 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/AreaEffectCloudRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/AreaEffectCloudRenderer.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
 import net.minecraft.client.renderer.texture.TextureAtlas;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.entity.AreaEffectCloud;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/ArmorStandRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/ArmorStandRenderer.java
index 70dc6b719687c31327ea78bee0f32975f6347083..bc9c165153b3caa2a59998d43448694c4eba2e17 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/ArmorStandRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/ArmorStandRenderer.java
@@ -24,7 +24,7 @@ public class ArmorStandRenderer extends LivingEntityRenderer<ArmorStand, ArmorSt
     
     public ArmorStandRenderer(final EntityRenderDispatcher entityRenderDispatcher) {
         super(entityRenderDispatcher, new ArmorStandModel(), 0.0f);
-        this.addLayer((RenderLayer<ArmorStand, ArmorStandArmorModel>)new HumanoidArmorLayer((RenderLayerParent<LivingEntity, HumanoidModel>)this, new ArmorStandArmorModel(0.5f), new ArmorStandArmorModel(1.0f)));
+        this.addLayer((RenderLayer<ArmorStand, ArmorStandArmorModel>)new HumanoidArmorLayer(this, new ArmorStandArmorModel(0.5f), new ArmorStandArmorModel(1.0f))); // MagmaCube - decompile error
         this.addLayer(new ItemInHandLayer<ArmorStand, ArmorStandArmorModel>(this));
         this.addLayer(new ElytraLayer<ArmorStand, ArmorStandArmorModel>(this));
         this.addLayer(new CustomHeadLayer<ArmorStand, ArmorStandArmorModel>(this));
diff --git a/src/main/java/net/minecraft/client/renderer/entity/BeeRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/BeeRenderer.java
index 209dadc9cf4c4ce9ae076a4764e3d19a80c175d3..7b23d9d7cae1117a57691f5927303d29186cd3a6 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/BeeRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/BeeRenderer.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.model.BeeModel;
 import net.minecraft.world.entity.animal.Bee;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/BlazeRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/BlazeRenderer.java
index 780e3aa3f17088240dddc5c177af976fd3976273..e886b30dcaa3b8c726487f03b32d91cb739ab25e 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/BlazeRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/BlazeRenderer.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
 import net.minecraft.core.BlockPos;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.model.BlazeModel;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/CaveSpiderRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/CaveSpiderRenderer.java
index 50f8a7a5b3ee1a6f36715e6ccca797f27cb61f51..c9a6b47ac3dd382aea62448d4c6685b206488d39 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/CaveSpiderRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/CaveSpiderRenderer.java
@@ -1,8 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.monster.Spider;
 import com.mojang.blaze3d.vertex.PoseStack;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.entity.monster.CaveSpider;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/ChestedHorseRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/ChestedHorseRenderer.java
index a5088562c4b22eca69d3d35002ae12799d28d204..afecdf9f640c01fc22592100e939c7209f432e5f 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/ChestedHorseRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/ChestedHorseRenderer.java
@@ -2,7 +2,6 @@ package net.minecraft.client.renderer.entity;
 
 import com.google.common.collect.Maps;
 import com.google.common.collect.ImmutableMap;
-import net.minecraft.world.entity.Entity;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.entity.EntityType;
 import java.util.Map;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/ChickenRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/ChickenRenderer.java
index 61660ab80141a9052eea4f5afcd1d2c848f5d8c8..ad41cdf9e83f8a46b2fd64c82be8be963c3e99ef 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/ChickenRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/ChickenRenderer.java
@@ -1,7 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.util.Mth;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.model.ChickenModel;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/CodRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/CodRenderer.java
index 3943b0e0d134d78f2cbaf246ffc4ec4ec49b9ca6..895d7df3e753c318d1654a52f8b576e14f459750 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/CodRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/CodRenderer.java
@@ -1,7 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
 import com.mojang.math.Vector3f;
 import net.minecraft.util.Mth;
 import com.mojang.blaze3d.vertex.PoseStack;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/CowRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/CowRenderer.java
index 1e04ea5fd78acb16632dfad1dc06c563c89f51f8..b43b5429d27242902d71ab9955702dd1f5c315f2 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/CowRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/CowRenderer.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.model.CowModel;
 import net.minecraft.world.entity.animal.Cow;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/CreeperRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/CreeperRenderer.java
index b89c4f0817b8b250669da4f52dd087a6a2a45860..6554e7ae9bca0341678c56650a5bf45f207bf617 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/CreeperRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/CreeperRenderer.java
@@ -1,10 +1,7 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.util.Mth;
 import com.mojang.blaze3d.vertex.PoseStack;
-import net.minecraft.client.renderer.entity.layers.RenderLayer;
 import net.minecraft.client.renderer.entity.layers.CreeperPowerLayer;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.model.CreeperModel;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/DolphinRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/DolphinRenderer.java
index b6650478242379b21cf138ab14e56a10fe029ebd..d22cbafe94035007a065f29d3b67c2c0373e51db 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/DolphinRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/DolphinRenderer.java
@@ -1,7 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.client.renderer.entity.layers.RenderLayer;
 import net.minecraft.client.renderer.entity.layers.DolphinCarryingItemLayer;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.model.DolphinModel;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/DrownedRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/DrownedRenderer.java
index 0efb59e66c70355ce6f5d998a4c5524cb9dd392d..aa2e0a69ed1f65113331c7bb0144922838b42c69 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/DrownedRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/DrownedRenderer.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.util.Mth;
 import com.mojang.math.Vector3f;
 import com.mojang.blaze3d.vertex.PoseStack;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/ElderGuardianRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/ElderGuardianRenderer.java
index 42461c456909fff3ef0ca60c04e9d22e2758cff3..d5492c371b3afe32839303851be92c02722df705 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/ElderGuardianRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/ElderGuardianRenderer.java
@@ -1,7 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.monster.ElderGuardian;
 import com.mojang.blaze3d.vertex.PoseStack;
 import net.minecraft.world.entity.monster.Guardian;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/EndermiteRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/EndermiteRenderer.java
index e2fafabbb3e3fd83c8690b87f8e0683c0f855a53..e31ddac4bd1202822c35f13bb4ff60ffa4227869 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/EndermiteRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/EndermiteRenderer.java
@@ -1,7 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.model.EndermiteModel;
 import net.minecraft.world.entity.monster.Endermite;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
index e908bed2a2a986c711faa9f1439ec86029f14944..887d1c5b1174e2b556f1262f536d71748924799a 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
@@ -289,11 +289,11 @@ public class EntityRenderDispatcher {
             String s = ((AbstractClientPlayer)entity).getModelName();
             PlayerRenderer playerRenderer = this.playerRenderers.get(s);
             if (playerRenderer != null) {
-                return playerRenderer;
+                return (EntityRenderer<? super T>) playerRenderer; // MagmaCube - decompile error
             }
-            return this.defaultPlayerRenderer;
+            return (EntityRenderer<? super T>) this.defaultPlayerRenderer; // MagmaCube - decompile error
         }
-        return this.renderers.get(entity.getType());
+        return (EntityRenderer<? super T>) this.renderers.get(entity.getType()); // MagmaCube - decompile error
     }
 
     public void prepare(Level level, Camera camera, Entity entity) {
@@ -320,12 +320,12 @@ public class EntityRenderDispatcher {
     }
 
     public <E extends Entity> boolean shouldRender(E entity, Frustum frustum, double d, double d2, double d3) {
-        EntityRenderer<E> entityRenderer = this.getRenderer(entity);
+        EntityRenderer<E> entityRenderer = (EntityRenderer<E>) this.getRenderer(entity); // MagmaCube - decompile error
         return entityRenderer.shouldRender(entity, frustum, d, d2, d3);
     }
 
     public <E extends Entity> void render(E entity, double d, double d2, double d3, float f, float f2, PoseStack poseStack, MultiBufferSource multiBufferSource, int i) {
-        EntityRenderer<E> entityRenderer = this.getRenderer(entity);
+        EntityRenderer<E> entityRenderer = (EntityRenderer<E>) this.getRenderer(entity); // MagmaCube - decompile error
         try {
             double d7;
             float f3;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/EvokerRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/EvokerRenderer.java
index 924fe08c2981a510f6591541d1d161ed8ad0a513..087678bcd3399b4828e981a5439ce8215a5c5e25 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/EvokerRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/EvokerRenderer.java
@@ -1,8 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
 import net.minecraft.client.renderer.entity.layers.RenderLayer;
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.client.renderer.MultiBufferSource;
 import com.mojang.blaze3d.vertex.PoseStack;
 import net.minecraft.client.renderer.entity.layers.ItemInHandLayer;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/FireworkEntityRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/FireworkEntityRenderer.java
index 2f8978f8e1b8de54767fdedebe10f59b34b775c6..bfb500c2533822ecf9e685669e0a9db85048cebc 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/FireworkEntityRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/FireworkEntityRenderer.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
 import net.minecraft.client.renderer.texture.TextureAtlas;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.renderer.texture.OverlayTexture;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/FoxRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/FoxRenderer.java
index 5208a3b594f0a0dce26378e71927ee4745e72df1..8f6379164e860976cd21d5baeda9eaacec98038c 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/FoxRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/FoxRenderer.java
@@ -1,11 +1,8 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
 import com.mojang.math.Vector3f;
 import net.minecraft.util.Mth;
 import com.mojang.blaze3d.vertex.PoseStack;
-import net.minecraft.client.renderer.entity.layers.RenderLayer;
 import net.minecraft.client.renderer.entity.layers.FoxHeldItemLayer;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.model.FoxModel;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/GhastRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/GhastRenderer.java
index 23e34d1ba7be98e956971f7c76ff1d347c074991..8e506a34d630ae4855b58865097eeaf661443165 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/GhastRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/GhastRenderer.java
@@ -1,7 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
 import com.mojang.blaze3d.vertex.PoseStack;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.model.GhastModel;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/HoglinRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/HoglinRenderer.java
index 8189371b1bb63ad50244ea0a723e429910b89413..d2f54079ffe408c89bb963051cf894155dd81a59 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/HoglinRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/HoglinRenderer.java
@@ -1,7 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.model.HoglinModel;
 import net.minecraft.world.entity.monster.hoglin.Hoglin;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/HorseRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/HorseRenderer.java
index 3c83426cc8303e4e427d985881c64ec9ed99dc80..b443a747144eeb9526ba724a978ac22b6eef3e8a 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/HorseRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/HorseRenderer.java
@@ -2,10 +2,7 @@ package net.minecraft.client.renderer.entity;
 
 import net.minecraft.Util;
 import com.google.common.collect.Maps;
-import java.util.EnumMap;
-import net.minecraft.world.entity.Entity;
 import net.minecraft.client.renderer.entity.layers.HorseArmorLayer;
-import net.minecraft.client.renderer.entity.layers.RenderLayer;
 import net.minecraft.client.renderer.entity.layers.HorseMarkingLayer;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.entity.animal.horse.Variant;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/HuskRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/HuskRenderer.java
index 2c25f4a806d548ce1f8d182f8ff46d448f027a34..cd1262a47100130a8a683241f08b0e60dbca8d5a 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/HuskRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/HuskRenderer.java
@@ -1,8 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.Mob;
 import com.mojang.blaze3d.vertex.PoseStack;
 import net.minecraft.world.entity.monster.Zombie;
 import net.minecraft.resources.ResourceLocation;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java
index 07aeca48ccfff98dd63115c97b8d7f00892e4fbf..2ff8f545191b5ec486195d7d518847da1fc146ab 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java
@@ -56,7 +56,7 @@ import net.minecraft.world.level.block.StainedGlassPaneBlock;
 public class ItemRenderer
 implements ResourceManagerReloadListener {
     public static final ResourceLocation ENCHANT_GLINT_LOCATION = new ResourceLocation("textures/misc/enchanted_item_glint.png");
-    private static final Set<Item> IGNORED = Sets.newHashSet((Object[])new Item[]{Items.AIR});
+    private static final Set<Item> IGNORED = Sets.newHashSet(new Item[]{Items.AIR}); // MagmaCube - decompile error
     public float blitOffset;
     private final ItemModelShaper itemModelShaper;
     private final TextureManager textureManager;
@@ -106,7 +106,7 @@ implements ResourceManagerReloadListener {
             boolean flag4;
             if (transformType != ItemTransforms.TransformType.GUI && !transformType.firstPerson() && itemStack.getItem() instanceof BlockItem) {
                 Block block = ((BlockItem)itemStack.getItem()).getBlock();
-                boolean flag3 = !(block instanceof HalfTransparentBlock) && !(block instanceof StainedGlassPaneBlock);
+                flag4 = !(block instanceof HalfTransparentBlock) && !(block instanceof StainedGlassPaneBlock); // MagmaCube - decompile error
             } else {
                 flag4 = true;
             }
@@ -120,13 +120,13 @@ implements ResourceManagerReloadListener {
                     pose.pose().multiply(0.75f);
                 }
                 if (flag4) {
-                    VertexConsumer vertexConsumer = ItemRenderer.getCompassFoilBufferDirect(multiBufferSource, renderType, pose);
+                    vertexConsumer4 = ItemRenderer.getCompassFoilBufferDirect(multiBufferSource, renderType, pose); // MagmaCube - decompile error
                 } else {
-                    VertexConsumer vertexConsumer2 = ItemRenderer.getCompassFoilBuffer(multiBufferSource, renderType, pose);
+                    vertexConsumer4 = ItemRenderer.getCompassFoilBuffer(multiBufferSource, renderType, pose); // MagmaCube - decompile error
                 }
                 poseStack.popPose();
             } else if (flag4) {
-                VertexConsumer vertexConsumer3 = ItemRenderer.getFoilBufferDirect(multiBufferSource, renderType, true, itemStack.hasFoil());
+                vertexConsumer4 = ItemRenderer.getFoilBufferDirect(multiBufferSource, renderType, true, itemStack.hasFoil()); // MagmaCube - decompile error
             } else {
                 vertexConsumer4 = ItemRenderer.getFoilBuffer(multiBufferSource, renderType, true, itemStack.hasFoil());
             }
@@ -186,7 +186,7 @@ implements ResourceManagerReloadListener {
         BakedModel bakedModel2;
         Item item = itemStack.getItem();
         if (item == Items.TRIDENT) {
-            BakedModel bakedModel = this.itemModelShaper.getModelManager().getModel(new ModelResourceLocation("minecraft:trident_in_hand#inventory"));
+            bakedModel2 = this.itemModelShaper.getModelManager().getModel(new ModelResourceLocation("minecraft:trident_in_hand#inventory")); // MagmaCube - decompile error
         } else {
             bakedModel2 = this.itemModelShaper.getItemModel(itemStack);
         }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/LlamaRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/LlamaRenderer.java
index af902365f2b2cf82a745acd36b5387a8452e8031..629461b381bda419bd279249353b5f3eb8caa276 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/LlamaRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/LlamaRenderer.java
@@ -1,7 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.client.renderer.entity.layers.RenderLayer;
 import net.minecraft.client.renderer.entity.layers.LlamaDecorLayer;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.model.LlamaModel;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/OcelotRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/OcelotRenderer.java
index 39aba0a398b09efa4fde55dfa2492e60ae35e6ae..4b286b63d74848d4f2bb1418752bf6baec71109e 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/OcelotRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/OcelotRenderer.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.model.OcelotModel;
 import net.minecraft.world.entity.animal.Ocelot;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/ParrotRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/ParrotRenderer.java
index b241123e802eb4e39f264fd2b87ce35799d50979..4548c4a862508fb73cc8d8d10bcc39b7279ca595 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/ParrotRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/ParrotRenderer.java
@@ -1,7 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.util.Mth;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.model.ParrotModel;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/PolarBearRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/PolarBearRenderer.java
index 6f4153c94cfe40f43b6724314986d8b7631caf3e..34e8e54c69faeb09d0e811bcadc843fe617953de 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/PolarBearRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/PolarBearRenderer.java
@@ -1,7 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
 import com.mojang.blaze3d.vertex.PoseStack;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.model.PolarBearModel;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RabbitRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/RabbitRenderer.java
index f32a35ad2883b69ae42ed4d68a2fd56e19181772..22cfbf42410148347dfa6ec994c459e326782efd 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RabbitRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RabbitRenderer.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
 import net.minecraft.ChatFormatting;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.model.RabbitModel;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RavagerRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/RavagerRenderer.java
index 522ff4113e981af5fa40c5db28f0d14a4e3a4f4a..dce6e1dfbd93d914af979a7ce6617f9b0d05546b 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RavagerRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RavagerRenderer.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.model.RavagerModel;
 import net.minecraft.world.entity.monster.Ravager;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/SalmonRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/SalmonRenderer.java
index ecc58714face8eafdd51c8b526ef0c39ec644761..8207f198276c16094d408f988e60e26c53a42a3b 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/SalmonRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/SalmonRenderer.java
@@ -1,7 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
 import com.mojang.math.Vector3f;
 import net.minecraft.util.Mth;
 import com.mojang.blaze3d.vertex.PoseStack;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/SheepRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/SheepRenderer.java
index 88b0a9616713e68e2b2324b14321a5dced7fc58b..8404a8de09e1e32ec08738c3c0adfb2379cb9feb 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/SheepRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/SheepRenderer.java
@@ -1,7 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.client.renderer.entity.layers.RenderLayer;
 import net.minecraft.client.renderer.entity.layers.SheepFurLayer;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.model.SheepModel;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/SilverfishRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/SilverfishRenderer.java
index e8ddaf13b0cca9aaf6bcfe76c0611e599a64bcca..6425d37361a449eebf0cac011a891c0126d1a9be 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/SilverfishRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/SilverfishRenderer.java
@@ -1,7 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.model.SilverfishModel;
 import net.minecraft.world.entity.monster.Silverfish;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/SnowGolemRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/SnowGolemRenderer.java
index 5e72179fddce7deb78c7cf7125eb9a9b497408cc..5a5337b862a4fbb77a6bed7d5ec391d167bb0b82 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/SnowGolemRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/SnowGolemRenderer.java
@@ -1,7 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.client.renderer.entity.layers.RenderLayer;
 import net.minecraft.client.renderer.entity.layers.SnowGolemHeadLayer;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.model.SnowGolemModel;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/SpectralArrowRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/SpectralArrowRenderer.java
index 3c42bdc2fcd08997c2dc782a2f169bee474d5da4..30f22c6f53fa6857dcfff22e864e56e72d9f3d6e 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/SpectralArrowRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/SpectralArrowRenderer.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.entity.projectile.SpectralArrow;
 
diff --git a/src/main/java/net/minecraft/client/renderer/entity/SquidRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/SquidRenderer.java
index 86272059773834cefc37b8c53bcdad1af3e45ebf..27afa8682fc516fc1614a44272ca62c685f8069e 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/SquidRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/SquidRenderer.java
@@ -1,7 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
 import com.mojang.math.Vector3f;
 import net.minecraft.util.Mth;
 import com.mojang.blaze3d.vertex.PoseStack;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/ThrownItemRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/ThrownItemRenderer.java
index 6d5da591072ba8566f48c6290627ebc32a146a36..d51f780855f6b840f1e26c0739ad6b1dffdfba68 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/ThrownItemRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/ThrownItemRenderer.java
@@ -4,6 +4,7 @@ import net.minecraft.client.renderer.texture.TextureAtlas;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.renderer.texture.OverlayTexture;
 import net.minecraft.client.renderer.block.model.ItemTransforms;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.projectile.ItemSupplier;
 import com.mojang.math.Vector3f;
 import net.minecraft.client.renderer.MultiBufferSource;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/ThrownTridentRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/ThrownTridentRenderer.java
index 0d2b234a90014d341a6f8b1f7bc8a369e4af8af9..7a26b6f9fa56bee9fd532f79b8719068ea84a7c0 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/ThrownTridentRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/ThrownTridentRenderer.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
 import com.mojang.blaze3d.vertex.VertexConsumer;
 import net.minecraft.client.renderer.texture.OverlayTexture;
 import net.minecraft.util.Mth;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/TippableArrowRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/TippableArrowRenderer.java
index b29c872501227dda0aba01e85d520c590857d165..15f2af2360cb695c3353da369fb6b9454ac0df8b 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/TippableArrowRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/TippableArrowRenderer.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.entity.projectile.Arrow;
 
diff --git a/src/main/java/net/minecraft/client/renderer/entity/TurtleRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/TurtleRenderer.java
index 1c3885db07a7c54d780c1bacbfe55ca6fe536754..d7fc583f31836d5c0950a8372e4f7be96aed9e36 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/TurtleRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/TurtleRenderer.java
@@ -1,8 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.Mob;
 import net.minecraft.client.renderer.MultiBufferSource;
 import com.mojang.blaze3d.vertex.PoseStack;
 import net.minecraft.resources.ResourceLocation;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/UndeadHorseRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/UndeadHorseRenderer.java
index c2a52f81660b3d230346b5004a6e0af89f851af6..d0c21289e5b1ce5da1d3e54f06e3cd4b99275e73 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/UndeadHorseRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/UndeadHorseRenderer.java
@@ -2,7 +2,6 @@ package net.minecraft.client.renderer.entity;
 
 import com.google.common.collect.Maps;
 import com.google.common.collect.ImmutableMap;
-import net.minecraft.world.entity.Entity;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.entity.EntityType;
 import java.util.Map;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/VexRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/VexRenderer.java
index e3cb2181457b40074e2ad202a7336c144f9b17a6..fa561e58219c8363421c7330028ff36a33a3468d 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/VexRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/VexRenderer.java
@@ -1,8 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.Mob;
 import com.mojang.blaze3d.vertex.PoseStack;
 import net.minecraft.core.BlockPos;
 import net.minecraft.resources.ResourceLocation;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/WitherSkeletonRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/WitherSkeletonRenderer.java
index 18e8a70af931f388dbc68bb08e0dd986ea7ac7bc..51359d0aa0b0a98bce1e63ed624ac96827226a52 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/WitherSkeletonRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/WitherSkeletonRenderer.java
@@ -1,8 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.Mob;
 import com.mojang.blaze3d.vertex.PoseStack;
 import net.minecraft.world.entity.monster.AbstractSkeleton;
 import net.minecraft.resources.ResourceLocation;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/WitherSkullRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/WitherSkullRenderer.java
index 6c34f755664c4688c13dd657682df9edcaebaece..780afadae3875b64f468c7b81dcabb5d4602e776 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/WitherSkullRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/WitherSkullRenderer.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
 import com.mojang.blaze3d.vertex.VertexConsumer;
 import net.minecraft.client.renderer.texture.OverlayTexture;
 import net.minecraft.util.Mth;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/WolfRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/WolfRenderer.java
index c3f1b4049f05134c17491a142c5823a1d3ca9fb0..f2664a1ee3dd1a1f918e2df4cb258e84873dced9 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/WolfRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/WolfRenderer.java
@@ -1,11 +1,7 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.Mob;
 import net.minecraft.client.renderer.MultiBufferSource;
 import com.mojang.blaze3d.vertex.PoseStack;
-import net.minecraft.client.renderer.entity.layers.RenderLayer;
 import net.minecraft.client.renderer.entity.layers.WolfCollarLayer;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.model.WolfModel;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/ZoglinRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/ZoglinRenderer.java
index d85a257a8b89c4e2439e23c3fb24d5df0ebeb646..2bf342bfd3f4de82f7f8c3f77fe893328f5233b1 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/ZoglinRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/ZoglinRenderer.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.world.entity.Entity;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.model.HoglinModel;
 import net.minecraft.world.entity.monster.Zoglin;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/layers/EnergySwirlLayer.java b/src/main/java/net/minecraft/client/renderer/entity/layers/EnergySwirlLayer.java
index dee38d668806f4f1dec2167d21941a04405fc6d3..1de2aa110e044d1fdf34335c5ac285ec9c4dc0fe 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/layers/EnergySwirlLayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/layers/EnergySwirlLayer.java
@@ -4,6 +4,7 @@ import net.minecraft.resources.ResourceLocation;
 import com.mojang.blaze3d.vertex.VertexConsumer;
 import net.minecraft.client.renderer.texture.OverlayTexture;
 import net.minecraft.client.renderer.RenderType;
+import net.minecraft.world.entity.Entity; // MagmaCube
 import net.minecraft.world.entity.PowerableMob;
 import net.minecraft.client.renderer.MultiBufferSource;
 import com.mojang.blaze3d.vertex.PoseStack;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/layers/SaddleLayer.java b/src/main/java/net/minecraft/client/renderer/entity/layers/SaddleLayer.java
index aeebc70ee04dc3ae1b80404f3ef0897dab5be489..06d35477b6db230e249c050aaf26b21a4b228280 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/layers/SaddleLayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/layers/SaddleLayer.java
@@ -3,6 +3,7 @@ package net.minecraft.client.renderer.entity.layers;
 import com.mojang.blaze3d.vertex.VertexConsumer;
 import net.minecraft.client.renderer.texture.OverlayTexture;
 import net.minecraft.client.renderer.RenderType;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.Saddleable;
 import net.minecraft.client.renderer.MultiBufferSource;
 import com.mojang.blaze3d.vertex.PoseStack;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/layers/StrayClothingLayer.java b/src/main/java/net/minecraft/client/renderer/entity/layers/StrayClothingLayer.java
index 67c874e19fbf264959f0e0531d3012b37e3f490a..94d6446381338aca16624b43cc3e5c693dcf7af5 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/layers/StrayClothingLayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/layers/StrayClothingLayer.java
@@ -7,6 +7,7 @@ import net.minecraft.client.renderer.entity.RenderLayerParent;
 import net.minecraft.client.model.SkeletonModel;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.model.EntityModel;
+import net.minecraft.world.entity.Mob; // MagmaCube
 
 public class StrayClothingLayer<T extends Mob, M extends EntityModel<T>> extends RenderLayer<T, M>
 {
diff --git a/src/main/java/net/minecraft/client/renderer/entity/layers/VillagerProfessionLayer.java b/src/main/java/net/minecraft/client/renderer/entity/layers/VillagerProfessionLayer.java
index efceafb3781dcce68042a83dd0c96c6cf017755a..d57c9a19a962f9eb0cdf932a6735e3a2e8996b5b 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/layers/VillagerProfessionLayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/layers/VillagerProfessionLayer.java
@@ -2,12 +2,14 @@ package net.minecraft.client.renderer.entity.layers;
 
 import net.minecraft.Util;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
+import net.minecraft.client.model.EntityModel; // MagmaCube
 import net.minecraft.world.entity.Entity;
 import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.server.packs.resources.Resource;
 import java.io.IOException;
 import net.minecraft.server.packs.metadata.MetadataSectionSerializer;
 import net.minecraft.core.DefaultedRegistry;
+import net.minecraft.world.entity.LivingEntity; // MagmaCube
 import net.minecraft.world.entity.npc.VillagerData;
 import net.minecraft.util.Mth;
 import net.minecraft.client.model.VillagerHeadModel;
@@ -27,7 +29,7 @@ import net.minecraft.resources.ResourceLocation;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import net.minecraft.server.packs.resources.ResourceManagerReloadListener;
 
-public class VillagerProfessionLayer<T extends LivingEntity, M extends EntityModel> extends RenderLayer<T, M> implements ResourceManagerReloadListener
+public class VillagerProfessionLayer<T extends LivingEntity, M extends EntityModel<T>> extends RenderLayer<T, M> implements ResourceManagerReloadListener // MagmaCube - decompile error
 {
     private static final Int2ObjectMap<ResourceLocation> LEVEL_LOCATIONS;
     private final Object2ObjectMap<VillagerType, VillagerMetaDataSection.Hat> typeHatCache;
@@ -74,22 +76,20 @@ public class VillagerProfessionLayer<T extends LivingEntity, M extends EntityMod
     }
     
     public <K> VillagerMetaDataSection.Hat getHatData(final Object2ObjectMap<K, VillagerMetaDataSection.Hat> object2ObjectMap, final String s, final DefaultedRegistry<K> defaultedRegistry, final K object) {
-        Resource resource;
-        VillagerMetaDataSection villagerMetaDataSection;
-        final VillagerMetaDataSection.Hat hat;
-        final Throwable t2;
         return (VillagerMetaDataSection.Hat)object2ObjectMap.computeIfAbsent(object, object2 -> {
             try {
-                resource = this.resourceManager.getResource(this.getResourceLocation(s, defaultedRegistry.getKey(object)));
+                Throwable t2 = null; // MagmaCube - decompile error
+                Resource resource = this.resourceManager.getResource(this.getResourceLocation(s, defaultedRegistry.getKey(object))); // MagmaCube - decompile error
                 try {
-                    villagerMetaDataSection = resource.getMetadata((MetadataSectionSerializer<VillagerMetaDataSection>)VillagerMetaDataSection.SERIALIZER);
+                    VillagerMetaDataSection villagerMetaDataSection = resource.getMetadata((MetadataSectionSerializer<VillagerMetaDataSection>)VillagerMetaDataSection.SERIALIZER); // MagmaCube - decompile error
                     if (villagerMetaDataSection != null) {
-                        villagerMetaDataSection.getHat();
+                        VillagerMetaDataSection.Hat hat = villagerMetaDataSection.getHat(); // MagmaCube - decompile error
                         return hat;
                     }
                 }
                 catch (Throwable t) {
-                    throw t;
+                    t2 = t; // MagmaCube - decompile error
+                    //throw t; // MagmaCube
                 }
                 finally {
                     if (resource != null) {
diff --git a/src/main/java/net/minecraft/client/renderer/entity/layers/WitchItemLayer.java b/src/main/java/net/minecraft/client/renderer/entity/layers/WitchItemLayer.java
index 62c1d8c79b8835c1699f8fda9ed2df51f9663008..cd311556a08cba68abf3bac2a05a412c890b6d2a 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/layers/WitchItemLayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/layers/WitchItemLayer.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.renderer.entity.layers;
 
-import net.minecraft.world.entity.Entity;
 import net.minecraft.world.item.ItemStack;
 import com.mojang.math.Vector3f;
 import net.minecraft.world.item.Items;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/player/PlayerRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/player/PlayerRenderer.java
index c5d479927eaaa6489b1fa621f78ba2bac26d92c0..a1afac83c9f33c3bf81188e482738bb8086bac9a 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/player/PlayerRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/player/PlayerRenderer.java
@@ -49,16 +49,20 @@ public class PlayerRenderer extends LivingEntityRenderer<AbstractClientPlayer, P
     }
     
     public PlayerRenderer(final EntityRenderDispatcher entityRenderDispatcher, final boolean flag) {
-        super(entityRenderDispatcher, new PlayerModel(0.0f, flag), 0.5f);
-        this.addLayer((RenderLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>)new HumanoidArmorLayer((RenderLayerParent<LivingEntity, HumanoidModel>)this, new HumanoidModel(0.5f), new HumanoidModel(1.0f)));
+        // MagmaCube start - decompile error
+        super(entityRenderDispatcher, new PlayerModel<>(0.0f, flag), 0.5f);
+        this.addLayer(new HumanoidArmorLayer<>(this, new HumanoidModel<>(0.5f), new HumanoidModel<>(1.0f)));
+        // MagmaCube end - decompile error
         this.addLayer(new ItemInHandLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>(this));
         this.addLayer(new ArrowLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>(this));
         this.addLayer(new Deadmau5EarsLayer(this));
         this.addLayer(new CapeLayer(this));
         this.addLayer(new CustomHeadLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>(this));
         this.addLayer(new ElytraLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>(this));
-        this.addLayer((RenderLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>)new ParrotOnShoulderLayer((RenderLayerParent<Player, PlayerModel<Player>>)this));
-        this.addLayer((RenderLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>)new SpinAttackEffectLayer((RenderLayerParent<LivingEntity, PlayerModel<LivingEntity>>)this));
+        // MagmaCube start - decompile error
+        this.addLayer(new ParrotOnShoulderLayer<>(this));
+        this.addLayer(new SpinAttackEffectLayer<>(this));
+        // MagmaCube end - decompile error
         this.addLayer(new BeeStingerLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>(this));
     }
     
@@ -72,11 +76,11 @@ public class PlayerRenderer extends LivingEntityRenderer<AbstractClientPlayer, P
         if (abstractClientPlayer.isCrouching()) {
             return new Vec3(0.0, -0.125, 0.0);
         }
-        return super.getRenderOffset((T)abstractClientPlayer, f);
+        return super.getRenderOffset(abstractClientPlayer, f); // MagmaCube - decompile error
     }
     
     private void setModelProperties(final AbstractClientPlayer abstractClientPlayer) {
-        final PlayerModel<AbstractClientPlayer> playerModel = ((LivingEntityRenderer<T, PlayerModel<AbstractClientPlayer>>)this).getModel();
+        final PlayerModel<AbstractClientPlayer> playerModel = this.getModel(); // MagmaCube - decompile error
         if (abstractClientPlayer.isSpectator()) {
             playerModel.setAllVisible(false);
             playerModel.head.visible = true;
@@ -152,13 +156,13 @@ public class PlayerRenderer extends LivingEntityRenderer<AbstractClientPlayer, P
             final Objective objective = scoreboard.getDisplayObjective(2);
             if (objective != null) {
                 final Score score = scoreboard.getOrCreatePlayerScore(abstractClientPlayer.getScoreboardName(), objective);
-                super.renderNameTag((T)abstractClientPlayer, new TextComponent(Integer.toString(score.getScore())).append(" ").append(objective.getDisplayName()), poseStack, multiBufferSource, i);
+                super.renderNameTag(abstractClientPlayer, new TextComponent(Integer.toString(score.getScore())).append(" ").append(objective.getDisplayName()), poseStack, multiBufferSource, i); // MagmaCube - decompile error
                 final double d2 = 0.0;
                 this.getFont().getClass();
                 poseStack.translate(d2, 9.0f * 1.15f * 0.025f, 0.0);
             }
         }
-        super.renderNameTag((T)abstractClientPlayer, component, poseStack, multiBufferSource, i);
+        super.renderNameTag(abstractClientPlayer, component, poseStack, multiBufferSource, i); // MagmaCube - decompile error
         poseStack.popPose();
     }
     
@@ -171,7 +175,7 @@ public class PlayerRenderer extends LivingEntityRenderer<AbstractClientPlayer, P
     }
     
     private void renderHand(final PoseStack poseStack, final MultiBufferSource multiBufferSource, final int i, final AbstractClientPlayer abstractClientPlayer, final ModelPart modelPart, final ModelPart modelPart2) {
-        final PlayerModel<AbstractClientPlayer> playerModel = ((LivingEntityRenderer<T, PlayerModel<AbstractClientPlayer>>)this).getModel();
+        final PlayerModel<AbstractClientPlayer> playerModel = this.getModel(); // MagmaCube - decompile error
         this.setModelProperties(abstractClientPlayer);
         playerModel.attackTime = 0.0f;
         playerModel.crouching = false;
diff --git a/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java b/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java
index 8d5b47977439688d10723640accf941d8c881e4b..b9e8e1575e4c1082591ec8cdee1fb77863fdb1c2 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java
@@ -14,7 +14,7 @@ import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.util.Mth;
 
 public class Stitcher {
-    private static final Comparator<Holder> HOLDER_COMPARATOR = Comparator.comparing(holder -> -holder.height).thenComparing(holder -> -holder.width).thenComparing(holder -> holder.spriteInfo.name());
+    private static final Comparator<Holder> HOLDER_COMPARATOR = Comparator.<Holder, Integer>comparing(holder -> -holder.height).thenComparing(holder -> -holder.width).thenComparing(holder -> holder.spriteInfo.name()); // MagmaCube - decompile error
     private final int mipLevel;
     private final Set<Holder> texturesToBeStitched = Sets.newHashSetWithExpectedSize((int)256);
     private final List<Region> storage = Lists.newArrayListWithCapacity((int)256);
@@ -43,7 +43,7 @@ public class Stitcher {
     }
 
     public void stitch() {
-        ArrayList list = Lists.newArrayList(this.texturesToBeStitched);
+        ArrayList<Holder> list = Lists.newArrayList(this.texturesToBeStitched); // MagmaCube - type
         list.sort(HOLDER_COMPARATOR);
         for (Holder holder2 : list) {
             if (this.addToStorage(holder2)) continue;
@@ -92,15 +92,15 @@ public class Stitcher {
         boolean flag3 = flag && i != i3;
         boolean bl2 = flag4 = flag2 && i2 != i4;
         if (flag3 ^ flag4) {
-            boolean flag5 = flag3;
+            flag6 = flag3; // MagmaCube - decompile error
         } else {
-            boolean bl3 = flag6 = flag && i <= i2;
+            flag6 = flag && i <= i2; // MagmaCube - decompile error
         }
         if (flag6) {
             if (this.storageY == 0) {
                 this.storageY = holder.height;
             }
-            Region region = new Region(this.storageX, 0, holder.width, this.storageY);
+            region2 = new Region(this.storageX, 0, holder.width, this.storageY); // MagmaCube - decompile error
             this.storageX += holder.width;
         } else {
             region2 = new Region(0, this.storageY, this.storageX, holder.height);
diff --git a/src/main/java/net/minecraft/client/renderer/texture/TextureAtlas.java b/src/main/java/net/minecraft/client/renderer/texture/TextureAtlas.java
index 26d51bfe65e5cd9a4f1aac5422181e8b40f83200..385e788c36c129cf660d977424f9e2be05447d36 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/TextureAtlas.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/TextureAtlas.java
@@ -111,7 +111,7 @@ implements Tickable {
         int i7 = Mth.log2(i6);
         if (i7 < i) {
             LOGGER.warn("{}: dropping miplevel from {} to {}, because of minimum power of two: {}", this.location, i, i7, i6);
-            int i8 = i7;
+            i9 = i7; // MagmaCube - decompile error
         } else {
             i9 = i;
         }
@@ -140,7 +140,7 @@ implements Tickable {
         for (ResourceLocation resourceLocation : set) {
             if (MissingTextureAtlasSprite.getLocation().equals(resourceLocation)) continue;
             list.add(CompletableFuture.runAsync(() -> {
-                void info3;
+                TextureAtlasSprite.Info info3; // MagmaCube - decompile error
                 ResourceLocation resourceLocation2 = this.getResourceLocation(resourceLocation);
                 try (Resource resource = resourceManager.getResource(resourceLocation2);){
                     PngInfo pngInfo = new PngInfo(resource.toString(), resource.getInputStream());
@@ -149,7 +149,7 @@ implements Tickable {
                         animationMetadataSection = AnimationMetadataSection.EMPTY;
                     }
                     Pair<Integer, Integer> pair = animationMetadataSection.getFrameSize(pngInfo.width, pngInfo.height);
-                    TextureAtlasSprite.Info info = new TextureAtlasSprite.Info(resourceLocation, (Integer)pair.getFirst(), (Integer)pair.getSecond(), animationMetadataSection);
+                    info3 = new TextureAtlasSprite.Info(resourceLocation, (Integer)pair.getFirst(), (Integer)pair.getSecond(), animationMetadataSection); // MagmaCube - decompile error
                 }
                 catch (RuntimeException runtimeException) {
                     LOGGER.error("Unable to parse metadata from {} : {}", resourceLocation2, runtimeException);
@@ -162,7 +162,7 @@ implements Tickable {
                 concurrentLinkedQueue.add((TextureAtlasSprite.Info)info3);
             }, Util.backgroundExecutor()));
         }
-        CompletableFuture.allOf(list.toArray(new CompletableFuture[0])).join();
+        CompletableFuture.allOf((CompletableFuture<?>[]) list.toArray(new CompletableFuture[0])).join(); // MagmaCube - decompile error
         return concurrentLinkedQueue;
     }
 
@@ -182,7 +182,7 @@ implements Tickable {
                 }, Util.backgroundExecutor()));
             }
         });
-        CompletableFuture.allOf(list.toArray(new CompletableFuture[0])).join();
+        CompletableFuture.allOf((CompletableFuture<?>[]) list.toArray(new CompletableFuture[0])).join(); // MagmaCube - decompile error
         return Lists.newArrayList(concurrentLinkedQueue);
     }
 
diff --git a/src/main/java/net/minecraft/client/renderer/texture/TextureAtlasSprite.java b/src/main/java/net/minecraft/client/renderer/texture/TextureAtlasSprite.java
index f4d49c5afb49adcfd1e2d99e3653b67a439ad3f1..1ed2344b79415f8d7752d23b1ffd185692fe19d6 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/TextureAtlasSprite.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/TextureAtlasSprite.java
@@ -46,10 +46,12 @@ public class TextureAtlasSprite implements AutoCloseable
         final int i7 = info.height;
         this.x = i4;
         this.y = i5;
-        this.u0 = i4 / i2;
-        this.u1 = (i4 + i6) / i2;
-        this.v0 = i5 / i3;
-        this.v1 = (i5 + i7) / i3;
+        // MagmaCube start - math
+        this.u0 = (float) i4 / i2;
+        this.u1 = (float) (i4 + i6) / i2;
+        this.v0 = (float) i5 / i3;
+        this.v1 = (float) (i5 + i7) / i3;
+        // MagmaCube end - math
         final int i8 = nativeImage.getWidth() / animationMetadataSection.getFrameWidth(i6);
         final int i9 = nativeImage.getHeight() / animationMetadataSection.getFrameHeight(i7);
         if (animationMetadataSection.getFrameCount() > 0) {
@@ -69,7 +71,7 @@ public class TextureAtlasSprite implements AutoCloseable
             }
         }
         else {
-            final List<AnimationFrame> list = (List<AnimationFrame>)Lists.newArrayList();
+            final List<AnimationFrame> list = Lists.newArrayList(); // MagmaCube - decompile error
             final int i14 = i8 * i9;
             this.framesX = new int[i14];
             this.framesY = new int[i14];
@@ -92,9 +94,8 @@ public class TextureAtlasSprite implements AutoCloseable
             catch (Throwable throwable) {
                 final CrashReport crashReport = CrashReport.forThrowable(throwable, "Generating mipmaps for frame");
                 final CrashReportCategory crashReportCategory = crashReport.addCategory("Frame being iterated");
-                final StringBuilder stringBuilder;
                 crashReportCategory.setDetail("First frame", () -> {
-                    stringBuilder = new StringBuilder();
+                    StringBuilder stringBuilder = new StringBuilder(); // MagmaCube - decompile error
                     if (stringBuilder.length() > 0) {
                         stringBuilder.append(", ");
                     }
@@ -288,7 +289,7 @@ public class TextureAtlasSprite implements AutoCloseable
         }
         
         private void uploadInterpolatedFrame() {
-            final double d = 1.0 - TextureAtlasSprite.this.subFrame / TextureAtlasSprite.this.metadata.getFrameTime(TextureAtlasSprite.this.frame);
+            final double d = 1.0 - (double) TextureAtlasSprite.this.subFrame / TextureAtlasSprite.this.metadata.getFrameTime(TextureAtlasSprite.this.frame); // MagmaCube - decompile error
             final int i = TextureAtlasSprite.this.metadata.getFrameIndex(TextureAtlasSprite.this.frame);
             final int i2 = (TextureAtlasSprite.this.metadata.getFrameCount() == 0) ? TextureAtlasSprite.this.getFrameCount() : TextureAtlasSprite.this.metadata.getFrameCount();
             final int i3 = TextureAtlasSprite.this.metadata.getFrameIndex((TextureAtlasSprite.this.frame + 1) % i2);
diff --git a/src/main/java/net/minecraft/client/resources/ClientPackSource.java b/src/main/java/net/minecraft/client/resources/ClientPackSource.java
index aaf58f3bc7c4f905993439c7814e09a42dda1522..908129525c69d651f85989607d09b14d8841377e 100644
--- a/src/main/java/net/minecraft/client/resources/ClientPackSource.java
+++ b/src/main/java/net/minecraft/client/resources/ClientPackSource.java
@@ -105,7 +105,7 @@ implements RepositorySource {
             this.clearOldDownloads();
             File file = new File(this.serverPackDir, s3);
             if (file.exists()) {
-                CompletableFuture<String> completableFuture = CompletableFuture.completedFuture("");
+                completableFuture2 = CompletableFuture.completedFuture(""); // MagmaCube - decompile error
             } else {
                 ProgressScreen progressScreen = new ProgressScreen();
                 Map<String, String> map = ClientPackSource.getDownloadHeaders();
@@ -113,7 +113,7 @@ implements RepositorySource {
                 minecraft.executeBlocking(() -> minecraft.setScreen(progressScreen));
                 completableFuture2 = HttpUtil.downloadTo(file, s, map, 0x6400000, progressScreen, minecraft.getProxy());
             }
-            CompletableFuture<?> completableFuture = this.currentDownload = ((CompletableFuture)completableFuture2.thenCompose(object -> {
+            CompletableFuture<?> completableFuture = this.currentDownload = (completableFuture2.thenCompose(object -> { // MagmaCube - decompile error
                 if (!this.checkHash(s4, file)) {
                     return Util.failedFuture(new RuntimeException("Hash check failure for file " + file + ", see log"));
                 }
@@ -162,9 +162,9 @@ implements RepositorySource {
      */
     private boolean checkHash(String s, File file) {
         try {
-            void s3;
+            String s3; // MagmaCube - decompile error
             try (FileInputStream fileInputStream = new FileInputStream(file);){
-                String s2 = DigestUtils.sha1Hex((InputStream)fileInputStream);
+                s3 = DigestUtils.sha1Hex((InputStream)fileInputStream); // MagmaCube - decompile error
             }
             if (s.isEmpty()) {
                 LOGGER.info("Found file {} without verification hash", file);
@@ -184,7 +184,7 @@ implements RepositorySource {
 
     private void clearOldDownloads() {
         try {
-            ArrayList list = Lists.newArrayList((Iterable)FileUtils.listFiles((File)this.serverPackDir, (IOFileFilter)TrueFileFilter.TRUE, null));
+            ArrayList<File> list = Lists.newArrayList(FileUtils.listFiles((File)this.serverPackDir, (IOFileFilter)TrueFileFilter.TRUE, null)); // MagmaCube - decompile error
             list.sort(LastModifiedFileComparator.LASTMODIFIED_REVERSE);
             int i = 0;
             for (File file : list) {
@@ -202,9 +202,9 @@ implements RepositorySource {
      * WARNING - void declaration
      */
     public CompletableFuture<Void> setServerPack(File file, PackSource packSource) {
-        void packMetadataSection3;
+        PackMetadataSection packMetadataSection3; // MagmaCube - decompile error
         try (FilePackResources filePackResources = new FilePackResources(file);){
-            PackMetadataSection packMetadataSection = filePackResources.getMetadataSection(PackMetadataSection.SERIALIZER);
+            packMetadataSection3 = filePackResources.getMetadataSection(PackMetadataSection.SERIALIZER); // MagmaCube - decompile error
         }
         catch (IOException iOException) {
             return Util.failedFuture(new IOException(String.format("Invalid resourcepack at %s", file), iOException));
diff --git a/src/main/java/net/minecraft/client/resources/PackResourcesAdapterV4.java b/src/main/java/net/minecraft/client/resources/PackResourcesAdapterV4.java
index fa248f5e85c2c097acf11db619c908b335386dc3..206fd41e8767fe6aaf2ed9b5b167a4570e57a591 100644
--- a/src/main/java/net/minecraft/client/resources/PackResourcesAdapterV4.java
+++ b/src/main/java/net/minecraft/client/resources/PackResourcesAdapterV4.java
@@ -35,7 +35,8 @@ implements PackResources {
         hashMap.put("textures/entity/chest/christmas.png", new Pair(ChestType.SINGLE, new ResourceLocation("textures/entity/chest/christmas.png")));
         hashMap.put("textures/entity/chest/ender.png", new Pair(ChestType.SINGLE, new ResourceLocation("textures/entity/chest/ender.png")));
     });
-    private static final List<String> PATTERNS = Lists.newArrayList((Object[])new String[]{"base", "border", "bricks", "circle", "creeper", "cross", "curly_border", "diagonal_left", "diagonal_right", "diagonal_up_left", "diagonal_up_right", "flower", "globe", "gradient", "gradient_up", "half_horizontal", "half_horizontal_bottom", "half_vertical", "half_vertical_right", "mojang", "rhombus", "skull", "small_stripes", "square_bottom_left", "square_bottom_right", "square_top_left", "square_top_right", "straight_cross", "stripe_bottom", "stripe_center", "stripe_downleft", "stripe_downright", "stripe_left", "stripe_middle", "stripe_right", "stripe_top", "triangle_bottom", "triangle_top", "triangles_bottom", "triangles_top"});
+    // MagmaCube - decompile error
+    private static final List<String> PATTERNS = Lists.newArrayList(new String[]{"base", "border", "bricks", "circle", "creeper", "cross", "curly_border", "diagonal_left", "diagonal_right", "diagonal_up_left", "diagonal_up_right", "flower", "globe", "gradient", "gradient_up", "half_horizontal", "half_horizontal_bottom", "half_vertical", "half_vertical_right", "mojang", "rhombus", "skull", "small_stripes", "square_bottom_left", "square_bottom_right", "square_top_left", "square_top_right", "straight_cross", "stripe_bottom", "stripe_center", "stripe_downleft", "stripe_downright", "stripe_left", "stripe_middle", "stripe_right", "stripe_top", "triangle_bottom", "triangle_top", "triangles_bottom", "triangles_top"});
     private static final Set<String> SHIELDS = PATTERNS.stream().map(s -> "textures/entity/shield/" + s + ".png").collect(Collectors.toSet());
     private static final Set<String> BANNERS = PATTERNS.stream().map(s -> "textures/entity/banner/" + s + ".png").collect(Collectors.toSet());
     public static final ResourceLocation SHIELD_BASE = new ResourceLocation("textures/entity/shield_base.png");
@@ -138,139 +139,164 @@ implements PackResources {
      * Enabled aggressive exception aggregation
      */
     @Nullable
-    public static InputStream fixPattern(InputStream inputStream, InputStream inputStream2, int i, int i2, int i3, int i4, int i5) throws IOException {
-        try (NativeImage nativeImage = NativeImage.read(inputStream);){
-            Throwable throwable = null;
-            try (NativeImage nativeImage2 = NativeImage.read(inputStream2);){
-                int i6 = nativeImage.getWidth();
-                int i7 = nativeImage.getHeight();
-                if (i6 == nativeImage2.getWidth()) {
-                    if (i7 == nativeImage2.getHeight()) {
-                        try (NativeImage nativeImage3 = new NativeImage(i6, i7, true);){
-                            int i8 = i6 / i;
-                            for (int i9 = i3 * i8; i9 < i5 * i8; ++i9) {
-                                for (int i10 = i2 * i8; i10 < i4 * i8; ++i10) {
-                                    int i11 = NativeImage.getR(nativeImage2.getPixelRGBA(i10, i9));
-                                    int i12 = nativeImage.getPixelRGBA(i10, i9);
-                                    nativeImage3.setPixelRGBA(i10, i9, NativeImage.combine(i11, NativeImage.getB(i12), NativeImage.getG(i12), NativeImage.getR(i12)));
-                                }
-                            }
-                            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(nativeImage3.asByteArray());
-                            return byteArrayInputStream;
-                        }
-                    }
-                }
-                {
-                    catch (Throwable throwable2) {
-                        throwable = throwable2;
-                        throw throwable2;
-                    }
-                    catch (Throwable throwable3) {
-                        throw throwable3;
+    // MagmaCube start - whole method
+    public static InputStream fixPattern(InputStream inputStream, InputStream inputStream2, int pi, int pi2, int pi3, int pi4, int pi5) throws IOException {
+        ByteArrayInputStream bytearrayinputstream;
+        try (
+                NativeImage nativeimage1 = NativeImage.read(inputStream2);
+                NativeImage nativeimage = NativeImage.read(inputStream);
+        ) {
+            int i = nativeimage.getWidth();
+            int j = nativeimage.getHeight();
+            if (i != nativeimage1.getWidth() || j != nativeimage1.getHeight()) {
+                return null;
+            }
+
+            try (NativeImage nativeimage2 = new NativeImage(i, j, true)) {
+                int k = i / pi;
+
+                for(int l = pi3 * k; l < pi5 * k; ++l) {
+                    for(int i1 = pi2 * k; i1 < pi5 * k; ++i1) {
+                        int j1 = NativeImage.getR(nativeimage1.getPixelRGBA(i1, l));
+                        int k1 = nativeimage.getPixelRGBA(i1, l);
+                        nativeimage2.setPixelRGBA(i1, l, NativeImage.combine(j1, NativeImage.getB(k1), NativeImage.getG(k1), NativeImage.getR(k1)));
                     }
                 }
+
+                bytearrayinputstream = new ByteArrayInputStream(nativeimage2.asByteArray());
             }
         }
+
+        return bytearrayinputstream;
     }
+    // MagmaCube end - whole method
 
     /*
      * Exception decompiling
      */
     public static InputStream fixConduitEyeTexture(InputStream inputStream) throws IOException {
-        /*
-         * This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
-         * org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [0[TRYBLOCK]], but top level block is 4[TRYBLOCK]
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:429)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:478)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:728)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:806)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:258)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:192)
-         * org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:94)
-         * org.benf.cfr.reader.entities.Method.analyse(Method.java:521)
-         * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1035)
-         * org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:922)
-         * org.benf.cfr.reader.Driver.doJarVersionTypes(Driver.java:253)
-         * org.benf.cfr.reader.Driver.doJar(Driver.java:135)
-         * org.benf.cfr.reader.CfrDriverImpl.analyse(CfrDriverImpl.java:65)
-         * org.benf.cfr.reader.Main.main(Main.java:49)
-         */
-        throw new IllegalStateException(Decompilation failed);
+        // MagmaCube start - whole method
+        ByteArrayInputStream bytearrayinputstream;
+        try (NativeImage nativeimage = NativeImage.read(inputStream)) {
+            int i = nativeimage.getWidth();
+            int j = nativeimage.getHeight();
+
+            try (NativeImage nativeimage1 = new NativeImage(2 * i, 2 * j, true)) {
+                copyRect(nativeimage, nativeimage1, 0, 0, 0, 0, i, j, 1, false, false);
+                bytearrayinputstream = new ByteArrayInputStream(nativeimage1.asByteArray());
+            }
+        }
+
+        return bytearrayinputstream;
+        // MagmaCube end - whole method
     }
 
     /*
      * Exception decompiling
      */
     public static InputStream fixLeftChest(InputStream inputStream) throws IOException {
-        /*
-         * This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
-         * org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [0[TRYBLOCK]], but top level block is 4[TRYBLOCK]
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:429)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:478)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:728)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:806)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:258)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:192)
-         * org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:94)
-         * org.benf.cfr.reader.entities.Method.analyse(Method.java:521)
-         * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1035)
-         * org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:922)
-         * org.benf.cfr.reader.Driver.doJarVersionTypes(Driver.java:253)
-         * org.benf.cfr.reader.Driver.doJar(Driver.java:135)
-         * org.benf.cfr.reader.CfrDriverImpl.analyse(CfrDriverImpl.java:65)
-         * org.benf.cfr.reader.Main.main(Main.java:49)
-         */
-        throw new IllegalStateException(Decompilation failed);
+        // MagmaCube start - whole method
+        ByteArrayInputStream bytearrayinputstream;
+        try (NativeImage nativeimage = NativeImage.read(inputStream)) {
+            int i = nativeimage.getWidth();
+            int j = nativeimage.getHeight();
+
+            try (NativeImage nativeimage1 = new NativeImage(i / 2, j, true)) {
+                int k = j / 64;
+                copyRect(nativeimage, nativeimage1, 29, 0, 29, 0, 15, 14, k, false, true);
+                copyRect(nativeimage, nativeimage1, 59, 0, 14, 0, 15, 14, k, false, true);
+                copyRect(nativeimage, nativeimage1, 29, 14, 43, 14, 15, 5, k, true, true);
+                copyRect(nativeimage, nativeimage1, 44, 14, 29, 14, 14, 5, k, true, true);
+                copyRect(nativeimage, nativeimage1, 58, 14, 14, 14, 15, 5, k, true, true);
+                copyRect(nativeimage, nativeimage1, 29, 19, 29, 19, 15, 14, k, false, true);
+                copyRect(nativeimage, nativeimage1, 59, 19, 14, 19, 15, 14, k, false, true);
+                copyRect(nativeimage, nativeimage1, 29, 33, 43, 33, 15, 10, k, true, true);
+                copyRect(nativeimage, nativeimage1, 44, 33, 29, 33, 14, 10, k, true, true);
+                copyRect(nativeimage, nativeimage1, 58, 33, 14, 33, 15, 10, k, true, true);
+                copyRect(nativeimage, nativeimage1, 2, 0, 2, 0, 1, 1, k, false, true);
+                copyRect(nativeimage, nativeimage1, 4, 0, 1, 0, 1, 1, k, false, true);
+                copyRect(nativeimage, nativeimage1, 2, 1, 3, 1, 1, 4, k, true, true);
+                copyRect(nativeimage, nativeimage1, 3, 1, 2, 1, 1, 4, k, true, true);
+                copyRect(nativeimage, nativeimage1, 4, 1, 1, 1, 1, 4, k, true, true);
+                bytearrayinputstream = new ByteArrayInputStream(nativeimage1.asByteArray());
+            }
+        }
+
+        return bytearrayinputstream;
+        // MagmaCube end - whole method
     }
 
     /*
      * Exception decompiling
      */
     public static InputStream fixRightChest(InputStream inputStream) throws IOException {
-        /*
-         * This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
-         * org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [0[TRYBLOCK]], but top level block is 4[TRYBLOCK]
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:429)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:478)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:728)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:806)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:258)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:192)
-         * org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:94)
-         * org.benf.cfr.reader.entities.Method.analyse(Method.java:521)
-         * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1035)
-         * org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:922)
-         * org.benf.cfr.reader.Driver.doJarVersionTypes(Driver.java:253)
-         * org.benf.cfr.reader.Driver.doJar(Driver.java:135)
-         * org.benf.cfr.reader.CfrDriverImpl.analyse(CfrDriverImpl.java:65)
-         * org.benf.cfr.reader.Main.main(Main.java:49)
-         */
-        throw new IllegalStateException(Decompilation failed);
+        // MagmaCube start - whole method
+        ByteArrayInputStream bytearrayinputstream;
+        try (NativeImage nativeimage = NativeImage.read(inputStream)) {
+            int i = nativeimage.getWidth();
+            int j = nativeimage.getHeight();
+
+            try (NativeImage nativeimage1 = new NativeImage(i / 2, j, true)) {
+                int k = j / 64;
+                copyRect(nativeimage, nativeimage1, 14, 0, 29, 0, 15, 14, k, false, true);
+                copyRect(nativeimage, nativeimage1, 44, 0, 14, 0, 15, 14, k, false, true);
+                copyRect(nativeimage, nativeimage1, 0, 14, 0, 14, 14, 5, k, true, true);
+                copyRect(nativeimage, nativeimage1, 14, 14, 43, 14, 15, 5, k, true, true);
+                copyRect(nativeimage, nativeimage1, 73, 14, 14, 14, 15, 5, k, true, true);
+                copyRect(nativeimage, nativeimage1, 14, 19, 29, 19, 15, 14, k, false, true);
+                copyRect(nativeimage, nativeimage1, 44, 19, 14, 19, 15, 14, k, false, true);
+                copyRect(nativeimage, nativeimage1, 0, 33, 0, 33, 14, 10, k, true, true);
+                copyRect(nativeimage, nativeimage1, 14, 33, 43, 33, 15, 10, k, true, true);
+                copyRect(nativeimage, nativeimage1, 73, 33, 14, 33, 15, 10, k, true, true);
+                copyRect(nativeimage, nativeimage1, 1, 0, 2, 0, 1, 1, k, false, true);
+                copyRect(nativeimage, nativeimage1, 3, 0, 1, 0, 1, 1, k, false, true);
+                copyRect(nativeimage, nativeimage1, 0, 1, 0, 1, 1, 4, k, true, true);
+                copyRect(nativeimage, nativeimage1, 1, 1, 3, 1, 1, 4, k, true, true);
+                copyRect(nativeimage, nativeimage1, 5, 1, 1, 1, 1, 4, k, true, true);
+                bytearrayinputstream = new ByteArrayInputStream(nativeimage1.asByteArray());
+            }
+        }
+
+        return bytearrayinputstream;
+        // MagmaCube end - whole method
     }
 
     /*
      * Exception decompiling
      */
     public static InputStream fixSingleChest(InputStream inputStream) throws IOException {
-        /*
-         * This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
-         * org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [0[TRYBLOCK]], but top level block is 4[TRYBLOCK]
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:429)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:478)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:728)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:806)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:258)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:192)
-         * org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:94)
-         * org.benf.cfr.reader.entities.Method.analyse(Method.java:521)
-         * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1035)
-         * org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:922)
-         * org.benf.cfr.reader.Driver.doJarVersionTypes(Driver.java:253)
-         * org.benf.cfr.reader.Driver.doJar(Driver.java:135)
-         * org.benf.cfr.reader.CfrDriverImpl.analyse(CfrDriverImpl.java:65)
-         * org.benf.cfr.reader.Main.main(Main.java:49)
-         */
-        throw new IllegalStateException(Decompilation failed);
+        // MagmaCube start - whole method
+        ByteArrayInputStream bytearrayinputstream;
+        try (NativeImage nativeimage = NativeImage.read(inputStream)) {
+            int i = nativeimage.getWidth();
+            int j = nativeimage.getHeight();
+
+            try (NativeImage nativeimage1 = new NativeImage(i, j, true)) {
+                int k = j / 64;
+                copyRect(nativeimage, nativeimage1, 14, 0, 28, 0, 14, 14, k, false, true);
+                copyRect(nativeimage, nativeimage1, 28, 0, 14, 0, 14, 14, k, false, true);
+                copyRect(nativeimage, nativeimage1, 0, 14, 0, 14, 14, 5, k, true, true);
+                copyRect(nativeimage, nativeimage1, 14, 14, 42, 14, 14, 5, k, true, true);
+                copyRect(nativeimage, nativeimage1, 28, 14, 28, 14, 14, 5, k, true, true);
+                copyRect(nativeimage, nativeimage1, 42, 14, 14, 14, 14, 5, k, true, true);
+                copyRect(nativeimage, nativeimage1, 14, 19, 28, 19, 14, 14, k, false, true);
+                copyRect(nativeimage, nativeimage1, 28, 19, 14, 19, 14, 14, k, false, true);
+                copyRect(nativeimage, nativeimage1, 0, 33, 0, 33, 14, 10, k, true, true);
+                copyRect(nativeimage, nativeimage1, 14, 33, 42, 33, 14, 10, k, true, true);
+                copyRect(nativeimage, nativeimage1, 28, 33, 28, 33, 14, 10, k, true, true);
+                copyRect(nativeimage, nativeimage1, 42, 33, 14, 33, 14, 10, k, true, true);
+                copyRect(nativeimage, nativeimage1, 1, 0, 3, 0, 2, 1, k, false, true);
+                copyRect(nativeimage, nativeimage1, 3, 0, 1, 0, 2, 1, k, false, true);
+                copyRect(nativeimage, nativeimage1, 0, 1, 0, 1, 1, 4, k, true, true);
+                copyRect(nativeimage, nativeimage1, 1, 1, 4, 1, 2, 4, k, true, true);
+                copyRect(nativeimage, nativeimage1, 3, 1, 3, 1, 1, 4, k, true, true);
+                copyRect(nativeimage, nativeimage1, 4, 1, 1, 1, 2, 4, k, true, true);
+                bytearrayinputstream = new ByteArrayInputStream(nativeimage1.asByteArray());
+            }
+        }
+
+        return bytearrayinputstream;
+        // MagmaCube end - whole method
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/client/resources/PaintingTextureManager.java b/src/main/java/net/minecraft/client/resources/PaintingTextureManager.java
index e118775ba3f446a192f4423f389d3653d73416ea..b718b064637f19d511628c7c04de93b8a1c2b87c 100644
--- a/src/main/java/net/minecraft/client/resources/PaintingTextureManager.java
+++ b/src/main/java/net/minecraft/client/resources/PaintingTextureManager.java
@@ -17,7 +17,7 @@ public class PaintingTextureManager extends TextureAtlasHolder
     
     @Override
     protected Stream<ResourceLocation> getResourcesToLoad() {
-        return Stream.concat(Registry.MOTIVE.keySet().stream(), (Stream<? extends ResourceLocation>)Stream.of((T)PaintingTextureManager.BACK_SPRITE_LOCATION));
+        return Stream.concat(Registry.MOTIVE.keySet().stream(), (Stream<? extends ResourceLocation>)Stream.of(PaintingTextureManager.BACK_SPRITE_LOCATION)); // MagmaCube - decompile fix
     }
     
     public TextureAtlasSprite get(final Motive motive) {
diff --git a/src/main/java/net/minecraft/client/resources/SkinManager.java b/src/main/java/net/minecraft/client/resources/SkinManager.java
index 7df0ff0cac5ef48eb90d9f887c5ac76fb37e4880..3034aad741ad8b5d21e675fb9bfc553713ea25e8 100644
--- a/src/main/java/net/minecraft/client/resources/SkinManager.java
+++ b/src/main/java/net/minecraft/client/resources/SkinManager.java
@@ -50,10 +50,6 @@ public class SkinManager {
                     return ImmutableMap.of();
                 }
             }
-
-            public /* synthetic */ Object load(Object object) throws Exception {
-                return this.load((String)object);
-            }
         });
     }
 
diff --git a/src/main/java/net/minecraft/client/resources/SplashManager.java b/src/main/java/net/minecraft/client/resources/SplashManager.java
index d77ada7c1e4e58977e1da63374c8824ffe2e78be..e8ee84f922de96f0faf5da7bac435a2d9ebf5d02 100644
--- a/src/main/java/net/minecraft/client/resources/SplashManager.java
+++ b/src/main/java/net/minecraft/client/resources/SplashManager.java
@@ -13,6 +13,17 @@ import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.server.packs.resources.SimplePreparableReloadListener;
 import net.minecraft.util.profiling.ProfilerFiller;
 
+// MagmaCube start
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.nio.charset.StandardCharsets;
+import java.util.Collections;
+import java.util.stream.Collectors;
+import net.minecraft.client.Minecraft;
+import net.minecraft.server.packs.resources.Resource;
+// MagmaCube end
+
 public class SplashManager
 extends SimplePreparableReloadListener<List<String>> {
     private static final ResourceLocation SPLASHES_LOCATION = new ResourceLocation("texts/splashes.txt");
@@ -29,25 +40,18 @@ extends SimplePreparableReloadListener<List<String>> {
      */
     @Override
     protected List<String> prepare(ResourceManager resourceManager, ProfilerFiller profilerFiller) {
-        /*
-         * This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
-         * org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [1[TRYBLOCK]], but top level block is 5[TRYBLOCK]
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:429)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:478)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:728)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:806)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:258)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:192)
-         * org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:94)
-         * org.benf.cfr.reader.entities.Method.analyse(Method.java:521)
-         * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1035)
-         * org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:922)
-         * org.benf.cfr.reader.Driver.doJarVersionTypes(Driver.java:253)
-         * org.benf.cfr.reader.Driver.doJar(Driver.java:135)
-         * org.benf.cfr.reader.CfrDriverImpl.analyse(CfrDriverImpl.java:65)
-         * org.benf.cfr.reader.Main.main(Main.java:49)
-         */
-        throw new IllegalStateException(Decompilation failed);
+        // MagmaCube start - decompile error
+        try (
+                Resource resource = Minecraft.getInstance().getResourceManager().getResource(SPLASHES_LOCATION);
+                BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(resource.getInputStream(), StandardCharsets.UTF_8));
+        ) {
+            return bufferedreader.lines().map(String::trim).filter((p_215277_0_) -> {
+                return p_215277_0_.hashCode() != 125780783;
+            }).collect(Collectors.toList());
+        } catch (IOException ioexception) {
+            return Collections.emptyList();
+        }
+        // MagmaCube end - decompile error
     }
 
     @Override
@@ -77,13 +81,4 @@ extends SimplePreparableReloadListener<List<String>> {
         }
         return this.splashes.get(RANDOM.nextInt(this.splashes.size()));
     }
-
-    @Override
-    protected /* synthetic */ Object prepare(ResourceManager resourceManager, ProfilerFiller profilerFiller) {
-        return this.prepare(resourceManager, profilerFiller);
-    }
-
-    private static /* synthetic */ boolean lambda$prepare$0(String s) {
-        return s.hashCode() != 125780783;
-    }
 }
diff --git a/src/main/java/net/minecraft/client/resources/TextureAtlasHolder.java b/src/main/java/net/minecraft/client/resources/TextureAtlasHolder.java
index 0b7cec9aca6f1735f7d9187123bdfa8ea3e65929..46bcdbce8461342e70aa3b29e2672da63016353c 100644
--- a/src/main/java/net/minecraft/client/resources/TextureAtlasHolder.java
+++ b/src/main/java/net/minecraft/client/resources/TextureAtlasHolder.java
@@ -5,7 +5,7 @@ import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import java.util.stream.Stream;
-import net.minecraft.client.renderer.texture.AbstractTexture;
+
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.renderer.texture.TextureManager;
 import net.minecraft.client.renderer.texture.TextureAtlas;
diff --git a/src/main/java/net/minecraft/client/resources/language/LanguageManager.java b/src/main/java/net/minecraft/client/resources/language/LanguageManager.java
index 4a7b427091d52fb778e65bf19fe096162fa2f109..fefa6fc300b3e4431556505f1f4a43e8cc8182f6 100644
--- a/src/main/java/net/minecraft/client/resources/language/LanguageManager.java
+++ b/src/main/java/net/minecraft/client/resources/language/LanguageManager.java
@@ -34,29 +34,23 @@ public class LanguageManager implements ResourceManagerReloadListener
     }
     
     private static Map<String, LanguageInfo> extractLanguages(final Stream<PackResources> stream) {
-        final Map<String, LanguageInfo> map = (Map<String, LanguageInfo>)Maps.newHashMap();
-        LanguageMetadataSection languageMetadataSection;
-        final Iterator<LanguageInfo> iterator;
-        LanguageInfo languageInfo;
-        final Map<String, LanguageInfo> map2;
-        final Exception ex;
-        Exception exception;
+        final Map<String, LanguageInfo> map = Maps.newHashMap(); // MagmaCube - decompile error
         stream.forEach(packResources -> {
             try {
-                languageMetadataSection = packResources.getMetadataSection((MetadataSectionSerializer<LanguageMetadataSection>)LanguageMetadataSection.SERIALIZER);
+                LanguageMetadataSection languageMetadataSection = packResources.getMetadataSection((MetadataSectionSerializer<LanguageMetadataSection>)LanguageMetadataSection.SERIALIZER); // MagmaCube - decompile error
                 if (languageMetadataSection != null) {
-                    languageMetadataSection.getLanguages().iterator();
+                    Iterator<LanguageInfo> iterator = languageMetadataSection.getLanguages().iterator(); // MagmaCube - decompile error
                     while (iterator.hasNext()) {
-                        languageInfo = iterator.next();
-                        map2.putIfAbsent(languageInfo.getCode(), languageInfo);
+                        // MagmaCube start - decompile error
+                        LanguageInfo languageInfo = iterator.next();
+                        map.putIfAbsent(languageInfo.getCode(), languageInfo);
+                        // MagmaCube end - decompile error
                     }
                 }
             }
             catch (RuntimeException | IOException ex2) {
-                exception = ex;
-                LanguageManager.LOGGER.warn("Unable to parse language metadata section of resourcepack: {}", packResources.getName(), exception);
+                LanguageManager.LOGGER.warn("Unable to parse language metadata section of resourcepack: {}", packResources.getName(), ex2); // MagmaCube - decompile error
             }
-            return;
         });
         return (Map<String, LanguageInfo>)ImmutableMap.copyOf((Map)map);
     }
@@ -66,7 +60,7 @@ public class LanguageManager implements ResourceManagerReloadListener
         this.languages = extractLanguages(resourceManager.listPacks());
         final LanguageInfo languageInfo = this.languages.getOrDefault("en_us", LanguageManager.DEFAULT_LANGUAGE);
         this.currentLanguage = this.languages.getOrDefault(this.currentCode, languageInfo);
-        final List<LanguageInfo> list = (List<LanguageInfo>)Lists.newArrayList((Object[])new LanguageInfo[] { languageInfo });
+        final List<LanguageInfo> list = Lists.newArrayList(new LanguageInfo[] { languageInfo }); // MagmaCube - decompile error
         if (this.currentLanguage != languageInfo) {
             list.add(this.currentLanguage);
         }
diff --git a/src/main/java/net/minecraft/client/resources/metadata/animation/AnimationMetadataSection.java b/src/main/java/net/minecraft/client/resources/metadata/animation/AnimationMetadataSection.java
index a54fc1be0094c38f8d45152be0cb554ac0bce8fb..aeb24a627a778f4110793844d85686d28376cd8b 100644
--- a/src/main/java/net/minecraft/client/resources/metadata/animation/AnimationMetadataSection.java
+++ b/src/main/java/net/minecraft/client/resources/metadata/animation/AnimationMetadataSection.java
@@ -92,7 +92,7 @@ public class AnimationMetadataSection
     }
     
     public Set<Integer> getUniqueFrameIndices() {
-        final Set<Integer> set = (Set<Integer>)Sets.newHashSet();
+        final Set<Integer> set = Sets.newHashSet(); // MagmaCube - decompile error
         for (final AnimationFrame animationFrame : this.frames) {
             set.add(animationFrame.getIndex());
         }
diff --git a/src/main/java/net/minecraft/client/resources/metadata/animation/AnimationMetadataSectionSerializer.java b/src/main/java/net/minecraft/client/resources/metadata/animation/AnimationMetadataSectionSerializer.java
index 26e6c0d3ae7a7c01a53f245e7be01827fe316998..671a5bc3a5675d4c10e11c96d2ee22a87494d247 100644
--- a/src/main/java/net/minecraft/client/resources/metadata/animation/AnimationMetadataSectionSerializer.java
+++ b/src/main/java/net/minecraft/client/resources/metadata/animation/AnimationMetadataSectionSerializer.java
@@ -14,7 +14,7 @@ public class AnimationMetadataSectionSerializer implements MetadataSectionSerial
 {
     @Override
     public AnimationMetadataSection fromJson(final JsonObject jsonObject) {
-        final List<AnimationFrame> list = (List<AnimationFrame>)Lists.newArrayList();
+        final List<AnimationFrame> list = Lists.newArrayList(); // MagmaCube - decompile error
         final int i = GsonHelper.getAsInt(jsonObject, "frametime", 1);
         if (i != 1) {
             Validate.inclusiveBetween(1L, 2147483647L, (long)i, "Invalid default frame time");
diff --git a/src/main/java/net/minecraft/client/resources/model/ModelBakery.java b/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
index 085db623b4d18269e299dba551f72fc44e811f96..3223da5ff07b1f4a67675ab936ce8f0e2f16744d 100644
--- a/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
+++ b/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
@@ -28,6 +28,7 @@ import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
+import java.util.function.Function;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
@@ -51,12 +52,6 @@ import net.minecraft.client.renderer.texture.AtlasSet;
 import net.minecraft.client.renderer.texture.MissingTextureAtlasSprite;
 import net.minecraft.client.renderer.texture.TextureAtlas;
 import net.minecraft.client.renderer.texture.TextureManager;
-import net.minecraft.client.resources.model.BakedModel;
-import net.minecraft.client.resources.model.BlockModelRotation;
-import net.minecraft.client.resources.model.Material;
-import net.minecraft.client.resources.model.ModelResourceLocation;
-import net.minecraft.client.resources.model.ModelState;
-import net.minecraft.client.resources.model.UnbakedModel;
 import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.packs.resources.Resource;
@@ -128,7 +123,7 @@ public class ModelBakery {
     public static final BlockModel BLOCK_ENTITY_MARKER = Util.make(BlockModel.fromString("{\"gui_light\": \"side\"}"), blockModel -> {
         blockModel.name = "block entity marker";
     });
-    private static final StateDefinition<Block, BlockState> ITEM_FRAME_FAKE_DEFINITION = new StateDefinition.Builder(Blocks.AIR).add(BooleanProperty.create("map")).create(Block::defaultBlockState, BlockState::new);
+    private static final StateDefinition<Block, BlockState> ITEM_FRAME_FAKE_DEFINITION = new StateDefinition.Builder(Blocks.AIR).add(BooleanProperty.create("map")).create((Function<Block, BlockState>) Block::defaultBlockState, (StateDefinition.Factory<Block, BlockState>) BlockState::new); // MagmaCube - decompile error
     private static final ItemModelGenerator ITEM_MODEL_GENERATOR = new ItemModelGenerator();
     private static final Map<ResourceLocation, StateDefinition<Block, BlockState>> STATIC_DEFINITIONS = ImmutableMap.of(new ResourceLocation("item_frame"), ITEM_FRAME_FAKE_DEFINITION);
     private final ResourceManager resourceManager;
@@ -170,8 +165,8 @@ public class ModelBakery {
         profilerFiller.popPush("special");
         this.loadTopLevel(new ModelResourceLocation("minecraft:trident_in_hand#inventory"));
         profilerFiller.popPush("textures");
-        LinkedHashSet set = Sets.newLinkedHashSet();
-        Set set2 = this.topLevelModels.values().stream().flatMap(unbakedModel -> unbakedModel.getMaterials(this::getModel, set).stream()).collect(Collectors.toSet());
+        LinkedHashSet<Pair<String, String>> set = Sets.newLinkedHashSet(); // MagmaCube - type
+        Set<Material> set2 = this.topLevelModels.values().stream().flatMap(unbakedModel -> unbakedModel.getMaterials(this::getModel, set).stream()).collect(Collectors.toSet()); // MagmaCube - type
         set2.addAll(UNREFERENCED_TEXTURES);
         set.stream().filter(pair -> !((String)pair.getSecond()).equals(MISSING_MODEL_LOCATION_STRING)).forEach(pair -> LOGGER.warn("Unable to resolve texture reference: {} in {}", pair.getFirst(), pair.getSecond()));
         Map<ResourceLocation, List<Material>> map = set2.stream().collect(Collectors.groupingBy(Material::atlasLocation));
@@ -214,7 +209,7 @@ public class ModelBakery {
     }
 
     private static Predicate<BlockState> predicate(StateDefinition<Block, BlockState> stateDefinition, String s) {
-        HashMap map = Maps.newHashMap();
+        HashMap<Property<?>, Comparable<?>> map = Maps.newHashMap(); // MagmaCube - type
         for (String s2 : COMMA_SPLITTER.split((CharSequence)s)) {
             Iterator iterator = EQUAL_SPLITTER.split((CharSequence)s2).iterator();
             if (!iterator.hasNext()) continue;
@@ -222,7 +217,7 @@ public class ModelBakery {
             Property<?> property = stateDefinition.getProperty(s3);
             if (property != null && iterator.hasNext()) {
                 String s4 = (String)iterator.next();
-                Object comparable = ModelBakery.getValueHelper(property, s4);
+                Comparable<?> comparable = ModelBakery.getValueHelper(property, s4); // MagmaCube - type
                 if (comparable != null) {
                     map.put(property, comparable);
                     continue;
@@ -302,21 +297,23 @@ public class ModelBakery {
             StateDefinition stateDefinition = Optional.ofNullable(STATIC_DEFINITIONS.get(resourceLocation3)).orElseGet(() -> Registry.BLOCK.get(resourceLocation3).getStateDefinition());
             this.context.setDefinition(stateDefinition);
             ImmutableList list = ImmutableList.copyOf(this.blockColors.getColoringProperties((Block)stateDefinition.getOwner()));
-            ImmutableList immutableList = stateDefinition.getPossibleStates();
-            HashMap map = Maps.newHashMap();
-            immutableList.forEach(blockState -> map.put(BlockModelShaper.stateToModelLocation(resourceLocation3, blockState), blockState));
+            ImmutableList<BlockState> immutableList = stateDefinition.getPossibleStates(); // MagmaCube - type
+            HashMap<ModelResourceLocation, BlockState> map = Maps.newHashMap(); // MagmaCube - type
+            immutableList.forEach(blockState -> map.put(BlockModelShaper.stateToModelLocation(resourceLocation3, (BlockState) blockState), blockState)); // MagmaCube - decompile error
             HashMap map2 = Maps.newHashMap();
             ResourceLocation resourceLocation4 = new ResourceLocation(resourceLocation.getNamespace(), "blockstates/" + resourceLocation.getPath() + ".json");
             UnbakedModel unbakedModel = this.unbakedCache.get(MISSING_MODEL_LOCATION);
             ModelGroupKey modelGroupKey2 = new ModelGroupKey((List<UnbakedModel>)ImmutableList.of(unbakedModel), (List<Object>)ImmutableList.of());
-            Pair pair = Pair.of(unbakedModel, () -> modelGroupKey2);
+            Pair<UnbakedModel, Supplier<ModelGroupKey>> pair = Pair.of(unbakedModel, () -> modelGroupKey2); // MagmaCube - type
             try {
-                void list3;
+                List<Pair<String, BlockModelDefinition>> list3; // MagmaCube - type
                 try {
-                    List list2 = this.resourceManager.getResources(resourceLocation4).stream().map(resource -> {
+                    list3 = this.resourceManager.getResources(resourceLocation4).stream().map(resource -> { // MagmaCube - decompile error
                         try (InputStream inputStream = resource.getInputStream();){
-                            Pair pair = Pair.of(resource.getSourceName(), BlockModelDefinition.fromStream(this.context, new InputStreamReader(inputStream, StandardCharsets.UTF_8)));
-                            return pair;
+                            // MagmaCube start - decompile error
+                            Pair<String, BlockModelDefinition> pair1 = Pair.of(resource.getSourceName(), BlockModelDefinition.fromStream(this.context, new InputStreamReader(inputStream, StandardCharsets.UTF_8)));
+                            return pair1;
+                            // MagmaCube end - decompile error
                         }
                         catch (Exception exception) {
                             throw new BlockStateDefinitionException(String.format("Exception loading blockstate definition: '%s' in resourcepack: '%s': %s", resource.getLocation(), resource.getSourceName(), exception.getMessage()));
@@ -325,7 +322,7 @@ public class ModelBakery {
                 }
                 catch (IOException iOException) {
                     LOGGER.warn("Exception loading blockstate definition: {}: {}", resourceLocation4, iOException);
-                    HashMap map3 = Maps.newHashMap();
+                    HashMap<ModelGroupKey, Set<Object>> map3 = Maps.newHashMap(); // MagmaCube - decompile error
                     map.forEach((modelResourceLocation, blockState) -> {
                         Pair pair2 = (Pair)map2.get(blockState);
                         if (pair2 == null) {
@@ -334,8 +331,10 @@ public class ModelBakery {
                         }
                         this.cacheAndQueueDependencies((ResourceLocation)modelResourceLocation, (UnbakedModel)pair2.getFirst());
                         try {
-                            ModelGroupKey modelGroupKey2 = (ModelGroupKey)((Supplier)pair2.getSecond()).get();
-                            map3.computeIfAbsent(modelGroupKey2, modelGroupKey -> Sets.newIdentityHashSet()).add(blockState);
+                            // MagmaCube start - decompile error
+                            ModelGroupKey modelGroupKey3 = (ModelGroupKey)((Supplier)pair2.getSecond()).get();
+                            map3.computeIfAbsent(modelGroupKey3, modelGroupKey -> Sets.newIdentityHashSet()).add(blockState);
+                            // MagmaCube end - decompile error
                         }
                         catch (Exception exception) {
                             LOGGER.warn("Exception evaluating model definition: '{}'", modelResourceLocation, exception);
@@ -350,7 +349,7 @@ public class ModelBakery {
                             this.modelGroups.put(blockState, 0);
                         }
                         if (set.size() > 1) {
-                            this.registerModelGroup((Iterable<BlockState>)set);
+                            this.registerModelGroup((Iterable<BlockState>)iterator); // MagmaCube - decompile error
                         }
                     });
                     return;
@@ -360,12 +359,14 @@ public class ModelBakery {
                     BlockModelDefinition blockModelDefinition = (BlockModelDefinition)pair2.getSecond();
                     IdentityHashMap map4 = Maps.newIdentityHashMap();
                     if (blockModelDefinition.isMultiPart()) {
-                        MultiPart multiPart = blockModelDefinition.getMultiPart();
-                        immutableList.forEach(arg_0 -> ModelBakery.lambda$loadModel$19(map4, multiPart, (List)list, arg_0));
+                        // MagmaCube start - decompile error
+                        multiPart2 = blockModelDefinition.getMultiPart();
+                        immutableList.forEach(arg_0 -> ModelBakery._lambda$loadModel$19(map4, multiPart2, (List)list, arg_0));
+                        // MagmaCube end - decompile error
                     } else {
                         multiPart2 = null;
                     }
-                    blockModelDefinition.getVariants().forEach((arg_0, arg_1) -> ModelBakery.lambda$loadModel$23(immutableList, stateDefinition, map4, (List)list, multiPart2, pair, blockModelDefinition, resourceLocation4, pair2, arg_0, arg_1));
+                    blockModelDefinition.getVariants().forEach((arg_0, arg_1) -> ModelBakery._lambda$loadModel$23(immutableList, stateDefinition, map4, (List)list, multiPart2, pair, blockModelDefinition, resourceLocation4, pair2, arg_0, arg_1));
                     map2.putAll(map4);
                 }
             }
@@ -376,7 +377,7 @@ public class ModelBakery {
                 throw new BlockStateDefinitionException(String.format("Exception loading blockstate definition: '%s': %s", resourceLocation4, exception));
             }
             finally {
-                HashMap map6 = Maps.newHashMap();
+                HashMap<ModelGroupKey, Set<BlockState>> map6 = Maps.newHashMap();
                 map.forEach((modelResourceLocation, blockState) -> {
                     Pair pair2 = (Pair)map2.get(blockState);
                     if (pair2 == null) {
@@ -385,8 +386,10 @@ public class ModelBakery {
                     }
                     this.cacheAndQueueDependencies((ResourceLocation)modelResourceLocation, (UnbakedModel)pair2.getFirst());
                     try {
-                        ModelGroupKey modelGroupKey2 = (ModelGroupKey)((Supplier)pair2.getSecond()).get();
-                        map3.computeIfAbsent(modelGroupKey2, modelGroupKey -> Sets.newIdentityHashSet()).add(blockState);
+                        // MagmaCube start - decompile error
+                        ModelGroupKey modelGroupKey3 = (ModelGroupKey)((Supplier)pair2.getSecond()).get();
+                        map6.computeIfAbsent(modelGroupKey3, modelGroupKey -> Sets.newIdentityHashSet()).add(blockState);
+                        // MagmaCube end - decompile error
                     }
                     catch (Exception exception) {
                         LOGGER.warn("Exception evaluating model definition: '{}'", modelResourceLocation, exception);
@@ -502,14 +505,16 @@ public class ModelBakery {
         return this.modelGroups;
     }
 
-    private static /* synthetic */ void lambda$loadModel$23(ImmutableList immutableList, StateDefinition stateDefinition, Map map, List list, MultiPart multiPart, Pair pair, BlockModelDefinition blockModelDefinition, ResourceLocation resourceLocation, Pair pair2, String s, MultiVariant multiVariant) {
+    private static /* synthetic */ void _lambda$loadModel$23(ImmutableList<BlockState> immutableList, StateDefinition<Block, BlockState> stateDefinition, Map<BlockState, Pair<MultiVariant, Supplier<ModelGroupKey>>> map, List list, MultiPart multiPart, Pair pair, BlockModelDefinition blockModelDefinition, ResourceLocation resourceLocation, Pair pair2, String s, MultiVariant multiVariant) { // MagmaCube - type
         try {
+            // MagmaCube start - decompile error
             immutableList.stream().filter(ModelBakery.predicate(stateDefinition, s)).forEach(blockState -> {
-                Pair pair2 = map.put(blockState, Pair.of(multiVariant, () -> ModelGroupKey.create(blockState, multiVariant, list)));
-                if (pair2 != null && pair2.getFirst() != multiPart) {
+                Pair pair3 = map.put(blockState, Pair.of(multiVariant, () -> ModelGroupKey.create(blockState, multiVariant, list)));
+                if (pair3 != null && pair3.getFirst() != multiPart) {
                     map.put(blockState, pair);
-                    throw new RuntimeException("Overlapping definition with: " + (String)blockModelDefinition.getVariants().entrySet().stream().filter(entry -> entry.getValue() == pair2.getFirst()).findFirst().get().getKey());
+                    throw new RuntimeException("Overlapping definition with: " + (String)blockModelDefinition.getVariants().entrySet().stream().filter(entry -> entry.getValue() == pair3.getFirst()).findFirst().get().getKey());
                 }
+            // MagmaCube end - decompile error
             });
         }
         catch (Exception exception) {
@@ -517,7 +522,7 @@ public class ModelBakery {
         }
     }
 
-    private static /* synthetic */ void lambda$loadModel$19(Map map, MultiPart multiPart, List list, BlockState blockState) {
+    private static /* synthetic */ void _lambda$loadModel$19(Map<BlockState, Pair<MultiPart, Supplier<ModelGroupKey>>> map, MultiPart multiPart, List list, BlockState blockState) { // MagmaCube - type
         map.put(blockState, Pair.of(multiPart, () -> ModelGroupKey.create(blockState, multiPart, list)));
     }
 
diff --git a/src/main/java/net/minecraft/client/resources/model/WeightedBakedModel.java b/src/main/java/net/minecraft/client/resources/model/WeightedBakedModel.java
index f5bdc4f00533cebbb0064827b02ba28965d4ff85..be284a67ea5e5b690f89ec95f1813a1bfc9f16cf 100644
--- a/src/main/java/net/minecraft/client/resources/model/WeightedBakedModel.java
+++ b/src/main/java/net/minecraft/client/resources/model/WeightedBakedModel.java
@@ -69,7 +69,7 @@ public class WeightedBakedModel implements BakedModel
         private final List<WeightedModel> list;
         
         public Builder() {
-            this.list = (List<WeightedModel>)Lists.newArrayList();
+            this.list = Lists.newArrayList(); // MagmaCube - decompile fix
         }
         
         public Builder add(@Nullable final BakedModel bakedModel, final int i) {
diff --git a/src/main/java/net/minecraft/client/resources/sounds/SoundInstance.java b/src/main/java/net/minecraft/client/resources/sounds/SoundInstance.java
index c65f5a3816be8fa8e13487452c1e34b39c3127f6..3395c1fbf36de22cb905f5ed6beb9ccc2b7761b5 100644
--- a/src/main/java/net/minecraft/client/resources/sounds/SoundInstance.java
+++ b/src/main/java/net/minecraft/client/resources/sounds/SoundInstance.java
@@ -46,6 +46,6 @@ public interface SoundInstance
     public enum Attenuation
     {
         NONE, 
-        LINEAR;
+        LINEAR
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/resources/sounds/UnderwaterAmbientSoundInstances.java b/src/main/java/net/minecraft/client/resources/sounds/UnderwaterAmbientSoundInstances.java
index 83ccf959b47fa0469e2dbc6a15293ef89c2a1f76..44f804adba5cc67dc6455875e066529ea71a44ca 100644
--- a/src/main/java/net/minecraft/client/resources/sounds/UnderwaterAmbientSoundInstances.java
+++ b/src/main/java/net/minecraft/client/resources/sounds/UnderwaterAmbientSoundInstances.java
@@ -57,7 +57,7 @@ public class UnderwaterAmbientSoundInstances
                 this.fade -= 2;
             }
             this.fade = Math.min(this.fade, 40);
-            this.volume = Math.max(0.0f, Math.min(this.fade / 40.0f, 1.0f));
+            this.volume = Math.max(0.0f, Math.min((float) this.fade / 40.0f, 1.0f));
         }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/searchtree/SearchRegistry.java b/src/main/java/net/minecraft/client/searchtree/SearchRegistry.java
index 90e172797a41684c45dd3e88d1f84e9548207ec3..75524a6fa2a7dad95c87eecdb309c61c4bc00ba1 100644
--- a/src/main/java/net/minecraft/client/searchtree/SearchRegistry.java
+++ b/src/main/java/net/minecraft/client/searchtree/SearchRegistry.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.searchtree;
 
-import java.util.Iterator;
 import net.minecraft.server.packs.resources.ResourceManager;
 import com.google.common.collect.Maps;
 import java.util.Map;
@@ -16,7 +15,7 @@ public class SearchRegistry implements ResourceManagerReloadListener
     private final Map<Key<?>, MutableSearchTree<?>> searchTrees;
     
     public SearchRegistry() {
-        this.searchTrees = (Map<Key<?>, MutableSearchTree<?>>)Maps.newHashMap();
+        this.searchTrees = Maps.newHashMap(); // MagmaCube - decompile fix
     }
     
     @Override
@@ -35,9 +34,9 @@ public class SearchRegistry implements ResourceManagerReloadListener
     }
     
     static {
-        CREATIVE_NAMES = new Key<ItemStack>();
-        CREATIVE_TAGS = new Key<ItemStack>();
-        RECIPE_COLLECTIONS = new Key<RecipeCollection>();
+        CREATIVE_NAMES = new Key<>();
+        CREATIVE_TAGS = new Key<>();
+        RECIPE_COLLECTIONS = new Key<>();
     }
     
     public static class Key<T>
diff --git a/src/main/java/net/minecraft/client/server/IntegratedPlayerList.java b/src/main/java/net/minecraft/client/server/IntegratedPlayerList.java
index 57286b1ad3f0637b493f149b282407ebd0ea7bdf..b12c19d165819c3c1c0dad37dbdd98bbb9ff9a02 100644
--- a/src/main/java/net/minecraft/client/server/IntegratedPlayerList.java
+++ b/src/main/java/net/minecraft/client/server/IntegratedPlayerList.java
@@ -7,7 +7,6 @@ import net.minecraft.core.RegistryAccess;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TranslatableComponent;
-import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.players.PlayerList;
 import net.minecraft.world.level.storage.PlayerDataStorage;
@@ -46,9 +45,4 @@ extends PlayerList {
     public CompoundTag getSingleplayerData() {
         return this.playerData;
     }
-
-    @Override
-    public /* synthetic */ MinecraftServer getServer() {
-        return this.getServer();
-    }
 }
diff --git a/src/main/java/net/minecraft/client/server/IntegratedServer.java b/src/main/java/net/minecraft/client/server/IntegratedServer.java
index 1d0772b140efdc43609b16820387f263f4a7494c..2f3016ab6cfe770a123df0ed3f1d4c2153cefdf5 100644
--- a/src/main/java/net/minecraft/client/server/IntegratedServer.java
+++ b/src/main/java/net/minecraft/client/server/IntegratedServer.java
@@ -183,7 +183,7 @@ extends MinecraftServer {
     @Override
     public void halt(boolean flag) {
         this.executeBlocking(() -> {
-            ArrayList list = Lists.newArrayList(this.getPlayerList().getPlayers());
+            ArrayList<ServerPlayer> list = Lists.newArrayList(this.getPlayerList().getPlayers()); // MagmaCube - type
             for (ServerPlayer serverPlayer : list) {
                 if (serverPlayer.getUUID().equals(this.uuid)) continue;
                 this.getPlayerList().remove(serverPlayer);
diff --git a/src/main/java/net/minecraft/client/server/LanServerDetection.java b/src/main/java/net/minecraft/client/server/LanServerDetection.java
index cbc58c6f79e21e273c1ca0013b81b61d312b5f60..a7e080088f145ebf08a15cfa508f29939cdab085 100644
--- a/src/main/java/net/minecraft/client/server/LanServerDetection.java
+++ b/src/main/java/net/minecraft/client/server/LanServerDetection.java
@@ -6,7 +6,6 @@ import java.net.DatagramPacket;
 import java.io.IOException;
 import net.minecraft.DefaultUncaughtExceptionHandler;
 import java.net.MulticastSocket;
-import java.util.Iterator;
 import java.net.InetAddress;
 import java.util.Collections;
 import com.google.common.collect.Lists;
@@ -31,7 +30,7 @@ public class LanServerDetection
         private boolean isDirty;
         
         public LanServerList() {
-            this.servers = (List<LanServer>)Lists.newArrayList();
+            this.servers = Lists.newArrayList(); // MagmaCube - decompile fix
         }
         
         public synchronized boolean isDirty() {
diff --git a/src/main/java/net/minecraft/client/sounds/ChannelAccess.java b/src/main/java/net/minecraft/client/sounds/ChannelAccess.java
index a3001c48c97b4c478afc660e4219c1979ae50180..578184e8728cfff2a3f90f79731eb5ad05385380 100644
--- a/src/main/java/net/minecraft/client/sounds/ChannelAccess.java
+++ b/src/main/java/net/minecraft/client/sounds/ChannelAccess.java
@@ -20,25 +20,22 @@ public class ChannelAccess
     private final Executor executor;
     
     public ChannelAccess(final Library library, final Executor executor) {
-        this.channels = (Set<ChannelHandle>)Sets.newIdentityHashSet();
+        this.channels = Sets.newIdentityHashSet(); // MagmaCube - decompile error
         this.library = library;
         this.executor = executor;
     }
     
     public CompletableFuture<ChannelHandle> createHandle(final Library.Pool pool) {
         final CompletableFuture<ChannelHandle> completableFuture = new CompletableFuture<ChannelHandle>();
-        final Channel channel;
-        final ChannelHandle channelHandle;
-        final CompletableFuture<ChannelHandle> completableFuture2;
         this.executor.execute(() -> {
-            channel = this.library.acquireChannel(pool);
+            Channel channel = this.library.acquireChannel(pool); // MagmaCube - decompile error
             if (channel != null) {
-                channelHandle = new ChannelHandle(channel);
+                ChannelHandle channelHandle = new ChannelHandle(channel); // MagmaCube - decompile error
                 this.channels.add(channelHandle);
-                completableFuture2.complete(channelHandle);
+                completableFuture.complete(channelHandle); // MagmaCube - decompile error
             }
             else {
-                completableFuture2.complete(null);
+                completableFuture.complete(null); // MagmaCube - decompile error
             }
             return;
         });
@@ -50,12 +47,10 @@ public class ChannelAccess
     }
     
     public void scheduleTick() {
-        final Iterator<ChannelHandle> iterator;
-        ChannelHandle channelHandle;
         this.executor.execute(() -> {
-            iterator = this.channels.iterator();
+            Iterator<ChannelHandle> iterator = this.channels.iterator(); // MagmaCube - decompile error
             while (iterator.hasNext()) {
-                channelHandle = iterator.next();
+                ChannelHandle channelHandle = iterator.next(); // MagmaCube - decompile error
                 channelHandle.channel.updateStream();
                 if (channelHandle.channel.stopped()) {
                     channelHandle.release();
diff --git a/src/main/java/net/minecraft/client/sounds/SoundEngine.java b/src/main/java/net/minecraft/client/sounds/SoundEngine.java
index 8f79db8650bcae37325b38071325e0fa14d27bd2..e2af40c3116f91c52be72255bd7529049ccafecd 100644
--- a/src/main/java/net/minecraft/client/sounds/SoundEngine.java
+++ b/src/main/java/net/minecraft/client/sounds/SoundEngine.java
@@ -113,12 +113,12 @@ public class SoundEngine {
             return;
         }
         this.instanceToChannel.forEach((soundInstance, channelHandle) -> {
-            float f = this.calculateVolume((SoundInstance)soundInstance);
+            float f1 = this.calculateVolume((SoundInstance)soundInstance); // MagmaCube - decompile error
             channelHandle.execute(channel -> {
-                if (f <= 0.0f) {
+                if (f1 <= 0.0f) { // MagmaCube - decompile error
                     channel.stop();
                 } else {
-                    channel.setVolume(f);
+                    channel.setVolume(f1); // MagmaCube - decompile error
                 }
             });
         });
diff --git a/src/main/java/net/minecraft/client/sounds/SoundManager.java b/src/main/java/net/minecraft/client/sounds/SoundManager.java
index 7f61c4fa25e92f90ef1eac2073549b1885e39919..267c512feaa423b2cf9776178a0de0d246cdcfc5 100644
--- a/src/main/java/net/minecraft/client/sounds/SoundManager.java
+++ b/src/main/java/net/minecraft/client/sounds/SoundManager.java
@@ -36,7 +36,7 @@ import org.apache.logging.log4j.Logger;
 import net.minecraft.client.resources.sounds.Sound;
 import net.minecraft.server.packs.resources.SimplePreparableReloadListener;
 
-public class SoundManager extends SimplePreparableReloadListener<Preparations>
+public class SoundManager extends SimplePreparableReloadListener<SoundManager.Preparations> // MagmaCube - decompile error
 {
     public static final Sound EMPTY_SOUND;
     private static final Logger LOGGER;
@@ -46,7 +46,7 @@ public class SoundManager extends SimplePreparableReloadListener<Preparations>
     private final SoundEngine soundEngine;
     
     public SoundManager(final ResourceManager resourceManager, final Options options) {
-        this.registry = (Map<ResourceLocation, WeighedSoundEvents>)Maps.newHashMap();
+        this.registry = Maps.newHashMap(); // MagmaCube - decompile error
         this.soundEngine = new SoundEngine(this, options, resourceManager);
     }
     
@@ -203,7 +203,7 @@ public class SoundManager extends SimplePreparableReloadListener<Preparations>
         private final Map<ResourceLocation, WeighedSoundEvents> registry;
         
         protected Preparations() {
-            this.registry = (Map<ResourceLocation, WeighedSoundEvents>)Maps.newHashMap();
+            this.registry = Maps.newHashMap(); // MagmaCube - decompile error
         }
         
         private void handleRegistration(final ResourceLocation resourceLocation, final SoundEventRegistration soundEventRegistration, final ResourceManager resourceManager) {
@@ -218,16 +218,17 @@ public class SoundManager extends SimplePreparableReloadListener<Preparations>
             }
             for (final Sound sound : soundEventRegistration.getSounds()) {
                 final ResourceLocation resourceLocation2 = sound.getLocation();
+                Weighted<Sound> weighted; // MagmaCube - decompile error
                 switch (sound.getType()) {
                     case FILE: {
                         if (!validateSoundResource(sound, resourceLocation, resourceManager)) {
                             continue;
                         }
-                        final Weighted<Sound> weighted = sound;
+                        weighted = sound; // MagmaCube - decompile error
                         break;
                     }
                     case SOUND_EVENT: {
-                        final Weighted<Sound> weighted2 = new Weighted<Sound>() {
+                        weighted = new Weighted<Sound>() { // MagmaCube - decompile error
                             @Override
                             public int getWeight() {
                                 final WeighedSoundEvents weighedSoundEvents = Preparations.this.registry.get(resourceLocation2);
@@ -259,8 +260,7 @@ public class SoundManager extends SimplePreparableReloadListener<Preparations>
                         throw new IllegalStateException("Unknown SoundEventRegistration type: " + sound.getType());
                     }
                 }
-                final Weighted<Sound> weighted3;
-                weighedSoundEvents.addSound(weighted3);
+                weighedSoundEvents.addSound(weighted); // MagmaCube - decompile error
             }
         }
         
diff --git a/src/main/java/net/minecraft/client/sounds/WeighedSoundEvents.java b/src/main/java/net/minecraft/client/sounds/WeighedSoundEvents.java
index 624933e91ad96faa38814271a0edd70fab6785d6..59fc846f1dd0af866278fa66c75014a0a4813b2e 100644
--- a/src/main/java/net/minecraft/client/sounds/WeighedSoundEvents.java
+++ b/src/main/java/net/minecraft/client/sounds/WeighedSoundEvents.java
@@ -19,7 +19,7 @@ public class WeighedSoundEvents implements Weighted<Sound>
     private final Component subtitle;
     
     public WeighedSoundEvents(final ResourceLocation resourceLocation, @Nullable final String s) {
-        this.list = (List<Weighted<Sound>>)Lists.newArrayList();
+        this.list = Lists.newArrayList(); // MagmaCube - decompile error
         this.random = new Random();
         this.location = resourceLocation;
         this.subtitle = ((s == null) ? null : new TranslatableComponent(s));
diff --git a/src/main/java/net/minecraft/client/tutorial/FindTreeTutorialStepInstance.java b/src/main/java/net/minecraft/client/tutorial/FindTreeTutorialStepInstance.java
index e91344f27eae375987fd4b80757ac3f942be3d39..892b4d7b7b85a0451de760b0635e1926c036abe3 100644
--- a/src/main/java/net/minecraft/client/tutorial/FindTreeTutorialStepInstance.java
+++ b/src/main/java/net/minecraft/client/tutorial/FindTreeTutorialStepInstance.java
@@ -21,7 +21,7 @@ import net.minecraft.world.phys.HitResult;
 
 public class FindTreeTutorialStepInstance
 implements TutorialStepInstance {
-    private static final Set<Block> TREE_BLOCKS = Sets.newHashSet((Object[])new Block[]{Blocks.OAK_LOG, Blocks.SPRUCE_LOG, Blocks.BIRCH_LOG, Blocks.JUNGLE_LOG, Blocks.ACACIA_LOG, Blocks.DARK_OAK_LOG, Blocks.WARPED_STEM, Blocks.CRIMSON_STEM, Blocks.OAK_WOOD, Blocks.SPRUCE_WOOD, Blocks.BIRCH_WOOD, Blocks.JUNGLE_WOOD, Blocks.ACACIA_WOOD, Blocks.DARK_OAK_WOOD, Blocks.WARPED_HYPHAE, Blocks.CRIMSON_HYPHAE, Blocks.OAK_LEAVES, Blocks.SPRUCE_LEAVES, Blocks.BIRCH_LEAVES, Blocks.JUNGLE_LEAVES, Blocks.ACACIA_LEAVES, Blocks.DARK_OAK_LEAVES, Blocks.NETHER_WART_BLOCK, Blocks.WARPED_WART_BLOCK});
+    private static final Set<Block> TREE_BLOCKS = Sets.newHashSet(new Block[]{Blocks.OAK_LOG, Blocks.SPRUCE_LOG, Blocks.BIRCH_LOG, Blocks.JUNGLE_LOG, Blocks.ACACIA_LOG, Blocks.DARK_OAK_LOG, Blocks.WARPED_STEM, Blocks.CRIMSON_STEM, Blocks.OAK_WOOD, Blocks.SPRUCE_WOOD, Blocks.BIRCH_WOOD, Blocks.JUNGLE_WOOD, Blocks.ACACIA_WOOD, Blocks.DARK_OAK_WOOD, Blocks.WARPED_HYPHAE, Blocks.CRIMSON_HYPHAE, Blocks.OAK_LEAVES, Blocks.SPRUCE_LEAVES, Blocks.BIRCH_LEAVES, Blocks.JUNGLE_LEAVES, Blocks.ACACIA_LEAVES, Blocks.DARK_OAK_LEAVES, Blocks.NETHER_WART_BLOCK, Blocks.WARPED_WART_BLOCK}); // MagmaCube - decompile fix
     private static final Component TITLE = new TranslatableComponent("tutorial.find_tree.title");
     private static final Component DESCRIPTION = new TranslatableComponent("tutorial.find_tree.description");
     private final Tutorial tutorial;
diff --git a/src/main/java/net/minecraft/client/tutorial/TutorialSteps.java b/src/main/java/net/minecraft/client/tutorial/TutorialSteps.java
index ebac43541fcc9303bf7a8335c1c8d48357ecc28a..9ad23a7289ae5ea3798b6373061dfa346791406d 100644
--- a/src/main/java/net/minecraft/client/tutorial/TutorialSteps.java
+++ b/src/main/java/net/minecraft/client/tutorial/TutorialSteps.java
@@ -4,17 +4,19 @@ import java.util.function.Function;
 
 public enum TutorialSteps
 {
-    MOVEMENT("movement", (Function<Tutorial, T>)MovementTutorialStepInstance::new), 
-    FIND_TREE("find_tree", (Function<Tutorial, T>)FindTreeTutorialStepInstance::new), 
-    PUNCH_TREE("punch_tree", (Function<Tutorial, T>)PunchTreeTutorialStepInstance::new), 
-    OPEN_INVENTORY("open_inventory", (Function<Tutorial, T>)OpenInventoryTutorialStep::new), 
-    CRAFT_PLANKS("craft_planks", (Function<Tutorial, T>)CraftPlanksTutorialStep::new), 
-    NONE("none", (Function<Tutorial, T>)CompletedTutorialStepInstance::new);
+    // MagmaCube start - decompile error
+    MOVEMENT("movement", MovementTutorialStepInstance::new), 
+    FIND_TREE("find_tree", FindTreeTutorialStepInstance::new), 
+    PUNCH_TREE("punch_tree", PunchTreeTutorialStepInstance::new), 
+    OPEN_INVENTORY("open_inventory", OpenInventoryTutorialStep::new), 
+    CRAFT_PLANKS("craft_planks", CraftPlanksTutorialStep::new), 
+    NONE("none", CompletedTutorialStepInstance::new);
+    // MagmaCube end - decompile error
     
     private final String name;
     private final Function<Tutorial, ? extends TutorialStepInstance> constructor;
     
-    private TutorialSteps(final String s, final Function<Tutorial, T> function) {
+    private TutorialSteps(final String s, final Function<Tutorial, ? extends TutorialStepInstance> function) { // MagmaCube - decompile error
         this.name = s;
         this.constructor = function;
     }
diff --git a/src/main/java/net/minecraft/commands/CommandSourceStack.java b/src/main/java/net/minecraft/commands/CommandSourceStack.java
index c5f1e092db251a03ca31ed389fd7069f000b40f1..0779f7e2c30959bbda6edab4726c95a3e7cbf406 100644
--- a/src/main/java/net/minecraft/commands/CommandSourceStack.java
+++ b/src/main/java/net/minecraft/commands/CommandSourceStack.java
@@ -248,7 +248,7 @@ implements SharedSuggestionProvider {
 
     @Override
     public Collection<String> getOnlinePlayerNames() {
-        return Lists.newArrayList((Object[])this.server.getPlayerNames());
+        return Lists.newArrayList(this.server.getPlayerNames()); // MagmaCube - decompile error
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/commands/arguments/AngleArgument.java b/src/main/java/net/minecraft/commands/arguments/AngleArgument.java
index cc2b6f74007fc1b88b92252102957f400c1fc083..5c15dceaa5373e980c116ee81051815cf4cadc57 100644
--- a/src/main/java/net/minecraft/commands/arguments/AngleArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/AngleArgument.java
@@ -14,7 +14,7 @@ import com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
 import java.util.Collection;
 import com.mojang.brigadier.arguments.ArgumentType;
 
-public class AngleArgument implements ArgumentType<SingleAngle>
+public class AngleArgument implements ArgumentType<AngleArgument.SingleAngle> // MagmaCube - decompile error
 {
     private static final Collection<String> EXAMPLES;
     public static final SimpleCommandExceptionType ERROR_NOT_COMPLETE;
diff --git a/src/main/java/net/minecraft/commands/arguments/DimensionArgument.java b/src/main/java/net/minecraft/commands/arguments/DimensionArgument.java
index c74fab4d41b85b1cc3ca9b94044efb10d9355370..19237af4db1080c33358e297b3f26fb3eebc6b25 100644
--- a/src/main/java/net/minecraft/commands/arguments/DimensionArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/DimensionArgument.java
@@ -53,8 +53,4 @@ implements ArgumentType<ResourceLocation> {
         }
         return serverLevel;
     }
-
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
 }
diff --git a/src/main/java/net/minecraft/commands/arguments/EntityAnchorArgument.java b/src/main/java/net/minecraft/commands/arguments/EntityAnchorArgument.java
index b6532a988d546963c07d9d1bc471313f0502e840..b6c29725f7fffbc026d34ba89b4de2709013ca46 100644
--- a/src/main/java/net/minecraft/commands/arguments/EntityAnchorArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/EntityAnchorArgument.java
@@ -24,7 +24,7 @@ import com.mojang.brigadier.exceptions.DynamicCommandExceptionType;
 import java.util.Collection;
 import com.mojang.brigadier.arguments.ArgumentType;
 
-public class EntityAnchorArgument implements ArgumentType<Anchor>
+public class EntityAnchorArgument implements ArgumentType<EntityAnchorArgument.Anchor> // MagmaCube - decompile error
 {
     private static final Collection<String> EXAMPLES;
     private static final DynamicCommandExceptionType ERROR_INVALID;
@@ -58,10 +58,8 @@ public class EntityAnchorArgument implements ArgumentType<Anchor>
     
     static {
         EXAMPLES = Arrays.asList("eyes", "feet");
-        final TranslatableComponent translatableComponent;
         ERROR_INVALID = new DynamicCommandExceptionType(object -> {
-            new TranslatableComponent("argument.anchor.invalid", new Object[] { object });
-            return translatableComponent;
+            return new TranslatableComponent("argument.anchor.invalid", new Object[] { object }); // MagmaCube - decompile error
         });
     }
     
@@ -97,14 +95,13 @@ public class EntityAnchorArgument implements ArgumentType<Anchor>
         }
         
         static {
-            final Anchor[] array;
-            int length;
-            int i;
-            Anchor anchor;
-            BY_NAME = Util.make((Map<String, Anchor>)Maps.newHashMap(), hashMap -> {
-                values();
-                for (length = array.length; i < length; ++i) {
-                    anchor = array[i];
+            // MagmaCube start - decompile error
+            BY_NAME = Util.make(Maps.newHashMap(), hashMap -> {
+                Anchor[] array = values();
+                int i = 0;
+                for (int length = array.length; i < length; ++i) {
+                    Anchor anchor = array[i];
+            // MagmaCube end - decompile error
                     hashMap.put(anchor.name, anchor);
                 }
             });
diff --git a/src/main/java/net/minecraft/commands/arguments/GameProfileArgument.java b/src/main/java/net/minecraft/commands/arguments/GameProfileArgument.java
index cc1e94867b2e38f02ae0f280494e2d013b94b3a9..d58f29acb6112a06959ce23ebb75ae8a99bb971a 100644
--- a/src/main/java/net/minecraft/commands/arguments/GameProfileArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/GameProfileArgument.java
@@ -25,7 +25,7 @@ import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.server.level.ServerPlayer;
 
 public class GameProfileArgument
-implements ArgumentType<Result> {
+implements ArgumentType<GameProfileArgument.Result> { // MagmaCube - decompile error
     private static final Collection<String> EXAMPLES = Arrays.asList("Player", "0123", "dd12be42-52a9-4a91-a8a1-11c01849e498", "@e");
     public static final SimpleCommandExceptionType ERROR_UNKNOWN_PLAYER = new SimpleCommandExceptionType((Message)new TranslatableComponent("argument.player.unknown"));
 
@@ -80,10 +80,6 @@ implements ArgumentType<Result> {
         return EXAMPLES;
     }
 
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
-
     public static class SelectorResult
     implements Result {
         private final EntitySelector selector;
diff --git a/src/main/java/net/minecraft/commands/arguments/MessageArgument.java b/src/main/java/net/minecraft/commands/arguments/MessageArgument.java
index ff4c50fe79f2761dbce1586a6f7fb8c52752c9d3..f657b10b50a2c4b588c120a7a2aa73eb11bc71da 100644
--- a/src/main/java/net/minecraft/commands/arguments/MessageArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/MessageArgument.java
@@ -13,7 +13,7 @@ import com.mojang.brigadier.context.CommandContext;
 import java.util.Collection;
 import com.mojang.brigadier.arguments.ArgumentType;
 
-public class MessageArgument implements ArgumentType<Message>
+public class MessageArgument implements ArgumentType<MessageArgument.Message> // MagmaCube - decompile error
 {
     private static final Collection<String> EXAMPLES;
     
diff --git a/src/main/java/net/minecraft/commands/arguments/NbtPathArgument.java b/src/main/java/net/minecraft/commands/arguments/NbtPathArgument.java
index cf322a0c2379eae7500f8580abc4af01127b4296..0b17f963e7cf9fe3ac1cabd0b21fb1831c2297d0 100644
--- a/src/main/java/net/minecraft/commands/arguments/NbtPathArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/NbtPathArgument.java
@@ -32,7 +32,7 @@ import com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
 import java.util.Collection;
 import com.mojang.brigadier.arguments.ArgumentType;
 
-public class NbtPathArgument implements ArgumentType<NbtPath>
+public class NbtPathArgument implements ArgumentType<NbtPathArgument.NbtPath>
 {
     private static final Collection<String> EXAMPLES;
     public static final SimpleCommandExceptionType ERROR_INVALID_NODE;
@@ -47,7 +47,7 @@ public class NbtPathArgument implements ArgumentType<NbtPath>
     }
     
     public NbtPath parse(final StringReader stringReader) throws CommandSyntaxException {
-        final List<Node> list = (List<Node>)Lists.newArrayList();
+        final List<Node> list = Lists.newArrayList(); // MagmaCube - decompile error
         final int i = stringReader.getCursor();
         final Object2IntMap<Node> object2IntMap = (Object2IntMap<Node>)new Object2IntOpenHashMap();
         boolean flag = true;
@@ -137,10 +137,8 @@ public class NbtPathArgument implements ArgumentType<NbtPath>
     static {
         EXAMPLES = Arrays.asList("foo", "foo.bar", "foo[0]", "[0]", "[]", "{foo=bar}");
         ERROR_INVALID_NODE = new SimpleCommandExceptionType((Message)new TranslatableComponent("arguments.nbtpath.node.invalid"));
-        final TranslatableComponent translatableComponent;
         ERROR_NOTHING_FOUND = new DynamicCommandExceptionType(object -> {
-            new TranslatableComponent("arguments.nbtpath.nothing_found", new Object[] { object });
-            return translatableComponent;
+            return new TranslatableComponent("arguments.nbtpath.nothing_found", new Object[] { object });
         });
     }
     
@@ -198,13 +196,13 @@ public class NbtPathArgument implements ArgumentType<NbtPath>
         }
         
         private static int apply(final List<Tag> list, final Function<Tag, Integer> function) {
-            return list.stream().map((Function<? super Object, ? extends Integer>)function).reduce(0, (integer, integer2) -> integer + integer2);
+            return list.stream().map(function).reduce(0, (integer, integer2) -> integer + integer2); // MagmaCube - decompile error
         }
         
         public int set(final Tag tag, final Supplier<Tag> supplier) throws CommandSyntaxException {
             final List<Tag> list = this.getOrCreateParents(tag);
             final Node node = this.nodes[this.nodes.length - 1];
-            return apply(list, tag -> node.setTag(tag, supplier));
+            return apply(list, tag1 -> node.setTag(tag1, supplier));
         }
         
         public int remove(final Tag tag) {
@@ -244,11 +242,11 @@ public class NbtPathArgument implements ArgumentType<NbtPath>
         }
         
         default List<Tag> getOrCreate(final List<Tag> list, final Supplier<Tag> supplier) {
-            return this.collect(list, (tag, list) -> this.getOrCreateTag(tag, supplier, list));
+            return this.collect(list, (tag, list1) -> this.getOrCreateTag(tag, supplier, list1)); // MagmaCube - decompile error
         }
         
         default List<Tag> collect(final List<Tag> list, final BiConsumer<Tag, List<Tag>> biConsumer) {
-            final List<Tag> list2 = (List<Tag>)Lists.newArrayList();
+            final List<Tag> list2 = Lists.newArrayList(); // MagmaCube - decompile error
             for (final Tag tag : list) {
                 biConsumer.accept(tag, list2);
             }
@@ -280,7 +278,7 @@ public class NbtPathArgument implements ArgumentType<NbtPath>
                 final CompoundTag compoundTag = (CompoundTag)tag;
                 final Tag tag3;
                 if (compoundTag.contains(this.name)) {
-                    final Tag tag2 = compoundTag.get(this.name);
+                    tag3 = compoundTag.get(this.name); // MagmaCube - decompile error
                 }
                 else {
                     tag3 = supplier.get();
@@ -406,15 +404,16 @@ public class NbtPathArgument implements ArgumentType<NbtPath>
             final MutableBoolean mutableBoolean = new MutableBoolean();
             if (tag instanceof ListTag) {
                 final ListTag listTag = (ListTag)tag;
-                final MutableBoolean mutableBoolean2;
-                listTag.stream().filter(this.predicate).forEach(tag -> {
-                    list.add(tag);
-                    mutableBoolean2.setTrue();
+                // MagmaCube start - decompile error
+                listTag.stream().filter(this.predicate).forEach(tag1 -> {
+                    list.add(tag1);
+                    mutableBoolean.setTrue();
+                // MagmaCube end - decompile error
                     return;
                 });
                 if (mutableBoolean.isFalse()) {
                     final CompoundTag compoundTag = this.pattern.copy();
-                    ((AbstractList<CompoundTag>)listTag).add(compoundTag);
+                    (listTag).add(compoundTag); // MagmaCube - decompile error
                     list.add(compoundTag);
                 }
             }
diff --git a/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java b/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
index 872d0d5501b252a5034e018b179a98c755bb876a..60e98f3df57c6dbbc68b549ef0bbdc4b165678c7 100644
--- a/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
@@ -59,7 +59,7 @@ implements ArgumentType<String> {
         }
         if (commandContext.getSource() instanceof SharedSuggestionProvider) {
             SharedSuggestionProvider sharedSuggestionProvider = (SharedSuggestionProvider)commandContext.getSource();
-            return sharedSuggestionProvider.customSuggestion(commandContext, suggestionsBuilder);
+            return sharedSuggestionProvider.customSuggestion((CommandContext<SharedSuggestionProvider>) commandContext, suggestionsBuilder); // MagmaCube - decompile error
         }
         return Suggestions.empty();
     }
@@ -67,8 +67,4 @@ implements ArgumentType<String> {
     public Collection<String> getExamples() {
         return EXAMPLES;
     }
-
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
 }
diff --git a/src/main/java/net/minecraft/commands/arguments/OperationArgument.java b/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
index be85282422d09a60b47755a472e4b803f873dd95..39e11484fb3b5238d9c80a57c2b35a6f9e5f7751 100644
--- a/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
@@ -17,7 +17,7 @@ import com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
 import java.util.Collection;
 import com.mojang.brigadier.arguments.ArgumentType;
 
-public class OperationArgument implements ArgumentType<Operation>
+public class OperationArgument implements ArgumentType<OperationArgument.Operation> // MagmaCube - decompile error
 {
     private static final Collection<String> EXAMPLES;
     private static final SimpleCommandExceptionType ERROR_INVALID_OPERATION;
@@ -52,9 +52,8 @@ public class OperationArgument implements ArgumentType<Operation>
     
     private static Operation getOperation(final String s) throws CommandSyntaxException {
         if (s.equals("><")) {
-            final int i;
             return (score, score2) -> {
-                i = score.getScore();
+                int i = score.getScore(); // MagmaCube - decompile error
                 score.setScore(score2.getScore());
                 score2.setScore(i);
                 return;
diff --git a/src/main/java/net/minecraft/commands/arguments/RangeArgument.java b/src/main/java/net/minecraft/commands/arguments/RangeArgument.java
index 56fc103943e929b4f4b0df60df4ef53e9997a27c..b4116fc3bb611ca7902e1a5720c6b052d0d1ee7c 100644
--- a/src/main/java/net/minecraft/commands/arguments/RangeArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/RangeArgument.java
@@ -11,11 +11,11 @@ import net.minecraft.advancements.critereon.MinMaxBounds;
 
 public interface RangeArgument<T extends MinMaxBounds<?>> extends ArgumentType<T>
 {
-    default Ints intRange() {
+    static Ints intRange() { // MagmaCube - decompile fix
         return new Ints();
     }
     
-    default Floats floatRange() {
+    static Floats floatRange() { // MagmaCube - decompile fix
         return new Floats();
     }
     
diff --git a/src/main/java/net/minecraft/commands/arguments/ResourceLocationArgument.java b/src/main/java/net/minecraft/commands/arguments/ResourceLocationArgument.java
index 7e77b2ec86b63b065a279287dc2eb8311b2a47de..d3363deca6afcac0d278b0ecf4a24cbd401ce7e7 100644
--- a/src/main/java/net/minecraft/commands/arguments/ResourceLocationArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/ResourceLocationArgument.java
@@ -71,8 +71,4 @@ implements ArgumentType<ResourceLocation> {
     public Collection<String> getExamples() {
         return EXAMPLES;
     }
-
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
 }
diff --git a/src/main/java/net/minecraft/commands/arguments/ScoreHolderArgument.java b/src/main/java/net/minecraft/commands/arguments/ScoreHolderArgument.java
index d18efe7e04dbac7a4dd86631f39de26dc3a716ea..992c9b5674743cb989bdecafd1d7dffce57c17a6 100644
--- a/src/main/java/net/minecraft/commands/arguments/ScoreHolderArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/ScoreHolderArgument.java
@@ -27,7 +27,7 @@ import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.world.entity.Entity;
 
 public class ScoreHolderArgument
-implements ArgumentType<Result> {
+implements ArgumentType<ScoreHolderArgument.Result> { // MagmaCube - decompile error
     public static final SuggestionProvider<CommandSourceStack> SUGGEST_SCORE_HOLDERS = (commandContext, suggestionsBuilder2) -> {
         StringReader stringReader = new StringReader(suggestionsBuilder2.getInput());
         stringReader.setCursor(suggestionsBuilder2.getStart());
@@ -107,17 +107,13 @@ implements ArgumentType<Result> {
         return EXAMPLES;
     }
 
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
-
     public static class Serializer
     implements ArgumentSerializer<ScoreHolderArgument> {
         @Override
         public void serializeToNetwork(ScoreHolderArgument scoreHolderArgument, FriendlyByteBuf friendlyByteBuf) {
             int b = 0;
             if (scoreHolderArgument.multiple) {
-                b = (byte)(b | true ? 1 : 0);
+                b = (byte)(b | 1); // MagmaCube - decompile error
             }
             friendlyByteBuf.writeByte(b);
         }
@@ -133,11 +129,6 @@ implements ArgumentType<Result> {
         public void serializeToJson(ScoreHolderArgument scoreHolderArgument, JsonObject jsonObject) {
             jsonObject.addProperty("amount", scoreHolderArgument.multiple ? "multiple" : "single");
         }
-
-        @Override
-        public /* synthetic */ ArgumentType deserializeFromNetwork(FriendlyByteBuf friendlyByteBuf) {
-            return this.deserializeFromNetwork(friendlyByteBuf);
-        }
     }
 
     public static class SelectorResult
diff --git a/src/main/java/net/minecraft/commands/arguments/TeamArgument.java b/src/main/java/net/minecraft/commands/arguments/TeamArgument.java
index c82b8ef195e869dcfbdc48ae4ea21ae20edb0dc3..9d245abfb1e5df6f47798446bca3c7302032d008 100644
--- a/src/main/java/net/minecraft/commands/arguments/TeamArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/TeamArgument.java
@@ -49,8 +49,4 @@ implements ArgumentType<String> {
     public Collection<String> getExamples() {
         return EXAMPLES;
     }
-
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
 }
diff --git a/src/main/java/net/minecraft/commands/arguments/blocks/BlockInput.java b/src/main/java/net/minecraft/commands/arguments/blocks/BlockInput.java
index 9ed3bc77927ec7baca78a482cb3bcdc6977d7c1d..7e9b3a0db16661a7e2a19d200d422ad1331a787d 100644
--- a/src/main/java/net/minecraft/commands/arguments/blocks/BlockInput.java
+++ b/src/main/java/net/minecraft/commands/arguments/blocks/BlockInput.java
@@ -1,12 +1,9 @@
 package net.minecraft.commands.arguments.blocks;
 
-import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.block.entity.BlockEntity;
-import java.util.Iterator;
-import net.minecraft.nbt.Tag;
 import net.minecraft.nbt.NbtUtils;
 import javax.annotation.Nullable;
 import net.minecraft.nbt.CompoundTag;
diff --git a/src/main/java/net/minecraft/commands/arguments/blocks/BlockPredicateArgument.java b/src/main/java/net/minecraft/commands/arguments/blocks/BlockPredicateArgument.java
index 892d31a608be15536ed08837beae2e90294ed3db..7b458a03d18fc2ba31f06e190f7332e9efa45b22 100644
--- a/src/main/java/net/minecraft/commands/arguments/blocks/BlockPredicateArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/blocks/BlockPredicateArgument.java
@@ -30,7 +30,7 @@ import net.minecraft.world.level.block.state.pattern.BlockInWorld;
 import net.minecraft.world.level.block.state.properties.Property;
 
 public class BlockPredicateArgument
-implements ArgumentType<Result> {
+implements ArgumentType<BlockPredicateArgument.Result> { // MagmaCube - decompile error
     private static final Collection<String> EXAMPLES = Arrays.asList("stone", "minecraft:stone", "stone[foo=bar]", "#stone", "#stone[foo=bar]{baz=nbt}");
     private static final DynamicCommandExceptionType ERROR_UNKNOWN_TAG = new DynamicCommandExceptionType(object -> new TranslatableComponent("arguments.block.tag.unknown", object));
 
@@ -75,10 +75,6 @@ implements ArgumentType<Result> {
         return EXAMPLES;
     }
 
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
-
     static class TagPredicate
     implements Predicate<BlockInWorld> {
         private final Tag<Block> tag;
@@ -116,11 +112,6 @@ implements ArgumentType<Result> {
             }
             return true;
         }
-
-        @Override
-        public /* synthetic */ boolean test(Object object) {
-            return this.test((BlockInWorld)object);
-        }
     }
 
     static class BlockPredicate
@@ -152,11 +143,6 @@ implements ArgumentType<Result> {
             }
             return true;
         }
-
-        @Override
-        public /* synthetic */ boolean test(Object object) {
-            return this.test((BlockInWorld)object);
-        }
     }
 
     public static interface Result {
diff --git a/src/main/java/net/minecraft/commands/arguments/item/FunctionArgument.java b/src/main/java/net/minecraft/commands/arguments/item/FunctionArgument.java
index d8ebff2fbcbf570f1f371af60b2e157330b29bd1..eae19e9df26a21b31aa3241ab5d8c26fb67a4f61 100644
--- a/src/main/java/net/minecraft/commands/arguments/item/FunctionArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/item/FunctionArgument.java
@@ -17,7 +17,7 @@ import net.minecraft.resources.ResourceLocation;
 import net.minecraft.tags.Tag;
 
 public class FunctionArgument
-implements ArgumentType<Result> {
+implements ArgumentType<FunctionArgument.Result> { // MagmaCube - decompile error
     private static final Collection<String> EXAMPLES = Arrays.asList("foo", "foo:bar", "#foo");
     private static final DynamicCommandExceptionType ERROR_UNKNOWN_TAG = new DynamicCommandExceptionType(object -> new TranslatableComponent("arguments.function.tag.unknown", object));
     private static final DynamicCommandExceptionType ERROR_UNKNOWN_FUNCTION = new DynamicCommandExceptionType(object -> new TranslatableComponent("arguments.function.unknown", object));
@@ -83,10 +83,6 @@ implements ArgumentType<Result> {
         return EXAMPLES;
     }
 
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
-
     public static interface Result {
         public Collection<CommandFunction> create(CommandContext<CommandSourceStack> var1) throws CommandSyntaxException;
 
diff --git a/src/main/java/net/minecraft/commands/arguments/item/ItemInput.java b/src/main/java/net/minecraft/commands/arguments/item/ItemInput.java
index 0575378e2e2c15512bef882047f77942bbce0c55..38203ab199909a7d4b8058891931e938e2ec18ea 100644
--- a/src/main/java/net/minecraft/commands/arguments/item/ItemInput.java
+++ b/src/main/java/net/minecraft/commands/arguments/item/ItemInput.java
@@ -1,11 +1,8 @@
 package net.minecraft.commands.arguments.item;
 
 import net.minecraft.network.chat.TranslatableComponent;
-import com.mojang.brigadier.Message;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import net.minecraft.core.Registry;
-import net.minecraft.world.level.ItemLike;
-import net.minecraft.nbt.Tag;
 import net.minecraft.nbt.NbtUtils;
 import javax.annotation.Nullable;
 import net.minecraft.nbt.CompoundTag;
diff --git a/src/main/java/net/minecraft/commands/arguments/item/ItemPredicateArgument.java b/src/main/java/net/minecraft/commands/arguments/item/ItemPredicateArgument.java
index c4bfc1c35047590f3b651210bc4aee3d2c1b4c23..bb1c4c164859c24185a6224bafafd976f22d840e 100644
--- a/src/main/java/net/minecraft/commands/arguments/item/ItemPredicateArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/item/ItemPredicateArgument.java
@@ -24,7 +24,7 @@ import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 
 public class ItemPredicateArgument
-implements ArgumentType<Result> {
+implements ArgumentType<ItemPredicateArgument.Result> { // MagmaCube - decompile error
     private static final Collection<String> EXAMPLES = Arrays.asList("stick", "minecraft:stick", "#stick", "#stick{foo=bar}");
     private static final DynamicCommandExceptionType ERROR_UNKNOWN_TAG = new DynamicCommandExceptionType(object -> new TranslatableComponent("arguments.item.tag.unknown", object));
 
@@ -69,10 +69,6 @@ implements ArgumentType<Result> {
         return EXAMPLES;
     }
 
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
-
     static class TagPredicate
     implements Predicate<ItemStack> {
         private final Tag<Item> tag;
@@ -88,11 +84,6 @@ implements ArgumentType<Result> {
         public boolean test(ItemStack itemStack) {
             return this.tag.contains(itemStack.getItem()) && NbtUtils.compareNbt(this.nbt, itemStack.getTag(), true);
         }
-
-        @Override
-        public /* synthetic */ boolean test(Object object) {
-            return this.test((ItemStack)object);
-        }
     }
 
     static class ItemPredicate
@@ -110,11 +101,6 @@ implements ArgumentType<Result> {
         public boolean test(ItemStack itemStack) {
             return itemStack.getItem() == this.item && NbtUtils.compareNbt(this.nbt, itemStack.getTag(), true);
         }
-
-        @Override
-        public /* synthetic */ boolean test(Object object) {
-            return this.test((ItemStack)object);
-        }
     }
 
     public static interface Result {
diff --git a/src/main/java/net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java b/src/main/java/net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java
index 2ef5d5c2897f2f26537843d23bb6653a717ec89f..1563c1bde518ff42a829d54fbf002b40d796822b 100644
--- a/src/main/java/net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java
+++ b/src/main/java/net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java
@@ -17,6 +17,7 @@ import java.util.Objects;
 import java.util.function.BiConsumer;
 import java.util.function.Predicate;
 import net.minecraft.advancements.Advancement;
+import net.minecraft.advancements.AdvancementProgress;
 import net.minecraft.advancements.CriterionProgress;
 import net.minecraft.advancements.critereon.MinMaxBounds;
 import net.minecraft.advancements.critereon.WrappedMinMaxBounds;
@@ -141,25 +142,25 @@ public class EntitySelectorOptions {
             entitySelectorParser.setLimited(true);
         }, entitySelectorParser -> !entitySelectorParser.isCurrentEntity() && !entitySelectorParser.isLimited(), new TranslatableComponent("argument.entity.options.limit.description"));
         EntitySelectorOptions.register("sort", entitySelectorParser -> {
-            void biConsumer5;
+            BiConsumer<Vec3, List<? extends Entity>> biConsumer5; // MagmaCube - type
             int i = entitySelectorParser.getReader().getCursor();
             String s = entitySelectorParser.getReader().readUnquotedString();
             entitySelectorParser.setSuggestions((suggestionsBuilder, consumer) -> SharedSuggestionProvider.suggest(Arrays.asList("nearest", "furthest", "random", "arbitrary"), suggestionsBuilder));
             switch (s) {
                 case "nearest": {
-                    BiConsumer<Vec3, List<? extends Entity>> biConsumer = EntitySelectorParser.ORDER_NEAREST;
+                    biConsumer5 = EntitySelectorParser.ORDER_NEAREST; // MagmaCube - decompile error
                     break;
                 }
                 case "furthest": {
-                    BiConsumer<Vec3, List<? extends Entity>> biConsumer2 = EntitySelectorParser.ORDER_FURTHEST;
+                    biConsumer5 = EntitySelectorParser.ORDER_FURTHEST; // MagmaCube - decompile error
                     break;
                 }
                 case "random": {
-                    BiConsumer<Vec3, List<? extends Entity>> biConsumer3 = EntitySelectorParser.ORDER_RANDOM;
+                    biConsumer5 = EntitySelectorParser.ORDER_RANDOM; // MagmaCube - decompile error
                     break;
                 }
                 case "arbitrary": {
-                    BiConsumer<Vec3, List<? extends Entity>> biConsumer4 = EntitySelectorParser.ORDER_ARBITRARY;
+                    biConsumer5 = EntitySelectorParser.ORDER_ARBITRARY; // MagmaCube - decompile error
                     break;
                 }
                 default: {
@@ -297,7 +298,7 @@ public class EntitySelectorOptions {
         }, entitySelectorParser -> true, new TranslatableComponent("argument.entity.options.nbt.description"));
         EntitySelectorOptions.register("scores", entitySelectorParser -> {
             StringReader stringReader = entitySelectorParser.getReader();
-            HashMap map = Maps.newHashMap();
+            HashMap<String, MinMaxBounds.Ints> map = Maps.newHashMap(); // MagmaCube - type
             stringReader.expect('{');
             stringReader.skipWhitespace();
             while (stringReader.canRead() && stringReader.peek() != '}') {
@@ -337,7 +338,7 @@ public class EntitySelectorOptions {
         }, entitySelectorParser -> !entitySelectorParser.hasScores(), new TranslatableComponent("argument.entity.options.scores.description"));
         EntitySelectorOptions.register("advancements", entitySelectorParser -> {
             StringReader stringReader = entitySelectorParser.getReader();
-            HashMap map = Maps.newHashMap();
+            HashMap<ResourceLocation, Predicate<AdvancementProgress>> map = Maps.newHashMap(); // MagmaCube - type
             stringReader.expect('{');
             stringReader.skipWhitespace();
             while (stringReader.canRead() && stringReader.peek() != '}') {
@@ -347,7 +348,7 @@ public class EntitySelectorOptions {
                 stringReader.expect('=');
                 stringReader.skipWhitespace();
                 if (stringReader.canRead() && stringReader.peek() == '{') {
-                    HashMap map2 = Maps.newHashMap();
+                    HashMap<String, Predicate<CriterionProgress>> map2 = Maps.newHashMap(); // MagmaCube - decompile error
                     stringReader.skipWhitespace();
                     stringReader.expect('{');
                     stringReader.skipWhitespace();
@@ -367,7 +368,7 @@ public class EntitySelectorOptions {
                     stringReader.expect('}');
                     stringReader.skipWhitespace();
                     map.put(resourceLocation, advancementProgress -> {
-                        for (Map.Entry entry : map2.entrySet()) {
+                        for (Map.Entry<String, Predicate<CriterionProgress>> entry : map2.entrySet()) { // MagmaCube - type
                             CriterionProgress criterionProgress = advancementProgress.getCriterion((String)entry.getKey());
                             if (criterionProgress != null && ((Predicate)entry.getValue()).test(criterionProgress)) continue;
                             return false;
diff --git a/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java b/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java
index 6206eaeced225fa646c70fe0e262b3a1a19e4f28..96534bd5cdb16463b5f46532286ca7a983472ef7 100644
--- a/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java
+++ b/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java
@@ -84,48 +84,50 @@ public class ArgumentTypes
     
     public static void bootStrap() {
         BrigadierArgumentSerializers.bootstrap();
-        register("entity", (Class<ArgumentType>)EntityArgument.class, (ArgumentSerializer<ArgumentType>)new EntityArgument.Serializer());
-        register("game_profile", (Class<ArgumentType>)GameProfileArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)GameProfileArgument::gameProfile));
-        register("block_pos", (Class<ArgumentType>)BlockPosArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)BlockPosArgument::blockPos));
-        register("column_pos", (Class<ArgumentType>)ColumnPosArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)ColumnPosArgument::columnPos));
-        register("vec3", (Class<ArgumentType>)Vec3Argument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)Vec3Argument::vec3));
-        register("vec2", (Class<ArgumentType>)Vec2Argument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)Vec2Argument::vec2));
-        register("block_state", (Class<ArgumentType>)BlockStateArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)BlockStateArgument::block));
-        register("block_predicate", (Class<ArgumentType>)BlockPredicateArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)BlockPredicateArgument::blockPredicate));
-        register("item_stack", (Class<ArgumentType>)ItemArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)ItemArgument::item));
-        register("item_predicate", (Class<ArgumentType>)ItemPredicateArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)ItemPredicateArgument::itemPredicate));
-        register("color", (Class<ArgumentType>)ColorArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)ColorArgument::color));
-        register("component", (Class<ArgumentType>)ComponentArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)ComponentArgument::textComponent));
-        register("message", (Class<ArgumentType>)MessageArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)MessageArgument::message));
-        register("nbt_compound_tag", (Class<ArgumentType>)CompoundTagArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)CompoundTagArgument::compoundTag));
-        register("nbt_tag", (Class<ArgumentType>)NbtTagArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)NbtTagArgument::nbtTag));
-        register("nbt_path", (Class<ArgumentType>)NbtPathArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)NbtPathArgument::nbtPath));
-        register("objective", (Class<ArgumentType>)ObjectiveArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)ObjectiveArgument::objective));
-        register("objective_criteria", (Class<ArgumentType>)ObjectiveCriteriaArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)ObjectiveCriteriaArgument::criteria));
-        register("operation", (Class<ArgumentType>)OperationArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)OperationArgument::operation));
-        register("particle", (Class<ArgumentType>)ParticleArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)ParticleArgument::particle));
-        register("angle", (Class<ArgumentType>)AngleArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)AngleArgument::angle));
-        register("rotation", (Class<ArgumentType>)RotationArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)RotationArgument::rotation));
-        register("scoreboard_slot", (Class<ArgumentType>)ScoreboardSlotArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)ScoreboardSlotArgument::displaySlot));
-        register("score_holder", (Class<ArgumentType>)ScoreHolderArgument.class, (ArgumentSerializer<ArgumentType>)new ScoreHolderArgument.Serializer());
-        register("swizzle", (Class<ArgumentType>)SwizzleArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)SwizzleArgument::swizzle));
-        register("team", (Class<ArgumentType>)TeamArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)TeamArgument::team));
-        register("item_slot", (Class<ArgumentType>)SlotArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)SlotArgument::slot));
-        register("resource_location", (Class<ArgumentType>)ResourceLocationArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)ResourceLocationArgument::id));
-        register("mob_effect", (Class<ArgumentType>)MobEffectArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)MobEffectArgument::effect));
-        register("function", (Class<ArgumentType>)FunctionArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)FunctionArgument::functions));
-        register("entity_anchor", (Class<ArgumentType>)EntityAnchorArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)EntityAnchorArgument::anchor));
-        register("int_range", (Class<ArgumentType>)RangeArgument.Ints.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)RangeArgument::intRange));
-        register("float_range", (Class<ArgumentType>)RangeArgument.Floats.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)RangeArgument::floatRange));
-        register("item_enchantment", (Class<ArgumentType>)ItemEnchantmentArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)ItemEnchantmentArgument::enchantment));
-        register("entity_summon", (Class<ArgumentType>)EntitySummonArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)EntitySummonArgument::id));
-        register("dimension", (Class<ArgumentType>)DimensionArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)DimensionArgument::dimension));
-        register("time", (Class<ArgumentType>)TimeArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)TimeArgument::time));
-        register("uuid", (Class<ArgumentType>)UuidArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)UuidArgument::uuid));
+        // MagmaCube - decompile error
+        register("entity", EntityArgument.class, new EntityArgument.Serializer());
+        register("game_profile", GameProfileArgument.class, new EmptyArgumentSerializer<>(GameProfileArgument::gameProfile));
+        register("block_pos", BlockPosArgument.class, new EmptyArgumentSerializer<>(BlockPosArgument::blockPos));
+        register("column_pos", ColumnPosArgument.class, new EmptyArgumentSerializer<>(ColumnPosArgument::columnPos));
+        register("vec3", Vec3Argument.class, new EmptyArgumentSerializer<>(Vec3Argument::vec3));
+        register("vec2", Vec2Argument.class, new EmptyArgumentSerializer<>(Vec2Argument::vec2));
+        register("block_state", BlockStateArgument.class, new EmptyArgumentSerializer<>(BlockStateArgument::block));
+        register("block_predicate", BlockPredicateArgument.class, new EmptyArgumentSerializer<>(BlockPredicateArgument::blockPredicate));
+        register("item_stack", ItemArgument.class, new EmptyArgumentSerializer<>(ItemArgument::item));
+        register("item_predicate", ItemPredicateArgument.class, new EmptyArgumentSerializer<>(ItemPredicateArgument::itemPredicate));
+        register("color", ColorArgument.class, new EmptyArgumentSerializer<>(ColorArgument::color));
+        register("component", ComponentArgument.class, new EmptyArgumentSerializer<>(ComponentArgument::textComponent));
+        register("message", MessageArgument.class, new EmptyArgumentSerializer<>(MessageArgument::message));
+        register("nbt_compound_tag", CompoundTagArgument.class, new EmptyArgumentSerializer<>(CompoundTagArgument::compoundTag));
+        register("nbt_tag", NbtTagArgument.class, new EmptyArgumentSerializer<>(NbtTagArgument::nbtTag));
+        register("nbt_path", NbtPathArgument.class, new EmptyArgumentSerializer<>(NbtPathArgument::nbtPath));
+        register("objective", ObjectiveArgument.class, new EmptyArgumentSerializer<>(ObjectiveArgument::objective));
+        register("objective_criteria", ObjectiveCriteriaArgument.class, new EmptyArgumentSerializer<>(ObjectiveCriteriaArgument::criteria));
+        register("operation", OperationArgument.class, new EmptyArgumentSerializer<>(OperationArgument::operation));
+        register("particle", ParticleArgument.class, new EmptyArgumentSerializer<>(ParticleArgument::particle));
+        register("angle", AngleArgument.class, new EmptyArgumentSerializer<>(AngleArgument::angle));
+        register("rotation", RotationArgument.class, new EmptyArgumentSerializer<>(RotationArgument::rotation));
+        register("scoreboard_slot", ScoreboardSlotArgument.class, new EmptyArgumentSerializer<>(ScoreboardSlotArgument::displaySlot));
+        register("score_holder", ScoreHolderArgument.class, new ScoreHolderArgument.Serializer());
+        register("swizzle", SwizzleArgument.class, new EmptyArgumentSerializer<>(SwizzleArgument::swizzle));
+        register("team", TeamArgument.class, new EmptyArgumentSerializer<>(TeamArgument::team));
+        register("item_slot", SlotArgument.class, new EmptyArgumentSerializer<>(SlotArgument::slot));
+        register("resource_location", ResourceLocationArgument.class, new EmptyArgumentSerializer<>(ResourceLocationArgument::id));
+        register("mob_effect", MobEffectArgument.class, new EmptyArgumentSerializer<>(MobEffectArgument::effect));
+        register("function", FunctionArgument.class, new EmptyArgumentSerializer<>(FunctionArgument::functions));
+        register("entity_anchor", EntityAnchorArgument.class, new EmptyArgumentSerializer<>(EntityAnchorArgument::anchor));
+        register("int_range", RangeArgument.Ints.class, new EmptyArgumentSerializer<>(RangeArgument::intRange));
+        register("float_range", RangeArgument.Floats.class, new EmptyArgumentSerializer<>(RangeArgument::floatRange));
+        register("item_enchantment", ItemEnchantmentArgument.class, new EmptyArgumentSerializer<>(ItemEnchantmentArgument::enchantment));
+        register("entity_summon", EntitySummonArgument.class, new EmptyArgumentSerializer<>(EntitySummonArgument::id));
+        register("dimension", DimensionArgument.class, new EmptyArgumentSerializer<>(DimensionArgument::dimension));
+        register("time", TimeArgument.class, new EmptyArgumentSerializer<>(TimeArgument::time));
+        register("uuid", UuidArgument.class, new EmptyArgumentSerializer<>(UuidArgument::uuid));
         if (SharedConstants.IS_RUNNING_IN_IDE) {
-            register("test_argument", (Class<ArgumentType>)TestFunctionArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)TestFunctionArgument::testFunctionArgument));
-            register("test_class", (Class<ArgumentType>)TestClassNameArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)TestClassNameArgument::testClassName));
+            register("test_argument", TestFunctionArgument.class, new EmptyArgumentSerializer<>(TestFunctionArgument::testFunctionArgument));
+            register("test_class", TestClassNameArgument.class, new EmptyArgumentSerializer<>(TestClassNameArgument::testClassName));
         }
+        // MagmaCube end - decompile error
     }
     
     @Nullable
@@ -220,8 +222,8 @@ public class ArgumentTypes
     }
     
     public static <T> Set<ArgumentType<?>> findUsedArgumentTypes(final CommandNode<T> commandNode) {
-        final Set<CommandNode<T>> set = (Set<CommandNode<T>>)Sets.newIdentityHashSet();
-        final Set<ArgumentType<?>> set2 = (Set<ArgumentType<?>>)Sets.newHashSet();
+        final Set<CommandNode<T>> set = Sets.newIdentityHashSet(); // MagmaCube - decompile error
+        final Set<ArgumentType<?>> set2 = Sets.newHashSet(); // MagmaCube - decompile error
         findUsedArgumentTypes(commandNode, set2, set);
         return set2;
     }
@@ -233,10 +235,10 @@ public class ArgumentTypes
         if (commandNode instanceof ArgumentCommandNode) {
             set.add((ArgumentType<?>)((ArgumentCommandNode)commandNode).getType());
         }
-        commandNode.getChildren().forEach(commandNode -> findUsedArgumentTypes(commandNode, set, (Set<com.mojang.brigadier.tree.CommandNode<Object>>)set2));
+        commandNode.getChildren().forEach(commandNode1 -> findUsedArgumentTypes(commandNode1, set, set2)); // MagmaCube - decompile error
         final CommandNode<T> commandNode2 = (CommandNode<T>)commandNode.getRedirect();
         if (commandNode2 != null) {
-            findUsedArgumentTypes((com.mojang.brigadier.tree.CommandNode<Object>)commandNode2, set, (Set<com.mojang.brigadier.tree.CommandNode<Object>>)set2);
+            findUsedArgumentTypes(commandNode2, set, set2); // MagmaCube - decompile error
         }
     }
     
diff --git a/src/main/java/net/minecraft/commands/synchronization/brigadier/StringArgumentSerializer.java b/src/main/java/net/minecraft/commands/synchronization/brigadier/StringArgumentSerializer.java
index b62a56ad1271ff53219cef0221993bc6fdc15a80..27ff3b1e5e5a6b14a772897e2e79397c94c9ac1a 100644
--- a/src/main/java/net/minecraft/commands/synchronization/brigadier/StringArgumentSerializer.java
+++ b/src/main/java/net/minecraft/commands/synchronization/brigadier/StringArgumentSerializer.java
@@ -1,6 +1,5 @@
 package net.minecraft.commands.synchronization.brigadier;
 
-import com.mojang.brigadier.arguments.ArgumentType;
 import com.google.gson.JsonObject;
 import net.minecraft.network.FriendlyByteBuf;
 import com.mojang.brigadier.arguments.StringArgumentType;
diff --git a/src/main/java/net/minecraft/core/AxisCycle.java b/src/main/java/net/minecraft/core/AxisCycle.java
index 549cef1129994ca2d07ddeaeb0407165873befa6..cdff1f79bb049f99b265b78af651bedc10642047 100644
--- a/src/main/java/net/minecraft/core/AxisCycle.java
+++ b/src/main/java/net/minecraft/core/AxisCycle.java
@@ -26,12 +26,12 @@ public enum AxisCycle
         
         @Override
         public Direction.Axis cycle(final Direction.Axis axis) {
-            return AxisCycle$2.AXIS_VALUES[Math.floorMod(axis.ordinal() + 1, 3)];
+            return AxisCycle.AXIS_VALUES[Math.floorMod(axis.ordinal() + 1, 3)]; // MagmaCube - decompile error
         }
         
         @Override
         public AxisCycle inverse() {
-            return AxisCycle$2.BACKWARD;
+            return AxisCycle.BACKWARD; // MagmaCube - decompile error
         }
     }, 
     BACKWARD {
@@ -42,12 +42,12 @@ public enum AxisCycle
         
         @Override
         public Direction.Axis cycle(final Direction.Axis axis) {
-            return AxisCycle$3.AXIS_VALUES[Math.floorMod(axis.ordinal() - 1, 3)];
+            return AxisCycle.AXIS_VALUES[Math.floorMod(axis.ordinal() - 1, 3)]; // MagmaCube - decompile error
         }
         
         @Override
         public AxisCycle inverse() {
-            return AxisCycle$3.FORWARD;
+            return AxisCycle.FORWARD; // MagmaCube - decompile error
         }
     };
     
diff --git a/src/main/java/net/minecraft/core/BlockPos.java b/src/main/java/net/minecraft/core/BlockPos.java
index c1f74cf3e477e561af46677e60facf0654a58d1b..32a12545668a4047a876bb398c74b514c5c989e3 100644
--- a/src/main/java/net/minecraft/core/BlockPos.java
+++ b/src/main/java/net/minecraft/core/BlockPos.java
@@ -238,10 +238,6 @@ extends Vec3i {
                 --this.counter;
                 return blockPos;
             }
-
-            protected /* synthetic */ Object computeNext() {
-                return this.computeNext();
-            }
         };
     }
 
@@ -291,10 +287,6 @@ extends Vec3i {
                 }
                 return blockPos;
             }
-
-            protected /* synthetic */ Object computeNext() {
-                return this.computeNext();
-            }
         };
     }
 
@@ -346,10 +338,6 @@ extends Vec3i {
                 ++this.index;
                 return this.cursor.set(i + i5, i2 + i32, i3 + i4);
             }
-
-            protected /* synthetic */ Object computeNext() {
-                return this.computeNext();
-            }
         };
     }
 
@@ -391,43 +379,9 @@ extends Vec3i {
                 ++this.legIndex;
                 return this.cursor;
             }
-
-            protected /* synthetic */ Object computeNext() {
-                return this.computeNext();
-            }
         };
     }
 
-    @Override
-    public /* synthetic */ Vec3i cross(Vec3i vec3i) {
-        return this.cross(vec3i);
-    }
-
-    @Override
-    public /* synthetic */ Vec3i relative(Direction direction, int n) {
-        return this.relative(direction, n);
-    }
-
-    @Override
-    public /* synthetic */ Vec3i below(int n) {
-        return this.below(n);
-    }
-
-    @Override
-    public /* synthetic */ Vec3i below() {
-        return this.below();
-    }
-
-    @Override
-    public /* synthetic */ Vec3i above(int n) {
-        return this.above(n);
-    }
-
-    @Override
-    public /* synthetic */ Vec3i above() {
-        return this.above();
-    }
-
     static {
         PACKED_Z_LENGTH = PACKED_X_LENGTH = 1 + Mth.log2(Mth.smallestEncompassingPowerOfTwo(30000000));
         PACKED_Y_LENGTH = 64 - PACKED_X_LENGTH - PACKED_Z_LENGTH;
@@ -558,35 +512,5 @@ extends Vec3i {
         public BlockPos immutable() {
             return new BlockPos(this);
         }
-
-        @Override
-        public /* synthetic */ Vec3i cross(Vec3i vec3i) {
-            return super.cross(vec3i);
-        }
-
-        @Override
-        public /* synthetic */ Vec3i relative(Direction direction, int n) {
-            return this.relative(direction, n);
-        }
-
-        @Override
-        public /* synthetic */ Vec3i below(int n) {
-            return super.below(n);
-        }
-
-        @Override
-        public /* synthetic */ Vec3i below() {
-            return super.below();
-        }
-
-        @Override
-        public /* synthetic */ Vec3i above(int n) {
-            return super.above(n);
-        }
-
-        @Override
-        public /* synthetic */ Vec3i above() {
-            return super.above();
-        }
     }
 }
diff --git a/src/main/java/net/minecraft/core/BlockSourceImpl.java b/src/main/java/net/minecraft/core/BlockSourceImpl.java
index bc469f6bb87fd4884429d8e2b24b367ab981b3c9..761d237a031ee1e9e5851f52f8864a87412b04d2 100644
--- a/src/main/java/net/minecraft/core/BlockSourceImpl.java
+++ b/src/main/java/net/minecraft/core/BlockSourceImpl.java
@@ -21,17 +21,17 @@ public class BlockSourceImpl implements BlockSource
     
     @Override
     public double x() {
-        return this.pos.getX() + 0.5;
+        return (double) this.pos.getX() + 0.5;
     }
     
     @Override
     public double y() {
-        return this.pos.getY() + 0.5;
+        return (double) this.pos.getY() + 0.5;
     }
     
     @Override
     public double z() {
-        return this.pos.getZ() + 0.5;
+        return (double) this.pos.getZ() + 0.5;
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/core/Direction.java b/src/main/java/net/minecraft/core/Direction.java
index 5bf0310f365cd3aaf6ede317b6d53d49fa26bc6d..bf7e82b09f8d0b15aebb3beb21e0dc633b8e0c27 100644
--- a/src/main/java/net/minecraft/core/Direction.java
+++ b/src/main/java/net/minecraft/core/Direction.java
@@ -330,17 +330,12 @@ public enum Direction implements StringRepresentable
 
         @Override
         public Iterator<Direction> iterator() {
-            return Iterators.forArray((Object[])this.faces);
+            return Iterators.forArray(this.faces); // MagmaCube - decompile error
         }
 
         public Stream<Direction> stream() {
             return Arrays.stream(this.faces);
         }
-
-        @Override
-        public /* synthetic */ boolean test(@Nullable Object object) {
-            return this.test((Direction)object);
-        }
     }
 
     public static enum AxisDirection {
@@ -382,11 +377,6 @@ public enum Direction implements StringRepresentable
             public double choose(double d, double d2, double d3) {
                 return d;
             }
-
-            @Override
-            public /* synthetic */ boolean test(@Nullable Object object) {
-                return super.test((Direction)object);
-            }
         }
         ,
         Y("y"){
@@ -400,11 +390,6 @@ public enum Direction implements StringRepresentable
             public double choose(double d, double d2, double d3) {
                 return d2;
             }
-
-            @Override
-            public /* synthetic */ boolean test(@Nullable Object object) {
-                return super.test((Direction)object);
-            }
         }
         ,
         Z("z"){
@@ -418,11 +403,6 @@ public enum Direction implements StringRepresentable
             public double choose(double d, double d2, double d3) {
                 return d3;
             }
-
-            @Override
-            public /* synthetic */ boolean test(@Nullable Object object) {
-                return super.test((Direction)object);
-            }
         };
 
         private static final Axis[] VALUES;
@@ -486,11 +466,6 @@ public enum Direction implements StringRepresentable
 
         public abstract double choose(double var1, double var3, double var5);
 
-        @Override
-        public /* synthetic */ boolean test(@Nullable Object object) {
-            return this.test((Direction)object);
-        }
-
         static {
             VALUES = Axis.values();
             CODEC = StringRepresentable.fromEnum(Axis::values, Axis::byName);
diff --git a/src/main/java/net/minecraft/core/MappedRegistry.java b/src/main/java/net/minecraft/core/MappedRegistry.java
index 61a6e3bbf89ea4a5bbbb07922011fa0209005f75..bd9f1d941af577c2d57c1ff6359798d2f8b77f26 100644
--- a/src/main/java/net/minecraft/core/MappedRegistry.java
+++ b/src/main/java/net/minecraft/core/MappedRegistry.java
@@ -53,14 +53,17 @@ public class MappedRegistry<T> extends WritableRegistry<T>
         super(resourceKey, lifecycle);
         this.byId = (ObjectList<T>)new ObjectArrayList(256);
         (this.toId = (Object2IntMap<T>)new Object2IntOpenCustomHashMap((Hash.Strategy)Util.identityStrategy())).defaultReturnValue(-1);
-        this.storage = (BiMap<ResourceLocation, T>)HashBiMap.create();
-        this.keyStorage = (BiMap<ResourceKey<T>, T>)HashBiMap.create();
-        this.lifecycles = (Map<T, Lifecycle>)Maps.newIdentityHashMap();
+        // MagmaCube start - decompile error
+        this.storage = HashBiMap.create();
+        this.keyStorage = HashBiMap.create();
+        this.lifecycles = Maps.newIdentityHashMap();
+        // MagmaCube end - decompile error
         this.elementsLifecycle = lifecycle;
     }
     
     public static <T> MapCodec<RegistryEntry<T>> withNameAndId(final ResourceKey<? extends Registry<T>> resourceKey, final MapCodec<T> mapCodec) {
-        return (MapCodec<RegistryEntry<T>>)RecordCodecBuilder.mapCodec(instance -> ((RecordCodecBuilder.Instance)instance).group((App)ResourceLocation.CODEC.xmap((Function)ResourceKey.elementKey((ResourceKey<? extends Registry<Object>>)resourceKey), (Function)ResourceKey::location).fieldOf("name").forGetter(registryEntry -> registryEntry.key), (App)Codec.INT.fieldOf("id").forGetter(registryEntry -> registryEntry.id), (App)mapCodec.forGetter(registryEntry -> registryEntry.value)).apply(instance, RegistryEntry::new));
+        // MagmaCube - decompile error
+        return RecordCodecBuilder.mapCodec(instance -> instance.group(ResourceLocation.CODEC.xmap(ResourceKey.elementKey(resourceKey), ResourceKey::location).fieldOf("name").forGetter(registryEntry -> registryEntry.key), Codec.INT.fieldOf("id").forGetter(registryEntry -> registryEntry.id), mapCodec.forGetter(registryEntry -> registryEntry.value)).apply(instance, RegistryEntry::new));
     }
     
     @Override
@@ -103,7 +106,7 @@ public class MappedRegistry<T> extends WritableRegistry<T>
         final T object2 = (T)this.keyStorage.get(resourceKey);
         final int i2;
         if (object2 == null) {
-            final int i = optionalInt.isPresent() ? optionalInt.getAsInt() : this.nextId;
+            i2 = optionalInt.isPresent() ? optionalInt.getAsInt() : this.nextId; // MagmaCube - decompile error
         }
         else {
             i2 = this.toId.getInt(object2);
@@ -172,7 +175,7 @@ public class MappedRegistry<T> extends WritableRegistry<T>
     
     @Override
     public Set<Map.Entry<ResourceKey<T>, T>> entrySet() {
-        return Collections.unmodifiableMap((Map<? extends ResourceKey<T>, ? extends T>)this.keyStorage).entrySet();
+        return Collections.unmodifiableMap(this.keyStorage).entrySet(); // MagmaCube - decompile error
     }
     
     @Nullable
@@ -184,7 +187,7 @@ public class MappedRegistry<T> extends WritableRegistry<T>
             }
             this.randomCache = collection.toArray(new Object[collection.size()]);
         }
-        return Util.getRandom(this.randomCache, random);
+        return (T) Util.getRandom(this.randomCache, random); // MagmaCube - decompile error
     }
     
     @Override
@@ -193,26 +196,24 @@ public class MappedRegistry<T> extends WritableRegistry<T>
     }
     
     public static <T> Codec<MappedRegistry<T>> networkCodec(final ResourceKey<? extends Registry<T>> resourceKey, final Lifecycle lifecycle, final Codec<T> codec) {
-        final MappedRegistry<T> mappedRegistry2;
-        final Iterator<RegistryEntry<T>> iterator;
-        RegistryEntry<T> registryEntry;
-        final ImmutableList.Builder<RegistryEntry<T>> builder;
-        final Iterator<T> iterator2;
-        T object;
-        return (Codec<MappedRegistry<T>>)withNameAndId((ResourceKey<? extends Registry<Object>>)resourceKey, (com.mojang.serialization.MapCodec<Object>)codec.fieldOf("element")).codec().listOf().xmap(list -> {
-            mappedRegistry2 = (MappedRegistry<T>)new MappedRegistry<Object>((ResourceKey<? extends Registry<T>>)resourceKey, lifecycle);
-            list.iterator();
+        // MagmaCube start - decompile error
+        return withNameAndId(resourceKey, codec.fieldOf("element")).codec().listOf().xmap(list -> {
+            MappedRegistry<T> mappedRegistry2 = new MappedRegistry<>(resourceKey, lifecycle);
+            Iterator<RegistryEntry<T>> iterator = list.iterator();
             while (iterator.hasNext()) {
-                registryEntry = iterator.next();
+                RegistryEntry<T> registryEntry = iterator.next();
+                // MagmaCube end - decompile error
                 mappedRegistry2.registerMapping(registryEntry.id, registryEntry.key, registryEntry.value, lifecycle);
             }
             return mappedRegistry2;
         }, mappedRegistry -> {
-            builder = (ImmutableList.Builder<RegistryEntry<T>>)ImmutableList.builder();
-            mappedRegistry.iterator();
+            // MagmaCube start - decompile error
+            ImmutableList.Builder<RegistryEntry<T>> builder = ImmutableList.builder();
+            Iterator<T> iterator2 = mappedRegistry.iterator();
             while (iterator2.hasNext()) {
-                object = iterator2.next();
-                builder.add(new RegistryEntry(mappedRegistry.getResourceKey(object).get(), mappedRegistry.getId(object), object));
+                T object = iterator2.next();
+                builder.add(new RegistryEntry<>(mappedRegistry.getResourceKey(object).get(), mappedRegistry.getId(object), object));
+                // MagmaCube end - decompile error
             }
             return builder.build();
         });
@@ -223,12 +224,13 @@ public class MappedRegistry<T> extends WritableRegistry<T>
     }
     
     public static <T> Codec<MappedRegistry<T>> directCodec(final ResourceKey<? extends Registry<T>> resourceKey, final Lifecycle lifecycle, final Codec<T> codec) {
-        final MappedRegistry<T> mappedRegistry2;
-        return (Codec<MappedRegistry<T>>)Codec.unboundedMap(ResourceLocation.CODEC.xmap((Function)ResourceKey.elementKey((ResourceKey<? extends Registry<Object>>)resourceKey), (Function)ResourceKey::location), (Codec)codec).xmap(map -> {
-            mappedRegistry2 = (MappedRegistry<T>)new MappedRegistry<Object>((ResourceKey<? extends Registry<T>>)resourceKey, lifecycle);
-            map.forEach((resourceKey, object) -> mappedRegistry2.register(resourceKey, object, lifecycle));
+        // MagmaCube start - decompile error
+        return Codec.unboundedMap(ResourceLocation.CODEC.xmap(ResourceKey.elementKey(resourceKey), ResourceKey::location), codec).xmap(map -> {
+            MappedRegistry<T> mappedRegistry2 = new MappedRegistry<>(resourceKey, lifecycle);
+            map.forEach((resourceKey1, object) -> mappedRegistry2.register(resourceKey1, object, lifecycle));
             return mappedRegistry2;
-        }, mappedRegistry -> ImmutableMap.copyOf((Map)mappedRegistry.keyStorage));
+        }, mappedRegistry -> ImmutableMap.copyOf(mappedRegistry.keyStorage));
+        // MagmaCube end - decompile error
     }
     
     static {
diff --git a/src/main/java/net/minecraft/core/Registry.java b/src/main/java/net/minecraft/core/Registry.java
index 0fee62db2d22200fdce306a497453867164a404f..cee0c4296c4ad9ed150c791882258db13bc42e6f 100644
--- a/src/main/java/net/minecraft/core/Registry.java
+++ b/src/main/java/net/minecraft/core/Registry.java
@@ -249,7 +249,7 @@ IdMap<T> {
         ResourceLocation resourceLocation = resourceKey.location();
         LOADERS.put(resourceLocation, supplier);
         WritableRegistry<WritableRegistry<?>> writableRegistry2 = WRITABLE_REGISTRY;
-        return writableRegistry2.register(resourceKey, writableRegistry, lifecycle);
+        return (R) writableRegistry2.register((ResourceKey) resourceKey, writableRegistry, lifecycle); // MagmaCube - decompile error
     }
 
     protected Registry(ResourceKey<? extends Registry<T>> resourceKey, Lifecycle lifecycle) {
@@ -268,7 +268,7 @@ IdMap<T> {
     public <U> DataResult<Pair<T, U>> decode(DynamicOps<U> dynamicOps, U object2) {
         if (dynamicOps.compressMaps()) {
             return dynamicOps.getNumberValue(object2).flatMap(number -> {
-                Object object = this.byId(number.intValue());
+                T object = this.byId(number.intValue()); // MagmaCube - type
                 if (object == null) {
                     return DataResult.error((String)("Unknown registry id: " + number));
                 }
@@ -348,16 +348,16 @@ IdMap<T> {
     }
 
     public static <V, T extends V> T register(Registry<V> registry, ResourceLocation resourceLocation, T object) {
-        return ((WritableRegistry)registry).register(ResourceKey.create(registry.key, resourceLocation), object, Lifecycle.stable());
+        return (T) ((WritableRegistry)registry).register(ResourceKey.create(registry.key, resourceLocation), object, Lifecycle.stable()); // MagmaCube - decompile error
     }
 
     public static <V, T extends V> T registerMapping(Registry<V> registry, int i, String s, T object) {
-        return ((WritableRegistry)registry).registerMapping(i, ResourceKey.create(registry.key, new ResourceLocation(s)), object, Lifecycle.stable());
+        return (T) ((WritableRegistry)registry).registerMapping(i, ResourceKey.create(registry.key, new ResourceLocation(s)), object, Lifecycle.stable()); // MagmaCube - decompile error
     }
 
     static {
         BuiltinRegistries.bootstrap();
-        LOADERS.forEach((? super K resourceLocation, ? super V supplier) -> {
+        LOADERS.forEach((resourceLocation, supplier) -> { // MagmaCube - decompile error
             if (supplier.get() == null) {
                 LOGGER.error("Unable to bootstrap registry '{}'", resourceLocation);
             }
diff --git a/src/main/java/net/minecraft/core/RegistryAccess.java b/src/main/java/net/minecraft/core/RegistryAccess.java
index 4bec5dc8c0c55ac03287ad45592dbcee34a123e1..a2e28fc4ab68ab885eb6136808f6ad8330e3fb88 100644
--- a/src/main/java/net/minecraft/core/RegistryAccess.java
+++ b/src/main/java/net/minecraft/core/RegistryAccess.java
@@ -12,9 +12,6 @@ import java.util.function.Function;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
-import net.minecraft.core.MappedRegistry;
-import net.minecraft.core.Registry;
-import net.minecraft.core.WritableRegistry;
 import net.minecraft.data.BuiltinRegistries;
 import net.minecraft.resources.RegistryReadOps;
 import net.minecraft.resources.ResourceKey;
@@ -82,12 +79,12 @@ public abstract class RegistryAccess {
     }
 
     private static <E> void addBuiltinElements(RegistryHolder registryHolder, RegistryReadOps.ResourceAccess.MemoryMap memoryMap, RegistryData<E> registryData) {
-        ResourceKey<Registry<E>> resourceKey = registryData.key();
+        ResourceKey<Registry<E>> resourceKey = (ResourceKey<Registry<E>>) registryData.key(); // MagmaCube - decompile error
         boolean flag = !resourceKey.equals(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY) && !resourceKey.equals(Registry.DIMENSION_TYPE_REGISTRY);
         WritableRegistry<E> registry = BUILTIN.registryOrThrow(resourceKey);
         WritableRegistry<E> writableRegistry = registryHolder.registryOrThrow(resourceKey);
-        for (Map.Entry entry : registry.entrySet()) {
-            Object object = entry.getValue();
+        for (Map.Entry<ResourceKey<E>, E> entry : registry.entrySet()) { // MagmaCube - type
+            E object = entry.getValue(); // MagmaCube - type
             if (flag) {
                 memoryMap.add(BUILTIN, entry.getKey(), registryData.codec(), registry.getId(object), object, registry.lifecycle(object));
                 continue;
@@ -97,8 +94,8 @@ public abstract class RegistryAccess {
     }
 
     private static <R extends Registry<?>> void copyBuiltin(RegistryHolder registryHolder, ResourceKey<R> resourceKey) {
-        Registry<Registry<?>> registry = BuiltinRegistries.REGISTRY;
-        Registry<?> registry2 = registry.get(resourceKey);
+        Registry<Registry<?>> registry = (Registry<Registry<?>>) BuiltinRegistries.REGISTRY; // MagmaCube - decompile error
+        Registry<?> registry2 = registry.get((ResourceKey<Registry<?>>) resourceKey); // MagmaCube - decompile error
         if (registry2 == null) {
             throw new IllegalStateException("Missing builtin registry: " + resourceKey);
         }
@@ -132,8 +129,8 @@ public abstract class RegistryAccess {
         private final Map<? extends ResourceKey<? extends Registry<?>>, ? extends MappedRegistry<?>> registries;
 
         private static <E> Codec<RegistryHolder> makeNetworkCodec() {
-            Codec codec = ResourceLocation.CODEC.xmap(ResourceKey::createRegistryKey, ResourceKey::location);
-            Codec codec2 = codec.partialDispatch("type", mappedRegistry -> DataResult.success(mappedRegistry.key()), resourceKey -> RegistryHolder.getNetworkCodec(resourceKey).map(codec -> MappedRegistry.networkCodec(resourceKey, Lifecycle.experimental(), codec)));
+            Codec<ResourceKey<? extends Registry<E>>> codec = ResourceLocation.CODEC.xmap(ResourceKey::createRegistryKey, ResourceKey::location); // MagmaCube - type
+            Codec<MappedRegistry<E>> codec2 = codec.partialDispatch("type", mappedRegistry -> DataResult.success(mappedRegistry.key()), resourceKey -> RegistryHolder.getNetworkCodec(resourceKey).map(codec3 -> MappedRegistry.networkCodec(resourceKey, Lifecycle.experimental(), codec3))); // MagmaCube - type
             UnboundedMapCodec unboundedMapCodec = Codec.unboundedMap((Codec)codec, (Codec)codec2);
             return RegistryHolder.captureMap(unboundedMapCodec);
         }
@@ -143,7 +140,7 @@ public abstract class RegistryAccess {
         }
 
         private static <E> DataResult<? extends Codec<E>> getNetworkCodec(ResourceKey<? extends Registry<E>> resourceKey) {
-            return Optional.ofNullable(REGISTRIES.get(resourceKey)).map(registryData -> registryData.networkCodec()).map(DataResult::success).orElseGet(() -> DataResult.error((String)("Unknown or not serializable registry: " + resourceKey)));
+            return Optional.ofNullable((RegistryData<E>) REGISTRIES.get(resourceKey)).map(registryData -> registryData.networkCodec()).map(DataResult::success).orElseGet(() -> DataResult.error((String)("Unknown or not serializable registry: " + resourceKey))); // MagmaCube - decompile error
         }
 
         public RegistryHolder() {
@@ -160,7 +157,7 @@ public abstract class RegistryAccess {
 
         @Override
         public <E> Optional<WritableRegistry<E>> registry(ResourceKey<? extends Registry<E>> resourceKey) {
-            return Optional.ofNullable(this.registries.get(resourceKey)).map(mappedRegistry -> mappedRegistry);
+            return Optional.ofNullable(this.registries.get(resourceKey)).map(mappedRegistry -> (WritableRegistry<E>) mappedRegistry); // MagmaCube - decompile error
         }
     }
 
diff --git a/src/main/java/net/minecraft/core/SectionPos.java b/src/main/java/net/minecraft/core/SectionPos.java
index f188d431d786c003cfc0aafb1b777d9dc29553ae..419dea5edcb133c0e725e153155ac40cba3d4ab7 100644
--- a/src/main/java/net/minecraft/core/SectionPos.java
+++ b/src/main/java/net/minecraft/core/SectionPos.java
@@ -194,7 +194,6 @@ extends Vec3i {
         return StreamSupport.stream(new Spliterators.AbstractSpliterator<SectionPos>((long)((i4 - i + 1) * (i5 - i2 + 1) * (i6 - i3 + 1)), 64){
             final Cursor3D cursor;
             {
-                super(l, i7);
                 this.cursor = new Cursor3D(i, i2, i3, i4, i5, i6);
             }
 
diff --git a/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java
index 6a1f63a5d1c4b2242b46d57a4ca148fab738b534..f62d8202e3526e7151cfea2941ab02f08b281137 100644
--- a/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java
@@ -1,6 +1,5 @@
 package net.minecraft.core.dispenser;
 
-import java.util.Iterator;
 import java.util.List;
 import net.minecraft.world.entity.Shearable;
 import java.util.function.Predicate;
@@ -9,16 +8,12 @@ import net.minecraft.world.phys.AABB;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.entity.BeehiveBlockEntity;
-import net.minecraft.world.entity.player.Player;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.world.level.block.BeehiveBlock;
-import net.minecraft.world.level.block.Block;
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.Level;
-import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.block.state.properties.Property;
 import net.minecraft.world.level.block.DispenserBlock;
diff --git a/src/main/java/net/minecraft/core/dispenser/ShulkerBoxDispenseBehavior.java b/src/main/java/net/minecraft/core/dispenser/ShulkerBoxDispenseBehavior.java
index 108cd67f88b2e6a23cbd34b4b5d9710faed868d4..f60f13fccaa7f6c4c01a8c9b6da50761a3729260 100644
--- a/src/main/java/net/minecraft/core/dispenser/ShulkerBoxDispenseBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/ShulkerBoxDispenseBehavior.java
@@ -2,8 +2,6 @@ package net.minecraft.core.dispenser;
 
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.item.Item;
-import net.minecraft.world.item.context.BlockPlaceContext;
-import net.minecraft.world.level.Level;
 import net.minecraft.world.item.context.DirectionalPlaceContext;
 import net.minecraft.world.level.block.state.properties.Property;
 import net.minecraft.world.level.block.DispenserBlock;
diff --git a/src/main/java/net/minecraft/core/particles/ParticleTypes.java b/src/main/java/net/minecraft/core/particles/ParticleTypes.java
index e0af66db7167f5574ee2211061a2ab6d05fb8e17..19f275f65687782d524191e44b2d2bfb5376ecd0 100644
--- a/src/main/java/net/minecraft/core/particles/ParticleTypes.java
+++ b/src/main/java/net/minecraft/core/particles/ParticleTypes.java
@@ -166,6 +166,6 @@ public class ParticleTypes
         LANDING_OBSIDIAN_TEAR = register("landing_obsidian_tear", false);
         REVERSE_PORTAL = register("reverse_portal", false);
         WHITE_ASH = register("white_ash", false);
-        CODEC = Registry.PARTICLE_TYPE.dispatch("type", (Function)ParticleOptions::getType, (Function)ParticleType::codec);
+        CODEC = Registry.PARTICLE_TYPE.dispatch("type", ParticleOptions::getType, ParticleType::codec); // MagmaCube - decompile fix
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/data/DataProvider.java b/src/main/java/net/minecraft/data/DataProvider.java
index 0ffeee12f3a3dfcfb39d3ecd86fe371fe0bcbd45..1564ff6cb03f7378cfe27f32ac41b19f1c290908 100644
--- a/src/main/java/net/minecraft/data/DataProvider.java
+++ b/src/main/java/net/minecraft/data/DataProvider.java
@@ -21,7 +21,7 @@ public interface DataProvider
     
     String getName();
     
-    default void save(final Gson gson, final HashCache hashCache, final JsonElement jsonElement, final Path path) throws IOException {
+    static void save(final Gson gson, final HashCache hashCache, final JsonElement jsonElement, final Path path) throws IOException { // MagmaCube - default -> static
         final String s = gson.toJson(jsonElement);
         final String s2 = DataProvider.SHA1.hashUnencodedChars((CharSequence)s).toString();
         if (!Objects.equals(hashCache.getHash(path), s2) || !Files.exists(path, new LinkOption[0])) {
diff --git a/src/main/java/net/minecraft/data/HashCache.java b/src/main/java/net/minecraft/data/HashCache.java
index 047cb6608fbc6b52f05dccda02fa771819c280e8..f0797c42a5670fffde14f25f6ae9cacda1a6682c 100644
--- a/src/main/java/net/minecraft/data/HashCache.java
+++ b/src/main/java/net/minecraft/data/HashCache.java
@@ -52,10 +52,10 @@ public class HashCache {
      * WARNING - void declaration
      */
     public void purgeStaleAndWrite() throws IOException {
-        void writer2;
+        BufferedWriter writer2; // MagmaCube - decompile error
         this.removeStale();
         try {
-            BufferedWriter writer = Files.newBufferedWriter(this.cachePath, new OpenOption[0]);
+            writer2 = Files.newBufferedWriter(this.cachePath, new OpenOption[0]); // MagmaCube - decompile error
         }
         catch (IOException iOException) {
             LOGGER.warn("Unable write cachefile {}: {}", this.cachePath, iOException.toString());
diff --git a/src/main/java/net/minecraft/data/advancements/AdventureAdvancements.java b/src/main/java/net/minecraft/data/advancements/AdventureAdvancements.java
index 72d9e9cd15b4a36ac4124015752b94286c20ec6e..945bed0e1133b44a7550ebf796bd537852923c48 100644
--- a/src/main/java/net/minecraft/data/advancements/AdventureAdvancements.java
+++ b/src/main/java/net/minecraft/data/advancements/AdventureAdvancements.java
@@ -2,7 +2,6 @@ package net.minecraft.data.advancements;
 
 import com.google.common.collect.ImmutableList;
 import net.minecraft.world.level.biome.Biomes;
-import java.util.Iterator;
 import net.minecraft.advancements.critereon.LocationPredicate;
 import net.minecraft.core.Registry;
 import net.minecraft.advancements.critereon.TargetBlockTrigger;
@@ -17,7 +16,6 @@ import net.minecraft.advancements.critereon.MinMaxBounds;
 import net.minecraft.advancements.critereon.SummonedEntityTrigger;
 import net.minecraft.advancements.critereon.ChanneledLightningTrigger;
 import net.minecraft.advancements.critereon.PlayerHurtEntityTrigger;
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.EntityTypeTags;
 import net.minecraft.advancements.critereon.EntityPredicate;
 import net.minecraft.advancements.critereon.DamageSourcePredicate;
@@ -26,11 +24,8 @@ import net.minecraft.advancements.critereon.TradeTrigger;
 import net.minecraft.advancements.AdvancementRewards;
 import net.minecraft.advancements.critereon.LocationTrigger;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.advancements.CriterionTriggerInstance;
 import net.minecraft.advancements.critereon.KilledTrigger;
 import net.minecraft.advancements.RequirementsStrategy;
-import net.minecraft.network.chat.Component;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.advancements.FrameType;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.network.chat.TranslatableComponent;
diff --git a/src/main/java/net/minecraft/data/advancements/NetherAdvancements.java b/src/main/java/net/minecraft/data/advancements/NetherAdvancements.java
index aeb59ae7660302103f5df099901dd4f29186e417..381c653b70277e31c77912b8256c3f538b94482e 100644
--- a/src/main/java/net/minecraft/data/advancements/NetherAdvancements.java
+++ b/src/main/java/net/minecraft/data/advancements/NetherAdvancements.java
@@ -3,20 +3,16 @@ package net.minecraft.data.advancements;
 import net.minecraft.world.level.storage.loot.predicates.LootItemEntityPropertyCondition;
 import net.minecraft.advancements.critereon.EntityEquipmentPredicate;
 import net.minecraft.world.level.storage.loot.LootContext;
-import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
 import com.google.common.collect.ImmutableList;
 import net.minecraft.world.level.biome.Biomes;
 import net.minecraft.advancements.critereon.PlayerInteractTrigger;
 import net.minecraft.world.entity.monster.piglin.PiglinAi;
 import net.minecraft.advancements.critereon.ItemPickedUpByEntityTrigger;
 import net.minecraft.advancements.critereon.EntityFlagsPredicate;
-import net.minecraft.world.item.Item;
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.ItemTags;
 import net.minecraft.advancements.critereon.LootTableTrigger;
 import net.minecraft.advancements.RequirementsStrategy;
 import net.minecraft.advancements.critereon.ItemDurabilityTrigger;
-import net.minecraft.world.level.block.state.properties.Property;
 import net.minecraft.world.level.block.RespawnAnchorBlock;
 import net.minecraft.advancements.critereon.StatePropertiesPredicate;
 import net.minecraft.advancements.critereon.ItemUsedOnBlockTrigger;
@@ -40,11 +36,8 @@ import net.minecraft.advancements.critereon.DamageSourcePredicate;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.advancements.AdvancementRewards;
 import net.minecraft.world.item.Items;
-import net.minecraft.advancements.CriterionTriggerInstance;
 import net.minecraft.advancements.critereon.ChangeDimensionTrigger;
 import net.minecraft.world.level.Level;
-import net.minecraft.network.chat.Component;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.advancements.FrameType;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.network.chat.TranslatableComponent;
diff --git a/src/main/java/net/minecraft/data/advancements/StoryAdvancements.java b/src/main/java/net/minecraft/data/advancements/StoryAdvancements.java
index 7ac8517423ff91067d626c0f715bd9701b069311..0eb0fedf4a1dd088e82f50e2d2fa2c8a2c8e50ef 100644
--- a/src/main/java/net/minecraft/data/advancements/StoryAdvancements.java
+++ b/src/main/java/net/minecraft/data/advancements/StoryAdvancements.java
@@ -11,15 +11,10 @@ import net.minecraft.advancements.critereon.DamageSourcePredicate;
 import net.minecraft.advancements.critereon.DamagePredicate;
 import net.minecraft.advancements.critereon.EnchantedItemTrigger;
 import net.minecraft.advancements.RequirementsStrategy;
-import net.minecraft.world.item.Item;
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.ItemTags;
 import net.minecraft.advancements.critereon.ItemPredicate;
 import net.minecraft.world.item.Items;
-import net.minecraft.advancements.CriterionTriggerInstance;
 import net.minecraft.advancements.critereon.InventoryChangeTrigger;
-import net.minecraft.network.chat.Component;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.advancements.FrameType;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.network.chat.TranslatableComponent;
diff --git a/src/main/java/net/minecraft/data/advancements/TheEndAdvancements.java b/src/main/java/net/minecraft/data/advancements/TheEndAdvancements.java
index d684620333572ce40440939919754d1fece09ef0..6de97e8a242d9dd80ddd61df6b151b1d11dd9425 100644
--- a/src/main/java/net/minecraft/data/advancements/TheEndAdvancements.java
+++ b/src/main/java/net/minecraft/data/advancements/TheEndAdvancements.java
@@ -14,11 +14,8 @@ import net.minecraft.world.item.Items;
 import net.minecraft.advancements.critereon.KilledTrigger;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.advancements.critereon.EntityPredicate;
-import net.minecraft.advancements.CriterionTriggerInstance;
 import net.minecraft.advancements.critereon.ChangeDimensionTrigger;
 import net.minecraft.world.level.Level;
-import net.minecraft.network.chat.Component;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.advancements.FrameType;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.network.chat.TranslatableComponent;
diff --git a/src/main/java/net/minecraft/data/info/BlockListReport.java b/src/main/java/net/minecraft/data/info/BlockListReport.java
index 477a1b7aa65f763594e8e6039c2fb3c53ec07569..5a69cd34f0e7ff7b6221ddec4612ad8b7e3e9b86 100644
--- a/src/main/java/net/minecraft/data/info/BlockListReport.java
+++ b/src/main/java/net/minecraft/data/info/BlockListReport.java
@@ -3,10 +3,9 @@ package net.minecraft.data.info;
 import com.google.gson.GsonBuilder;
 import java.io.IOException;
 import java.nio.file.Path;
-import com.google.common.collect.UnmodifiableIterator;
+
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.resources.ResourceLocation;
-import java.util.Iterator;
 import net.minecraft.world.level.block.state.BlockState;
 import com.google.gson.JsonElement;
 import net.minecraft.Util;
diff --git a/src/main/java/net/minecraft/data/info/CommandsReport.java b/src/main/java/net/minecraft/data/info/CommandsReport.java
index 894e48f1d2ecb92e8f9a94166a9b6b894aa7ae6d..fdc9d5d7f60da7b5e8e27e6a3c5726dd5c615679 100644
--- a/src/main/java/net/minecraft/data/info/CommandsReport.java
+++ b/src/main/java/net/minecraft/data/info/CommandsReport.java
@@ -6,7 +6,6 @@ import com.mojang.brigadier.CommandDispatcher;
 import java.nio.file.Path;
 import com.google.gson.JsonElement;
 import net.minecraft.commands.CommandSourceStack;
-import com.mojang.brigadier.tree.CommandNode;
 import net.minecraft.commands.synchronization.ArgumentTypes;
 import net.minecraft.commands.Commands;
 import net.minecraft.data.HashCache;
diff --git a/src/main/java/net/minecraft/data/loot/ChestLoot.java b/src/main/java/net/minecraft/data/loot/ChestLoot.java
index b33325c335c8bd81d388cb001ff2ee5f761a90b8..6e6339c916ea2023768c4093e38818973bb1f60a 100644
--- a/src/main/java/net/minecraft/data/loot/ChestLoot.java
+++ b/src/main/java/net/minecraft/data/loot/ChestLoot.java
@@ -71,9 +71,4 @@ implements Consumer<BiConsumer<ResourceLocation, LootTable.Builder>> {
         biConsumer.accept(BuiltInLootTables.WOODLAND_MANSION, LootTable.lootTable().withPool(LootPool.lootPool().setRolls(RandomValueBounds.between(1.0f, 3.0f)).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.LEAD).setWeight(20)).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.GOLDEN_APPLE).setWeight(15)).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.ENCHANTED_GOLDEN_APPLE).setWeight(2)).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.MUSIC_DISC_13).setWeight(15)).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.MUSIC_DISC_CAT).setWeight(15)).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.NAME_TAG).setWeight(20)).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.CHAINMAIL_CHESTPLATE).setWeight(10)).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.DIAMOND_HOE).setWeight(15)).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.DIAMOND_CHESTPLATE).setWeight(5)).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.BOOK).setWeight(10)).apply(EnchantRandomlyFunction.randomApplicableEnchantment()))).withPool(LootPool.lootPool().setRolls(RandomValueBounds.between(1.0f, 4.0f)).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.IRON_INGOT).setWeight(10)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(1.0f, 4.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.GOLD_INGOT).setWeight(5)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(1.0f, 4.0f)))).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.BREAD).setWeight(20)).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.WHEAT).setWeight(20)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(1.0f, 4.0f)))).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.BUCKET).setWeight(10)).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.REDSTONE).setWeight(15)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(1.0f, 4.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.COAL).setWeight(15)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(1.0f, 4.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.MELON_SEEDS).setWeight(10)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(2.0f, 4.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.PUMPKIN_SEEDS).setWeight(10)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(2.0f, 4.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.BEETROOT_SEEDS).setWeight(10)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(2.0f, 4.0f))))).withPool(LootPool.lootPool().setRolls(ConstantIntValue.exactly(3)).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.BONE).setWeight(10)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(1.0f, 8.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.GUNPOWDER).setWeight(10)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(1.0f, 8.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.ROTTEN_FLESH).setWeight(10)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(1.0f, 8.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.STRING).setWeight(10)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(1.0f, 8.0f))))));
         biConsumer.accept(BuiltInLootTables.RUINED_PORTAL, LootTable.lootTable().withPool(LootPool.lootPool().setRolls(RandomValueBounds.between(4.0f, 8.0f)).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.OBSIDIAN).setWeight(40)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(1.0f, 2.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.FLINT).setWeight(40)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(1.0f, 4.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.IRON_NUGGET).setWeight(40)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(9.0f, 18.0f)))).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.FLINT_AND_STEEL).setWeight(40)).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.FIRE_CHARGE).setWeight(40)).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.GOLDEN_APPLE).setWeight(15)).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.GOLD_NUGGET).setWeight(15)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(4.0f, 24.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.GOLDEN_SWORD).setWeight(15)).apply(EnchantRandomlyFunction.randomApplicableEnchantment())).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.GOLDEN_AXE).setWeight(15)).apply(EnchantRandomlyFunction.randomApplicableEnchantment())).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.GOLDEN_HOE).setWeight(15)).apply(EnchantRandomlyFunction.randomApplicableEnchantment())).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.GOLDEN_SHOVEL).setWeight(15)).apply(EnchantRandomlyFunction.randomApplicableEnchantment())).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.GOLDEN_PICKAXE).setWeight(15)).apply(EnchantRandomlyFunction.randomApplicableEnchantment())).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.GOLDEN_BOOTS).setWeight(15)).apply(EnchantRandomlyFunction.randomApplicableEnchantment())).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.GOLDEN_CHESTPLATE).setWeight(15)).apply(EnchantRandomlyFunction.randomApplicableEnchantment())).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.GOLDEN_HELMET).setWeight(15)).apply(EnchantRandomlyFunction.randomApplicableEnchantment())).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.GOLDEN_LEGGINGS).setWeight(15)).apply(EnchantRandomlyFunction.randomApplicableEnchantment())).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.GLISTERING_MELON_SLICE).setWeight(5)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(4.0f, 12.0f)))).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.GOLDEN_HORSE_ARMOR).setWeight(5)).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.LIGHT_WEIGHTED_PRESSURE_PLATE).setWeight(5)).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.GOLDEN_CARROT).setWeight(5)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(4.0f, 12.0f)))).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.CLOCK).setWeight(5)).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.GOLD_INGOT).setWeight(5)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(2.0f, 8.0f)))).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.BELL).setWeight(1)).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.ENCHANTED_GOLDEN_APPLE).setWeight(1)).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.GOLD_BLOCK).setWeight(1)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(1.0f, 2.0f))))));
     }
-
-    @Override
-    public /* synthetic */ void accept(Object object) {
-        this.accept((BiConsumer)object);
-    }
 }
diff --git a/src/main/java/net/minecraft/data/loot/EntityLoot.java b/src/main/java/net/minecraft/data/loot/EntityLoot.java
index 48792f93a86fcce646a0b6dd1316cab848e85e26..3776d4a4368ea906f10b967825eb622dc99116e5 100644
--- a/src/main/java/net/minecraft/data/loot/EntityLoot.java
+++ b/src/main/java/net/minecraft/data/loot/EntityLoot.java
@@ -170,9 +170,4 @@ implements Consumer<BiConsumer<ResourceLocation, LootTable.Builder>> {
     private void add(ResourceLocation resourceLocation, LootTable.Builder builder) {
         this.map.put(resourceLocation, builder);
     }
-
-    @Override
-    public /* synthetic */ void accept(Object object) {
-        this.accept((BiConsumer)object);
-    }
 }
diff --git a/src/main/java/net/minecraft/data/loot/FishingLoot.java b/src/main/java/net/minecraft/data/loot/FishingLoot.java
index c88e207cbd88676d576202f633ee02ce35e4dab1..ee6606873891d6938e0a772a44319aee78825472 100644
--- a/src/main/java/net/minecraft/data/loot/FishingLoot.java
+++ b/src/main/java/net/minecraft/data/loot/FishingLoot.java
@@ -46,9 +46,4 @@ implements Consumer<BiConsumer<ResourceLocation, LootTable.Builder>> {
         biConsumer.accept(BuiltInLootTables.FISHING_JUNK, LootTable.lootTable().withPool(LootPool.lootPool().add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Blocks.LILY_PAD).setWeight(17)).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.LEATHER_BOOTS).setWeight(10)).apply(SetItemDamageFunction.setDamage(RandomValueBounds.between(0.0f, 0.9f)))).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.LEATHER).setWeight(10)).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.BONE).setWeight(10)).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.POTION).setWeight(10)).apply(SetNbtFunction.setTag(Util.make(new CompoundTag(), compoundTag -> compoundTag.putString("Potion", "minecraft:water"))))).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.STRING).setWeight(5)).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.FISHING_ROD).setWeight(2)).apply(SetItemDamageFunction.setDamage(RandomValueBounds.between(0.0f, 0.9f)))).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.BOWL).setWeight(10)).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.STICK).setWeight(5)).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.INK_SAC).setWeight(1)).apply(SetItemCountFunction.setCount(ConstantIntValue.exactly(10)))).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Blocks.TRIPWIRE_HOOK).setWeight(10)).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.ROTTEN_FLESH).setWeight(10)).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Blocks.BAMBOO).when(IN_JUNGLE.or(IN_JUNGLE_HILLS).or(IN_JUNGLE_EDGE).or(IN_BAMBOO_JUNGLE).or(IN_MODIFIED_JUNGLE).or(IN_MODIFIED_JUNGLE_EDGE).or(IN_BAMBOO_JUNGLE_HILLS))).setWeight(10))));
         biConsumer.accept(BuiltInLootTables.FISHING_TREASURE, LootTable.lootTable().withPool(LootPool.lootPool().add(LootItem.lootTableItem(Items.NAME_TAG)).add(LootItem.lootTableItem(Items.SADDLE)).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.BOW).apply(SetItemDamageFunction.setDamage(RandomValueBounds.between(0.0f, 0.25f)))).apply(EnchantWithLevelsFunction.enchantWithLevels(ConstantIntValue.exactly(30)).allowTreasure())).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.FISHING_ROD).apply(SetItemDamageFunction.setDamage(RandomValueBounds.between(0.0f, 0.25f)))).apply(EnchantWithLevelsFunction.enchantWithLevels(ConstantIntValue.exactly(30)).allowTreasure())).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.BOOK).apply(EnchantWithLevelsFunction.enchantWithLevels(ConstantIntValue.exactly(30)).allowTreasure())).add(LootItem.lootTableItem(Items.NAUTILUS_SHELL))));
     }
-
-    @Override
-    public /* synthetic */ void accept(Object object) {
-        this.accept((BiConsumer)object);
-    }
 }
diff --git a/src/main/java/net/minecraft/data/loot/GiftLoot.java b/src/main/java/net/minecraft/data/loot/GiftLoot.java
index 6c863eba7172281b47e4605520309507a5d41799..4a4e22594e9505ec97bfba6692f351ecaeba0c17 100644
--- a/src/main/java/net/minecraft/data/loot/GiftLoot.java
+++ b/src/main/java/net/minecraft/data/loot/GiftLoot.java
@@ -36,9 +36,4 @@ implements Consumer<BiConsumer<ResourceLocation, LootTable.Builder>> {
         biConsumer.accept(BuiltInLootTables.TOOLSMITH_GIFT, LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add(LootItem.lootTableItem(Items.STONE_PICKAXE)).add(LootItem.lootTableItem(Items.STONE_AXE)).add(LootItem.lootTableItem(Items.STONE_HOE)).add(LootItem.lootTableItem(Items.STONE_SHOVEL))));
         biConsumer.accept(BuiltInLootTables.WEAPONSMITH_GIFT, LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add(LootItem.lootTableItem(Items.STONE_AXE)).add(LootItem.lootTableItem(Items.GOLDEN_AXE)).add(LootItem.lootTableItem(Items.IRON_AXE))));
     }
-
-    @Override
-    public /* synthetic */ void accept(Object object) {
-        this.accept((BiConsumer)object);
-    }
 }
diff --git a/src/main/java/net/minecraft/data/loot/PiglinBarterLoot.java b/src/main/java/net/minecraft/data/loot/PiglinBarterLoot.java
index 2cec21b2f71e4fd00df08ad7a36d1cc5e048061c..2f48a8b3fcd1d277e3487b93d4890ab39f4642c2 100644
--- a/src/main/java/net/minecraft/data/loot/PiglinBarterLoot.java
+++ b/src/main/java/net/minecraft/data/loot/PiglinBarterLoot.java
@@ -25,9 +25,4 @@ implements Consumer<BiConsumer<ResourceLocation, LootTable.Builder>> {
     public void accept(BiConsumer<ResourceLocation, LootTable.Builder> biConsumer) {
         biConsumer.accept(BuiltInLootTables.PIGLIN_BARTERING, LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.BOOK).setWeight(5)).apply(new EnchantRandomlyFunction.Builder().withEnchantment(Enchantments.SOUL_SPEED))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.IRON_BOOTS).setWeight(8)).apply(new EnchantRandomlyFunction.Builder().withEnchantment(Enchantments.SOUL_SPEED))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.POTION).setWeight(8)).apply(SetNbtFunction.setTag(Util.make(new CompoundTag(), compoundTag -> compoundTag.putString("Potion", "minecraft:fire_resistance"))))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.SPLASH_POTION).setWeight(8)).apply(SetNbtFunction.setTag(Util.make(new CompoundTag(), compoundTag -> compoundTag.putString("Potion", "minecraft:fire_resistance"))))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.POTION).setWeight(10)).apply(SetNbtFunction.setTag(Util.make(new CompoundTag(), compoundTag -> compoundTag.putString("Potion", "minecraft:water"))))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.IRON_NUGGET).setWeight(10)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(10.0f, 36.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.ENDER_PEARL).setWeight(10)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(2.0f, 4.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.STRING).setWeight(20)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(3.0f, 9.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.QUARTZ).setWeight(20)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(5.0f, 12.0f)))).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.OBSIDIAN).setWeight(40)).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.CRYING_OBSIDIAN).setWeight(40)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(1.0f, 3.0f)))).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.FIRE_CHARGE).setWeight(40)).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.LEATHER).setWeight(40)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(2.0f, 4.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.SOUL_SAND).setWeight(40)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(2.0f, 8.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.NETHER_BRICK).setWeight(40)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(2.0f, 8.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.SPECTRAL_ARROW).setWeight(40)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(6.0f, 12.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.GRAVEL).setWeight(40)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(8.0f, 16.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.BLACKSTONE).setWeight(40)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(8.0f, 16.0f))))));
     }
-
-    @Override
-    public /* synthetic */ void accept(Object object) {
-        this.accept((BiConsumer)object);
-    }
 }
diff --git a/src/main/java/net/minecraft/data/models/blockstates/Condition.java b/src/main/java/net/minecraft/data/models/blockstates/Condition.java
index 646f15ff7f1b298a04f6d3aef0c9e110990a247f..790d00f1fb3f825a590406e0f4eadeb30b183048 100644
--- a/src/main/java/net/minecraft/data/models/blockstates/Condition.java
+++ b/src/main/java/net/minecraft/data/models/blockstates/Condition.java
@@ -69,11 +69,6 @@ extends Supplier<JsonElement> {
                 throw new IllegalStateException("Properties " + list + " are missing from " + stateDefinition);
             }
         }
-
-        @Override
-        public /* synthetic */ Object get() {
-            return this.get();
-        }
     }
 
     public static class CompositeCondition
@@ -99,11 +94,6 @@ extends Supplier<JsonElement> {
             jsonObject.add(this.operation.id, (JsonElement)jsonArray);
             return jsonObject;
         }
-
-        @Override
-        public /* synthetic */ Object get() {
-            return this.get();
-        }
     }
 
     public static enum Operation {
diff --git a/src/main/java/net/minecraft/data/models/blockstates/MultiVariantGenerator.java b/src/main/java/net/minecraft/data/models/blockstates/MultiVariantGenerator.java
index 2ae8c2cf0566126f6cae3e94c411ad35c07d15c8..11956469ff08ae88fa21f54046aaec72e007134e 100644
--- a/src/main/java/net/minecraft/data/models/blockstates/MultiVariantGenerator.java
+++ b/src/main/java/net/minecraft/data/models/blockstates/MultiVariantGenerator.java
@@ -46,7 +46,7 @@ implements BlockStateGenerator {
 
     @Override
     public JsonElement get() {
-        Stream<Object> stream = Stream.of(Pair.of(Selector.empty(), this.baseVariants));
+        Stream<Pair> stream = Stream.of(Pair.of(Selector.empty(), this.baseVariants)); // MagmaCube - type
         for (PropertyDispatch propertyDispatch : this.declaredPropertySets) {
             Map<Selector, List<Variant>> map = propertyDispatch.getEntries();
             stream = stream.flatMap(pair -> map.entrySet().stream().map(entry -> {
@@ -55,7 +55,7 @@ implements BlockStateGenerator {
                 return Pair.of(selector, list);
             }));
         }
-        TreeMap map2 = new TreeMap();
+        TreeMap<String, JsonElement> map2 = new TreeMap(); // MagmaCube - type
         stream.forEach(pair -> map2.put(((Selector)pair.getFirst()).getKey(), Variant.convertList((List)pair.getSecond())));
         JsonObject jsonObject2 = new JsonObject();
         jsonObject2.add("variants", (JsonElement)Util.make(new JsonObject(), jsonObject -> map2.forEach((arg_0, arg_1) -> ((JsonObject)jsonObject).add(arg_0, arg_1))));
@@ -82,11 +82,6 @@ implements BlockStateGenerator {
     }
 
     public static MultiVariantGenerator multiVariant(Block block, Variant ... variants) {
-        return new MultiVariantGenerator(block, (List<Variant>)ImmutableList.copyOf((Object[])variants));
-    }
-
-    @Override
-    public /* synthetic */ Object get() {
-        return this.get();
+        return new MultiVariantGenerator(block, ImmutableList.copyOf(variants)); // MagmaCube - decompile error
     }
 }
diff --git a/src/main/java/net/minecraft/data/models/blockstates/Variant.java b/src/main/java/net/minecraft/data/models/blockstates/Variant.java
index b261ccc4ebc2134773d873b98286a52960424b44..7efcbecfa4056612788b277eadc08b7a1f5bd87c 100644
--- a/src/main/java/net/minecraft/data/models/blockstates/Variant.java
+++ b/src/main/java/net/minecraft/data/models/blockstates/Variant.java
@@ -13,7 +13,7 @@ public class Variant implements Supplier<JsonElement>
     private final Map<VariantProperty<?>, VariantProperty.Value> values;
     
     public Variant() {
-        this.values = (Map<VariantProperty<?>, VariantProperty.Value>)Maps.newLinkedHashMap();
+        this.values = Maps.newLinkedHashMap(); // MagmaCube - decompile fix
     }
     
     public <T> Variant with(final VariantProperty<T> variantProperty, final T object) {
diff --git a/src/main/java/net/minecraft/data/models/model/TextureMapping.java b/src/main/java/net/minecraft/data/models/model/TextureMapping.java
index 5474e03c848f059a51dc668bc3d85bde5b488da1..2dca926d7cd918804bab62c1e41b3ff52f6539a4 100644
--- a/src/main/java/net/minecraft/data/models/model/TextureMapping.java
+++ b/src/main/java/net/minecraft/data/models/model/TextureMapping.java
@@ -3,7 +3,7 @@ package net.minecraft.data.models.model;
 import net.minecraft.core.Registry;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.level.block.Block;
-import java.util.Collection;
+
 import java.util.stream.Stream;
 import com.google.common.collect.Sets;
 import com.google.common.collect.Maps;
@@ -17,8 +17,8 @@ public class TextureMapping
     private final Set<TextureSlot> forcedSlots;
     
     public TextureMapping() {
-        this.slots = (Map<TextureSlot, ResourceLocation>)Maps.newHashMap();
-        this.forcedSlots = (Set<TextureSlot>)Sets.newHashSet();
+        this.slots = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.forcedSlots = Sets.newHashSet(); // MagmaCube - decompile fix
     }
     
     public TextureMapping put(final TextureSlot textureSlot, final ResourceLocation resourceLocation) {
diff --git a/src/main/java/net/minecraft/data/tags/EntityTypeTagsProvider.java b/src/main/java/net/minecraft/data/tags/EntityTypeTagsProvider.java
index f604a80090a14c90961124b6c63f816c1f4e2565..346f8dfc4902b4184e778a6fa1ea46d79c51c315 100644
--- a/src/main/java/net/minecraft/data/tags/EntityTypeTagsProvider.java
+++ b/src/main/java/net/minecraft/data/tags/EntityTypeTagsProvider.java
@@ -2,8 +2,6 @@ package net.minecraft.data.tags;
 
 import java.nio.file.Path;
 import net.minecraft.resources.ResourceLocation;
-import net.minecraft.world.entity.animal.Bee;
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.EntityTypeTags;
 import net.minecraft.core.Registry;
 import net.minecraft.data.DataGenerator;
@@ -19,7 +17,7 @@ public class EntityTypeTagsProvider extends TagsProvider<EntityType<?>>
     protected void addTags() {
         this.tag(EntityTypeTags.SKELETONS).add(EntityType.SKELETON, EntityType.STRAY, EntityType.WITHER_SKELETON);
         this.tag(EntityTypeTags.RAIDERS).add(EntityType.EVOKER, EntityType.PILLAGER, EntityType.RAVAGER, EntityType.VINDICATOR, EntityType.ILLUSIONER, EntityType.WITCH);
-        ((TagsProvider<EntityType<Bee>>)this).tag((Tag.Named<EntityType<Bee>>)EntityTypeTags.BEEHIVE_INHABITORS).add(EntityType.BEE);
+        this.tag(EntityTypeTags.BEEHIVE_INHABITORS).add(EntityType.BEE); // MagmaCube - decompile fix
         this.tag(EntityTypeTags.ARROWS).add(EntityType.ARROW, EntityType.SPECTRAL_ARROW);
         this.tag(EntityTypeTags.IMPACT_PROJECTILES).addTag(EntityTypeTags.ARROWS).add(EntityType.SNOWBALL, EntityType.FIREBALL, EntityType.SMALL_FIREBALL, EntityType.EGG, EntityType.TRIDENT, EntityType.DRAGON_FIREBALL, EntityType.WITHER_SKULL);
     }
diff --git a/src/main/java/net/minecraft/data/tags/ItemTagsProvider.java b/src/main/java/net/minecraft/data/tags/ItemTagsProvider.java
index 6c053cff817bf1d4c01ab70d7809f02dd58c60c1..555cc2ffa79d4a97a02d79d75cb69b51a00906f0 100644
--- a/src/main/java/net/minecraft/data/tags/ItemTagsProvider.java
+++ b/src/main/java/net/minecraft/data/tags/ItemTagsProvider.java
@@ -2,7 +2,6 @@ package net.minecraft.data.tags;
 
 import java.nio.file.Path;
 import net.minecraft.resources.ResourceLocation;
-import java.util.function.Consumer;
 import net.minecraft.world.item.Items;
 import net.minecraft.tags.ItemTags;
 import net.minecraft.tags.BlockTags;
diff --git a/src/main/java/net/minecraft/data/worldgen/BastionHoglinStablePools.java b/src/main/java/net/minecraft/data/worldgen/BastionHoglinStablePools.java
index 38212901c6c4ff73720339413cde59f845ad62fd..ae23339e142f55dfbdd593bd67875c4eaa7bda6f 100644
--- a/src/main/java/net/minecraft/data/worldgen/BastionHoglinStablePools.java
+++ b/src/main/java/net/minecraft/data/worldgen/BastionHoglinStablePools.java
@@ -14,18 +14,20 @@ public class BastionHoglinStablePools
     }
     
     static {
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/starting_pieces"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/starting_stairs_0", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/starting_stairs_1", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/starting_stairs_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/starting_stairs_3", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/starting_stairs_4", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/mirrored_starting_pieces"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/stairs_0_mirrored", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/stairs_1_mirrored", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/stairs_2_mirrored", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/stairs_3_mirrored", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/stairs_4_mirrored", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/wall_bases"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/walls/wall_base", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/walls"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/walls/side_wall_0", ProcessorLists.SIDE_WALL_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/walls/side_wall_1", ProcessorLists.SIDE_WALL_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/stairs"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_1_0", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_1_1", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_1_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_1_3", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_1_4", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_2_0", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_2_1", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_2_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_2_3", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_2_4", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_3_0", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_3_1", ProcessorLists.STABLE_DEGRADATION), 1), (Object[])new Pair[] { Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_3_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_3_3", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_3_4", ProcessorLists.STABLE_DEGRADATION), 1) }), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/small_stables/inner"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/small_stables/inner_0", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/small_stables/inner_1", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/small_stables/inner_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/small_stables/inner_3", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/small_stables/outer"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/small_stables/outer_0", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/small_stables/outer_1", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/small_stables/outer_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/small_stables/outer_3", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/large_stables/inner"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/inner_0", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/inner_1", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/inner_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/inner_3", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/inner_4", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/large_stables/outer"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/outer_0", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/outer_1", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/outer_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/outer_3", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/outer_4", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/posts"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/posts/stair_post", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/posts/end_post", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/ramparts"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/ramparts/ramparts_1", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/ramparts/ramparts_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/ramparts/ramparts_3", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/rampart_plates"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/rampart_plates/rampart_plate_1", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/connectors"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/connectors/end_post_connector", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        // MagmaCube start - decompile error
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/starting_pieces"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/starting_stairs_0", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/starting_stairs_1", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/starting_stairs_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/starting_stairs_3", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/starting_stairs_4", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/mirrored_starting_pieces"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/stairs_0_mirrored", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/stairs_1_mirrored", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/stairs_2_mirrored", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/stairs_3_mirrored", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/stairs_4_mirrored", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/wall_bases"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/walls/wall_base", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/walls"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/walls/side_wall_0", ProcessorLists.SIDE_WALL_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/walls/side_wall_1", ProcessorLists.SIDE_WALL_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/stairs"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_1_0", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_1_1", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_1_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_1_3", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_1_4", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_2_0", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_2_1", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_2_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_2_3", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_2_4", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_3_0", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_3_1", ProcessorLists.STABLE_DEGRADATION), 1), new Pair[] { Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_3_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_3_3", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_3_4", ProcessorLists.STABLE_DEGRADATION), 1) }), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/small_stables/inner"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/small_stables/inner_0", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/small_stables/inner_1", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/small_stables/inner_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/small_stables/inner_3", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/small_stables/outer"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/small_stables/outer_0", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/small_stables/outer_1", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/small_stables/outer_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/small_stables/outer_3", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/large_stables/inner"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/inner_0", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/inner_1", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/inner_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/inner_3", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/inner_4", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/large_stables/outer"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/outer_0", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/outer_1", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/outer_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/outer_3", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/outer_4", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/posts"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/posts/stair_post", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/posts/end_post", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/ramparts"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/ramparts/ramparts_1", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/ramparts/ramparts_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/ramparts/ramparts_3", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/rampart_plates"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/rampart_plates/rampart_plate_1", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/connectors"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/connectors/end_post_connector", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        // MagmaCube end - decompile error
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/data/worldgen/BastionHousingUnitsPools.java b/src/main/java/net/minecraft/data/worldgen/BastionHousingUnitsPools.java
index d172811729ab67f369aa9ec9341a15be1279491f..406e5dec041443d1813e029823a7624798b41bbf 100644
--- a/src/main/java/net/minecraft/data/worldgen/BastionHousingUnitsPools.java
+++ b/src/main/java/net/minecraft/data/worldgen/BastionHousingUnitsPools.java
@@ -14,20 +14,22 @@ public class BastionHousingUnitsPools
     }
     
     static {
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/center_pieces"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/center_pieces/center_0", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/center_pieces/center_1", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/center_pieces/center_2", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/pathways"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/pathways/pathway_0", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/pathways/pathway_wall_0", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/walls/wall_bases"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/walls/wall_base", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/walls/connected_wall", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/stages/stage_0"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/stages/stage_0_0", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_0_1", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_0_2", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_0_3", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/stages/stage_1"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/stages/stage_1_0", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_1_1", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_1_2", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_1_3", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/stages/rot/stage_1"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/stages/rot/stage_1_0", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/stages/stage_2"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/stages/stage_2_0", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_2_1", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/stages/stage_3"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/stages/stage_3_0", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_3_1", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_3_2", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_3_3", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/fillers/stage_0"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/fillers/stage_0", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/edges"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/edges/edge_0", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/wall_units"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/wall_units/unit_0", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/edge_wall_units"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/wall_units/edge_0_large", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/ramparts"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/ramparts/ramparts_0", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/ramparts/ramparts_1", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/ramparts/ramparts_2", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/large_ramparts"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/ramparts/ramparts_0", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/rampart_plates"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/rampart_plates/plate_0", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        // MagmaCube start - decompile error
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/center_pieces"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/center_pieces/center_0", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/center_pieces/center_1", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/center_pieces/center_2", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/pathways"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/pathways/pathway_0", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/pathways/pathway_wall_0", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/walls/wall_bases"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/walls/wall_base", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/walls/connected_wall", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/stages/stage_0"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/stages/stage_0_0", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_0_1", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_0_2", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_0_3", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/stages/stage_1"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/stages/stage_1_0", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_1_1", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_1_2", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_1_3", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/stages/rot/stage_1"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/stages/rot/stage_1_0", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/stages/stage_2"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/stages/stage_2_0", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_2_1", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/stages/stage_3"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/stages/stage_3_0", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_3_1", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_3_2", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_3_3", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/fillers/stage_0"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/fillers/stage_0", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/edges"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/edges/edge_0", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/wall_units"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/wall_units/unit_0", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/edge_wall_units"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/wall_units/edge_0_large", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/ramparts"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/ramparts/ramparts_0", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/ramparts/ramparts_1", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/ramparts/ramparts_2", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/large_ramparts"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/ramparts/ramparts_0", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/rampart_plates"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/rampart_plates/plate_0", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        // MagmaCube end - decompile error
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/data/worldgen/BastionPieces.java b/src/main/java/net/minecraft/data/worldgen/BastionPieces.java
index d61d88fbd1918371470cb4ef5dfe835f3616a066..bf63052a56f7801b19b6f2240791cea2b44b6763 100644
--- a/src/main/java/net/minecraft/data/worldgen/BastionPieces.java
+++ b/src/main/java/net/minecraft/data/worldgen/BastionPieces.java
@@ -21,6 +21,7 @@ public class BastionPieces
     }
     
     static {
-        START = Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/starts"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/air_base", ProcessorLists.BASTION_GENERIC_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/air_base", ProcessorLists.BASTION_GENERIC_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/treasure/big_air_full", ProcessorLists.BASTION_GENERIC_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/bridge/starting_pieces/entrance_base", ProcessorLists.BASTION_GENERIC_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        // MagmaCube - decompile error
+        START = Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/starts"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/air_base", ProcessorLists.BASTION_GENERIC_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/air_base", ProcessorLists.BASTION_GENERIC_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/treasure/big_air_full", ProcessorLists.BASTION_GENERIC_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/bridge/starting_pieces/entrance_base", ProcessorLists.BASTION_GENERIC_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/data/worldgen/BastionSharedPools.java b/src/main/java/net/minecraft/data/worldgen/BastionSharedPools.java
index a412d3b8a4072fafd94cb010332f52d12fe48db9..3ac13c5d81c7212b8550e2bdd537c5d7d12f8607 100644
--- a/src/main/java/net/minecraft/data/worldgen/BastionSharedPools.java
+++ b/src/main/java/net/minecraft/data/worldgen/BastionSharedPools.java
@@ -14,9 +14,11 @@ public class BastionSharedPools
     }
     
     static {
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/mobs/piglin"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/mobs/melee_piglin"), 1), Pair.of(StructurePoolElement.single("bastion/mobs/sword_piglin"), 4), Pair.of(StructurePoolElement.single("bastion/mobs/crossbow_piglin"), 4), Pair.of(StructurePoolElement.single("bastion/mobs/empty"), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/mobs/hoglin"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/mobs/hoglin"), 2), Pair.of(StructurePoolElement.single("bastion/mobs/empty"), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/blocks/gold"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/blocks/air"), 3), Pair.of(StructurePoolElement.single("bastion/blocks/gold"), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/mobs/piglin_melee"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/mobs/melee_piglin_always"), 1), Pair.of(StructurePoolElement.single("bastion/mobs/melee_piglin"), 5), Pair.of(StructurePoolElement.single("bastion/mobs/sword_piglin"), 1)), StructureTemplatePool.Projection.RIGID));
+        // MagmaCube start - decompile error
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/mobs/piglin"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/mobs/melee_piglin"), 1), Pair.of(StructurePoolElement.single("bastion/mobs/sword_piglin"), 4), Pair.of(StructurePoolElement.single("bastion/mobs/crossbow_piglin"), 4), Pair.of(StructurePoolElement.single("bastion/mobs/empty"), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/mobs/hoglin"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/mobs/hoglin"), 2), Pair.of(StructurePoolElement.single("bastion/mobs/empty"), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/blocks/gold"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/blocks/air"), 3), Pair.of(StructurePoolElement.single("bastion/blocks/gold"), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/mobs/piglin_melee"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/mobs/melee_piglin_always"), 1), Pair.of(StructurePoolElement.single("bastion/mobs/melee_piglin"), 5), Pair.of(StructurePoolElement.single("bastion/mobs/sword_piglin"), 1)), StructureTemplatePool.Projection.RIGID));
+        // MagmaCube end - decompile error
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/data/worldgen/BastionTreasureRoomPools.java b/src/main/java/net/minecraft/data/worldgen/BastionTreasureRoomPools.java
index e1f47fb94352a1da408e17cdc0b3d0f6dd4b2fa8..3073902964c0c9b497b2263f71e59859a21b878f 100644
--- a/src/main/java/net/minecraft/data/worldgen/BastionTreasureRoomPools.java
+++ b/src/main/java/net/minecraft/data/worldgen/BastionTreasureRoomPools.java
@@ -14,25 +14,27 @@ public class BastionTreasureRoomPools
     }
     
     static {
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/bases"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/bases/lava_basin", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/stairs"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/stairs/lower_stairs", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/bases/centers"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/bases/centers/center_0", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/bases/centers/center_1", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/bases/centers/center_2", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/bases/centers/center_3", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/brains"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/brains/center_brain", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/walls"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/walls/lava_wall", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/entrance_wall", ProcessorLists.HIGH_WALL), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/walls/outer"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/walls/outer/top_corner", ProcessorLists.HIGH_WALL), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/outer/mid_corner", ProcessorLists.HIGH_WALL), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/outer/bottom_corner", ProcessorLists.HIGH_WALL), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/outer/outer_wall", ProcessorLists.HIGH_WALL), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/outer/medium_outer_wall", ProcessorLists.HIGH_WALL), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/outer/tall_outer_wall", ProcessorLists.HIGH_WALL), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/walls/bottom"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/walls/bottom/wall_0", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/bottom/wall_1", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/bottom/wall_2", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/bottom/wall_3", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/walls/mid"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/walls/mid/wall_0", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/mid/wall_1", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/mid/wall_2", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/walls/top"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/walls/top/main_entrance", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/top/wall_0", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/top/wall_1", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/connectors"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/connectors/center_to_wall_middle", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/connectors/center_to_wall_top", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/connectors/center_to_wall_top_entrance", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/entrances"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/entrances/entrance_0", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/ramparts"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/ramparts/mid_wall_main", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/ramparts/mid_wall_side", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/ramparts/bottom_wall_0", ProcessorLists.BOTTOM_RAMPART), 1), Pair.of(StructurePoolElement.single("bastion/treasure/ramparts/top_wall", ProcessorLists.HIGH_RAMPART), 1), Pair.of(StructurePoolElement.single("bastion/treasure/ramparts/lava_basin_side", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/ramparts/lava_basin_main", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/corners/bottom"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/corners/bottom/corner_0", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/corners/bottom/corner_1", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/corners/edges"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/corners/edges/bottom", ProcessorLists.HIGH_WALL), 1), Pair.of(StructurePoolElement.single("bastion/treasure/corners/edges/middle", ProcessorLists.HIGH_WALL), 1), Pair.of(StructurePoolElement.single("bastion/treasure/corners/edges/top", ProcessorLists.HIGH_WALL), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/corners/middle"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/corners/middle/corner_0", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/corners/middle/corner_1", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/corners/top"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/corners/top/corner_0", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/corners/top/corner_1", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/extensions/large_pool"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/extensions/empty", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/empty", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/fire_room", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/large_bridge_0", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/large_bridge_1", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/large_bridge_2", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/large_bridge_3", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/roofed_bridge", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/empty", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/extensions/small_pool"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/extensions/empty", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/fire_room", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/empty", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/small_bridge_0", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/small_bridge_1", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/small_bridge_2", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/small_bridge_3", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/extensions/houses"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/extensions/house_0", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/house_1", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/roofs"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/roofs/wall_roof", ProcessorLists.ROOF), 1), Pair.of(StructurePoolElement.single("bastion/treasure/roofs/corner_roof", ProcessorLists.ROOF), 1), Pair.of(StructurePoolElement.single("bastion/treasure/roofs/center_roof", ProcessorLists.ROOF), 1)), StructureTemplatePool.Projection.RIGID));
+        // MagmaCube start - decompile error
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/bases"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/bases/lava_basin", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/stairs"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/stairs/lower_stairs", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/bases/centers"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/bases/centers/center_0", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/bases/centers/center_1", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/bases/centers/center_2", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/bases/centers/center_3", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/brains"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/brains/center_brain", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/walls"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/walls/lava_wall", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/entrance_wall", ProcessorLists.HIGH_WALL), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/walls/outer"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/walls/outer/top_corner", ProcessorLists.HIGH_WALL), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/outer/mid_corner", ProcessorLists.HIGH_WALL), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/outer/bottom_corner", ProcessorLists.HIGH_WALL), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/outer/outer_wall", ProcessorLists.HIGH_WALL), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/outer/medium_outer_wall", ProcessorLists.HIGH_WALL), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/outer/tall_outer_wall", ProcessorLists.HIGH_WALL), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/walls/bottom"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/walls/bottom/wall_0", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/bottom/wall_1", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/bottom/wall_2", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/bottom/wall_3", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/walls/mid"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/walls/mid/wall_0", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/mid/wall_1", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/mid/wall_2", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/walls/top"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/walls/top/main_entrance", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/top/wall_0", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/walls/top/wall_1", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/connectors"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/connectors/center_to_wall_middle", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/connectors/center_to_wall_top", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/connectors/center_to_wall_top_entrance", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/entrances"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/entrances/entrance_0", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/ramparts"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/ramparts/mid_wall_main", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/ramparts/mid_wall_side", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/ramparts/bottom_wall_0", ProcessorLists.BOTTOM_RAMPART), 1), Pair.of(StructurePoolElement.single("bastion/treasure/ramparts/top_wall", ProcessorLists.HIGH_RAMPART), 1), Pair.of(StructurePoolElement.single("bastion/treasure/ramparts/lava_basin_side", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/ramparts/lava_basin_main", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/corners/bottom"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/corners/bottom/corner_0", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/corners/bottom/corner_1", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/corners/edges"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/corners/edges/bottom", ProcessorLists.HIGH_WALL), 1), Pair.of(StructurePoolElement.single("bastion/treasure/corners/edges/middle", ProcessorLists.HIGH_WALL), 1), Pair.of(StructurePoolElement.single("bastion/treasure/corners/edges/top", ProcessorLists.HIGH_WALL), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/corners/middle"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/corners/middle/corner_0", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/corners/middle/corner_1", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/corners/top"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/corners/top/corner_0", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/corners/top/corner_1", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/extensions/large_pool"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/extensions/empty", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/empty", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/fire_room", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/large_bridge_0", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/large_bridge_1", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/large_bridge_2", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/large_bridge_3", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/roofed_bridge", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/empty", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/extensions/small_pool"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/extensions/empty", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/fire_room", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/empty", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/small_bridge_0", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/small_bridge_1", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/small_bridge_2", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/small_bridge_3", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/extensions/houses"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/extensions/house_0", ProcessorLists.TREASURE_ROOMS), 1), Pair.of(StructurePoolElement.single("bastion/treasure/extensions/house_1", ProcessorLists.TREASURE_ROOMS), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/treasure/roofs"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/treasure/roofs/wall_roof", ProcessorLists.ROOF), 1), Pair.of(StructurePoolElement.single("bastion/treasure/roofs/corner_roof", ProcessorLists.ROOF), 1), Pair.of(StructurePoolElement.single("bastion/treasure/roofs/center_roof", ProcessorLists.ROOF), 1)), StructureTemplatePool.Projection.RIGID));
+        // MagmaCube end - decompile error
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/data/worldgen/BiomeDefaultFeatures.java b/src/main/java/net/minecraft/data/worldgen/BiomeDefaultFeatures.java
index 8b810ae66b9b2e8da34eb2f046978f1a0cafb35a..6622b13cbe2854a25b7f404cc5720b0fe7fe97ce 100644
--- a/src/main/java/net/minecraft/data/worldgen/BiomeDefaultFeatures.java
+++ b/src/main/java/net/minecraft/data/worldgen/BiomeDefaultFeatures.java
@@ -4,7 +4,6 @@ import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.MobCategory;
 import net.minecraft.world.level.biome.MobSpawnSettings;
 import net.minecraft.world.level.levelgen.GenerationStep;
-import net.minecraft.world.level.levelgen.feature.ConfiguredStructureFeature;
 import net.minecraft.world.level.biome.BiomeGenerationSettings;
 
 public class BiomeDefaultFeatures
diff --git a/src/main/java/net/minecraft/data/worldgen/Carvers.java b/src/main/java/net/minecraft/data/worldgen/Carvers.java
index 66fecc12d0212c2b3f712d3b2bf240504f84baaa..47aea10c039778f8791490d7618a1062bcdeb77a 100644
--- a/src/main/java/net/minecraft/data/worldgen/Carvers.java
+++ b/src/main/java/net/minecraft/data/worldgen/Carvers.java
@@ -1,7 +1,6 @@
 package net.minecraft.data.worldgen;
 
 import net.minecraft.world.level.levelgen.carver.WorldCarver;
-import net.minecraft.core.Registry;
 import net.minecraft.data.BuiltinRegistries;
 import net.minecraft.world.level.levelgen.carver.CarverConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.ProbabilityFeatureConfiguration;
diff --git a/src/main/java/net/minecraft/data/worldgen/Pools.java b/src/main/java/net/minecraft/data/worldgen/Pools.java
index 4dcfa3304c2c8d0ad5ac297d7e5dca456b905a26..45837d2bbc1600a013485fe7d4c2e4e3417b1d9b 100644
--- a/src/main/java/net/minecraft/data/worldgen/Pools.java
+++ b/src/main/java/net/minecraft/data/worldgen/Pools.java
@@ -1,9 +1,5 @@
 package net.minecraft.data.worldgen;
 
-import net.minecraft.world.level.levelgen.feature.structures.StructurePoolElement;
-import java.util.function.Function;
-import com.mojang.datafixers.util.Pair;
-import java.util.List;
 import com.google.common.collect.ImmutableList;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.core.Registry;
@@ -29,7 +25,7 @@ public class Pools
     
     static {
         EMPTY = ResourceKey.create((ResourceKey<? extends Registry<StructureTemplatePool>>)Registry.TEMPLATE_POOL_REGISTRY, new ResourceLocation("empty"));
-        BUILTIN_EMPTY = register(new StructureTemplatePool(Pools.EMPTY.location(), Pools.EMPTY.location(), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of(), StructureTemplatePool.Projection.RIGID));
+        BUILTIN_EMPTY = register(new StructureTemplatePool(Pools.EMPTY.location(), Pools.EMPTY.location(), ImmutableList.of(), StructureTemplatePool.Projection.RIGID)); // MagmaCube - decompile fix
         bootstrap();
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/data/worldgen/StructureFeatures.java b/src/main/java/net/minecraft/data/worldgen/StructureFeatures.java
index f2afe4beea08a8aad82e7d2ca84280cb9732517e..23364813b9907452933692b59bc437ad6c71c711 100644
--- a/src/main/java/net/minecraft/data/worldgen/StructureFeatures.java
+++ b/src/main/java/net/minecraft/data/worldgen/StructureFeatures.java
@@ -3,8 +3,6 @@ package net.minecraft.data.worldgen;
 import net.minecraft.world.level.levelgen.feature.RuinedPortalFeature;
 import net.minecraft.world.level.levelgen.structure.OceanRuinFeature;
 import net.minecraft.world.level.levelgen.feature.MineshaftFeature;
-import net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool;
-import net.minecraft.core.Registry;
 import net.minecraft.data.BuiltinRegistries;
 import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.RuinedPortalConfiguration;
diff --git a/src/main/java/net/minecraft/data/worldgen/SurfaceBuilders.java b/src/main/java/net/minecraft/data/worldgen/SurfaceBuilders.java
index c03cecc9cfc6166c0414d049534a573a581312f7..fd9829f2d9aca6c70915a8bb509fdf5dd6148a64 100644
--- a/src/main/java/net/minecraft/data/worldgen/SurfaceBuilders.java
+++ b/src/main/java/net/minecraft/data/worldgen/SurfaceBuilders.java
@@ -2,7 +2,6 @@ package net.minecraft.data.worldgen;
 
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilder;
-import net.minecraft.core.Registry;
 import net.minecraft.data.BuiltinRegistries;
 import net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderConfiguration;
 import net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration;
diff --git a/src/main/java/net/minecraft/data/worldgen/biome/BiomeReport.java b/src/main/java/net/minecraft/data/worldgen/biome/BiomeReport.java
index 61382c47ee83cb39d691d3abab2cedf84f324159..f99767c0513aa2ab8d953cfd067ab2577837fc74 100644
--- a/src/main/java/net/minecraft/data/worldgen/biome/BiomeReport.java
+++ b/src/main/java/net/minecraft/data/worldgen/biome/BiomeReport.java
@@ -6,7 +6,6 @@ import net.minecraft.resources.ResourceLocation;
 import java.util.Optional;
 import java.util.function.Supplier;
 import java.util.function.Function;
-import java.util.Iterator;
 import java.nio.file.Path;
 import java.io.IOException;
 import com.google.gson.JsonElement;
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestAssertPosException.java b/src/main/java/net/minecraft/gametest/framework/GameTestAssertPosException.java
index 31b8d284499bd8cebca892692f6f1022165bfccb..30c8c51679eb13665d7f8394e73665e7750f977b 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestAssertPosException.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestAssertPosException.java
@@ -5,10 +5,16 @@ import net.minecraft.core.BlockPos;
 
 public class GameTestAssertPosException extends GameTestAssertException
 {
-    private final BlockPos absolutePos;
-    private final BlockPos relativePos;
-    private final long tick;
-    
+    // MagmaCube start - decompile fix
+    private final BlockPos absolutePos = null;
+    private final BlockPos relativePos = null;
+    private final long tick = 0L;
+
+    public GameTestAssertPosException(String debug1) {
+        super(debug1);
+    }
+    // MagmaCube end - decompile fix
+
     @Override
     public String getMessage() {
         final String s = "" + this.absolutePos.getX() + "," + this.absolutePos.getY() + "," + this.absolutePos.getZ() + " (relative: " + this.relativePos.getX() + "," + this.relativePos.getY() + "," + this.relativePos.getZ() + ")";
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java b/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java
index 7652f9e838c9c3ab75013e22e946bfd4f7ffab3e..29b5da9b107477a011985533a8431f269edfc2fe 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java
@@ -16,6 +16,7 @@ import net.minecraft.server.level.ServerLevel;
 public class GameTestRegistry {
     private static final Collection<TestFunction> testFunctions = Lists.newArrayList();
     private static final Set<String> testClassNames = Sets.newHashSet();
+    @SuppressWarnings("MismatchedQueryAndUpdateOfCollection")
     private static final Map<String, Consumer<ServerLevel>> beforeBatchFunctions = Maps.newHashMap();
     private static final Collection<TestFunction> lastFailedTests = Sets.newHashSet();
 
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestSequence.java b/src/main/java/net/minecraft/gametest/framework/GameTestSequence.java
index e54556748cff0efd4f3e9d99eee8b6dac35e7dc8..0852696a59d5991412fc977c3cfb820ac42910ed 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestSequence.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestSequence.java
@@ -5,9 +5,9 @@ import java.util.List;
 
 public class GameTestSequence
 {
-    private final GameTestInfo parent;
-    private final List<GameTestEvent> events;
-    private long lastTick;
+    private final GameTestInfo parent = null; // MagmaCube - decompile fix
+    private final List<GameTestEvent> events = null; // MagmaCube - decompile fix
+    private long lastTick = 0L; // MagmaCube - decompile fix
     
     public void tickAndContinue(final long l) {
         try {
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestTicker.java b/src/main/java/net/minecraft/gametest/framework/GameTestTicker.java
index 953f7faed9cb55ca4e1991023b5815bd32cd98d3..61215a441d3838c05ef9c4fe2d73f6627069a851 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestTicker.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestTicker.java
@@ -9,7 +9,7 @@ public class GameTestTicker
     private final Collection<GameTestInfo> testInfos;
     
     public GameTestTicker() {
-        this.testInfos = (Collection<GameTestInfo>)Lists.newCopyOnWriteArrayList();
+        this.testInfos = Lists.newCopyOnWriteArrayList(); // MagmaCube - decompile fix
     }
     
     public void add(final GameTestInfo gameTestInfo) {
diff --git a/src/main/java/net/minecraft/gametest/framework/StructureUtils.java b/src/main/java/net/minecraft/gametest/framework/StructureUtils.java
index f12ded280ecf40a18980bc5f73857ca78eb1486c..c8a0f1592fa32675c39de3dffaf4ab7fa6ada347 100644
--- a/src/main/java/net/minecraft/gametest/framework/StructureUtils.java
+++ b/src/main/java/net/minecraft/gametest/framework/StructureUtils.java
@@ -101,17 +101,17 @@ public class StructureUtils {
      * WARNING - void declaration
      */
     public static StructureBlockEntity spawnStructure(String s, BlockPos blockPos, Rotation rotation, int i, ServerLevel serverLevel, boolean flag) {
-        void blockPos7;
+        BlockPos blockPos7; // MagmaCube - decompile error
         BlockPos blockPos2 = StructureUtils.getStructureTemplate(s, serverLevel).getSize();
         BoundingBox boundingBox = StructureUtils.getStructureBoundingBox(blockPos, blockPos2, rotation);
         if (rotation == Rotation.NONE) {
-            BlockPos blockPos3 = blockPos;
+            blockPos7 = blockPos; // MagmaCube - decompile error
         } else if (rotation == Rotation.CLOCKWISE_90) {
-            BlockPos blockPos4 = blockPos.offset(blockPos2.getZ() - 1, 0, 0);
+            blockPos7 = blockPos.offset(blockPos2.getZ() - 1, 0, 0); // MagmaCube - decompile error
         } else if (rotation == Rotation.CLOCKWISE_180) {
-            BlockPos blockPos5 = blockPos.offset(blockPos2.getX() - 1, 0, blockPos2.getZ() - 1);
+            blockPos7 = blockPos.offset(blockPos2.getX() - 1, 0, blockPos2.getZ() - 1); // MagmaCube - decompile error
         } else if (rotation == Rotation.COUNTERCLOCKWISE_90) {
-            BlockPos blockPos6 = blockPos.offset(0, 0, blockPos2.getX() - 1);
+            blockPos7 = blockPos.offset(0, 0, blockPos2.getX() - 1); // MagmaCube - decompile error
         } else {
             throw new IllegalArgumentException("Invalid rotation: " + (rotation));
         }
diff --git a/src/main/java/net/minecraft/gametest/framework/TestFunction.java b/src/main/java/net/minecraft/gametest/framework/TestFunction.java
index 064f450adeaecb0398d97ffa6e412c60603c0d1c..2c31b7d567e28551f058cb6f5ba078e2bc1d04ef 100644
--- a/src/main/java/net/minecraft/gametest/framework/TestFunction.java
+++ b/src/main/java/net/minecraft/gametest/framework/TestFunction.java
@@ -5,14 +5,14 @@ import java.util.function.Consumer;
 
 public class TestFunction
 {
-    private final String batchName;
-    private final String testName;
-    private final String structureName;
-    private final boolean required;
-    private final Consumer<GameTestHelper> function;
-    private final int maxTicks;
-    private final long setupTicks;
-    private final Rotation rotation;
+    private final String batchName = null; // MagmaCube - decompile fix
+    private final String testName = null; // MagmaCube - decompile fix
+    private final String structureName = null; // MagmaCube - decompile fix
+    private final boolean required = false; // MagmaCube - decompile fix
+    private final Consumer<GameTestHelper> function = null; // MagmaCube - decompile fix
+    private final int maxTicks = 0; // MagmaCube - decompile fix
+    private final long setupTicks = 0L; // MagmaCube - decompile fix
+    private final Rotation rotation = null; // MagmaCube - decompile fix
     
     public void run(final GameTestHelper gameTestHelper) {
         this.function.accept(gameTestHelper);
diff --git a/src/main/java/net/minecraft/nbt/CompoundTag.java b/src/main/java/net/minecraft/nbt/CompoundTag.java
index 49e572b409bc4d0b09482d03be9cb765545bf873..ff805e4d4421e29ca5d31dacc94f90ea57522b61 100644
--- a/src/main/java/net/minecraft/nbt/CompoundTag.java
+++ b/src/main/java/net/minecraft/nbt/CompoundTag.java
@@ -170,7 +170,7 @@ public class CompoundTag implements Tag
     public byte getByte(final String s) {
         try {
             if (this.contains(s, 99)) {
-                return this.tags.get(s).getAsByte();
+                return ((NumericTag) this.tags.get(s)).getAsByte(); // MagmaCube - decompile error
             }
         }
         catch (ClassCastException ex) {}
@@ -180,7 +180,7 @@ public class CompoundTag implements Tag
     public short getShort(final String s) {
         try {
             if (this.contains(s, 99)) {
-                return this.tags.get(s).getAsShort();
+                return ((NumericTag) this.tags.get(s)).getAsShort(); // MagmaCube - decompile error
             }
         }
         catch (ClassCastException ex) {}
@@ -190,7 +190,7 @@ public class CompoundTag implements Tag
     public int getInt(final String s) {
         try {
             if (this.contains(s, 99)) {
-                return this.tags.get(s).getAsInt();
+                return ((NumericTag) this.tags.get(s)).getAsInt(); // MagmaCube - decompile error
             }
         }
         catch (ClassCastException ex) {}
@@ -200,7 +200,7 @@ public class CompoundTag implements Tag
     public long getLong(final String s) {
         try {
             if (this.contains(s, 99)) {
-                return this.tags.get(s).getAsLong();
+                return ((NumericTag) this.tags.get(s)).getAsLong(); // MagmaCube - decompile error
             }
         }
         catch (ClassCastException ex) {}
@@ -210,7 +210,7 @@ public class CompoundTag implements Tag
     public float getFloat(final String s) {
         try {
             if (this.contains(s, 99)) {
-                return this.tags.get(s).getAsFloat();
+                return ((NumericTag) this.tags.get(s)).getAsFloat(); // MagmaCube - decompile error
             }
         }
         catch (ClassCastException ex) {}
@@ -220,7 +220,7 @@ public class CompoundTag implements Tag
     public double getDouble(final String s) {
         try {
             if (this.contains(s, 99)) {
-                return this.tags.get(s).getAsDouble();
+                return ((NumericTag) this.tags.get(s)).getAsDouble(); // MagmaCube - decompile error
             }
         }
         catch (ClassCastException ex) {}
@@ -240,7 +240,7 @@ public class CompoundTag implements Tag
     public byte[] getByteArray(final String s) {
         try {
             if (this.contains(s, 7)) {
-                return this.tags.get(s).getAsByteArray();
+                return ((ByteArrayTag) this.tags.get(s)).getAsByteArray(); // MagmaCube - decompile error
             }
         }
         catch (ClassCastException classCastException) {
@@ -252,7 +252,7 @@ public class CompoundTag implements Tag
     public int[] getIntArray(final String s) {
         try {
             if (this.contains(s, 11)) {
-                return this.tags.get(s).getAsIntArray();
+                return ((IntArrayTag) this.tags.get(s)).getAsIntArray(); // MagmaCube - decompile error
             }
         }
         catch (ClassCastException classCastException) {
@@ -264,7 +264,7 @@ public class CompoundTag implements Tag
     public long[] getLongArray(final String s) {
         try {
             if (this.contains(s, 12)) {
-                return this.tags.get(s).getAsLongArray();
+                return ((LongArrayTag) this.tags.get(s)).getAsLongArray(); // MagmaCube - decompile error
             }
         }
         catch (ClassCastException classCastException) {
@@ -276,7 +276,7 @@ public class CompoundTag implements Tag
     public CompoundTag getCompound(final String s) {
         try {
             if (this.contains(s, 10)) {
-                return this.tags.get(s);
+                return (CompoundTag) this.tags.get(s); // MagmaCube - decompile error
             }
         }
         catch (ClassCastException classCastException) {
@@ -288,7 +288,7 @@ public class CompoundTag implements Tag
     public ListTag getList(final String s, final int i) {
         try {
             if (this.getTagType(s) == 9) {
-                final ListTag listTag = this.tags.get(s);
+                final ListTag listTag = (ListTag) this.tags.get(s); // MagmaCube - decompile error
                 if (listTag.isEmpty() || listTag.getElementType() == i) {
                     return listTag;
                 }
@@ -458,11 +458,10 @@ public class CompoundTag implements Tag
     }
     
     static {
-        final Tag tag;
         CODEC = Codec.PASSTHROUGH.comapFlatMap(dynamic -> {
-            tag = (Tag)dynamic.convert((DynamicOps)NbtOps.INSTANCE).getValue();
+            Tag tag = (Tag)dynamic.convert((DynamicOps)NbtOps.INSTANCE).getValue(); // MagmaCube - decompile error
             if (tag instanceof CompoundTag) {
-                return DataResult.success(tag);
+                return DataResult.success((CompoundTag) tag); // MagmaCube - decompile error
             }
             else {
                 return DataResult.error("Not a compound tag: " + tag);
@@ -477,7 +476,7 @@ public class CompoundTag implements Tag
                 if (i > 512) {
                     throw new RuntimeException("Tried to read NBT tag with too high complexity, depth > 512");
                 }
-                final Map<String, Tag> map = (Map<String, Tag>)Maps.newHashMap();
+                final Map<String, Tag> map = Maps.newHashMap(); // MagmaCube - decompile error
                 byte b;
                 while ((b = readNamedTagType(dataInput, nbtAccounter)) != 0) {
                     final String s = readNamedTagName(dataInput, nbtAccounter);
diff --git a/src/main/java/net/minecraft/nbt/DoubleTag.java b/src/main/java/net/minecraft/nbt/DoubleTag.java
index a284fe9263de3785bd559abed4b3f1bc9af2f4b4..3c08b89fdae0554798b035f56c143592ac2cac7d 100644
--- a/src/main/java/net/minecraft/nbt/DoubleTag.java
+++ b/src/main/java/net/minecraft/nbt/DoubleTag.java
@@ -31,7 +31,7 @@ public class DoubleTag extends NumericTag
     
     @Override
     public byte getId() {
-        return 6;
+        return (byte) 6;
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/nbt/EndTag.java b/src/main/java/net/minecraft/nbt/EndTag.java
index ef74ede9834e4644df0d06edeb284d0ab7a7b04e..1e75b03e8f95618d99f2123eb1faec6d67e65189 100644
--- a/src/main/java/net/minecraft/nbt/EndTag.java
+++ b/src/main/java/net/minecraft/nbt/EndTag.java
@@ -17,7 +17,7 @@ public class EndTag implements Tag
     
     @Override
     public byte getId() {
-        return 0;
+        return (byte) 0;
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/nbt/FloatTag.java b/src/main/java/net/minecraft/nbt/FloatTag.java
index ee0cfd1f03f01046a9e1958617e6e45ce0d272eb..3b50c3826083e1ffc026029d493afc264820dea4 100644
--- a/src/main/java/net/minecraft/nbt/FloatTag.java
+++ b/src/main/java/net/minecraft/nbt/FloatTag.java
@@ -31,7 +31,7 @@ public class FloatTag extends NumericTag
     
     @Override
     public byte getId() {
-        return 5;
+        return (byte) 5;
     }
     
     @Override
@@ -87,7 +87,7 @@ public class FloatTag extends NumericTag
     
     @Override
     public double getAsDouble() {
-        return this.data;
+        return (double) this.data;
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/nbt/ListTag.java b/src/main/java/net/minecraft/nbt/ListTag.java
index 1c066d8bac1cb93782a8b25538e86bd540412198..5b445429ebbfd8ebf9becb000c7cbd013113f65f 100644
--- a/src/main/java/net/minecraft/nbt/ListTag.java
+++ b/src/main/java/net/minecraft/nbt/ListTag.java
@@ -304,11 +304,11 @@ public class ListTag extends CollectionTag<Tag>
                 }
                 nbtAccounter.accountBits(32L * i2);
                 final TagType<?> tagType = TagTypes.getType(b);
-                final List<Tag> list = (List<Tag>)Lists.newArrayListWithCapacity(i2);
+                final List<Tag> list = Lists.newArrayListWithCapacity(i2); // MagmaCube - decompile error
                 for (int i3 = 0; i3 < i2; ++i3) {
                     list.add((Tag)tagType.load(dataInput, i + 1, nbtAccounter));
                 }
-                return new ListTag(list, b, null);
+                return new ListTag(list, b); // MagmaCube - decompile error
             }
             
             @Override
diff --git a/src/main/java/net/minecraft/nbt/NbtUtils.java b/src/main/java/net/minecraft/nbt/NbtUtils.java
index 27de7f59d57eaae04f261c5c6217dd9a23c34058..ba51d25eace2d3a8cc6ab8fac0cc36b6397f5353 100644
--- a/src/main/java/net/minecraft/nbt/NbtUtils.java
+++ b/src/main/java/net/minecraft/nbt/NbtUtils.java
@@ -85,7 +85,7 @@ public final class NbtUtils
                     if (property.hasSignature()) {
                         compoundTag3.putString("Signature", property.getSignature());
                     }
-                    ((AbstractList<CompoundTag>)listTag).add(compoundTag3);
+                    listTag.add(compoundTag3); // MagmaCube - decompile error
                 }
                 compoundTag2.put(s, listTag);
             }
@@ -192,7 +192,7 @@ public final class NbtUtils
     private static <S extends StateHolder<?, S>, T extends Comparable<T>> S setValueHelper(final S stateHolder, final net.minecraft.world.level.block.state.properties.Property<T> property, final String s, final CompoundTag compoundTag, final CompoundTag compoundTag2) {
         final Optional<T> optional = property.getValue(compoundTag.getString(s));
         if (optional.isPresent()) {
-            return ((StateHolder<O, S>)stateHolder).setValue(property, optional.get());
+            return stateHolder.setValue(property, optional.get()); // MagmaCube - decompile error
         }
         NbtUtils.LOGGER.warn("Unable to read property: {} with value: {} for blockstate: {}", s, compoundTag.getString(s), compoundTag2.toString());
         return stateHolder;
@@ -222,7 +222,7 @@ public final class NbtUtils
     }
     
     public static CompoundTag update(final DataFixer dataFixer, final DataFixTypes dataFixTypes, final CompoundTag compoundTag, final int i, final int i2) {
-        return (CompoundTag)dataFixer.update(dataFixTypes.getType(), new Dynamic((DynamicOps)NbtOps.INSTANCE, compoundTag), i, i2).getValue();
+        return (CompoundTag)dataFixer.update(dataFixTypes.getType(), new Dynamic<>(NbtOps.INSTANCE, compoundTag), i, i2).getValue(); // MagmaCube - decompile error
     }
     
     static {
diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index d6c487d0543b697d681babb578fea61da5a99cea..56aa96f972120da0c9b9af55a108e1be19d70ba5 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -73,7 +73,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>>
     private boolean handlingFault;
     
     public Connection(final PacketFlow packetFlow) {
-        this.queue = (Queue<PacketHolder>)Queues.newConcurrentLinkedQueue();
+        this.queue = Queues.newConcurrentLinkedQueue(); // MagmaCube - decompile error
         this.receiving = packetFlow;
     }
     
@@ -179,13 +179,13 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>>
             channelFuture.addListener((GenericFutureListener)ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
         }
         else {
-            final ConnectionProtocol protocol;
-            final ChannelFuture channelFuture2;
             this.channel.eventLoop().execute(() -> {
-                if (protocol != connectionProtocol2) {
-                    this.setProtocol(protocol);
+                // MagmaCube start - decompile error
+                if (connectionProtocol != connectionProtocol2) {
+                    this.setProtocol(connectionProtocol);
                 }
-                channelFuture2 = this.channel.writeAndFlush(packet);
+                ChannelFuture channelFuture2 = this.channel.writeAndFlush(packet);
+                // MagmaCube end - decompile error
                 if (genericFutureListener != null) {
                     channelFuture2.addListener((GenericFutureListener)genericFutureListener);
                 }
@@ -249,8 +249,10 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>>
         final Class<? extends SocketChannel> clazz2;
         final LazyLoadedValue<? extends EventLoopGroup> lazyLoadedValue2;
         if (Epoll.isAvailable() && flag) {
-            final Class<? extends SocketChannel> clazz = (Class<? extends SocketChannel>)EpollSocketChannel.class;
-            final LazyLoadedValue<? extends EventLoopGroup> lazyLoadedValue = (LazyLoadedValue<? extends EventLoopGroup>)Connection.NETWORK_EPOLL_WORKER_GROUP;
+            // MagmaCube start - decompile error
+            clazz2 = (Class<? extends SocketChannel>)EpollSocketChannel.class;
+            lazyLoadedValue2 = (LazyLoadedValue<? extends EventLoopGroup>)Connection.NETWORK_EPOLL_WORKER_GROUP;
+            // MagmaCube end - decompile error
         }
         else {
             clazz2 = (Class<? extends SocketChannel>)NioSocketChannel.class;
@@ -367,18 +369,15 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>>
         ATTRIBUTE_PROTOCOL = AttributeKey.valueOf("protocol");
         final NioEventLoopGroup nioEventLoopGroup;
         NETWORK_WORKER_GROUP = new LazyLoadedValue<NioEventLoopGroup>(() -> {
-            new NioEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Client IO #%d").setDaemon(true).build());
-            return nioEventLoopGroup;
+            return new NioEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Client IO #%d").setDaemon(true).build()); // MagmaCube - decompile error
         });
         final EpollEventLoopGroup epollEventLoopGroup;
         NETWORK_EPOLL_WORKER_GROUP = new LazyLoadedValue<EpollEventLoopGroup>(() -> {
-            new EpollEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Epoll Client IO #%d").setDaemon(true).build());
-            return epollEventLoopGroup;
+            return new EpollEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Epoll Client IO #%d").setDaemon(true).build()); // MagmaCube - decompile error
         });
         final DefaultEventLoopGroup defaultEventLoopGroup;
         LOCAL_WORKER_GROUP = new LazyLoadedValue<DefaultEventLoopGroup>(() -> {
-            new DefaultEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Local Client IO #%d").setDaemon(true).build());
-            return defaultEventLoopGroup;
+            return new DefaultEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Local Client IO #%d").setDaemon(true).build()); // MagmaCube - decompile error
         });
     }
     
diff --git a/src/main/java/net/minecraft/network/ConnectionProtocol.java b/src/main/java/net/minecraft/network/ConnectionProtocol.java
index 94f59aabb7bb16e90f6c9f72c5dd593c12be36b7..8702e4fc7b93c74534b1ed008f5ce8504f1c4b97 100644
--- a/src/main/java/net/minecraft/network/ConnectionProtocol.java
+++ b/src/main/java/net/minecraft/network/ConnectionProtocol.java
@@ -163,10 +163,12 @@ import net.minecraft.network.protocol.status.ServerboundStatusRequestPacket;
 import org.apache.logging.log4j.LogManager;
 
 public enum ConnectionProtocol {
-    HANDSHAKING(-1, ConnectionProtocol.protocol().addFlow(PacketFlow.SERVERBOUND, new PacketSet<T>().addPacket(ClientIntentionPacket.class, ClientIntentionPacket::new))),
-    PLAY(0, ConnectionProtocol.protocol().addFlow(PacketFlow.CLIENTBOUND, new PacketSet<T>().addPacket(ClientboundAddEntityPacket.class, ClientboundAddEntityPacket::new).addPacket(ClientboundAddExperienceOrbPacket.class, ClientboundAddExperienceOrbPacket::new).addPacket(ClientboundAddMobPacket.class, ClientboundAddMobPacket::new).addPacket(ClientboundAddPaintingPacket.class, ClientboundAddPaintingPacket::new).addPacket(ClientboundAddPlayerPacket.class, ClientboundAddPlayerPacket::new).addPacket(ClientboundAnimatePacket.class, ClientboundAnimatePacket::new).addPacket(ClientboundAwardStatsPacket.class, ClientboundAwardStatsPacket::new).addPacket(ClientboundBlockBreakAckPacket.class, ClientboundBlockBreakAckPacket::new).addPacket(ClientboundBlockDestructionPacket.class, ClientboundBlockDestructionPacket::new).addPacket(ClientboundBlockEntityDataPacket.class, ClientboundBlockEntityDataPacket::new).addPacket(ClientboundBlockEventPacket.class, ClientboundBlockEventPacket::new).addPacket(ClientboundBlockUpdatePacket.class, ClientboundBlockUpdatePacket::new).addPacket(ClientboundBossEventPacket.class, ClientboundBossEventPacket::new).addPacket(ClientboundChangeDifficultyPacket.class, ClientboundChangeDifficultyPacket::new).addPacket(ClientboundChatPacket.class, ClientboundChatPacket::new).addPacket(ClientboundCommandSuggestionsPacket.class, ClientboundCommandSuggestionsPacket::new).addPacket(ClientboundCommandsPacket.class, ClientboundCommandsPacket::new).addPacket(ClientboundContainerAckPacket.class, ClientboundContainerAckPacket::new).addPacket(ClientboundContainerClosePacket.class, ClientboundContainerClosePacket::new).addPacket(ClientboundContainerSetContentPacket.class, ClientboundContainerSetContentPacket::new).addPacket(ClientboundContainerSetDataPacket.class, ClientboundContainerSetDataPacket::new).addPacket(ClientboundContainerSetSlotPacket.class, ClientboundContainerSetSlotPacket::new).addPacket(ClientboundCooldownPacket.class, ClientboundCooldownPacket::new).addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new).addPacket(ClientboundCustomSoundPacket.class, ClientboundCustomSoundPacket::new).addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new).addPacket(ClientboundEntityEventPacket.class, ClientboundEntityEventPacket::new).addPacket(ClientboundExplodePacket.class, ClientboundExplodePacket::new).addPacket(ClientboundForgetLevelChunkPacket.class, ClientboundForgetLevelChunkPacket::new).addPacket(ClientboundGameEventPacket.class, ClientboundGameEventPacket::new).addPacket(ClientboundHorseScreenOpenPacket.class, ClientboundHorseScreenOpenPacket::new).addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new).addPacket(ClientboundLevelChunkPacket.class, ClientboundLevelChunkPacket::new).addPacket(ClientboundLevelEventPacket.class, ClientboundLevelEventPacket::new).addPacket(ClientboundLevelParticlesPacket.class, ClientboundLevelParticlesPacket::new).addPacket(ClientboundLightUpdatePacket.class, ClientboundLightUpdatePacket::new).addPacket(ClientboundLoginPacket.class, ClientboundLoginPacket::new).addPacket(ClientboundMapItemDataPacket.class, ClientboundMapItemDataPacket::new).addPacket(ClientboundMerchantOffersPacket.class, ClientboundMerchantOffersPacket::new).addPacket(ClientboundMoveEntityPacket.Pos.class, ClientboundMoveEntityPacket.Pos::new).addPacket(ClientboundMoveEntityPacket.PosRot.class, ClientboundMoveEntityPacket.PosRot::new).addPacket(ClientboundMoveEntityPacket.Rot.class, ClientboundMoveEntityPacket.Rot::new).addPacket(ClientboundMoveEntityPacket.class, ClientboundMoveEntityPacket::new).addPacket(ClientboundMoveVehiclePacket.class, ClientboundMoveVehiclePacket::new).addPacket(ClientboundOpenBookPacket.class, ClientboundOpenBookPacket::new).addPacket(ClientboundOpenScreenPacket.class, ClientboundOpenScreenPacket::new).addPacket(ClientboundOpenSignEditorPacket.class, ClientboundOpenSignEditorPacket::new).addPacket(ClientboundPlaceGhostRecipePacket.class, ClientboundPlaceGhostRecipePacket::new).addPacket(ClientboundPlayerAbilitiesPacket.class, ClientboundPlayerAbilitiesPacket::new).addPacket(ClientboundPlayerCombatPacket.class, ClientboundPlayerCombatPacket::new).addPacket(ClientboundPlayerInfoPacket.class, ClientboundPlayerInfoPacket::new).addPacket(ClientboundPlayerLookAtPacket.class, ClientboundPlayerLookAtPacket::new).addPacket(ClientboundPlayerPositionPacket.class, ClientboundPlayerPositionPacket::new).addPacket(ClientboundRecipePacket.class, ClientboundRecipePacket::new).addPacket(ClientboundRemoveEntitiesPacket.class, ClientboundRemoveEntitiesPacket::new).addPacket(ClientboundRemoveMobEffectPacket.class, ClientboundRemoveMobEffectPacket::new).addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new).addPacket(ClientboundRespawnPacket.class, ClientboundRespawnPacket::new).addPacket(ClientboundRotateHeadPacket.class, ClientboundRotateHeadPacket::new).addPacket(ClientboundSectionBlocksUpdatePacket.class, ClientboundSectionBlocksUpdatePacket::new).addPacket(ClientboundSelectAdvancementsTabPacket.class, ClientboundSelectAdvancementsTabPacket::new).addPacket(ClientboundSetBorderPacket.class, ClientboundSetBorderPacket::new).addPacket(ClientboundSetCameraPacket.class, ClientboundSetCameraPacket::new).addPacket(ClientboundSetCarriedItemPacket.class, ClientboundSetCarriedItemPacket::new).addPacket(ClientboundSetChunkCacheCenterPacket.class, ClientboundSetChunkCacheCenterPacket::new).addPacket(ClientboundSetChunkCacheRadiusPacket.class, ClientboundSetChunkCacheRadiusPacket::new).addPacket(ClientboundSetDefaultSpawnPositionPacket.class, ClientboundSetDefaultSpawnPositionPacket::new).addPacket(ClientboundSetDisplayObjectivePacket.class, ClientboundSetDisplayObjectivePacket::new).addPacket(ClientboundSetEntityDataPacket.class, ClientboundSetEntityDataPacket::new).addPacket(ClientboundSetEntityLinkPacket.class, ClientboundSetEntityLinkPacket::new).addPacket(ClientboundSetEntityMotionPacket.class, ClientboundSetEntityMotionPacket::new).addPacket(ClientboundSetEquipmentPacket.class, ClientboundSetEquipmentPacket::new).addPacket(ClientboundSetExperiencePacket.class, ClientboundSetExperiencePacket::new).addPacket(ClientboundSetHealthPacket.class, ClientboundSetHealthPacket::new).addPacket(ClientboundSetObjectivePacket.class, ClientboundSetObjectivePacket::new).addPacket(ClientboundSetPassengersPacket.class, ClientboundSetPassengersPacket::new).addPacket(ClientboundSetPlayerTeamPacket.class, ClientboundSetPlayerTeamPacket::new).addPacket(ClientboundSetScorePacket.class, ClientboundSetScorePacket::new).addPacket(ClientboundSetTimePacket.class, ClientboundSetTimePacket::new).addPacket(ClientboundSetTitlesPacket.class, ClientboundSetTitlesPacket::new).addPacket(ClientboundSoundEntityPacket.class, ClientboundSoundEntityPacket::new).addPacket(ClientboundSoundPacket.class, ClientboundSoundPacket::new).addPacket(ClientboundStopSoundPacket.class, ClientboundStopSoundPacket::new).addPacket(ClientboundTabListPacket.class, ClientboundTabListPacket::new).addPacket(ClientboundTagQueryPacket.class, ClientboundTagQueryPacket::new).addPacket(ClientboundTakeItemEntityPacket.class, ClientboundTakeItemEntityPacket::new).addPacket(ClientboundTeleportEntityPacket.class, ClientboundTeleportEntityPacket::new).addPacket(ClientboundUpdateAdvancementsPacket.class, ClientboundUpdateAdvancementsPacket::new).addPacket(ClientboundUpdateAttributesPacket.class, ClientboundUpdateAttributesPacket::new).addPacket(ClientboundUpdateMobEffectPacket.class, ClientboundUpdateMobEffectPacket::new).addPacket(ClientboundUpdateRecipesPacket.class, ClientboundUpdateRecipesPacket::new).addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new)).addFlow(PacketFlow.SERVERBOUND, new PacketSet<T>().addPacket(ServerboundAcceptTeleportationPacket.class, ServerboundAcceptTeleportationPacket::new).addPacket(ServerboundBlockEntityTagQuery.class, ServerboundBlockEntityTagQuery::new).addPacket(ServerboundChangeDifficultyPacket.class, ServerboundChangeDifficultyPacket::new).addPacket(ServerboundChatPacket.class, ServerboundChatPacket::new).addPacket(ServerboundClientCommandPacket.class, ServerboundClientCommandPacket::new).addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new).addPacket(ServerboundCommandSuggestionPacket.class, ServerboundCommandSuggestionPacket::new).addPacket(ServerboundContainerAckPacket.class, ServerboundContainerAckPacket::new).addPacket(ServerboundContainerButtonClickPacket.class, ServerboundContainerButtonClickPacket::new).addPacket(ServerboundContainerClickPacket.class, ServerboundContainerClickPacket::new).addPacket(ServerboundContainerClosePacket.class, ServerboundContainerClosePacket::new).addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new).addPacket(ServerboundEditBookPacket.class, ServerboundEditBookPacket::new).addPacket(ServerboundEntityTagQuery.class, ServerboundEntityTagQuery::new).addPacket(ServerboundInteractPacket.class, ServerboundInteractPacket::new).addPacket(ServerboundJigsawGeneratePacket.class, ServerboundJigsawGeneratePacket::new).addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new).addPacket(ServerboundLockDifficultyPacket.class, ServerboundLockDifficultyPacket::new).addPacket(ServerboundMovePlayerPacket.Pos.class, ServerboundMovePlayerPacket.Pos::new).addPacket(ServerboundMovePlayerPacket.PosRot.class, ServerboundMovePlayerPacket.PosRot::new).addPacket(ServerboundMovePlayerPacket.Rot.class, ServerboundMovePlayerPacket.Rot::new).addPacket(ServerboundMovePlayerPacket.class, ServerboundMovePlayerPacket::new).addPacket(ServerboundMoveVehiclePacket.class, ServerboundMoveVehiclePacket::new).addPacket(ServerboundPaddleBoatPacket.class, ServerboundPaddleBoatPacket::new).addPacket(ServerboundPickItemPacket.class, ServerboundPickItemPacket::new).addPacket(ServerboundPlaceRecipePacket.class, ServerboundPlaceRecipePacket::new).addPacket(ServerboundPlayerAbilitiesPacket.class, ServerboundPlayerAbilitiesPacket::new).addPacket(ServerboundPlayerActionPacket.class, ServerboundPlayerActionPacket::new).addPacket(ServerboundPlayerCommandPacket.class, ServerboundPlayerCommandPacket::new).addPacket(ServerboundPlayerInputPacket.class, ServerboundPlayerInputPacket::new).addPacket(ServerboundRecipeBookChangeSettingsPacket.class, ServerboundRecipeBookChangeSettingsPacket::new).addPacket(ServerboundRecipeBookSeenRecipePacket.class, ServerboundRecipeBookSeenRecipePacket::new).addPacket(ServerboundRenameItemPacket.class, ServerboundRenameItemPacket::new).addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new).addPacket(ServerboundSeenAdvancementsPacket.class, ServerboundSeenAdvancementsPacket::new).addPacket(ServerboundSelectTradePacket.class, ServerboundSelectTradePacket::new).addPacket(ServerboundSetBeaconPacket.class, ServerboundSetBeaconPacket::new).addPacket(ServerboundSetCarriedItemPacket.class, ServerboundSetCarriedItemPacket::new).addPacket(ServerboundSetCommandBlockPacket.class, ServerboundSetCommandBlockPacket::new).addPacket(ServerboundSetCommandMinecartPacket.class, ServerboundSetCommandMinecartPacket::new).addPacket(ServerboundSetCreativeModeSlotPacket.class, ServerboundSetCreativeModeSlotPacket::new).addPacket(ServerboundSetJigsawBlockPacket.class, ServerboundSetJigsawBlockPacket::new).addPacket(ServerboundSetStructureBlockPacket.class, ServerboundSetStructureBlockPacket::new).addPacket(ServerboundSignUpdatePacket.class, ServerboundSignUpdatePacket::new).addPacket(ServerboundSwingPacket.class, ServerboundSwingPacket::new).addPacket(ServerboundTeleportToEntityPacket.class, ServerboundTeleportToEntityPacket::new).addPacket(ServerboundUseItemOnPacket.class, ServerboundUseItemOnPacket::new).addPacket(ServerboundUseItemPacket.class, ServerboundUseItemPacket::new))),
-    STATUS(1, ConnectionProtocol.protocol().addFlow(PacketFlow.SERVERBOUND, new PacketSet<T>().addPacket(ServerboundStatusRequestPacket.class, ServerboundStatusRequestPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new)).addFlow(PacketFlow.CLIENTBOUND, new PacketSet<T>().addPacket(ClientboundStatusResponsePacket.class, ClientboundStatusResponsePacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new))),
-    LOGIN(2, ConnectionProtocol.protocol().addFlow(PacketFlow.CLIENTBOUND, new PacketSet<T>().addPacket(ClientboundLoginDisconnectPacket.class, ClientboundLoginDisconnectPacket::new).addPacket(ClientboundHelloPacket.class, ClientboundHelloPacket::new).addPacket(ClientboundGameProfilePacket.class, ClientboundGameProfilePacket::new).addPacket(ClientboundLoginCompressionPacket.class, ClientboundLoginCompressionPacket::new).addPacket(ClientboundCustomQueryPacket.class, ClientboundCustomQueryPacket::new)).addFlow(PacketFlow.SERVERBOUND, new PacketSet<T>().addPacket(ServerboundHelloPacket.class, ServerboundHelloPacket::new).addPacket(ServerboundKeyPacket.class, ServerboundKeyPacket::new).addPacket(ServerboundCustomQueryPacket.class, ServerboundCustomQueryPacket::new)));
+    // MagmaCube start - decompile error
+    HANDSHAKING(-1, ConnectionProtocol.protocol().addFlow(PacketFlow.SERVERBOUND, new PacketSet().addPacket(ClientIntentionPacket.class, ClientIntentionPacket::new))),
+    PLAY(0, ConnectionProtocol.protocol().addFlow(PacketFlow.CLIENTBOUND, new PacketSet().addPacket(ClientboundAddEntityPacket.class, ClientboundAddEntityPacket::new).addPacket(ClientboundAddExperienceOrbPacket.class, ClientboundAddExperienceOrbPacket::new).addPacket(ClientboundAddMobPacket.class, ClientboundAddMobPacket::new).addPacket(ClientboundAddPaintingPacket.class, ClientboundAddPaintingPacket::new).addPacket(ClientboundAddPlayerPacket.class, ClientboundAddPlayerPacket::new).addPacket(ClientboundAnimatePacket.class, ClientboundAnimatePacket::new).addPacket(ClientboundAwardStatsPacket.class, ClientboundAwardStatsPacket::new).addPacket(ClientboundBlockBreakAckPacket.class, ClientboundBlockBreakAckPacket::new).addPacket(ClientboundBlockDestructionPacket.class, ClientboundBlockDestructionPacket::new).addPacket(ClientboundBlockEntityDataPacket.class, ClientboundBlockEntityDataPacket::new).addPacket(ClientboundBlockEventPacket.class, ClientboundBlockEventPacket::new).addPacket(ClientboundBlockUpdatePacket.class, ClientboundBlockUpdatePacket::new).addPacket(ClientboundBossEventPacket.class, ClientboundBossEventPacket::new).addPacket(ClientboundChangeDifficultyPacket.class, ClientboundChangeDifficultyPacket::new).addPacket(ClientboundChatPacket.class, ClientboundChatPacket::new).addPacket(ClientboundCommandSuggestionsPacket.class, ClientboundCommandSuggestionsPacket::new).addPacket(ClientboundCommandsPacket.class, ClientboundCommandsPacket::new).addPacket(ClientboundContainerAckPacket.class, ClientboundContainerAckPacket::new).addPacket(ClientboundContainerClosePacket.class, ClientboundContainerClosePacket::new).addPacket(ClientboundContainerSetContentPacket.class, ClientboundContainerSetContentPacket::new).addPacket(ClientboundContainerSetDataPacket.class, ClientboundContainerSetDataPacket::new).addPacket(ClientboundContainerSetSlotPacket.class, ClientboundContainerSetSlotPacket::new).addPacket(ClientboundCooldownPacket.class, ClientboundCooldownPacket::new).addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new).addPacket(ClientboundCustomSoundPacket.class, ClientboundCustomSoundPacket::new).addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new).addPacket(ClientboundEntityEventPacket.class, ClientboundEntityEventPacket::new).addPacket(ClientboundExplodePacket.class, ClientboundExplodePacket::new).addPacket(ClientboundForgetLevelChunkPacket.class, ClientboundForgetLevelChunkPacket::new).addPacket(ClientboundGameEventPacket.class, ClientboundGameEventPacket::new).addPacket(ClientboundHorseScreenOpenPacket.class, ClientboundHorseScreenOpenPacket::new).addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new).addPacket(ClientboundLevelChunkPacket.class, ClientboundLevelChunkPacket::new).addPacket(ClientboundLevelEventPacket.class, ClientboundLevelEventPacket::new).addPacket(ClientboundLevelParticlesPacket.class, ClientboundLevelParticlesPacket::new).addPacket(ClientboundLightUpdatePacket.class, ClientboundLightUpdatePacket::new).addPacket(ClientboundLoginPacket.class, ClientboundLoginPacket::new).addPacket(ClientboundMapItemDataPacket.class, ClientboundMapItemDataPacket::new).addPacket(ClientboundMerchantOffersPacket.class, ClientboundMerchantOffersPacket::new).addPacket(ClientboundMoveEntityPacket.Pos.class, ClientboundMoveEntityPacket.Pos::new).addPacket(ClientboundMoveEntityPacket.PosRot.class, ClientboundMoveEntityPacket.PosRot::new).addPacket(ClientboundMoveEntityPacket.Rot.class, ClientboundMoveEntityPacket.Rot::new).addPacket(ClientboundMoveEntityPacket.class, ClientboundMoveEntityPacket::new).addPacket(ClientboundMoveVehiclePacket.class, ClientboundMoveVehiclePacket::new).addPacket(ClientboundOpenBookPacket.class, ClientboundOpenBookPacket::new).addPacket(ClientboundOpenScreenPacket.class, ClientboundOpenScreenPacket::new).addPacket(ClientboundOpenSignEditorPacket.class, ClientboundOpenSignEditorPacket::new).addPacket(ClientboundPlaceGhostRecipePacket.class, ClientboundPlaceGhostRecipePacket::new).addPacket(ClientboundPlayerAbilitiesPacket.class, ClientboundPlayerAbilitiesPacket::new).addPacket(ClientboundPlayerCombatPacket.class, ClientboundPlayerCombatPacket::new).addPacket(ClientboundPlayerInfoPacket.class, ClientboundPlayerInfoPacket::new).addPacket(ClientboundPlayerLookAtPacket.class, ClientboundPlayerLookAtPacket::new).addPacket(ClientboundPlayerPositionPacket.class, ClientboundPlayerPositionPacket::new).addPacket(ClientboundRecipePacket.class, ClientboundRecipePacket::new).addPacket(ClientboundRemoveEntitiesPacket.class, ClientboundRemoveEntitiesPacket::new).addPacket(ClientboundRemoveMobEffectPacket.class, ClientboundRemoveMobEffectPacket::new).addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new).addPacket(ClientboundRespawnPacket.class, ClientboundRespawnPacket::new).addPacket(ClientboundRotateHeadPacket.class, ClientboundRotateHeadPacket::new).addPacket(ClientboundSectionBlocksUpdatePacket.class, ClientboundSectionBlocksUpdatePacket::new).addPacket(ClientboundSelectAdvancementsTabPacket.class, ClientboundSelectAdvancementsTabPacket::new).addPacket(ClientboundSetBorderPacket.class, ClientboundSetBorderPacket::new).addPacket(ClientboundSetCameraPacket.class, ClientboundSetCameraPacket::new).addPacket(ClientboundSetCarriedItemPacket.class, ClientboundSetCarriedItemPacket::new).addPacket(ClientboundSetChunkCacheCenterPacket.class, ClientboundSetChunkCacheCenterPacket::new).addPacket(ClientboundSetChunkCacheRadiusPacket.class, ClientboundSetChunkCacheRadiusPacket::new).addPacket(ClientboundSetDefaultSpawnPositionPacket.class, ClientboundSetDefaultSpawnPositionPacket::new).addPacket(ClientboundSetDisplayObjectivePacket.class, ClientboundSetDisplayObjectivePacket::new).addPacket(ClientboundSetEntityDataPacket.class, ClientboundSetEntityDataPacket::new).addPacket(ClientboundSetEntityLinkPacket.class, ClientboundSetEntityLinkPacket::new).addPacket(ClientboundSetEntityMotionPacket.class, ClientboundSetEntityMotionPacket::new).addPacket(ClientboundSetEquipmentPacket.class, ClientboundSetEquipmentPacket::new).addPacket(ClientboundSetExperiencePacket.class, ClientboundSetExperiencePacket::new).addPacket(ClientboundSetHealthPacket.class, ClientboundSetHealthPacket::new).addPacket(ClientboundSetObjectivePacket.class, ClientboundSetObjectivePacket::new).addPacket(ClientboundSetPassengersPacket.class, ClientboundSetPassengersPacket::new).addPacket(ClientboundSetPlayerTeamPacket.class, ClientboundSetPlayerTeamPacket::new).addPacket(ClientboundSetScorePacket.class, ClientboundSetScorePacket::new).addPacket(ClientboundSetTimePacket.class, ClientboundSetTimePacket::new).addPacket(ClientboundSetTitlesPacket.class, ClientboundSetTitlesPacket::new).addPacket(ClientboundSoundEntityPacket.class, ClientboundSoundEntityPacket::new).addPacket(ClientboundSoundPacket.class, ClientboundSoundPacket::new).addPacket(ClientboundStopSoundPacket.class, ClientboundStopSoundPacket::new).addPacket(ClientboundTabListPacket.class, ClientboundTabListPacket::new).addPacket(ClientboundTagQueryPacket.class, ClientboundTagQueryPacket::new).addPacket(ClientboundTakeItemEntityPacket.class, ClientboundTakeItemEntityPacket::new).addPacket(ClientboundTeleportEntityPacket.class, ClientboundTeleportEntityPacket::new).addPacket(ClientboundUpdateAdvancementsPacket.class, ClientboundUpdateAdvancementsPacket::new).addPacket(ClientboundUpdateAttributesPacket.class, ClientboundUpdateAttributesPacket::new).addPacket(ClientboundUpdateMobEffectPacket.class, ClientboundUpdateMobEffectPacket::new).addPacket(ClientboundUpdateRecipesPacket.class, ClientboundUpdateRecipesPacket::new).addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new)).addFlow(PacketFlow.SERVERBOUND, new PacketSet().addPacket(ServerboundAcceptTeleportationPacket.class, ServerboundAcceptTeleportationPacket::new).addPacket(ServerboundBlockEntityTagQuery.class, ServerboundBlockEntityTagQuery::new).addPacket(ServerboundChangeDifficultyPacket.class, ServerboundChangeDifficultyPacket::new).addPacket(ServerboundChatPacket.class, ServerboundChatPacket::new).addPacket(ServerboundClientCommandPacket.class, ServerboundClientCommandPacket::new).addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new).addPacket(ServerboundCommandSuggestionPacket.class, ServerboundCommandSuggestionPacket::new).addPacket(ServerboundContainerAckPacket.class, ServerboundContainerAckPacket::new).addPacket(ServerboundContainerButtonClickPacket.class, ServerboundContainerButtonClickPacket::new).addPacket(ServerboundContainerClickPacket.class, ServerboundContainerClickPacket::new).addPacket(ServerboundContainerClosePacket.class, ServerboundContainerClosePacket::new).addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new).addPacket(ServerboundEditBookPacket.class, ServerboundEditBookPacket::new).addPacket(ServerboundEntityTagQuery.class, ServerboundEntityTagQuery::new).addPacket(ServerboundInteractPacket.class, ServerboundInteractPacket::new).addPacket(ServerboundJigsawGeneratePacket.class, ServerboundJigsawGeneratePacket::new).addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new).addPacket(ServerboundLockDifficultyPacket.class, ServerboundLockDifficultyPacket::new).addPacket(ServerboundMovePlayerPacket.Pos.class, ServerboundMovePlayerPacket.Pos::new).addPacket(ServerboundMovePlayerPacket.PosRot.class, ServerboundMovePlayerPacket.PosRot::new).addPacket(ServerboundMovePlayerPacket.Rot.class, ServerboundMovePlayerPacket.Rot::new).addPacket(ServerboundMovePlayerPacket.class, ServerboundMovePlayerPacket::new).addPacket(ServerboundMoveVehiclePacket.class, ServerboundMoveVehiclePacket::new).addPacket(ServerboundPaddleBoatPacket.class, ServerboundPaddleBoatPacket::new).addPacket(ServerboundPickItemPacket.class, ServerboundPickItemPacket::new).addPacket(ServerboundPlaceRecipePacket.class, ServerboundPlaceRecipePacket::new).addPacket(ServerboundPlayerAbilitiesPacket.class, ServerboundPlayerAbilitiesPacket::new).addPacket(ServerboundPlayerActionPacket.class, ServerboundPlayerActionPacket::new).addPacket(ServerboundPlayerCommandPacket.class, ServerboundPlayerCommandPacket::new).addPacket(ServerboundPlayerInputPacket.class, ServerboundPlayerInputPacket::new).addPacket(ServerboundRecipeBookChangeSettingsPacket.class, ServerboundRecipeBookChangeSettingsPacket::new).addPacket(ServerboundRecipeBookSeenRecipePacket.class, ServerboundRecipeBookSeenRecipePacket::new).addPacket(ServerboundRenameItemPacket.class, ServerboundRenameItemPacket::new).addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new).addPacket(ServerboundSeenAdvancementsPacket.class, ServerboundSeenAdvancementsPacket::new).addPacket(ServerboundSelectTradePacket.class, ServerboundSelectTradePacket::new).addPacket(ServerboundSetBeaconPacket.class, ServerboundSetBeaconPacket::new).addPacket(ServerboundSetCarriedItemPacket.class, ServerboundSetCarriedItemPacket::new).addPacket(ServerboundSetCommandBlockPacket.class, ServerboundSetCommandBlockPacket::new).addPacket(ServerboundSetCommandMinecartPacket.class, ServerboundSetCommandMinecartPacket::new).addPacket(ServerboundSetCreativeModeSlotPacket.class, ServerboundSetCreativeModeSlotPacket::new).addPacket(ServerboundSetJigsawBlockPacket.class, ServerboundSetJigsawBlockPacket::new).addPacket(ServerboundSetStructureBlockPacket.class, ServerboundSetStructureBlockPacket::new).addPacket(ServerboundSignUpdatePacket.class, ServerboundSignUpdatePacket::new).addPacket(ServerboundSwingPacket.class, ServerboundSwingPacket::new).addPacket(ServerboundTeleportToEntityPacket.class, ServerboundTeleportToEntityPacket::new).addPacket(ServerboundUseItemOnPacket.class, ServerboundUseItemOnPacket::new).addPacket(ServerboundUseItemPacket.class, ServerboundUseItemPacket::new))),
+    STATUS(1, ConnectionProtocol.protocol().addFlow(PacketFlow.SERVERBOUND, new PacketSet().addPacket(ServerboundStatusRequestPacket.class, ServerboundStatusRequestPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new)).addFlow(PacketFlow.CLIENTBOUND, new PacketSet().addPacket(ClientboundStatusResponsePacket.class, ClientboundStatusResponsePacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new))),
+    LOGIN(2, ConnectionProtocol.protocol().addFlow(PacketFlow.CLIENTBOUND, new PacketSet().addPacket(ClientboundLoginDisconnectPacket.class, ClientboundLoginDisconnectPacket::new).addPacket(ClientboundHelloPacket.class, ClientboundHelloPacket::new).addPacket(ClientboundGameProfilePacket.class, ClientboundGameProfilePacket::new).addPacket(ClientboundLoginCompressionPacket.class, ClientboundLoginCompressionPacket::new).addPacket(ClientboundCustomQueryPacket.class, ClientboundCustomQueryPacket::new)).addFlow(PacketFlow.SERVERBOUND, new PacketSet().addPacket(ServerboundHelloPacket.class, ServerboundHelloPacket::new).addPacket(ServerboundKeyPacket.class, ServerboundKeyPacket::new).addPacket(ServerboundCustomQueryPacket.class, ServerboundCustomQueryPacket::new)));
+    // MagmaCube end - decompile error
 
     private static final ConnectionProtocol[] LOOKUP;
     private static final Map<Class<? extends Packet<?>>, ConnectionProtocol> PROTOCOL_BY_PACKET;
@@ -265,7 +267,7 @@ public enum ConnectionProtocol {
 
         @Nullable
         public Packet<?> createPacket(int i) {
-            Supplier<Packet<T>> supplier = this.idToConstructor.get(i);
+            Supplier<? extends Packet<T>> supplier = this.idToConstructor.get(i); // MagmaCube - decompile error
             return supplier != null ? supplier.get() : null;
         }
 
diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index a373b62d0ca5467d5ef4be22c853887d783733eb..1ad7752287ece9d86e9c76dfdef3478d04c5ad6c 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -73,7 +73,7 @@ public class FriendlyByteBuf extends ByteBuf
         if (dataResult.error().isPresent()) {
             throw new IOException("Failed to encode: " + dataResult.error().get().message() + " " + object);
         }
-        this.writeNbt(dataResult.result().get());
+        this.writeNbt((CompoundTag) dataResult.result().get()); // MagmaCube - decompile error
     }
     
     public FriendlyByteBuf writeByteArray(final byte[] bytes) {
diff --git a/src/main/java/net/minecraft/network/chat/BaseComponent.java b/src/main/java/net/minecraft/network/chat/BaseComponent.java
index cb44ef2a5928d63b89d549842fcf9952cd4e5b3d..e30c8de5eefb1a5be2e79eeb8646ea8f146c0f9a 100644
--- a/src/main/java/net/minecraft/network/chat/BaseComponent.java
+++ b/src/main/java/net/minecraft/network/chat/BaseComponent.java
@@ -1,7 +1,7 @@
 package net.minecraft.network.chat;
 
 import java.util.Objects;
-import java.util.Collection;
+
 import com.google.common.collect.Lists;
 import javax.annotation.Nullable;
 import net.minecraft.locale.Language;
@@ -17,7 +17,7 @@ public abstract class BaseComponent implements MutableComponent
     private Style style;
     
     public BaseComponent() {
-        this.siblings = (List<Component>)Lists.newArrayList();
+        this.siblings = Lists.newArrayList(); // MagmaCube - decompile fix
         this.visualOrderText = FormattedCharSequence.EMPTY;
         this.style = Style.EMPTY;
     }
diff --git a/src/main/java/net/minecraft/network/chat/Component.java b/src/main/java/net/minecraft/network/chat/Component.java
index 2ac9740f28f7cf4fc1703e8ded5e34df746ac8ea..d6fb00432a853aa586b55bc014f8060c6e3dde59 100644
--- a/src/main/java/net/minecraft/network/chat/Component.java
+++ b/src/main/java/net/minecraft/network/chat/Component.java
@@ -40,20 +40,18 @@ public interface Component extends Message, FormattedText
     String getContents();
     
     default String getString() {
-        return super.getString();
+        return FormattedText.super.getString(); // MagmaCube - decompile error
     }
     
     default String getString(final int i) {
         final StringBuilder stringBuilder = new StringBuilder();
-        final StringBuilder sb;
-        final int i2;
         this.visit(s -> {
-            i2 = i - sb.length();
+            int i2 = i - stringBuilder.length(); // MagmaCube - decompile error
             if (i2 <= 0) {
                 return Component.STOP_ITERATION;
             }
             else {
-                sb.append((s.length() <= i2) ? s : s.substring(0, i2));
+                stringBuilder.append((s.length() <= i2) ? s : s.substring(0, i2)); // MagmaCube - decompile error
                 return Optional.empty();
             }
         });
@@ -105,7 +103,7 @@ public interface Component extends Message, FormattedText
         return contentConsumer.accept(this.getContents());
     }
     
-    default Component nullToEmpty(@Nullable final String s) {
+    static Component nullToEmpty(@Nullable final String s) { // MagmaCube - default -> static
         return (s != null) ? new TextComponent(s) : TextComponent.EMPTY;
     }
     
@@ -120,9 +118,10 @@ public interface Component extends Message, FormattedText
                 return new TextComponent(jsonElement.getAsString());
             }
             if (jsonElement.isJsonObject()) {
+                MutableComponent mutableComponent;
                 final JsonObject jsonObject = jsonElement.getAsJsonObject();
                 if (jsonObject.has("text")) {
-                    final MutableComponent mutableComponent = new TextComponent(GsonHelper.getAsString(jsonObject, "text"));
+                    mutableComponent = new TextComponent(GsonHelper.getAsString(jsonObject, "text")); // MagmaCube - decompile error
                 }
                 else if (jsonObject.has("translate")) {
                     final String s = GsonHelper.getAsString(jsonObject, "translate");
@@ -138,10 +137,10 @@ public interface Component extends Message, FormattedText
                                 }
                             }
                         }
-                        final MutableComponent mutableComponent2 = new TranslatableComponent(s, objects);
+                        mutableComponent = new TranslatableComponent(s, objects); // MagmaCube - decompile error
                     }
                     else {
-                        final MutableComponent mutableComponent3 = new TranslatableComponent(s);
+                        mutableComponent = new TranslatableComponent(s); // MagmaCube - decompile error
                     }
                 }
                 else if (jsonObject.has("score")) {
@@ -149,13 +148,13 @@ public interface Component extends Message, FormattedText
                     if (!jsonObject2.has("name") || !jsonObject2.has("objective")) {
                         throw new JsonParseException("A score component needs a least a name and an objective");
                     }
-                    final MutableComponent mutableComponent4 = new ScoreComponent(GsonHelper.getAsString(jsonObject2, "name"), GsonHelper.getAsString(jsonObject2, "objective"));
+                    mutableComponent = new ScoreComponent(GsonHelper.getAsString(jsonObject2, "name"), GsonHelper.getAsString(jsonObject2, "objective")); // MagmaCube - decompile error
                 }
                 else if (jsonObject.has("selector")) {
-                    final MutableComponent mutableComponent5 = new SelectorComponent(GsonHelper.getAsString(jsonObject, "selector"));
+                    mutableComponent = new SelectorComponent(GsonHelper.getAsString(jsonObject, "selector")); // MagmaCube - decompile error
                 }
                 else if (jsonObject.has("keybind")) {
-                    final MutableComponent mutableComponent6 = new KeybindComponent(GsonHelper.getAsString(jsonObject, "keybind"));
+                    mutableComponent = new KeybindComponent(GsonHelper.getAsString(jsonObject, "keybind")); // MagmaCube - decompile error
                 }
                 else {
                     if (!jsonObject.has("nbt")) {
@@ -164,30 +163,31 @@ public interface Component extends Message, FormattedText
                     final String s2 = GsonHelper.getAsString(jsonObject, "nbt");
                     final boolean flag = GsonHelper.getAsBoolean(jsonObject, "interpret", false);
                     if (jsonObject.has("block")) {
-                        final MutableComponent mutableComponent7 = new NbtComponent.BlockNbtComponent(s2, flag, GsonHelper.getAsString(jsonObject, "block"));
+                        mutableComponent = new NbtComponent.BlockNbtComponent(s2, flag, GsonHelper.getAsString(jsonObject, "block")); // MagmaCube - decompile error
                     }
                     else if (jsonObject.has("entity")) {
-                        final MutableComponent mutableComponent8 = new NbtComponent.EntityNbtComponent(s2, flag, GsonHelper.getAsString(jsonObject, "entity"));
+                        mutableComponent = new NbtComponent.EntityNbtComponent(s2, flag, GsonHelper.getAsString(jsonObject, "entity")); // MagmaCube - decompile error
                     }
                     else {
                         if (!jsonObject.has("storage")) {
                             throw new JsonParseException("Don't know how to turn " + jsonElement + " into a Component");
                         }
-                        final MutableComponent mutableComponent9 = new NbtComponent.StorageNbtComponent(s2, flag, new ResourceLocation(GsonHelper.getAsString(jsonObject, "storage")));
+                        mutableComponent = new NbtComponent.StorageNbtComponent(s2, flag, new ResourceLocation(GsonHelper.getAsString(jsonObject, "storage"))); // MagmaCube - decompile error
                     }
                 }
-                final MutableComponent mutableComponent10;
                 if (jsonObject.has("extra")) {
                     final JsonArray jsonArray2 = GsonHelper.getAsJsonArray(jsonObject, "extra");
                     if (jsonArray2.size() <= 0) {
                         throw new JsonParseException("Unexpected empty array of components");
                     }
                     for (int i2 = 0; i2 < jsonArray2.size(); ++i2) {
-                        mutableComponent10.append(this.deserialize(jsonArray2.get(i2), type, jsonDeserializationContext));
+                        mutableComponent.append(this.deserialize(jsonArray2.get(i2), type, jsonDeserializationContext)); // MagmaCube - decompile error
                     }
                 }
-                mutableComponent10.setStyle((Style)jsonDeserializationContext.deserialize(jsonElement, (Type)Style.class));
-                return mutableComponent10;
+                // MagmaCube start - decompile error
+                mutableComponent.setStyle((Style)jsonDeserializationContext.deserialize(jsonElement, (Type)Style.class));
+                return mutableComponent;
+                // MagmaCube end - decompile error
             }
             if (jsonElement.isJsonArray()) {
                 final JsonArray jsonArray3 = jsonElement.getAsJsonArray();
@@ -320,9 +320,7 @@ public interface Component extends Message, FormattedText
                 return mutableComponent;
             }
             catch (IOException | StackOverflowError ex) {
-                final Throwable t;
-                final Throwable throwable = t;
-                throw new JsonParseException(throwable);
+                throw new JsonParseException(ex); // MagmaCube - decompile error
             }
         }
         
@@ -336,20 +334,18 @@ public interface Component extends Message, FormattedText
         }
         
         static {
-            final GsonBuilder gsonBuilder;
             GSON = Util.make(() -> {
-                gsonBuilder = new GsonBuilder();
+                GsonBuilder gsonBuilder = new GsonBuilder(); // MagmaCube - decompile error
                 gsonBuilder.disableHtmlEscaping();
                 gsonBuilder.registerTypeHierarchyAdapter((Class)Component.class, new Serializer());
                 gsonBuilder.registerTypeHierarchyAdapter((Class)Style.class, new Style.Serializer());
                 gsonBuilder.registerTypeAdapterFactory((TypeAdapterFactory)new LowerCaseEnumTypeAdapterFactory());
                 return gsonBuilder.create();
             });
-            Field field;
             JSON_READER_POS = Util.make(() -> {
                 try {
                     new JsonReader((Reader)new java.io.StringReader(""));
-                    field = JsonReader.class.getDeclaredField("pos");
+                    Field field = JsonReader.class.getDeclaredField("pos"); // MagmaCube - decompile error
                     field.setAccessible(true);
                     return field;
                 }
@@ -357,11 +353,10 @@ public interface Component extends Message, FormattedText
                     throw new IllegalStateException("Couldn't get field 'pos' for JsonReader", noSuchFieldException);
                 }
             });
-            Field field2;
             JSON_READER_LINESTART = Util.make(() -> {
                 try {
                     new JsonReader((Reader)new java.io.StringReader(""));
-                    field2 = JsonReader.class.getDeclaredField("lineStart");
+                    Field field2 = JsonReader.class.getDeclaredField("lineStart"); // MagmaCube - decompile error
                     field2.setAccessible(true);
                     return field2;
                 }
diff --git a/src/main/java/net/minecraft/network/chat/FormattedText.java b/src/main/java/net/minecraft/network/chat/FormattedText.java
index 257b9dc56ffbf2c25a9ce2a47f6c29a22990e181..b881e8515647ac63e1fcd02ec4e17a5386d08006 100644
--- a/src/main/java/net/minecraft/network/chat/FormattedText.java
+++ b/src/main/java/net/minecraft/network/chat/FormattedText.java
@@ -25,7 +25,7 @@ public interface FormattedText
     
      <T> Optional<T> visit(final StyledContentConsumer<T> p0, final Style p1);
     
-    default FormattedText of(final String s) {
+    static FormattedText of(final String s) { // MagmaCube - default -> static
         return new FormattedText() {
             @Override
             public <T> Optional<T> visit(final ContentConsumer<T> contentConsumer) {
@@ -39,7 +39,7 @@ public interface FormattedText
         };
     }
     
-    default FormattedText of(final String s, final Style style) {
+    static FormattedText of(final String s, final Style style) { // MagmaCube - default -> static
         return new FormattedText() {
             @Override
             public <T> Optional<T> visit(final ContentConsumer<T> contentConsumer) {
@@ -47,17 +47,19 @@ public interface FormattedText
             }
             
             @Override
-            public <T> Optional<T> visit(final StyledContentConsumer<T> styledContentConsumer, final Style style) {
-                return styledContentConsumer.accept(style.applyTo(style), s);
+            // MagmaCube start - decompile trap
+            public <T> Optional<T> visit(final StyledContentConsumer<T> styledContentConsumer, final Style style1) {
+                return styledContentConsumer.accept(style.applyTo(style1), s);
+                // MagmaCube end - decompile trap
             }
         };
     }
     
-    default FormattedText composite(final FormattedText... formattedTexts) {
-        return composite((List<FormattedText>)ImmutableList.copyOf((Object[])formattedTexts));
+    static FormattedText composite(final FormattedText... formattedTexts) { // MagmaCube end - default -> static
+        return composite(ImmutableList.copyOf(formattedTexts)); // MagmaCube - decompile error
     }
     
-    default FormattedText composite(final List<FormattedText> list) {
+    static FormattedText composite(final List<FormattedText> list) { // MagmaCube - default -> static
         return new FormattedText() {
             @Override
             public <T> Optional<T> visit(final ContentConsumer<T> contentConsumer) {
diff --git a/src/main/java/net/minecraft/network/chat/HoverEvent.java b/src/main/java/net/minecraft/network/chat/HoverEvent.java
index 156dfad39cf4fa606ec62358e3cf5a806571f644..cd6b9563b9c0ba0364f2ce337a6a67c3de708852 100644
--- a/src/main/java/net/minecraft/network/chat/HoverEvent.java
+++ b/src/main/java/net/minecraft/network/chat/HoverEvent.java
@@ -101,7 +101,7 @@ public class HoverEvent {
 
     public static class Action<T> {
         public static final Action<Component> SHOW_TEXT = new Action<Component>("show_text", true, Component.Serializer::fromJson, Component.Serializer::toJsonTree, Function.identity());
-        public static final Action<ItemStackInfo> SHOW_ITEM = new Action<ItemStackInfo>("show_item", true, jsonElement -> ItemStackInfo.access$400(jsonElement), object -> ItemStackInfo.access$300((ItemStackInfo)object), component -> ItemStackInfo.access$200(component));
+        public static final Action<ItemStackInfo> SHOW_ITEM = new Action<ItemStackInfo>("show_item", true, jsonElement -> ItemStackInfo.create(jsonElement), object -> ((ItemStackInfo)object).serialize(), component -> ItemStackInfo.create(component)); // MagmaCube - decompile error
         public static final Action<EntityTooltipInfo> SHOW_ENTITY = new Action<EntityTooltipInfo>("show_entity", true, EntityTooltipInfo::create, EntityTooltipInfo::serialize, EntityTooltipInfo::create);
         private static final Map<String, Action> LOOKUP = (Map)Stream.of(SHOW_TEXT, SHOW_ITEM, SHOW_ENTITY).collect(ImmutableMap.toImmutableMap(Action::getName, action -> action));
         private final String name;
diff --git a/src/main/java/net/minecraft/network/chat/MutableComponent.java b/src/main/java/net/minecraft/network/chat/MutableComponent.java
index e2174330130ac885389dff22d5c74f602ce250e5..3aec74a1fbac92c3276079d66b5f1836e44cf4db 100644
--- a/src/main/java/net/minecraft/network/chat/MutableComponent.java
+++ b/src/main/java/net/minecraft/network/chat/MutableComponent.java
@@ -14,22 +14,22 @@ public interface MutableComponent extends Component
     MutableComponent append(final Component p0);
     
     default MutableComponent withStyle(final UnaryOperator<Style> unaryOperator) {
-        this.setStyle(unaryOperator.apply(super.getStyle()));
+        this.setStyle(unaryOperator.apply(getStyle())); // MagmaCube - decompile error
         return this;
     }
     
     default MutableComponent withStyle(final Style style) {
-        this.setStyle(style.applyTo(super.getStyle()));
+        this.setStyle(style.applyTo(getStyle())); // MagmaCube - decompile error
         return this;
     }
     
     default MutableComponent withStyle(final ChatFormatting... chatFormattings) {
-        this.setStyle(super.getStyle().applyFormats(chatFormattings));
+        this.setStyle(getStyle().applyFormats(chatFormattings)); // MagmaCube - decompile error
         return this;
     }
     
     default MutableComponent withStyle(final ChatFormatting chatFormatting) {
-        this.setStyle(super.getStyle().applyFormat(chatFormatting));
+        this.setStyle(getStyle().applyFormat(chatFormatting)); // MagmaCube - decompile error
         return this;
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/chat/NbtComponent.java b/src/main/java/net/minecraft/network/chat/NbtComponent.java
index 7806d73cb05c96fd6eb013bd40a02ea6e215d950..1bc2d303aa8e700f1ffbe2a8f4a06ec9868fdf98 100644
--- a/src/main/java/net/minecraft/network/chat/NbtComponent.java
+++ b/src/main/java/net/minecraft/network/chat/NbtComponent.java
@@ -142,16 +142,6 @@ implements ContextAwareComponent {
         public String toString() {
             return "StorageNbtComponent{id='" + this.id + '\'' + "path='" + this.nbtPathPattern + '\'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}';
         }
-
-        @Override
-        public /* synthetic */ BaseComponent plainCopy() {
-            return this.plainCopy();
-        }
-
-        @Override
-        public /* synthetic */ MutableComponent plainCopy() {
-            return this.plainCopy();
-        }
     }
 
     public static class BlockNbtComponent
@@ -219,16 +209,6 @@ implements ContextAwareComponent {
         public String toString() {
             return "BlockPosArgument{pos='" + this.posPattern + '\'' + "path='" + this.nbtPathPattern + '\'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}';
         }
-
-        @Override
-        public /* synthetic */ BaseComponent plainCopy() {
-            return this.plainCopy();
-        }
-
-        @Override
-        public /* synthetic */ MutableComponent plainCopy() {
-            return this.plainCopy();
-        }
     }
 
     public static class EntityNbtComponent
@@ -294,15 +274,5 @@ implements ContextAwareComponent {
         public String toString() {
             return "EntityNbtComponent{selector='" + this.selectorPattern + '\'' + "path='" + this.nbtPathPattern + '\'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}';
         }
-
-        @Override
-        public /* synthetic */ BaseComponent plainCopy() {
-            return this.plainCopy();
-        }
-
-        @Override
-        public /* synthetic */ MutableComponent plainCopy() {
-            return this.plainCopy();
-        }
     }
 }
diff --git a/src/main/java/net/minecraft/network/chat/ScoreComponent.java b/src/main/java/net/minecraft/network/chat/ScoreComponent.java
index 465eb1eb99bd4741b4cf463c8a86572a8fd92deb..f32a9633e3ca22f72ff1be1a91ce06df0fee1fc1 100644
--- a/src/main/java/net/minecraft/network/chat/ScoreComponent.java
+++ b/src/main/java/net/minecraft/network/chat/ScoreComponent.java
@@ -107,14 +107,4 @@ implements ContextAwareComponent {
     public String toString() {
         return "ScoreComponent{name='" + this.name + '\'' + "objective='" + this.objective + '\'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}';
     }
-
-    @Override
-    public /* synthetic */ BaseComponent plainCopy() {
-        return this.plainCopy();
-    }
-
-    @Override
-    public /* synthetic */ MutableComponent plainCopy() {
-        return this.plainCopy();
-    }
 }
diff --git a/src/main/java/net/minecraft/network/chat/Style.java b/src/main/java/net/minecraft/network/chat/Style.java
index 9cf63e606efb082fff3888e19ad920ba23ee0f46..579fb64a310bf58b105e3bda7267cf274f9933aa 100644
--- a/src/main/java/net/minecraft/network/chat/Style.java
+++ b/src/main/java/net/minecraft/network/chat/Style.java
@@ -320,7 +320,7 @@ public class Style
             final ClickEvent clickEvent = getClickEvent(jsonObject);
             final HoverEvent hoverEvent = getHoverEvent(jsonObject);
             final ResourceLocation resourceLocation = getFont(jsonObject);
-            return new Style(textColor, flag, flag2, flag3, flag4, flag5, clickEvent, hoverEvent, s, resourceLocation, null);
+            return new Style(textColor, flag, flag2, flag3, flag4, flag5, clickEvent, hoverEvent, s, resourceLocation); // MagmaCube - decompile error
         }
         
         @Nullable
diff --git a/src/main/java/net/minecraft/network/chat/TranslatableComponent.java b/src/main/java/net/minecraft/network/chat/TranslatableComponent.java
index 1ac41dfceac2ca37196b239c833ead816f4eb043..a108e73ddba4446e2409ab17fc5d7bf7947152ea 100644
--- a/src/main/java/net/minecraft/network/chat/TranslatableComponent.java
+++ b/src/main/java/net/minecraft/network/chat/TranslatableComponent.java
@@ -26,13 +26,13 @@ public class TranslatableComponent extends BaseComponent implements ContextAware
     private static final Pattern FORMAT_PATTERN;
     
     public TranslatableComponent(final String s) {
-        this.decomposedParts = (List<FormattedText>)Lists.newArrayList();
+        this.decomposedParts = Lists.newArrayList(); // MagmaCube - decompile error
         this.key = s;
         this.args = TranslatableComponent.NO_ARGS;
     }
     
     public TranslatableComponent(final String s, final Object... objects) {
-        this.decomposedParts = (List<FormattedText>)Lists.newArrayList();
+        this.decomposedParts = Lists.newArrayList(); // MagmaCube - decompile error
         this.key = s;
         this.args = objects;
     }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockBreakAckPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockBreakAckPacket.java
index 831297bcf284873a4593436fb25468210f92997e..6a54926edb0d4abe1c8a9523b9e13e1a44a0c363 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockBreakAckPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockBreakAckPacket.java
@@ -1,7 +1,7 @@
 package net.minecraft.network.protocol.game;
 
 import org.apache.logging.log4j.LogManager;
-import net.minecraft.network.PacketListener;
+
 import java.io.IOException;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.network.FriendlyByteBuf;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java
index a8d039773fa00c0db5ca30c0d941dfaed845134f..479c3bd8cc9a900683cd98d01a9fc19c1182b797 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.network.FriendlyByteBuf;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandsPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandsPacket.java
index 5d98984c5e6a8e611a5bfcd148a4b9a35c0b9d17..3ee176bba63ba46c11db88bd2ea9548ccbedac7b 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandsPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandsPacket.java
@@ -64,7 +64,7 @@ public class ClientboundCommandsPacket implements Packet<ClientGamePacketListene
     }
     
     private static void resolveEntries(final Entry[] entrys) {
-        final List<Entry> list = (List<Entry>)Lists.newArrayList((Object[])entrys);
+        final List<Entry> list = (List<Entry>)Lists.newArrayList(entrys); // MagmaCube - decompile error
         while (!list.isEmpty()) {
             final boolean flag = list.removeIf(entry -> entry.build(entrys));
             if (!flag) {
@@ -75,7 +75,7 @@ public class ClientboundCommandsPacket implements Packet<ClientGamePacketListene
     
     private static Object2IntMap<CommandNode<SharedSuggestionProvider>> enumerateNodes(final RootCommandNode<SharedSuggestionProvider> rootCommandNode) {
         final Object2IntMap<CommandNode<SharedSuggestionProvider>> object2IntMap = (Object2IntMap<CommandNode<SharedSuggestionProvider>>)new Object2IntOpenHashMap();
-        final Queue<CommandNode<SharedSuggestionProvider>> queue = (Queue<CommandNode<SharedSuggestionProvider>>)Queues.newArrayDeque();
+        final Queue<CommandNode<SharedSuggestionProvider>> queue = Queues.newArrayDeque(); // MagmaCube - decompile error
         queue.add((CommandNode<SharedSuggestionProvider>)rootCommandNode);
         CommandNode<SharedSuggestionProvider> commandNode;
         while ((commandNode = queue.poll()) != null) {
@@ -84,7 +84,7 @@ public class ClientboundCommandsPacket implements Packet<ClientGamePacketListene
             }
             final int i = object2IntMap.size();
             object2IntMap.put(commandNode, i);
-            queue.addAll((Collection<?>)commandNode.getChildren());
+            queue.addAll(commandNode.getChildren()); // MagmaCube - decompile error
             if (commandNode.getRedirect() == null) {
                 continue;
             }
@@ -95,7 +95,7 @@ public class ClientboundCommandsPacket implements Packet<ClientGamePacketListene
     
     private static CommandNode<SharedSuggestionProvider>[] getNodesInIdOrder(final Object2IntMap<CommandNode<SharedSuggestionProvider>> object2IntMap) {
         final CommandNode<SharedSuggestionProvider>[] commandNodes = (CommandNode<SharedSuggestionProvider>[])new CommandNode[object2IntMap.size()];
-        for (final Object2IntMap.Entry<CommandNode<SharedSuggestionProvider>> entry : Object2IntMaps.fastIterable((Object2IntMap)object2IntMap)) {
+        for (final Object2IntMap.Entry<CommandNode<SharedSuggestionProvider>> entry : Object2IntMaps.fastIterable(object2IntMap)) { // MagmaCube - decompile error
             commandNodes[entry.getIntValue()] = (CommandNode<SharedSuggestionProvider>)entry.getKey();
         }
         return commandNodes;
@@ -126,7 +126,7 @@ public class ClientboundCommandsPacket implements Packet<ClientGamePacketListene
         }
         else {
             if (i == 1) {
-                return (ArgumentBuilder<SharedSuggestionProvider, ?>)LiteralArgumentBuilder.literal(friendlyByteBuf.readUtf(32767));
+                return LiteralArgumentBuilder.literal(friendlyByteBuf.readUtf(32767)); // MagmaCube - decompile error
             }
             return null;
         }
@@ -135,25 +135,25 @@ public class ClientboundCommandsPacket implements Packet<ClientGamePacketListene
     private static void writeNode(final FriendlyByteBuf friendlyByteBuf, final CommandNode<SharedSuggestionProvider> commandNode, final Map<CommandNode<SharedSuggestionProvider>, Integer> map) {
         byte b = 0;
         if (commandNode.getRedirect() != null) {
-            b |= 0x8;
+            b = (byte) (b | 0x8); // MagmaCube - decompile error
         }
         if (commandNode.getCommand() != null) {
-            b |= 0x4;
+            b = (byte) (b | 0x4); // MagmaCube - decompile error
         }
         if (commandNode instanceof RootCommandNode) {
-            b |= 0x0;
+            b = (byte) (b | 0x0); // MagmaCube - decompile error
         }
         else if (commandNode instanceof ArgumentCommandNode) {
-            b |= 0x2;
+            b = (byte) (b | 0x2); // MagmaCube - decompile error
             if (((ArgumentCommandNode)commandNode).getCustomSuggestions() != null) {
-                b |= 0x10;
+                b = (byte) (b | 0x10); // MagmaCube - decompile error
             }
         }
         else {
             if (!(commandNode instanceof LiteralCommandNode)) {
                 throw new UnsupportedOperationException("Unknown node type " + commandNode);
             }
-            b |= 0x1;
+            b = (byte) (b | 0x1); // MagmaCube - decompile error
         }
         friendlyByteBuf.writeByte(b);
         friendlyByteBuf.writeVarInt(commandNode.getChildren().size());
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundCooldownPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundCooldownPacket.java
index c30469b522ffd79e35d6283c3fe3627cf20185fa..4c5bc8f05d2699768b51ccff5afee01f04b3b681 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundCooldownPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundCooldownPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.world.item.Item;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundCustomPayloadPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundCustomPayloadPacket.java
index 5ea055ecfd53080f3c174da9ec475f59c9bd6966..790dc3289b209409b71e8c83ee52ef04ca04cc9b 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundCustomPayloadPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundCustomPayloadPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.resources.ResourceLocation;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundCustomSoundPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundCustomSoundPacket.java
index 99eecec8399e6a8849e33b323895d89bbe7ee46d..54948b7131aab4ed735e273ce09159cc7b05ae48 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundCustomSoundPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundCustomSoundPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.world.phys.Vec3;
@@ -64,15 +63,15 @@ public class ClientboundCustomSoundPacket implements Packet<ClientGamePacketList
     }
     
     public double getX() {
-        return this.x / 8.0f;
+        return (double) (this.x / 8.0f);
     }
     
     public double getY() {
-        return this.y / 8.0f;
+        return (double) (this.y / 8.0f);
     }
     
     public double getZ() {
-        return this.z / 8.0f;
+        return (double) (this.z / 8.0f);
     }
     
     public float getVolume() {
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundDisconnectPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundDisconnectPacket.java
index 27f62aadb16f0d53f87c2b09c75ca47a30d55b4d..590640fd0322371836bbea6d7d96e7195af4b2d7 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundDisconnectPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundDisconnectPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.Component;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundExplodePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundExplodePacket.java
index 05039be000c357b0ed8b5ab42515bbe8f1cf85b0..6761c8cc7a5ad9d59f5c06d2b35a72afab803463 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundExplodePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundExplodePacket.java
@@ -45,7 +45,7 @@ public class ClientboundExplodePacket implements Packet<ClientGamePacketListener
         this.z = friendlyByteBuf.readFloat();
         this.power = friendlyByteBuf.readFloat();
         final int i = friendlyByteBuf.readInt();
-        this.toBlow = (List<BlockPos>)Lists.newArrayListWithCapacity(i);
+        this.toBlow = Lists.newArrayListWithCapacity(i); // MagmaCube - decompile error
         final int i2 = Mth.floor(this.x);
         final int i3 = Mth.floor(this.y);
         final int i4 = Mth.floor(this.z);
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundForgetLevelChunkPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundForgetLevelChunkPacket.java
index 87f3265885f5d2c56dffb98a59149c04de290214..edd40735e9ed47c87dee4c729ec154c144db29f6 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundForgetLevelChunkPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundForgetLevelChunkPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundKeepAlivePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundKeepAlivePacket.java
index 43a5c8a1f73e76969e944342d31c6e9129d82305..d00aea71d6c0c211b247c16f1d9445f4fc128b1f 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundKeepAlivePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundKeepAlivePacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacket.java
index 4b0ef99f7a2b7a5e025b043adcf69f65ad751dc6..16a9259a3327790635f9d7c119c358e309624f2a 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacket.java
@@ -54,7 +54,7 @@ public class ClientboundLevelChunkPacket implements Packet<ClientGamePacketListe
         }
         this.buffer = new byte[this.calculateChunkSize(levelChunk, i)];
         this.availableSections = this.extractChunkData(new FriendlyByteBuf(this.getWriteBuffer()), levelChunk, i);
-        this.blockEntitiesTags = (List<CompoundTag>)Lists.newArrayList();
+        this.blockEntitiesTags = Lists.newArrayList(); // MagmaCube - decompile error
         for (final Map.Entry<BlockPos, BlockEntity> entry2 : levelChunk.getBlockEntities().entrySet()) {
             final BlockPos blockPos = entry2.getKey();
             final BlockEntity blockEntity = entry2.getValue();
@@ -83,7 +83,7 @@ public class ClientboundLevelChunkPacket implements Packet<ClientGamePacketListe
         }
         friendlyByteBuf.readBytes(this.buffer = new byte[i]);
         final int i2 = friendlyByteBuf.readVarInt();
-        this.blockEntitiesTags = (List<CompoundTag>)Lists.newArrayList();
+        this.blockEntitiesTags = Lists.newArrayList(); // MagmaCube - decompile error
         for (int i3 = 0; i3 < i2; ++i3) {
             this.blockEntitiesTags.add(friendlyByteBuf.readNbt());
         }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java
index f45c385e8bb9c31969f1e70ccf151848a18bd914..8102979830933898f52d108328310bc99efc4a62 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.core.BlockPos;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelParticlesPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelParticlesPacket.java
index c2c53842834bb54c6677565795be818304479df7..b917f4798b7d4315451be960a16c0aac356137dc 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelParticlesPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelParticlesPacket.java
@@ -25,7 +25,7 @@ public class ClientboundLevelParticlesPacket implements Packet<ClientGamePacketL
     public ClientboundLevelParticlesPacket() {
     }
     
-    public ClientboundLevelParticlesPacket(final T particleOptions, final boolean flag, final double d, final double d2, final double d3, final float f, final float f2, final float f3, final float f4, final int i) {
+    public ClientboundLevelParticlesPacket(final ParticleOptions particleOptions, final boolean flag, final double d, final double d2, final double d3, final float f, final float f2, final float f3, final float f4, final int i) { // MagmaCube - decompile error
         this.particle = particleOptions;
         this.overrideLimiter = flag;
         this.x = d;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundMerchantOffersPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundMerchantOffersPacket.java
index 2dfe822889996f51a09bae835625306aeb3fde70..f90475c33523d8f2ae220d87951a79c11ce913db 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundMerchantOffersPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundMerchantOffersPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.world.item.trading.MerchantOffers;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundMoveVehiclePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundMoveVehiclePacket.java
index 44a93b5ba8e537a455331d13c8a14837a52368ef..000ce5192f822a8424638d920705eaf46c120100 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundMoveVehiclePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundMoveVehiclePacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.world.entity.Entity;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundOpenBookPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundOpenBookPacket.java
index f5c106ffbce0825874b24b33fee2ceabf2033d7b..5b3b11a7ca7b6e8f1add80570bf859365a0ee9da 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundOpenBookPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundOpenBookPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.world.InteractionHand;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundOpenScreenPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundOpenScreenPacket.java
index 8baa88dcb2e55599ae4fd8ae2693b9cc2972b666..7fb8bf99710385d98e42cd0c11d6018a66b02216 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundOpenScreenPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundOpenScreenPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import javax.annotation.Nullable;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundOpenSignEditorPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundOpenSignEditorPacket.java
index 14b32449a7b924a3e7060ee4c61c09ff8a890138..2d7e980c2e518e1eab1e3472c87685cd6c6e76a5 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundOpenSignEditorPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundOpenSignEditorPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.core.BlockPos;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerCombatPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerCombatPacket.java
index 54c47a8997b0bf1049ffb6ea511297ef6625f040..9f3e8ce2cd1092c2da78a629047f7e652345b210 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerCombatPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerCombatPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.world.entity.LivingEntity;
@@ -84,6 +83,6 @@ public class ClientboundPlayerCombatPacket implements Packet<ClientGamePacketLis
     {
         ENTER_COMBAT, 
         END_COMBAT, 
-        ENTITY_DIED;
+        ENTITY_DIED
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerLookAtPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerLookAtPacket.java
index 557c61c20323081aeef1740be9505cde63a05ca0..c51c84b86f5a0e88695d45afdc9a45d547278702 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerLookAtPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerLookAtPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import javax.annotation.Nullable;
 import net.minecraft.world.level.Level;
 import java.io.IOException;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundRemoveEntitiesPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundRemoveEntitiesPacket.java
index 6dea8a2329d1318a54bd0ec05df22bd6a018db84..3f0ed86ea701255df2ef93b3a5cb4c141cd1f9a5 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundRemoveEntitiesPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundRemoveEntitiesPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundResourcePackPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundResourcePackPacket.java
index 1aaec250f5d716064c90bd81f84d283765487b5a..5236b359aa5be852055a54ea71aa67beb7dedd10 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundResourcePackPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundResourcePackPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSelectAdvancementsTabPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSelectAdvancementsTabPacket.java
index ffc6dd8c5099ff189cd7630f2b2d59f5e80f64e1..013db9f695a51d2491ddd533ebdfa5c8f859bae9 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSelectAdvancementsTabPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSelectAdvancementsTabPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import javax.annotation.Nullable;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetBorderPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetBorderPacket.java
index 2f3118ff024205cac7194c362631cb86112bd705..4d0f77bae5069c532e085c77b1bee41fde692532 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetBorderPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetBorderPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.world.level.border.WorldBorder;
@@ -165,6 +164,6 @@ public class ClientboundSetBorderPacket implements Packet<ClientGamePacketListen
         SET_CENTER, 
         INITIALIZE, 
         SET_WARNING_TIME, 
-        SET_WARNING_BLOCKS;
+        SET_WARNING_BLOCKS
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetCameraPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetCameraPacket.java
index 4a3232e07df79d571e9eb5895a11a7f99dad02a8..d3f23f2a0637a273a40c2fb24139374c3b4adea4 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetCameraPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetCameraPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import javax.annotation.Nullable;
 import net.minecraft.world.level.Level;
 import java.io.IOException;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetChunkCacheCenterPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetChunkCacheCenterPacket.java
index 4f2450ecdcc747a66139c7e1c110e698d5bc43e9..1c6fc3dd27b5d2a060e77cebf3a0ae137da49732 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetChunkCacheCenterPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetChunkCacheCenterPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetChunkCacheRadiusPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetChunkCacheRadiusPacket.java
index ccd524ff77a745ff03cafa182a27678506ac3190..2d98f5e858f3ae695b2234f548ba27a7c207fec9 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetChunkCacheRadiusPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetChunkCacheRadiusPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetDefaultSpawnPositionPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetDefaultSpawnPositionPacket.java
index 826275682f161d55fdc5c4437e6637cc73f7afd4..24aa642f3689f53e710a416bff0233c2ee868e89 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetDefaultSpawnPositionPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetDefaultSpawnPositionPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.core.BlockPos;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
index 90309ae53c7187d9cd243ce81515600e3bdbaa40..c455cb86857c21d9a1a1efbdabb45b87c1789281 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.syncher.SynchedEntityData;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityLinkPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityLinkPacket.java
index 6c5de0e9fee008e083ceba5f7ef9adce644d4c5f..2a5f5e6a0da6bd136304acbb5983e0ad810e4109 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityLinkPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityLinkPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import javax.annotation.Nullable;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEquipmentPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEquipmentPacket.java
index f301792cc47b2fda8c29369332fbe81a0e5f404d..7771873e419d4e25a2266fb2221588fa0126bbaf 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEquipmentPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEquipmentPacket.java
@@ -16,7 +16,7 @@ public class ClientboundSetEquipmentPacket implements Packet<ClientGamePacketLis
     private final List<Pair<EquipmentSlot, ItemStack>> slots;
     
     public ClientboundSetEquipmentPacket() {
-        this.slots = (List<Pair<EquipmentSlot, ItemStack>>)Lists.newArrayList();
+        this.slots = Lists.newArrayList(); // MagmaCube - decompile error
     }
     
     public ClientboundSetEquipmentPacket(final int i, final List<Pair<EquipmentSlot, ItemStack>> list) {
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetExperiencePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetExperiencePacket.java
index 1c4d9fbeefe378fd7306ac0961cc7c74cc0a6b44..741998e3427ae4ff98db86dcbda29eadc20b54dc 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetExperiencePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetExperiencePacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetHealthPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetHealthPacket.java
index 5ea968d7a8916992529c5c6942b3f315a5d1b3a3..e3d4d358ae413a32f09f894fa03165c69997864a 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetHealthPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetHealthPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPassengersPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPassengersPacket.java
index 20aa1f26d97cd9b25db8a827d770445e47b2b11d..9d3e441253210e735b82dca8249170177e1fe687 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPassengersPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPassengersPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import java.util.List;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetScorePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetScorePacket.java
index 81fcadfd35f863d65c29776065abd042e46dce66..07105705d2aa6f3bcb5a50d1b77674e9387f760c 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetScorePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetScorePacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import java.util.Objects;
 import net.minecraft.network.FriendlyByteBuf;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetTimePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetTimePacket.java
index 410fd2a12d7db02ca9acc029a3dd86df17585f5c..8c6575a2c7134313f0dfc148ca992d472589c825 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetTimePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetTimePacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetTitlesPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetTitlesPacket.java
index fe8f963d943f4a0ed234ee7fcb921592e4e2fb72..2eea4c52d2c0002c5b41506e8c9656b6da27a07f 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetTitlesPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetTitlesPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import javax.annotation.Nullable;
@@ -92,6 +91,6 @@ public class ClientboundSetTitlesPacket implements Packet<ClientGamePacketListen
         ACTIONBAR, 
         TIMES, 
         CLEAR, 
-        RESET;
+        RESET
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSoundEntityPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSoundEntityPacket.java
index 6d7dbf5753b1317b77f86307c5b48ddfbff4d4f3..e1b52261cd93244b24b5e795d9050dad76e72df4 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSoundEntityPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSoundEntityPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.core.Registry;
 import net.minecraft.network.FriendlyByteBuf;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSoundPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSoundPacket.java
index 1cd25e79eed18f8874a356e521218eb5353e4ced..ded158aaeb9a1c089d6cb01b730c9f9d55d8eaae 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSoundPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSoundPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.core.Registry;
 import net.minecraft.network.FriendlyByteBuf;
@@ -64,15 +63,15 @@ public class ClientboundSoundPacket implements Packet<ClientGamePacketListener>
     }
     
     public double getX() {
-        return this.x / 8.0f;
+        return (double) (this.x / 8.0f);
     }
     
     public double getY() {
-        return this.y / 8.0f;
+        return (double) (this.y / 8.0f);
     }
     
     public double getZ() {
-        return this.z / 8.0f;
+        return (double) (this.z / 8.0f);
     }
     
     public float getVolume() {
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundTabListPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundTabListPacket.java
index 7c59b8f733205e6b756f35e123fd5e325dd7510c..91929b52ef8bf83e9b27bb7d49c8e5ba0cb6c5d7 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundTabListPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundTabListPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.Component;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundTagQueryPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundTagQueryPacket.java
index cbbbeaf2a08e96ad6641d255e9f6b5487dfa0295..32892a01c25fceb89abf273e937f24434d0ea9f6 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundTagQueryPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundTagQueryPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import javax.annotation.Nullable;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundTakeItemEntityPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundTakeItemEntityPacket.java
index 8a0860ffddd066fba79f9795b5da4a6dcbbbea3d..dbbad34ffae40b60a5564b5fa06125df83098ab4 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundTakeItemEntityPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundTakeItemEntityPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket.java
index f0bbd93e851e70c1bc9a09ba0dc4f2d8daffc810..dcc44247f61a04d4f05f31c3989d6e3384c07457 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket.java
@@ -26,7 +26,7 @@ public class ClientboundUpdateAdvancementsPacket implements Packet<ClientGamePac
     
     public ClientboundUpdateAdvancementsPacket(final boolean flag, final Collection<Advancement> collection, final Set<ResourceLocation> set, final Map<ResourceLocation, AdvancementProgress> map) {
         this.reset = flag;
-        this.added = (Map<ResourceLocation, Advancement.Builder>)Maps.newHashMap();
+        this.added = Maps.newHashMap(); // MagmaCube - decompile error
         for (final Advancement advancement : collection) {
             this.added.put(advancement.getId(), advancement.deconstruct());
         }
@@ -42,9 +42,11 @@ public class ClientboundUpdateAdvancementsPacket implements Packet<ClientGamePac
     @Override
     public void read(final FriendlyByteBuf friendlyByteBuf) throws IOException {
         this.reset = friendlyByteBuf.readBoolean();
-        this.added = (Map<ResourceLocation, Advancement.Builder>)Maps.newHashMap();
-        this.removed = (Set<ResourceLocation>)Sets.newLinkedHashSet();
-        this.progress = (Map<ResourceLocation, AdvancementProgress>)Maps.newHashMap();
+        // MagmaCube start - decompile error
+        this.added = Maps.newHashMap();
+        this.removed = Sets.newLinkedHashSet();
+        this.progress = Maps.newHashMap();
+        // MagmaCube end - decompile error
         for (int i = friendlyByteBuf.readVarInt(), i2 = 0; i2 < i; ++i2) {
             final ResourceLocation resourceLocation = friendlyByteBuf.readResourceLocation();
             final Advancement.Builder builder = Advancement.Builder.fromNetwork(friendlyByteBuf);
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateTagsPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateTagsPacket.java
index ee40b4dd09f19be399b2da37f05a59fd362706c3..7b2ae96f000e9a6e13c22f566faf7d657fbf3c77 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateTagsPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateTagsPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.tags.TagContainer;
diff --git a/src/main/java/net/minecraft/network/protocol/game/DebugPackets.java b/src/main/java/net/minecraft/network/protocol/game/DebugPackets.java
index e37b5f5cc01ddd3f4f9fc5e4dfd247f8cf3e3f46..8271061099f41624a1ba5ff7d3bd609486839099 100644
--- a/src/main/java/net/minecraft/network/protocol/game/DebugPackets.java
+++ b/src/main/java/net/minecraft/network/protocol/game/DebugPackets.java
@@ -2,7 +2,6 @@ package net.minecraft.network.protocol.game;
 
 import org.apache.logging.log4j.LogManager;
 import net.minecraft.world.entity.player.Player;
-import java.util.Iterator;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.resources.ResourceLocation;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundAcceptTeleportationPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundAcceptTeleportationPacket.java
index 69d475c0d1a956d4b406d374b1564a3c6dd7471f..21218ea706dba8539b7731e5db760588104bbcb8 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundAcceptTeleportationPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundAcceptTeleportationPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundBlockEntityTagQuery.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundBlockEntityTagQuery.java
index 2bb46b91d059d9ba10b418d245b01f0679569f94..cf99fe8adc7f156baedf2ab9a573edc6e3732905 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundBlockEntityTagQuery.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundBlockEntityTagQuery.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.core.BlockPos;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundChatPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundChatPacket.java
index da0573ae28da681cdb5da26c5b067e346801519f..62429854f073945cd0ae8601477f7c92b5d592e7 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundChatPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundChatPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundClientCommandPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundClientCommandPacket.java
index 7a9fef2837d859ed0e3e37b7aa9ec81797bc120e..ec09c848742815bf100cc6fb08ba4a159448a9db 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundClientCommandPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundClientCommandPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
@@ -38,6 +37,6 @@ public class ServerboundClientCommandPacket implements Packet<ServerGamePacketLi
     public enum Action
     {
         PERFORM_RESPAWN, 
-        REQUEST_STATS;
+        REQUEST_STATS
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundCommandSuggestionPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundCommandSuggestionPacket.java
index a815b4d059c6ee76ac6f147530e6b4704c1e2d54..1eb3d0a4377804fad8be1f4da88082865507a1a9 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundCommandSuggestionPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundCommandSuggestionPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundCustomPayloadPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundCustomPayloadPacket.java
index 684fc7f7bf75a9d7a39a0e3a4057f529c90ac977..11039e5ad18db5cc68a96fde3a4edefbdc55b06b 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundCustomPayloadPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundCustomPayloadPacket.java
@@ -1,7 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
-import io.netty.buffer.ByteBuf;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.resources.ResourceLocation;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundEditBookPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundEditBookPacket.java
index 846f3ad8ce20f98a93a0afa92b23865ecfd47120..4c1be1cb8028af21523eeddfa5de351b02a75ec8 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundEditBookPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundEditBookPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.world.item.ItemStack;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundEntityTagQuery.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundEntityTagQuery.java
index 779682b25cedd9d9ac46b2f6c91fedcaa780ab0c..500e4194be121d7ad54d0bde8f99f9dcbd884050 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundEntityTagQuery.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundEntityTagQuery.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundJigsawGeneratePacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundJigsawGeneratePacket.java
index 543204082e6744e14aaf917091ea88639a76000f..d34b40699f66130c9fa62b4e405bf6bb5e8a82d0 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundJigsawGeneratePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundJigsawGeneratePacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.core.BlockPos;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundKeepAlivePacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundKeepAlivePacket.java
index 5187b418086e40e25cb41dc8d765ff0467197692..25808e7d0e2cbedc9d458cddac4978e88226dc7a 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundKeepAlivePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundKeepAlivePacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundLockDifficultyPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundLockDifficultyPacket.java
index 15919d32eefa82d7b17e52668158883d0df3288a..bc2a06c9e73f8916f0a477cd9320b6df664628bd 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundLockDifficultyPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundLockDifficultyPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundMoveVehiclePacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundMoveVehiclePacket.java
index 038be3ae516493aedb6e032b2315b1d28a31a3a4..c18d39d29e5716be8051c49108bc4162cd4cc3c5 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundMoveVehiclePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundMoveVehiclePacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.world.entity.Entity;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundPaddleBoatPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundPaddleBoatPacket.java
index 6266a4a51de1accde632bce2c70b70d758bbaf92..778a41cc66a5642ad3ae5ab723c570bb575a8d2c 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundPaddleBoatPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundPaddleBoatPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundPickItemPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundPickItemPacket.java
index 7e1652475898c1d76f4b7a8c48ab2a01d62a6b65..8695b4e3675b984890b2c2ca1445441b7e3b1586 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundPickItemPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundPickItemPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundPlayerCommandPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundPlayerCommandPacket.java
index d1ba12e8e2940d2dd472b80e6c12f4642a51000f..4dcb846a643ee8f529ebbf58bdde76288659530b 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundPlayerCommandPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundPlayerCommandPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.world.entity.Entity;
@@ -62,6 +61,6 @@ public class ServerboundPlayerCommandPacket implements Packet<ServerGamePacketLi
         START_RIDING_JUMP, 
         STOP_RIDING_JUMP, 
         OPEN_INVENTORY, 
-        START_FALL_FLYING;
+        START_FALL_FLYING
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundRecipeBookChangeSettingsPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundRecipeBookChangeSettingsPacket.java
index c1cc7459eb30a6954e45f648aeac6c1bdab7dad0..8a5a68848f174fa0c00a42814d1e92059ff9422c 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundRecipeBookChangeSettingsPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundRecipeBookChangeSettingsPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.world.inventory.RecipeBookType;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundRecipeBookSeenRecipePacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundRecipeBookSeenRecipePacket.java
index 691a7f1a28bab4d01ce581dabdab7bee599e1df9..ad79d9e661ca00dc2fc11d26d7c702f07ec5217d 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundRecipeBookSeenRecipePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundRecipeBookSeenRecipePacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.world.item.crafting.Recipe;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundRenameItemPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundRenameItemPacket.java
index a4e7e75ef7b0da9b295842e5ce59e1345097692e..0379ccf5500cda1188c0ec12aec9280fb40ba712 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundRenameItemPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundRenameItemPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundResourcePackPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundResourcePackPacket.java
index 02825e1549c03e0819322d773fdf8268aacf9563..881c2a6b9ca08f8b70ada309cd811bb6d700e169 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundResourcePackPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundResourcePackPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
@@ -36,6 +35,6 @@ public class ServerboundResourcePackPacket implements Packet<ServerGamePacketLis
         SUCCESSFULLY_LOADED, 
         DECLINED, 
         FAILED_DOWNLOAD, 
-        ACCEPTED;
+        ACCEPTED
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundSeenAdvancementsPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundSeenAdvancementsPacket.java
index 6f669bc8fda43a42e44e6874a1245933e01897fc..e74f891e83ffe76633bfe4abf46ca509f1cd3593 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundSeenAdvancementsPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundSeenAdvancementsPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.advancements.Advancement;
@@ -61,6 +60,6 @@ public class ServerboundSeenAdvancementsPacket implements Packet<ServerGamePacke
     public enum Action
     {
         OPENED_TAB, 
-        CLOSED_SCREEN;
+        CLOSED_SCREEN
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundSelectTradePacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundSelectTradePacket.java
index a6e68102f766a740a703cef9065e179bac8fadb6..cb7f0f784ec3f716c193325aa64481c2692b7959 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundSelectTradePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundSelectTradePacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundSetBeaconPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundSetBeaconPacket.java
index 3af1414cc7bc08335cea63b9dd0b0e40c52ab753..91d52bee5b1fa4e88069652d0fcc2b7168613010 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundSetBeaconPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundSetBeaconPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundSetCommandMinecartPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundSetCommandMinecartPacket.java
index 1ad2823562dc9f815f9ac62d515c901b1a808d18..c52598ec36086796701fbb56e61b1e06ac3c1fbf 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundSetCommandMinecartPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundSetCommandMinecartPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import javax.annotation.Nullable;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.vehicle.MinecartCommandBlock;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundSetJigsawBlockPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundSetJigsawBlockPacket.java
index 9ab8e3def110f05717662eb7a0a6284229c5279c..4cb6b5b4ef9fe5f1ce9e128db10a47e37a79a928 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundSetJigsawBlockPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundSetJigsawBlockPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.world.level.block.entity.JigsawBlockEntity;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundSignUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundSignUpdatePacket.java
index 9c92d833294a38f7f7a82e426506c5b85161ff53..a9a634878770489c80f2e737b63ff18dcbb8ceb2 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundSignUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundSignUpdatePacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.core.BlockPos;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundSwingPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundSwingPacket.java
index 2a01871c1418e5c4853a43761f486e8a1b2a32f3..44f7e953cecbc95e5ce3d4af0b0fec3685da8f0d 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundSwingPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundSwingPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.world.InteractionHand;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundTeleportToEntityPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundTeleportToEntityPacket.java
index f6eb408ba133cd3bb5d4aabb927d84644cd9948a..3a60137ff247d9daece341584102d63e0b55f3ef 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundTeleportToEntityPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundTeleportToEntityPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import javax.annotation.Nullable;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.server.level.ServerLevel;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundUseItemOnPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundUseItemOnPacket.java
index 9f4b05e573338422fdeb40cb4d1df81b56709c41..6b511b0a6c14f94d9c236541e705da97539b7f8f 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundUseItemOnPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundUseItemOnPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.world.InteractionHand;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundUseItemPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundUseItemPacket.java
index f577324b2ade93ea9cfd2c5aba82838067c2d768..0791b31745330dee1829b82a6d220258cd0db56c 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundUseItemPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundUseItemPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.game;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.world.InteractionHand;
diff --git a/src/main/java/net/minecraft/network/protocol/handshake/ClientIntentionPacket.java b/src/main/java/net/minecraft/network/protocol/handshake/ClientIntentionPacket.java
index 7ce64713aeb9cb1513cae0a0748eda741439331b..9f5add07ee3f20b74dd84133f9e20ae503b18b49 100644
--- a/src/main/java/net/minecraft/network/protocol/handshake/ClientIntentionPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/handshake/ClientIntentionPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.handshake;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.SharedConstants;
diff --git a/src/main/java/net/minecraft/network/protocol/login/ClientboundCustomQueryPacket.java b/src/main/java/net/minecraft/network/protocol/login/ClientboundCustomQueryPacket.java
index d9f670205461af0bb096c5dced02c861779769d2..a83d8d704aac5977049359e098c459810460de49 100644
--- a/src/main/java/net/minecraft/network/protocol/login/ClientboundCustomQueryPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/login/ClientboundCustomQueryPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.login;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.resources.ResourceLocation;
diff --git a/src/main/java/net/minecraft/network/protocol/login/ClientboundHelloPacket.java b/src/main/java/net/minecraft/network/protocol/login/ClientboundHelloPacket.java
index e67bf029505507d3616ec6ec6726c8d860e47eab..481431ea928aa2e03de71ecd2dc0a40a6624a9d7 100644
--- a/src/main/java/net/minecraft/network/protocol/login/ClientboundHelloPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/login/ClientboundHelloPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.login;
 
-import net.minecraft.network.PacketListener;
 import net.minecraft.util.CryptException;
 import net.minecraft.util.Crypt;
 import java.security.PublicKey;
diff --git a/src/main/java/net/minecraft/network/protocol/login/ClientboundLoginCompressionPacket.java b/src/main/java/net/minecraft/network/protocol/login/ClientboundLoginCompressionPacket.java
index cf044ac08415a0e85009105e19b95ab0ae6e206b..1b72e9db91342a76904d627c1cf0fef5e4922eb4 100644
--- a/src/main/java/net/minecraft/network/protocol/login/ClientboundLoginCompressionPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/login/ClientboundLoginCompressionPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.login;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
diff --git a/src/main/java/net/minecraft/network/protocol/login/ClientboundLoginDisconnectPacket.java b/src/main/java/net/minecraft/network/protocol/login/ClientboundLoginDisconnectPacket.java
index be50db964ec00336af05a72782ff72835d175f41..f14431316d75b48f47e9b04aa5990162d354dd32 100644
--- a/src/main/java/net/minecraft/network/protocol/login/ClientboundLoginDisconnectPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/login/ClientboundLoginDisconnectPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.login;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.Component;
diff --git a/src/main/java/net/minecraft/network/protocol/login/ServerboundCustomQueryPacket.java b/src/main/java/net/minecraft/network/protocol/login/ServerboundCustomQueryPacket.java
index 7e3dcdf2b7a191ede0c312c6b9164a3221e01ae8..a34e2c9f9e0bab51eddb4cdc228072dbf5633323 100644
--- a/src/main/java/net/minecraft/network/protocol/login/ServerboundCustomQueryPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/login/ServerboundCustomQueryPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.login;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import javax.annotation.Nullable;
 import net.minecraft.network.FriendlyByteBuf;
diff --git a/src/main/java/net/minecraft/network/protocol/login/ServerboundHelloPacket.java b/src/main/java/net/minecraft/network/protocol/login/ServerboundHelloPacket.java
index 1760ac86409344ed5b2f0edd31a20a2a92417c99..d9a5c6a6f9038bd0c40b5705a708649a8dbb393f 100644
--- a/src/main/java/net/minecraft/network/protocol/login/ServerboundHelloPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/login/ServerboundHelloPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.login;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import java.util.UUID;
 import net.minecraft.network.FriendlyByteBuf;
diff --git a/src/main/java/net/minecraft/network/protocol/login/ServerboundKeyPacket.java b/src/main/java/net/minecraft/network/protocol/login/ServerboundKeyPacket.java
index c1806cfc3e10c1db0c38b135f7558baac6474ea2..09de01bceefc7e98e90685e716d0128c2037c47e 100644
--- a/src/main/java/net/minecraft/network/protocol/login/ServerboundKeyPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/login/ServerboundKeyPacket.java
@@ -1,11 +1,9 @@
 package net.minecraft.network.protocol.login;
 
-import net.minecraft.network.PacketListener;
 import java.security.PrivateKey;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.util.CryptException;
-import java.security.Key;
 import net.minecraft.util.Crypt;
 import java.security.PublicKey;
 import javax.crypto.SecretKey;
diff --git a/src/main/java/net/minecraft/network/protocol/status/ClientboundPongResponsePacket.java b/src/main/java/net/minecraft/network/protocol/status/ClientboundPongResponsePacket.java
index f0f3d7fa47737edfa34d73daba003a0ef35593f6..f1b53cdbe1151e2cb660bbf18c5d425f360a9ecd 100644
--- a/src/main/java/net/minecraft/network/protocol/status/ClientboundPongResponsePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/status/ClientboundPongResponsePacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.status;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
diff --git a/src/main/java/net/minecraft/network/protocol/status/ClientboundStatusResponsePacket.java b/src/main/java/net/minecraft/network/protocol/status/ClientboundStatusResponsePacket.java
index a6cc4d3128b14dc10847eee27b4c383fb6f4996b..9b8c0728638b219570ebd1ce1bde04458882d29a 100644
--- a/src/main/java/net/minecraft/network/protocol/status/ClientboundStatusResponsePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/status/ClientboundStatusResponsePacket.java
@@ -6,7 +6,7 @@ import net.minecraft.network.chat.Style;
 import net.minecraft.network.chat.Component;
 import java.lang.reflect.Type;
 import com.google.gson.GsonBuilder;
-import net.minecraft.network.PacketListener;
+
 import java.io.IOException;
 import net.minecraft.util.GsonHelper;
 import net.minecraft.network.FriendlyByteBuf;
diff --git a/src/main/java/net/minecraft/network/protocol/status/ServerboundPingRequestPacket.java b/src/main/java/net/minecraft/network/protocol/status/ServerboundPingRequestPacket.java
index 021147e3d83f132d6e0ad0eb9b324b4ce0e91166..276a6c27861a4e9a8ea00db6bf11ecf0d3afb837 100644
--- a/src/main/java/net/minecraft/network/protocol/status/ServerboundPingRequestPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/status/ServerboundPingRequestPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.status;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
diff --git a/src/main/java/net/minecraft/network/protocol/status/ServerboundStatusRequestPacket.java b/src/main/java/net/minecraft/network/protocol/status/ServerboundStatusRequestPacket.java
index 4c91dca02ffbb8bd26ec7cc2b0be6e2df8d7c681..7c9a064337321d565e6cea6399c45cf3e9e1feab 100644
--- a/src/main/java/net/minecraft/network/protocol/status/ServerboundStatusRequestPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/status/ServerboundStatusRequestPacket.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.protocol.status;
 
-import net.minecraft.network.PacketListener;
 import java.io.IOException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
diff --git a/src/main/java/net/minecraft/network/syncher/EntityDataSerializers.java b/src/main/java/net/minecraft/network/syncher/EntityDataSerializers.java
index 522096e8d405b68f3aa42877630f96eb2697244e..c60f25bafce69e2fec33162befc82f925b24655b 100644
--- a/src/main/java/net/minecraft/network/syncher/EntityDataSerializers.java
+++ b/src/main/java/net/minecraft/network/syncher/EntityDataSerializers.java
@@ -1,7 +1,5 @@
 package net.minecraft.network.syncher;
 
-import net.minecraft.world.entity.npc.VillagerProfession;
-import net.minecraft.world.entity.npc.VillagerType;
 import net.minecraft.core.particles.ParticleType;
 import net.minecraft.core.Registry;
 import net.minecraft.world.level.block.Block;
@@ -59,7 +57,7 @@ public class EntityDataSerializers
     }
     
     static {
-        SERIALIZERS = new CrudeIncrementalIntIdentityHashBiMap<EntityDataSerializer<?>>(16);
+        SERIALIZERS = new CrudeIncrementalIntIdentityHashBiMap<>(16);
         BYTE = new EntityDataSerializer<Byte>() {
             @Override
             public void write(final FriendlyByteBuf friendlyByteBuf, final Byte byte_) {
diff --git a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
index ccc8c82769a75c650d3b170fd2626b9bf56946d4..44a1614d2c7941ac8e3d7d5f2b6f15419ce73102 100644
--- a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
+++ b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
@@ -1,5 +1,8 @@
 package net.minecraft.network.syncher;
 
+import net.minecraft.CrashReport;
+import net.minecraft.CrashReportCategory;
+import net.minecraft.ReportedException;
 import org.apache.logging.log4j.LogManager;
 import java.util.Objects;
 import io.netty.handler.codec.DecoderException;
@@ -29,7 +32,7 @@ public class SynchedEntityData
     private boolean isDirty;
     
     public SynchedEntityData(final Entity entity) {
-        this.itemsById = (Map<Integer, DataItem<?>>)Maps.newHashMap();
+        this.itemsById = Maps.newHashMap(); // MagmaCube - decompile error
         this.lock = new ReentrantReadWriteLock();
         this.isEmpty = true;
         this.entity = entity;
@@ -47,7 +50,7 @@ public class SynchedEntityData
         }
         final int i3;
         if (SynchedEntityData.ENTITY_ID_POOL.containsKey(clazz)) {
-            final int i = SynchedEntityData.ENTITY_ID_POOL.get(clazz) + 1;
+            i3 = SynchedEntityData.ENTITY_ID_POOL.get(clazz) + 1; // MagmaCube - decompile error
         }
         else {
             int i2 = 0;
@@ -91,70 +94,22 @@ public class SynchedEntityData
     }
     
     private <T> DataItem<T> getItem(final EntityDataAccessor<T> entityDataAccessor) {
-        // 
-        // This method could not be decompiled.
-        // 
-        // Original Bytecode:
-        // 
-        //     1: getfield        net/minecraft/network/syncher/SynchedEntityData.lock:Ljava/util/concurrent/locks/ReadWriteLock;
-        //     4: invokeinterface java/util/concurrent/locks/ReadWriteLock.readLock:()Ljava/util/concurrent/locks/Lock;
-        //     9: invokeinterface java/util/concurrent/locks/Lock.lock:()V
-        //    14: aload_0         /* this */
-        //    15: getfield        net/minecraft/network/syncher/SynchedEntityData.itemsById:Ljava/util/Map;
-        //    18: aload_1         /* entityDataAccessor */
-        //    19: invokevirtual   net/minecraft/network/syncher/EntityDataAccessor.getId:()I
-        //    22: invokestatic    java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
-        //    25: invokeinterface java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
-        //    30: checkcast       Lnet/minecraft/network/syncher/SynchedEntityData$DataItem;
-        //    33: astore_2        /* dataItem */
-        //    34: aload_0         /* this */
-        //    35: getfield        net/minecraft/network/syncher/SynchedEntityData.lock:Ljava/util/concurrent/locks/ReadWriteLock;
-        //    38: invokeinterface java/util/concurrent/locks/ReadWriteLock.readLock:()Ljava/util/concurrent/locks/Lock;
-        //    43: invokeinterface java/util/concurrent/locks/Lock.unlock:()V
-        //    48: goto            107
-        //    51: astore_3        /* throwable */
-        //    52: aload_3         /* throwable */
-        //    53: ldc             "Getting synched entity data"
-        //    55: invokestatic    net/minecraft/CrashReport.forThrowable:(Ljava/lang/Throwable;Ljava/lang/String;)Lnet/minecraft/CrashReport;
-        //    58: astore          crashReport
-        //    60: aload           crashReport
-        //    62: ldc             "Synched entity data"
-        //    64: invokevirtual   net/minecraft/CrashReport.addCategory:(Ljava/lang/String;)Lnet/minecraft/CrashReportCategory;
-        //    67: astore          crashReportCategory
-        //    69: aload           crashReportCategory
-        //    71: ldc             "Data ID"
-        //    73: aload_1         /* entityDataAccessor */
-        //    74: invokevirtual   net/minecraft/CrashReportCategory.setDetail:(Ljava/lang/String;Ljava/lang/Object;)Lnet/minecraft/CrashReportCategory;
-        //    77: pop            
-        //    78: new             Lnet/minecraft/ReportedException;
-        //    81: dup            
-        //    82: aload           crashReport
-        //    84: invokespecial   net/minecraft/ReportedException.<init>:(Lnet/minecraft/CrashReport;)V
-        //    87: athrow         
-        //    88: astore          6
-        //    90: aload_0         /* this */
-        //    91: getfield        net/minecraft/network/syncher/SynchedEntityData.lock:Ljava/util/concurrent/locks/ReadWriteLock;
-        //    94: invokeinterface java/util/concurrent/locks/ReadWriteLock.readLock:()Ljava/util/concurrent/locks/Lock;
-        //    99: invokeinterface java/util/concurrent/locks/Lock.unlock:()V
-        //   104: aload           6
-        //   106: athrow         
-        //   107: aload_2         /* dataItem2 */
-        //   108: areturn        
-        //    Signature:
-        //  <T:Ljava/lang/Object;>(Lnet/minecraft/network/syncher/EntityDataAccessor<TT;>;)Lnet/minecraft/network/syncher/SynchedEntityData$DataItem<TT;>;
-        //    Exceptions:
-        //  Try           Handler
-        //  Start  End    Start  End    Type                 
-        //  -----  -----  -----  -----  ---------------------
-        //  14     34     51     88     Ljava/lang/Throwable;
-        //  14     34     88     107    Any
-        //  51     90     88     107    Any
-        // 
-        // The error that occurred was:
-        // 
-        // java.lang.NullPointerException
-        // 
-        throw new IllegalStateException("An error occurred while decompiling this method.");
+        // MagmaCube start - decompile error
+        this.lock.readLock().lock();
+
+        DataItem<T> dataentry;
+        try {
+            dataentry = (DataItem<T>) this.itemsById.get(entityDataAccessor.getId());
+        } catch (Throwable throwable) {
+            CrashReport crashreport = CrashReport.forThrowable(throwable, "Getting synched entity data");
+            CrashReportCategory crashreportcategory = crashreport.addCategory("Synched entity data");
+            crashreportcategory.setDetail("Data ID", entityDataAccessor);
+            throw new ReportedException(crashreport);
+        } finally {
+            this.lock.readLock().unlock();
+        }
+        return dataentry;
+        // MagmaCube end - decompile error
     }
     
     public <T> T get(final EntityDataAccessor<T> entityDataAccessor) {
@@ -193,7 +148,7 @@ public class SynchedEntityData
                 if (dataItem.isDirty()) {
                     dataItem.setDirty(false);
                     if (list == null) {
-                        list = (List<DataItem<?>>)Lists.newArrayList();
+                        list = Lists.newArrayList(); // MagmaCube - decompile error
                     }
                     list.add(dataItem.copy());
                 }
@@ -210,7 +165,7 @@ public class SynchedEntityData
         this.lock.readLock().lock();
         for (final DataItem<?> dataItem : this.itemsById.values()) {
             if (list == null) {
-                list = (List<DataItem<?>>)Lists.newArrayList();
+                list = Lists.newArrayList(); // MagmaCube - decompile error
             }
             list.add(dataItem.copy());
         }
@@ -235,7 +190,7 @@ public class SynchedEntityData
         int i;
         while ((i = friendlyByteBuf.readUnsignedByte()) != 255) {
             if (list == null) {
-                list = (List<DataItem<?>>)Lists.newArrayList();
+                list = Lists.newArrayList(); // MagmaCube - decompile error
             }
             final int i2 = friendlyByteBuf.readVarInt();
             final EntityDataSerializer<?> entityDataSerializer = EntityDataSerializers.getSerializer(i2);
diff --git a/src/main/java/net/minecraft/realms/RealmsObjectSelectionList.java b/src/main/java/net/minecraft/realms/RealmsObjectSelectionList.java
index 4948ba52467f3a22bfddd8d560eaa934f2a44928..29a44eb7732b1d1842941c1517bd9275fe879500 100644
--- a/src/main/java/net/minecraft/realms/RealmsObjectSelectionList.java
+++ b/src/main/java/net/minecraft/realms/RealmsObjectSelectionList.java
@@ -2,7 +2,6 @@ package net.minecraft.realms;
 
 import java.util.Collection;
 import net.minecraft.client.Minecraft;
-import net.minecraft.client.gui.components.AbstractSelectionList;
 import net.minecraft.client.gui.components.ObjectSelectionList;
 
 public abstract class RealmsObjectSelectionList<E extends ObjectSelectionList.Entry<E>>
@@ -69,9 +68,4 @@ extends ObjectSelectionList<E> {
     public void clear() {
         this.clearEntries();
     }
-
-    @Override
-    public /* synthetic */ int addEntry(AbstractSelectionList.Entry entry) {
-        return this.addEntry((E)((ObjectSelectionList.Entry)entry));
-    }
 }
diff --git a/src/main/java/net/minecraft/resources/RegistryReadOps.java b/src/main/java/net/minecraft/resources/RegistryReadOps.java
index e0f9b9d0eea8f47fe64475ee931b75b9a1c37052..2e7460fcac76fdf04529eaecd4cf94e82fc2b3bd 100644
--- a/src/main/java/net/minecraft/resources/RegistryReadOps.java
+++ b/src/main/java/net/minecraft/resources/RegistryReadOps.java
@@ -4,6 +4,9 @@ import com.google.common.base.Supplier;
 import com.google.common.base.Suppliers;
 import com.google.common.collect.Maps;
 import com.google.gson.JsonElement;
+import com.google.gson.JsonIOException;
+import com.google.gson.JsonParser;
+import com.google.gson.JsonSyntaxException;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.DataResult;
@@ -14,6 +17,11 @@ import com.mojang.serialization.JsonOps;
 import com.mojang.serialization.Lifecycle;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenCustomHashMap;
+
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.nio.charset.StandardCharsets;
 import java.util.Collection;
 import java.util.IdentityHashMap;
 import java.util.Map;
@@ -29,6 +37,7 @@ import net.minecraft.resources.DelegatingOps;
 import net.minecraft.resources.RegistryWriteOps;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.packs.resources.Resource;
 import net.minecraft.server.packs.resources.ResourceManager;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -56,23 +65,23 @@ extends DelegatingOps<T> {
         this.resources = resourceAccess;
         this.registryHolder = registryHolder;
         this.readCache = identityHashMap;
-        this.jsonOps = dynamicOps == JsonOps.INSTANCE ? this : new RegistryReadOps<T>(JsonOps.INSTANCE, resourceAccess, registryHolder, (IdentityHashMap<ResourceKey<Registry<?>>, ReadCache<?>>)identityHashMap);
+        this.jsonOps = (RegistryReadOps<JsonElement>) (dynamicOps == JsonOps.INSTANCE ? this : new RegistryReadOps<T>((DynamicOps) JsonOps.INSTANCE, resourceAccess, registryHolder, identityHashMap)); // MagmaCube - decompile error
     }
 
     protected <E> DataResult<Pair<java.util.function.Supplier<E>, T>> decodeElement(T object, ResourceKey<? extends Registry<E>> resourceKey, Codec<E> codec, boolean flag) {
-        Optional optional = this.registryHolder.registry(resourceKey);
+        Optional<WritableRegistry<E>> optional = this.registryHolder.registry(resourceKey); // MagmaCube - decompile error
         if (!optional.isPresent()) {
             return DataResult.error((String)("Unknown registry: " + resourceKey));
         }
-        WritableRegistry writableRegistry = optional.get();
-        DataResult dataResult = ResourceLocation.CODEC.decode(this.delegate, object);
+        WritableRegistry<E> writableRegistry = optional.get(); // MagmaCube - decompile error
+        DataResult<Pair<ResourceLocation, T>> dataResult = ResourceLocation.CODEC.decode(this.delegate, object); // MagmaCube - decompile error
         if (!dataResult.result().isPresent()) {
             if (!flag) {
                 return DataResult.error((String)"Inline definitions not allowed here");
             }
-            return codec.decode((DynamicOps)this, object).map(pair -> pair.mapFirst(object -> () -> object));
+            return codec.decode(this, object).map(pair -> pair.mapFirst(object1 -> () -> object1)); // MagmaCube - decompile error
         }
-        Pair pair2 = (Pair)dataResult.result().get();
+        Pair<ResourceLocation, T> pair2 = dataResult.result().get(); // MagmaCube - decompile error
         ResourceLocation resourceLocation = (ResourceLocation)pair2.getFirst();
         return this.readAndRegisterElement(resourceKey, writableRegistry, codec, resourceLocation).map(supplier -> Pair.of(supplier, pair2.getSecond()));
     }
@@ -99,42 +108,44 @@ extends DelegatingOps<T> {
     }
 
     private <E> DataResult<java.util.function.Supplier<E>> readAndRegisterElement(ResourceKey<? extends Registry<E>> resourceKey, WritableRegistry<E> writableRegistry, Codec<E> codec, ResourceLocation resourceLocation) {
-        DataResult dataResult4;
-        ResourceKey resourceKey2 = ResourceKey.create(resourceKey, resourceLocation);
+        // MagmaCube start - decompile error
+        ResourceKey<E> resourceKey2 = ResourceKey.create(resourceKey, resourceLocation);
         ReadCache<E> readCache = this.readCache(resourceKey);
-        DataResult dataResult = (DataResult)((ReadCache)readCache).values.get(resourceKey2);
+        DataResult<java.util.function.Supplier<E>> dataResult = readCache.values.get(resourceKey2);
         if (dataResult != null) {
             return dataResult;
         }
-        Supplier supplier = Suppliers.memoize(() -> {
-            Object object = writableRegistry.get(resourceKey2);
+        Supplier<E> supplier = Suppliers.memoize(() -> {
+            E object = writableRegistry.get(resourceKey2);
             if (object == null) {
                 throw new RuntimeException("Error during recursive registry parsing, element resolved too early: " + resourceKey2);
             }
             return object;
         });
-        ((ReadCache)readCache).values.put(resourceKey2, DataResult.success(supplier));
-        DataResult dataResult2 = this.resources.parseElement((DynamicOps<JsonElement>)this.jsonOps, resourceKey, resourceKey2, codec);
-        Optional optional = dataResult2.result();
+        readCache.values.put(resourceKey2, DataResult.success(supplier));
+        DataResult<Pair<E, OptionalInt>> dataResult2 = this.resources.parseElement(this.jsonOps, resourceKey, resourceKey2, codec);
+        Optional<Pair<E, OptionalInt>> optional = dataResult2.result();
         if (optional.isPresent()) {
-            Pair pair2 = (Pair)optional.get();
-            writableRegistry.registerOrOverride((OptionalInt)pair2.getSecond(), resourceKey2, pair2.getFirst(), dataResult2.lifecycle());
+            Pair<E, OptionalInt> pair2 = optional.get();
+            writableRegistry.registerOrOverride(pair2.getSecond(), resourceKey2, pair2.getFirst(), dataResult2.lifecycle());
         }
+        DataResult<java.util.function.Supplier<E>> dataResult4;
         if (!optional.isPresent() && writableRegistry.get(resourceKey2) != null) {
-            DataResult dataResult3 = DataResult.success(() -> writableRegistry.get(resourceKey2), (Lifecycle)Lifecycle.stable());
+            dataResult4 = DataResult.success(() -> writableRegistry.get(resourceKey2), Lifecycle.stable());
         } else {
             dataResult4 = dataResult2.map(pair -> () -> writableRegistry.get(resourceKey2));
         }
-        ((ReadCache)readCache).values.put(resourceKey2, dataResult4);
+        readCache.values.put(resourceKey2, dataResult4);
         return dataResult4;
+        // MagmaCube end - decompile error
     }
 
     private <E> ReadCache<E> readCache(ResourceKey<? extends Registry<E>> resourceKey2) {
-        return this.readCache.computeIfAbsent(resourceKey2, resourceKey -> new ReadCache());
+        return (ReadCache<E>) this.readCache.computeIfAbsent(resourceKey2, resourceKey -> new ReadCache()); // MagmaCube - decompile error
     }
 
     protected <E> DataResult<Registry<E>> registry(ResourceKey<? extends Registry<E>> resourceKey) {
-        return this.registryHolder.registry(resourceKey).map(writableRegistry -> DataResult.success(writableRegistry, (Lifecycle)writableRegistry.elementsLifecycle())).orElseGet(() -> DataResult.error((String)("Unknown registry: " + resourceKey)));
+        return this.registryHolder.registry(resourceKey).map(writableRegistry -> DataResult.success((Registry<E>) writableRegistry, (Lifecycle)writableRegistry.elementsLifecycle())).orElseGet(() -> DataResult.error((String)("Unknown registry: " + resourceKey))); // MagmaCube - decompile error
     }
 
     public static interface ResourceAccess {
@@ -155,38 +166,29 @@ extends DelegatingOps<T> {
                  */
                 @Override
                 public <E> DataResult<Pair<E, OptionalInt>> parseElement(DynamicOps<JsonElement> dynamicOps, ResourceKey<? extends Registry<E>> resourceKey, ResourceKey<E> resourceKey2, Decoder<E> decoder) {
-                    /*
-                     * This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
-                     * org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [1[TRYBLOCK]], but top level block is 5[TRYBLOCK]
-                     * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:429)
-                     * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:478)
-                     * org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:728)
-                     * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:806)
-                     * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:258)
-                     * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:192)
-                     * org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:94)
-                     * org.benf.cfr.reader.entities.Method.analyse(Method.java:521)
-                     * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1035)
-                     * org.benf.cfr.reader.entities.ClassFile.analyseInnerClassesPass1(ClassFile.java:903)
-                     * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1015)
-                     * org.benf.cfr.reader.entities.ClassFile.analyseInnerClassesPass1(ClassFile.java:903)
-                     * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1015)
-                     * org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:922)
-                     * org.benf.cfr.reader.Driver.doJarVersionTypes(Driver.java:253)
-                     * org.benf.cfr.reader.Driver.doJar(Driver.java:135)
-                     * org.benf.cfr.reader.CfrDriverImpl.analyse(CfrDriverImpl.java:65)
-                     * org.benf.cfr.reader.Main.main(Main.java:49)
-                     */
-                    throw new IllegalStateException(Decompilation failed);
+                    // MagmaCube start - decompile error
+                    ResourceLocation resourcelocation = resourceKey.location();
+                    ResourceLocation resourcelocation1 = new ResourceLocation(resourcelocation.getNamespace(), resourceKey.location().getPath() + "/" + resourcelocation.getPath() + ".json");
+
+                    try (
+                            Resource iresource = resourceManager.getResource(resourcelocation1);
+                            Reader reader = new InputStreamReader(iresource.getInputStream(), StandardCharsets.UTF_8);
+                    ) {
+                        JsonParser jsonparser = new JsonParser();
+                        JsonElement jsonelement = jsonparser.parse(reader);
+                        // if (jsonelement!= null) jsonelement.getAsJsonObject().addProperty("forge:registry_name", resourceKey.location().toString()); // forge
+                        return decoder.parse(dynamicOps, jsonelement).map((instance) -> {
+                            return Pair.of(instance, OptionalInt.empty());
+                        });
+                    } catch (JsonIOException | JsonSyntaxException | IOException ioexception) {
+                        return DataResult.error("Failed to parse " + resourcelocation1 + " file: " + ioexception.getMessage());
+                    }
+                    // MagmaCube end - decompile error
                 }
 
                 public String toString() {
                     return "ResourceAccess[" + resourceManager + "]";
                 }
-
-                private static /* synthetic */ Pair lambda$parseElement$1(Object object) {
-                    return Pair.of(object, OptionalInt.empty());
-                }
             };
         }
 
diff --git a/src/main/java/net/minecraft/resources/ResourceKey.java b/src/main/java/net/minecraft/resources/ResourceKey.java
index 31f3bb28ca3a019bf6210a5c928a48ecf9e7c786..0ec4498b697aeb3d427cb92b3cea5a0addafb459 100644
--- a/src/main/java/net/minecraft/resources/ResourceKey.java
+++ b/src/main/java/net/minecraft/resources/ResourceKey.java
@@ -22,7 +22,7 @@ public class ResourceKey<T>
     
     private static <T> ResourceKey<T> create(final ResourceLocation resourceLocation, final ResourceLocation resourceLocation2) {
         final String s = (resourceLocation + ":" + resourceLocation2).intern();
-        return (ResourceKey<T>)ResourceKey.VALUES.computeIfAbsent(s, s -> new ResourceKey(resourceLocation, resourceLocation2));
+        return (ResourceKey<T>)ResourceKey.VALUES.computeIfAbsent(s, s1 -> new ResourceKey(resourceLocation, resourceLocation2)); // MagmaCube - decompile error
     }
     
     private ResourceKey(final ResourceLocation resourceLocation, final ResourceLocation resourceLocation2) {
@@ -44,10 +44,10 @@ public class ResourceKey<T>
     }
     
     public static <T> Function<ResourceLocation, ResourceKey<T>> elementKey(final ResourceKey<? extends Registry<T>> resourceKey) {
-        return (Function<ResourceLocation, ResourceKey<T>>)(resourceLocation -> create((ResourceKey<? extends Registry<Object>>)resourceKey, resourceLocation));
+        return (Function<ResourceLocation, ResourceKey<T>>)(resourceLocation -> create(resourceKey, resourceLocation)); // MagmaCube - decompile error
     }
     
     static {
-        VALUES = Collections.synchronizedMap((Map<String, ResourceKey<?>>)Maps.newIdentityHashMap());
+        VALUES = Collections.synchronizedMap(Maps.newIdentityHashMap()); // MagmaCube - decompile error
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/resources/ResourceLocation.java b/src/main/java/net/minecraft/resources/ResourceLocation.java
index d331a1f2080c969ffd0ddf8232945510b2d679be..ef0ea2b04a441e299bb10b85b959f8d29ccd94a7 100644
--- a/src/main/java/net/minecraft/resources/ResourceLocation.java
+++ b/src/main/java/net/minecraft/resources/ResourceLocation.java
@@ -79,7 +79,7 @@ public class ResourceLocation implements Comparable<ResourceLocation>
             return (DataResult<ResourceLocation>)DataResult.success(new ResourceLocation(s));
         }
         catch (ResourceLocationException resourceLocationException) {
-            return (DataResult<ResourceLocation>)DataResult.error("Not a valid resource location: " + s + " " + resourceLocationException.getMessage());
+            return DataResult.error("Not a valid resource location: " + s + " " + resourceLocationException.getMessage()); // MagmaCube - decompile error
         }
     }
     
@@ -173,7 +173,7 @@ public class ResourceLocation implements Comparable<ResourceLocation>
     }
     
     static {
-        CODEC = Codec.STRING.comapFlatMap((Function)ResourceLocation::read, (Function)ResourceLocation::toString).stable();
+        CODEC = Codec.STRING.comapFlatMap(ResourceLocation::read, ResourceLocation::toString).stable(); // MagmaCube - decompile error
         ERROR_INVALID = new SimpleCommandExceptionType((Message)new TranslatableComponent("argument.id.invalid"));
     }
     
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 972b358cddfa9c64d67f4c328a161a3905a4175d..f922671aa06fbf305b48d867c8b909037a085044 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -77,13 +77,13 @@ public class Main {
         OptionSpecBuilder optionSpec7 = optionParser.accepts("safeMode", "Loads level with vanilla datapack only");
         AbstractOptionSpec optionSpec8 = optionParser.accepts("help").forHelp();
         ArgumentAcceptingOptionSpec optionSpec9 = optionParser.accepts("singleplayer").withRequiredArg();
-        ArgumentAcceptingOptionSpec optionSpec10 = optionParser.accepts("universe").withRequiredArg().defaultsTo(".", (Object[])new String[0]);
+        ArgumentAcceptingOptionSpec optionSpec10 = optionParser.accepts("universe").withRequiredArg().defaultsTo(".", new String[0]); // MagmaCube - decompile error
         ArgumentAcceptingOptionSpec optionSpec11 = optionParser.accepts("world").withRequiredArg();
-        ArgumentAcceptingOptionSpec optionSpec12 = optionParser.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(-1, (Object[])new Integer[0]);
+        ArgumentAcceptingOptionSpec optionSpec12 = optionParser.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(-1, new Integer[0]); // MagmaCube - decompile error
         ArgumentAcceptingOptionSpec optionSpec13 = optionParser.accepts("serverId").withRequiredArg();
         NonOptionArgumentSpec optionSpec14 = optionParser.nonOptions();
         try {
-            void serverResources2;
+            ServerResources serverResources2; // MagmaCube - decompile error
             OptionSet optionSet = optionParser.parse(strings);
             if (optionSet.has((OptionSpec)optionSpec8)) {
                 optionParser.printHelpOn((OutputStream)System.err);
@@ -125,7 +125,7 @@ public class Main {
             DataPackConfig dataPackConfig2 = MinecraftServer.configurePackRepository(packRepository, dataPackConfig == null ? DataPackConfig.DEFAULT : dataPackConfig, flag);
             CompletableFuture<ServerResources> completableFuture = ServerResources.loadResources(packRepository.openAllSelected(), Commands.CommandSelection.DEDICATED, dedicatedServerSettings.getProperties().functionPermissionLevel, Util.backgroundExecutor(), Runnable::run);
             try {
-                ServerResources serverResources = completableFuture.get();
+                serverResources2 = completableFuture.get(); // MagmaCube - decompile error
             }
             catch (Exception exception) {
                 LOGGER.warn("Failed to load datapacks, can't proceed with server load. You can either fix your datapacks or reset to vanilla with --safeMode", (Throwable)exception);
@@ -139,8 +139,8 @@ public class Main {
                 WorldGenSettings worldGenSettings2;
                 LevelSettings levelSettings2;
                 if (optionSet.has((OptionSpec)optionSpec3)) {
-                    LevelSettings levelSettings = MinecraftServer.DEMO_SETTINGS;
-                    WorldGenSettings worldGenSettings = WorldGenSettings.demoSettings(registryHolder);
+                    levelSettings2 = MinecraftServer.DEMO_SETTINGS; // MagmaCube - decompile error
+                    worldGenSettings2 = WorldGenSettings.demoSettings(registryHolder); // MagmaCube - decompile error
                 } else {
                     DedicatedServerProperties dedicatedServerProperties = dedicatedServerSettings.getProperties();
                     levelSettings2 = new LevelSettings(dedicatedServerProperties.levelName, dedicatedServerProperties.gamemode, dedicatedServerProperties.hardcore, dedicatedServerProperties.difficulty, false, new GameRules(), dataPackConfig2);
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 9a40efd8481a52fc90f40467c210663439841492..ddacf0b6c47c281d6a621e520e25fb0320639031 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -332,8 +332,10 @@ AutoCloseable {
         MappedRegistry<LevelStem> mappedRegistry = worldGenSettings.dimensions();
         LevelStem levelStem = mappedRegistry.get(LevelStem.OVERWORLD);
         if (levelStem == null) {
-            DimensionType dimensionType = this.registryHolder.dimensionTypes().getOrThrow(DimensionType.OVERWORLD_LOCATION);
-            NoiseBasedChunkGenerator chunkGenerator = WorldGenSettings.makeDefaultOverworld(this.registryHolder.registryOrThrow(Registry.BIOME_REGISTRY), this.registryHolder.registryOrThrow(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY), new Random().nextLong());
+            // MagmaCube start - decompile error
+            dimensionType2 = this.registryHolder.dimensionTypes().getOrThrow(DimensionType.OVERWORLD_LOCATION);
+            chunkGenerator2 = WorldGenSettings.makeDefaultOverworld(this.registryHolder.registryOrThrow(Registry.BIOME_REGISTRY), this.registryHolder.registryOrThrow(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY), new Random().nextLong());
+            // MagmaCube end - decompile error
         } else {
             dimensionType2 = levelStem.type();
             chunkGenerator2 = levelStem.generator();
@@ -376,7 +378,8 @@ AutoCloseable {
             DimensionType dimensionType3 = entry.getValue().type();
             ChunkGenerator chunkGenerator3 = entry.getValue().generator();
             DerivedLevelData derivedLevelData = new DerivedLevelData(this.worldData, serverLevelData);
-            ServerLevel serverLevel2 = new ServerLevel(this, this.executor, this.storageSource, derivedLevelData, resourceKey2, dimensionType3, chunkProgressListener, chunkGenerator3, flag, l2, (List<CustomSpawner>)ImmutableList.of(), false);
+            // MagmaCube - decompile error
+            ServerLevel serverLevel2 = new ServerLevel(this, this.executor, this.storageSource, derivedLevelData, resourceKey2, dimensionType3, chunkProgressListener, chunkGenerator3, flag, l2, ImmutableList.of(), false);
             worldBorder.addListener(new BorderChangeListener.DelegateBorderChangeListener(serverLevel2.getWorldBorder()));
             this.levels.put(resourceKey2, serverLevel2);
         }
@@ -626,7 +629,7 @@ AutoCloseable {
             CrashReport crashReport2;
             LOGGER.error("Encountered an unexpected exception", throwable2);
             if (throwable2 instanceof ReportedException) {
-                CrashReport crashReport = this.fillReport(((ReportedException)throwable2).getReport());
+                crashReport2 = this.fillReport(((ReportedException)throwable2).getReport()); // MagmaCube - decompile error
             } else {
                 crashReport2 = this.fillReport(new CrashReport("Exception in server tick loop", throwable2));
             }
@@ -1217,7 +1220,8 @@ AutoCloseable {
     }
 
     public CompletableFuture<Void> reloadResources(Collection<String> collection) {
-        CompletionStage completableFuture = ((CompletableFuture)CompletableFuture.supplyAsync(() -> (ImmutableList)collection.stream().map(this.packRepository::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList()), this).thenCompose(immutableList -> ServerResources.loadResources((List<PackResources>)immutableList, this.isDedicatedServer() ? Commands.CommandSelection.DEDICATED : Commands.CommandSelection.INTEGRATED, this.getFunctionCompilationLevel(), this.executor, this))).thenAcceptAsync(serverResources -> {
+        // MagmaCube - decompile error
+        CompletableFuture completableFuture = (CompletableFuture.supplyAsync(() -> (ImmutableList)collection.stream().map(this.packRepository::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList()), this).thenCompose(immutableList -> ServerResources.loadResources((List<PackResources>)immutableList, this.isDedicatedServer() ? Commands.CommandSelection.DEDICATED : Commands.CommandSelection.INTEGRATED, this.getFunctionCompilationLevel(), this.executor, this))).thenAcceptAsync(serverResources -> {
             this.resources.close();
             this.resources = serverResources;
             this.packRepository.setSelected(collection);
@@ -1238,7 +1242,7 @@ AutoCloseable {
         packRepository.reload();
         if (flag) {
             packRepository.setSelected(Collections.singleton("vanilla"));
-            return new DataPackConfig((List<String>)ImmutableList.of("vanilla"), (List<String>)ImmutableList.of());
+            return new DataPackConfig((List<String>)ImmutableList.of("vanilla"), ImmutableList.of()); // MagmaCube - decompile error
         }
         LinkedHashSet set = Sets.newLinkedHashSet();
         for (String s : dataPackConfig.getEnabled()) {
@@ -1275,7 +1279,7 @@ AutoCloseable {
         }
         PlayerList playerList = commandSourceStack.getServer().getPlayerList();
         UserWhiteList userWhiteList = playerList.getWhiteList();
-        ArrayList list = Lists.newArrayList(playerList.getPlayers());
+        ArrayList<ServerPlayer> list = Lists.newArrayList(playerList.getPlayers()); // MagmaCube - type
         for (ServerPlayer serverPlayer : list) {
             if (userWhiteList.isWhiteListed(serverPlayer.getGameProfile())) continue;
             serverPlayer.connection.disconnect(new TranslatableComponent("multiplayer.disconnect.not_whitelisted"));
@@ -1413,7 +1417,7 @@ AutoCloseable {
 
     private void dumpGameRules(Path path) throws IOException {
         try (BufferedWriter writer = Files.newBufferedWriter(path, new OpenOption[0]);){
-            final ArrayList list = Lists.newArrayList();
+            final ArrayList<String> list = Lists.newArrayList(); // MagmaCube - type
             final GameRules gameRules = this.getGameRules();
             GameRules.visitGameRuleTypes(new GameRules.GameRuleTypeVisitor(){
 
@@ -1504,19 +1508,4 @@ AutoCloseable {
     public TextFilter createTextFilterForPlayer(ServerPlayer serverPlayer) {
         return null;
     }
-
-    @Override
-    public /* synthetic */ void doRunTask(Runnable runnable) {
-        this.doRunTask((TickTask)runnable);
-    }
-
-    @Override
-    public /* synthetic */ boolean shouldRun(Runnable runnable) {
-        return this.shouldRun((TickTask)runnable);
-    }
-
-    @Override
-    public /* synthetic */ Runnable wrapRunnable(Runnable runnable) {
-        return this.wrapRunnable(runnable);
-    }
 }
diff --git a/src/main/java/net/minecraft/server/PlayerAdvancements.java b/src/main/java/net/minecraft/server/PlayerAdvancements.java
index f9794137a8983402521660ede3a23cb7e23e599d..8858dc676c78d2c79c7e2d8493c09f23317db8e0 100644
--- a/src/main/java/net/minecraft/server/PlayerAdvancements.java
+++ b/src/main/java/net/minecraft/server/PlayerAdvancements.java
@@ -108,7 +108,7 @@ public class PlayerAdvancements {
     }
 
     private void ensureAllVisible() {
-        ArrayList list = Lists.newArrayList();
+        ArrayList<Advancement> list = Lists.newArrayList(); // MagmaCube - type
         for (Map.Entry<Advancement, AdvancementProgress> entry : this.advancements.entrySet()) {
             if (!entry.getValue().isDone()) continue;
             list.add(entry.getKey());
@@ -141,7 +141,7 @@ public class PlayerAdvancements {
                 if (map == null) {
                     throw new JsonParseException("Found null for advancements");
                 }
-                Stream<Map.Entry> stream = map.entrySet().stream().sorted(Comparator.comparing(Map.Entry::getValue));
+                Stream<Map.Entry> stream = map.entrySet().stream().sorted(Map.Entry.comparingByValue()); // MagmaCube - decompile error
                 for (Map.Entry entry : stream.collect(Collectors.toList())) {
                     Advancement advancement = serverAdvancementManager.getAdvancement((ResourceLocation)entry.getKey());
                     if (advancement == null) {
diff --git a/src/main/java/net/minecraft/server/ServerAdvancementManager.java b/src/main/java/net/minecraft/server/ServerAdvancementManager.java
index 1246882e0b5799589f3fa80713d3d2c5b5bed226..d59c2dd8867cbc5f3e3ce41b1bd115076c336ee4 100644
--- a/src/main/java/net/minecraft/server/ServerAdvancementManager.java
+++ b/src/main/java/net/minecraft/server/ServerAdvancementManager.java
@@ -38,21 +38,17 @@ public class ServerAdvancementManager extends SimpleJsonResourceReloadListener
     
     @Override
     protected void apply(final Map<ResourceLocation, JsonElement> map, final ResourceManager resourceManager, final ProfilerFiller profilerFiller) {
-        final Map<ResourceLocation, Advancement.Builder> map2 = (Map<ResourceLocation, Advancement.Builder>)Maps.newHashMap();
-        JsonObject jsonObject;
-        Advancement.Builder builder;
-        final Map<ResourceLocation, Advancement.Builder> map3;
-        final RuntimeException ex;
-        RuntimeException runtimeException;
+        final Map<ResourceLocation, Advancement.Builder> map2 = Maps.newHashMap(); // MagmaCube - decompile error
         map.forEach((resourceLocation, jsonElement) -> {
             try {
-                jsonObject = GsonHelper.convertToJsonObject(jsonElement, "advancement");
-                builder = Advancement.Builder.fromJson(jsonObject, new DeserializationContext(resourceLocation, this.predicateManager));
-                map3.put(resourceLocation, builder);
+                // MagmaCube start - decompile error
+                JsonObject jsonObject = GsonHelper.convertToJsonObject(jsonElement, "advancement");
+                Advancement.Builder builder = Advancement.Builder.fromJson(jsonObject, new DeserializationContext(resourceLocation, this.predicateManager));
+                map2.put(resourceLocation, builder);
+                // MagmaCube end - decompile error
             }
             catch (JsonParseException | IllegalArgumentException ex2) {
-                runtimeException = ex;
-                ServerAdvancementManager.LOGGER.error("Parsing error loading custom advancement {}: {}", resourceLocation, runtimeException.getMessage());
+                ServerAdvancementManager.LOGGER.error("Parsing error loading custom advancement {}: {}", resourceLocation, ex2.getMessage()); // MagmaCube - decompile error
             }
             return;
         });
diff --git a/src/main/java/net/minecraft/server/ServerScoreboard.java b/src/main/java/net/minecraft/server/ServerScoreboard.java
index c7f8d414b2a026cce56a9b713fa327ed08894c96..394a6b6dbb68ebc1a0565e75e91751f6cce03b7e 100644
--- a/src/main/java/net/minecraft/server/ServerScoreboard.java
+++ b/src/main/java/net/minecraft/server/ServerScoreboard.java
@@ -202,7 +202,7 @@ extends Scoreboard {
 
     public static enum Method {
         CHANGE,
-        REMOVE;
+        REMOVE
 
     }
 }
diff --git a/src/main/java/net/minecraft/server/bossevents/CustomBossEvents.java b/src/main/java/net/minecraft/server/bossevents/CustomBossEvents.java
index 48190cfe2589cea377d3885caf5defb119750cc9..13b9683a30d10d8141048214b39427949e8bdb83 100644
--- a/src/main/java/net/minecraft/server/bossevents/CustomBossEvents.java
+++ b/src/main/java/net/minecraft/server/bossevents/CustomBossEvents.java
@@ -1,8 +1,6 @@
 package net.minecraft.server.bossevents;
 
 import net.minecraft.server.level.ServerPlayer;
-import java.util.Iterator;
-import net.minecraft.nbt.Tag;
 import net.minecraft.nbt.CompoundTag;
 import java.util.Collection;
 import net.minecraft.network.chat.Component;
@@ -16,7 +14,7 @@ public class CustomBossEvents
     private final Map<ResourceLocation, CustomBossEvent> events;
     
     public CustomBossEvents() {
-        this.events = (Map<ResourceLocation, CustomBossEvent>)Maps.newHashMap();
+        this.events = Maps.newHashMap(); // MagmaCube - decompile fix
     }
     
     @Nullable
diff --git a/src/main/java/net/minecraft/server/commands/AttributeCommand.java b/src/main/java/net/minecraft/server/commands/AttributeCommand.java
index 72539a9832de45c802ce7ceb7d66644fc8b4a4ac..740f2f9dbf594a1cf138f258c4f4b442d6c81af0 100644
--- a/src/main/java/net/minecraft/server/commands/AttributeCommand.java
+++ b/src/main/java/net/minecraft/server/commands/AttributeCommand.java
@@ -42,7 +42,8 @@ public class AttributeCommand
     private static final Dynamic3CommandExceptionType ERROR_MODIFIER_ALREADY_PRESENT;
     
     public static void register(final CommandDispatcher<CommandSourceStack> commandDispatcher) {
-        commandDispatcher.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("attribute").requires(commandSourceStack -> commandSourceStack.hasPermission(2))).then(Commands.argument("target", (com.mojang.brigadier.arguments.ArgumentType<Object>)EntityArgument.entity()).then(((RequiredArgumentBuilder)((RequiredArgumentBuilder)Commands.argument("attribute", (com.mojang.brigadier.arguments.ArgumentType<Object>)ResourceLocationArgument.id()).suggests((SuggestionProvider)AttributeCommand.AVAILABLE_ATTRIBUTES).then(((LiteralArgumentBuilder)Commands.literal("get").executes(commandContext -> getAttributeValue((CommandSourceStack)commandContext.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)commandContext, "target"), ResourceLocationArgument.getAttribute((CommandContext<CommandSourceStack>)commandContext, "attribute"), 1.0))).then(Commands.argument("scale", (com.mojang.brigadier.arguments.ArgumentType<Object>)DoubleArgumentType.doubleArg()).executes(commandContext -> getAttributeValue((CommandSourceStack)commandContext.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)commandContext, "target"), ResourceLocationArgument.getAttribute((CommandContext<CommandSourceStack>)commandContext, "attribute"), DoubleArgumentType.getDouble(commandContext, "scale")))))).then(((LiteralArgumentBuilder)Commands.literal("base").then(Commands.literal("set").then(Commands.argument("value", (com.mojang.brigadier.arguments.ArgumentType<Object>)DoubleArgumentType.doubleArg()).executes(commandContext -> setAttributeBase((CommandSourceStack)commandContext.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)commandContext, "target"), ResourceLocationArgument.getAttribute((CommandContext<CommandSourceStack>)commandContext, "attribute"), DoubleArgumentType.getDouble(commandContext, "value")))))).then(((LiteralArgumentBuilder)Commands.literal("get").executes(commandContext -> getAttributeBase((CommandSourceStack)commandContext.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)commandContext, "target"), ResourceLocationArgument.getAttribute((CommandContext<CommandSourceStack>)commandContext, "attribute"), 1.0))).then(Commands.argument("scale", (com.mojang.brigadier.arguments.ArgumentType<Object>)DoubleArgumentType.doubleArg()).executes(commandContext -> getAttributeBase((CommandSourceStack)commandContext.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)commandContext, "target"), ResourceLocationArgument.getAttribute((CommandContext<CommandSourceStack>)commandContext, "attribute"), DoubleArgumentType.getDouble(commandContext, "scale"))))))).then(((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("modifier").then(Commands.literal("add").then(Commands.argument("uuid", (com.mojang.brigadier.arguments.ArgumentType<Object>)UuidArgument.uuid()).then(Commands.argument("name", (com.mojang.brigadier.arguments.ArgumentType<Object>)StringArgumentType.string()).then(((RequiredArgumentBuilder)((RequiredArgumentBuilder)Commands.argument("value", (com.mojang.brigadier.arguments.ArgumentType<Object>)DoubleArgumentType.doubleArg()).then(Commands.literal("add").executes(commandContext -> addModifier((CommandSourceStack)commandContext.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)commandContext, "target"), ResourceLocationArgument.getAttribute((CommandContext<CommandSourceStack>)commandContext, "attribute"), UuidArgument.getUuid((CommandContext<CommandSourceStack>)commandContext, "uuid"), StringArgumentType.getString(commandContext, "name"), DoubleArgumentType.getDouble(commandContext, "value"), AttributeModifier.Operation.ADDITION)))).then(Commands.literal("multiply").executes(commandContext -> addModifier((CommandSourceStack)commandContext.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)commandContext, "target"), ResourceLocationArgument.getAttribute((CommandContext<CommandSourceStack>)commandContext, "attribute"), UuidArgument.getUuid((CommandContext<CommandSourceStack>)commandContext, "uuid"), StringArgumentType.getString(commandContext, "name"), DoubleArgumentType.getDouble(commandContext, "value"), AttributeModifier.Operation.MULTIPLY_TOTAL)))).then(Commands.literal("multiply_base").executes(commandContext -> addModifier((CommandSourceStack)commandContext.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)commandContext, "target"), ResourceLocationArgument.getAttribute((CommandContext<CommandSourceStack>)commandContext, "attribute"), UuidArgument.getUuid((CommandContext<CommandSourceStack>)commandContext, "uuid"), StringArgumentType.getString(commandContext, "name"), DoubleArgumentType.getDouble(commandContext, "value"), AttributeModifier.Operation.MULTIPLY_BASE)))))))).then(Commands.literal("remove").then(Commands.argument("uuid", (com.mojang.brigadier.arguments.ArgumentType<Object>)UuidArgument.uuid()).executes(commandContext -> removeModifier((CommandSourceStack)commandContext.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)commandContext, "target"), ResourceLocationArgument.getAttribute((CommandContext<CommandSourceStack>)commandContext, "attribute"), UuidArgument.getUuid((CommandContext<CommandSourceStack>)commandContext, "uuid")))))).then(Commands.literal("value").then(Commands.literal("get").then(((RequiredArgumentBuilder)Commands.argument("uuid", (com.mojang.brigadier.arguments.ArgumentType<Object>)UuidArgument.uuid()).executes(commandContext -> getAttributeModifier((CommandSourceStack)commandContext.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)commandContext, "target"), ResourceLocationArgument.getAttribute((CommandContext<CommandSourceStack>)commandContext, "attribute"), UuidArgument.getUuid((CommandContext<CommandSourceStack>)commandContext, "uuid"), 1.0))).then(Commands.argument("scale", (com.mojang.brigadier.arguments.ArgumentType<Object>)DoubleArgumentType.doubleArg()).executes(commandContext -> getAttributeModifier((CommandSourceStack)commandContext.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)commandContext, "target"), ResourceLocationArgument.getAttribute((CommandContext<CommandSourceStack>)commandContext, "attribute"), UuidArgument.getUuid((CommandContext<CommandSourceStack>)commandContext, "uuid"), DoubleArgumentType.getDouble(commandContext, "scale")))))))))));
+        // MagmaCube - decompile error - note: next line is very long, about 5880 characters
+        commandDispatcher.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("attribute").requires(commandSourceStack -> commandSourceStack.hasPermission(2))).then(Commands.argument("target", EntityArgument.entity()).then(((RequiredArgumentBuilder)((RequiredArgumentBuilder)Commands.argument("attribute", ResourceLocationArgument.id()).suggests((SuggestionProvider)AttributeCommand.AVAILABLE_ATTRIBUTES).then(((LiteralArgumentBuilder)Commands.literal("get").executes(commandContext -> getAttributeValue((CommandSourceStack)commandContext.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)commandContext, "target"), ResourceLocationArgument.getAttribute((CommandContext<CommandSourceStack>)commandContext, "attribute"), 1.0))).then(Commands.argument("scale", DoubleArgumentType.doubleArg()).executes(commandContext -> getAttributeValue((CommandSourceStack)commandContext.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)commandContext, "target"), ResourceLocationArgument.getAttribute((CommandContext<CommandSourceStack>)commandContext, "attribute"), DoubleArgumentType.getDouble(commandContext, "scale")))))).then(((LiteralArgumentBuilder)Commands.literal("base").then(Commands.literal("set").then(Commands.argument("value", DoubleArgumentType.doubleArg()).executes(commandContext -> setAttributeBase((CommandSourceStack)commandContext.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)commandContext, "target"), ResourceLocationArgument.getAttribute((CommandContext<CommandSourceStack>)commandContext, "attribute"), DoubleArgumentType.getDouble(commandContext, "value")))))).then(((LiteralArgumentBuilder)Commands.literal("get").executes(commandContext -> getAttributeBase((CommandSourceStack)commandContext.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)commandContext, "target"), ResourceLocationArgument.getAttribute((CommandContext<CommandSourceStack>)commandContext, "attribute"), 1.0))).then(Commands.argument("scale", DoubleArgumentType.doubleArg()).executes(commandContext -> getAttributeBase((CommandSourceStack)commandContext.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)commandContext, "target"), ResourceLocationArgument.getAttribute((CommandContext<CommandSourceStack>)commandContext, "attribute"), DoubleArgumentType.getDouble(commandContext, "scale"))))))).then(((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("modifier").then(Commands.literal("add").then(Commands.argument("uuid", UuidArgument.uuid()).then(Commands.argument("name", StringArgumentType.string()).then(((RequiredArgumentBuilder)((RequiredArgumentBuilder)Commands.argument("value", DoubleArgumentType.doubleArg()).then(Commands.literal("add").executes(commandContext -> addModifier((CommandSourceStack)commandContext.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)commandContext, "target"), ResourceLocationArgument.getAttribute((CommandContext<CommandSourceStack>)commandContext, "attribute"), UuidArgument.getUuid((CommandContext<CommandSourceStack>)commandContext, "uuid"), StringArgumentType.getString(commandContext, "name"), DoubleArgumentType.getDouble(commandContext, "value"), AttributeModifier.Operation.ADDITION)))).then(Commands.literal("multiply").executes(commandContext -> addModifier((CommandSourceStack)commandContext.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)commandContext, "target"), ResourceLocationArgument.getAttribute((CommandContext<CommandSourceStack>)commandContext, "attribute"), UuidArgument.getUuid((CommandContext<CommandSourceStack>)commandContext, "uuid"), StringArgumentType.getString(commandContext, "name"), DoubleArgumentType.getDouble(commandContext, "value"), AttributeModifier.Operation.MULTIPLY_TOTAL)))).then(Commands.literal("multiply_base").executes(commandContext -> addModifier((CommandSourceStack)commandContext.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)commandContext, "target"), ResourceLocationArgument.getAttribute((CommandContext<CommandSourceStack>)commandContext, "attribute"), UuidArgument.getUuid((CommandContext<CommandSourceStack>)commandContext, "uuid"), StringArgumentType.getString(commandContext, "name"), DoubleArgumentType.getDouble(commandContext, "value"), AttributeModifier.Operation.MULTIPLY_BASE)))))))).then(Commands.literal("remove").then(Commands.argument("uuid", UuidArgument.uuid()).executes(commandContext -> removeModifier((CommandSourceStack)commandContext.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)commandContext, "target"), ResourceLocationArgument.getAttribute((CommandContext<CommandSourceStack>)commandContext, "attribute"), UuidArgument.getUuid((CommandContext<CommandSourceStack>)commandContext, "uuid")))))).then(Commands.literal("value").then(Commands.literal("get").then(((RequiredArgumentBuilder)Commands.argument("uuid", UuidArgument.uuid()).executes(commandContext -> getAttributeModifier((CommandSourceStack)commandContext.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)commandContext, "target"), ResourceLocationArgument.getAttribute((CommandContext<CommandSourceStack>)commandContext, "attribute"), UuidArgument.getUuid((CommandContext<CommandSourceStack>)commandContext, "uuid"), 1.0))).then(Commands.argument("scale", DoubleArgumentType.doubleArg()).executes(commandContext -> getAttributeModifier((CommandSourceStack)commandContext.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)commandContext, "target"), ResourceLocationArgument.getAttribute((CommandContext<CommandSourceStack>)commandContext, "attribute"), UuidArgument.getUuid((CommandContext<CommandSourceStack>)commandContext, "uuid"), DoubleArgumentType.getDouble(commandContext, "scale")))))))))));
     }
     
     private static AttributeInstance getAttributeInstance(final Entity entity, final Attribute attribute) throws CommandSyntaxException {
@@ -121,10 +122,8 @@ public class AttributeCommand
     
     static {
         AVAILABLE_ATTRIBUTES = ((commandContext, suggestionsBuilder) -> SharedSuggestionProvider.suggestResource(Registry.ATTRIBUTE.keySet(), suggestionsBuilder));
-        final TranslatableComponent translatableComponent;
         ERROR_NOT_LIVING_ENTITY = new DynamicCommandExceptionType(object -> {
-            new TranslatableComponent("commands.attribute.failed.entity", new Object[] { object });
-            return translatableComponent;
+            return new TranslatableComponent("commands.attribute.failed.entity", new Object[] { object });
         });
         ERROR_NO_SUCH_ATTRIBUTE = new Dynamic2CommandExceptionType((object, object2) -> new TranslatableComponent("commands.attribute.failed.no_attribute", new Object[] { object, object2 }));
         ERROR_NO_SUCH_MODIFIER = new Dynamic3CommandExceptionType((object, object2, object3) -> new TranslatableComponent("commands.attribute.failed.no_modifier", new Object[] { object2, object, object3 }));
diff --git a/src/main/java/net/minecraft/server/commands/data/DataCommands.java b/src/main/java/net/minecraft/server/commands/data/DataCommands.java
index 07456c027305e5a061371d58f93170fd3253ce3f..78f215a288b3aebca8c7dbd994d287280961d551 100644
--- a/src/main/java/net/minecraft/server/commands/data/DataCommands.java
+++ b/src/main/java/net/minecraft/server/commands/data/DataCommands.java
@@ -108,7 +108,7 @@ public class DataCommands {
             dataProvider.wrap((ArgumentBuilder<CommandSourceStack, ?>)literalArgumentBuilder, argumentBuilder -> {
                 RequiredArgumentBuilder<CommandSourceStack, NbtPathArgument.NbtPath> argumentBuilder2 = Commands.argument("targetPath", NbtPathArgument.nbtPath());
                 for (DataProvider dataProvider2 : SOURCE_PROVIDERS) {
-                    biConsumer.accept((ArgumentBuilder<CommandSourceStack, ?>)argumentBuilder2, dataManipulator -> dataProvider2.wrap((ArgumentBuilder<CommandSourceStack, ?>)Commands.literal("from"), argumentBuilder -> argumentBuilder.executes(commandContext -> {
+                    biConsumer.accept((ArgumentBuilder<CommandSourceStack, ?>)argumentBuilder2, dataManipulator -> dataProvider2.wrap((ArgumentBuilder<CommandSourceStack, ?>)Commands.literal("from"), argumentBuilder1 -> argumentBuilder1.executes(commandContext -> { // MagmaCube - decompile error
                         List<Tag> list = Collections.singletonList(dataProvider2.access((CommandContext<CommandSourceStack>)commandContext).getData());
                         return DataCommands.manipulateData((CommandContext<CommandSourceStack>)commandContext, dataProvider, dataManipulator, list);
                     }).then(Commands.argument("sourcePath", NbtPathArgument.nbtPath()).executes(commandContext -> {
@@ -166,16 +166,16 @@ public class DataCommands {
      * WARNING - void declaration
      */
     private static int getData(CommandSourceStack commandSourceStack, DataAccessor dataAccessor, NbtPathArgument.NbtPath nbtPath) throws CommandSyntaxException {
-        void i5;
+        int i5; // MagmaCube - decompile error
         Tag tag = DataCommands.getSingleTag(nbtPath, dataAccessor);
         if (tag instanceof NumericTag) {
-            int i = Mth.floor(((NumericTag)tag).getAsDouble());
+            i5 = Mth.floor(((NumericTag)tag).getAsDouble()); // MagmaCube - decompile error
         } else if (tag instanceof CollectionTag) {
-            int i2 = ((CollectionTag)tag).size();
+            i5 = ((CollectionTag)tag).size(); // MagmaCube - decompile error
         } else if (tag instanceof CompoundTag) {
-            int i3 = ((CompoundTag)tag).size();
+            i5 = ((CompoundTag)tag).size(); // MagmaCube - decompile error
         } else if (tag instanceof StringTag) {
-            int i4 = tag.getAsString().length();
+            i5 = tag.getAsString().length(); // MagmaCube - decompile error
         } else {
             throw ERROR_GET_NON_EXISTENT.create(nbtPath.toString());
         }
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java b/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java
index 0964adf34c8095f9f00d406ccd70f2fa4495dedf..1ac188d9f8c8b8451af5ffeb9d2c70331771e8da 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java
@@ -3,7 +3,6 @@ package net.minecraft.server.dedicated;
 import com.mojang.authlib.GameProfile;
 import java.io.IOException;
 import net.minecraft.core.RegistryAccess;
-import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.dedicated.DedicatedServer;
 import net.minecraft.server.dedicated.DedicatedServerProperties;
 import net.minecraft.server.players.PlayerList;
@@ -141,9 +140,4 @@ extends PlayerList {
     public boolean canBypassPlayerLimit(GameProfile gameProfile) {
         return this.getOps().canBypassPlayerLimit(gameProfile);
     }
-
-    @Override
-    public /* synthetic */ MinecraftServer getServer() {
-        return this.getServer();
-    }
 }
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 1b5206b85dc8d780631cd096281e9709492b2eae..1936c00fadfbd2c52684598123d8396e7e8a9cbd 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -214,13 +214,13 @@ implements ServerInterface {
         String s3;
         DedicatedServerProperties dedicatedServerProperties = this.settings.getProperties();
         if (!dedicatedServerProperties.resourcePackSha1.isEmpty()) {
-            String s = dedicatedServerProperties.resourcePackSha1;
+            s3 = dedicatedServerProperties.resourcePackSha1; // MagmaCube - decompile error
             if (!Strings.isNullOrEmpty((String)dedicatedServerProperties.resourcePackHash)) {
                 LOGGER.warn("resource-pack-hash is deprecated and found along side resource-pack-sha1. resource-pack-hash will be ignored.");
             }
         } else if (!Strings.isNullOrEmpty((String)dedicatedServerProperties.resourcePackHash)) {
             LOGGER.warn("resource-pack-hash is deprecated. Please use resource-pack-sha1 instead.");
-            String s2 = dedicatedServerProperties.resourcePackHash;
+            s3 = dedicatedServerProperties.resourcePackHash; // MagmaCube - decompile error
         } else {
             s3 = "";
         }
@@ -546,9 +546,4 @@ implements ServerInterface {
         }
         return null;
     }
-
-    @Override
-    public /* synthetic */ PlayerList getPlayerList() {
-        return this.getPlayerList();
-    }
 }
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
index 302f31a66df57f48143ec3e9f5f90805cdc62459..35dedbbf67d17acc4b9469dbe10f6ae864ffa4b5 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
@@ -58,8 +58,8 @@ extends Settings<DedicatedServerProperties> {
     public final boolean enableStatus;
     public final int entityBroadcastRangePercentage;
     public final String textFilteringConfig;
-    public final Settings.MutableValue<Integer> playerIdleTimeout;
-    public final Settings.MutableValue<Boolean> whiteList;
+    public final Settings<DedicatedServerProperties>.MutableValue<Integer> playerIdleTimeout; // MagmaCube - type
+    public final Settings<DedicatedServerProperties>.MutableValue<Boolean> whiteList; // MagmaCube - type
     public final WorldGenSettings worldGenSettings;
 
     public DedicatedServerProperties(Properties properties, RegistryAccess registryAccess) {
@@ -99,9 +99,4 @@ extends Settings<DedicatedServerProperties> {
     protected DedicatedServerProperties reload(RegistryAccess registryAccess, Properties properties) {
         return new DedicatedServerProperties(properties, registryAccess);
     }
-
-    @Override
-    protected /* synthetic */ Settings reload(RegistryAccess registryAccess, Properties properties) {
-        return this.reload(registryAccess, properties);
-    }
 }
diff --git a/src/main/java/net/minecraft/server/dedicated/Settings.java b/src/main/java/net/minecraft/server/dedicated/Settings.java
index 6b13bdf7d6df6031d48592a9c8456425d51b22d5..947018c514bd8d96f1817de549a3951c350902a3 100644
--- a/src/main/java/net/minecraft/server/dedicated/Settings.java
+++ b/src/main/java/net/minecraft/server/dedicated/Settings.java
@@ -49,7 +49,7 @@ public abstract class Settings<T extends Settings<T>> {
     private static <V extends Number> Function<String, V> wrapNumberDeserializer(Function<String, V> function) {
         return s -> {
             try {
-                return (Number)function.apply((String)s);
+                return (V) function.apply((String)s); // MagmaCube - decompile error
             }
             catch (NumberFormatException numberFormatException) {
                 return null;
@@ -86,21 +86,23 @@ public abstract class Settings<T extends Settings<T>> {
     protected <V> V get(String s, Function<String, V> function, Function<V, String> function2, V object) {
         String s2 = this.getStringRaw(s);
         Object object2 = MoreObjects.firstNonNull(s2 != null ? function.apply(s2) : null, object);
-        this.properties.put(s, function2.apply(object2));
+        this.properties.put(s, function2.apply((V) object2)); // MagmaCube - decompile error
         return (V)object2;
     }
 
     protected <V> MutableValue<V> getMutable(String s, Function<String, V> function, Function<V, String> function2, V object) {
         String s2 = this.getStringRaw(s);
         Object object2 = MoreObjects.firstNonNull(s2 != null ? function.apply(s2) : null, object);
-        this.properties.put(s, function2.apply(object2));
+        this.properties.put(s, function2.apply((V) object2)); // MagmaCube - decompile error
         return new MutableValue(s, object2, function2);
     }
 
     protected <V> V get(String s2, Function<String, V> function, UnaryOperator<V> unaryOperator, Function<V, String> function2, V object) {
         return (V)this.get(s2, s -> {
-            Object object = function.apply((String)s);
-            return object != null ? unaryOperator.apply(object) : null;
+            // MagmaCube start - decompile error
+            Object obj = function.apply((String)s);
+            return obj != null ? unaryOperator.apply(object) : null;
+            // MagmaCube end - decompile error
         }, function2, object);
     }
 
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 31d40191421516b3224a3d713b4a95e66ca7f62f..828cb7dcbcd4f8199ea28cae723f786b2d9612b2 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -138,7 +138,7 @@ implements ChunkHolder.PlayerProvider {
         ProcessorHandle<Runnable> processorHandle = ProcessorHandle.of("main", blockableEventLoop::tell);
         this.progressListener = chunkProgressListener;
         ProcessorMailbox<Runnable> processorMailbox2 = ProcessorMailbox.create(executor, "light");
-        this.queueSorter = new ChunkTaskPriorityQueueSorter((List<ProcessorHandle<?>>)ImmutableList.of(processorMailbox, processorHandle, processorMailbox2), executor, Integer.MAX_VALUE);
+        this.queueSorter = new ChunkTaskPriorityQueueSorter(ImmutableList.of(processorMailbox, processorHandle, processorMailbox2), executor, Integer.MAX_VALUE); // MagmaCube - decompile error
         this.worldgenMailbox = this.queueSorter.getProcessor(processorMailbox, false);
         this.mainThreadMailbox = this.queueSorter.getProcessor(processorHandle, false);
         this.lightEngine = new ThreadedLevelLightEngine(lightChunkGetter, this, this.level.dimensionType().hasSkyLight(), processorMailbox2, this.queueSorter.getProcessor(processorMailbox2, false));
@@ -161,8 +161,8 @@ implements ChunkHolder.PlayerProvider {
         int i3;
         if (flag) {
             SectionPos sectionPos = serverPlayer.getLastSectionPos();
-            int i = sectionPos.x();
-            int i2 = sectionPos.z();
+            i3 = sectionPos.x(); // MagmaCube - decompile error
+            i4 = sectionPos.z(); // MagmaCube - decompile error
         } else {
             i3 = Mth.floor(serverPlayer.getX() / 16.0);
             i4 = Mth.floor(serverPlayer.getZ() / 16.0);
@@ -220,7 +220,7 @@ implements ChunkHolder.PlayerProvider {
     }
 
     private CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> getChunkRangeFuture(ChunkPos chunkPos, final int i, IntFunction<ChunkStatus> intFunction) {
-        ArrayList list2 = Lists.newArrayList();
+        ArrayList<CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> list2 = Lists.newArrayList(); // MagmaCube - decompile error
         final int i2 = chunkPos.x;
         final int i3 = chunkPos.z;
         for (int i4 = -i; i4 <= i; ++i4) {
@@ -242,9 +242,9 @@ implements ChunkHolder.PlayerProvider {
                 list2.add(completableFuture);
             }
         }
-        CompletableFuture completableFuture2 = Util.sequence(list2);
+        CompletableFuture<List<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> completableFuture2 = Util.sequence(list2); // MagmaCube - decompile error
         return completableFuture2.thenApply(list -> {
-            ArrayList list2 = Lists.newArrayList();
+            ArrayList list3 = Lists.newArrayList(); // MagmaCube - decompile error
             int i4 = 0;
             for (final Either either : list) {
                 Optional optional = either.left();
@@ -257,10 +257,10 @@ implements ChunkHolder.PlayerProvider {
                         }
                     });
                 }
-                list2.add(optional.get());
+                list3.add(optional.get()); // MagmaCube - decompile error
                 ++i4;
             }
-            return Either.left(list2);
+            return Either.left(list3); // MagmaCube - decompile error
         });
     }
 
@@ -309,7 +309,7 @@ implements ChunkHolder.PlayerProvider {
 
     protected void saveAllChunks(boolean flag) {
         if (flag) {
-            List list = this.visibleChunkMap.values().stream().filter(ChunkHolder::wasAccessibleSinceLastSave).peek(ChunkHolder::refreshAccessibility).collect(Collectors.toList());
+            List<ChunkHolder> list = this.visibleChunkMap.values().stream().filter(ChunkHolder::wasAccessibleSinceLastSave).peek(ChunkHolder::refreshAccessibility).collect(Collectors.toList()); // MagmaCube - type
             MutableBoolean mutableBoolean = new MutableBoolean();
             do {
                 mutableBoolean.setFalse();
@@ -422,7 +422,7 @@ implements ChunkHolder.PlayerProvider {
             if ((chunkAccess2 = (ChunkAccess)optional.get()).getStatus().isOrAfter(chunkStatus)) {
                 CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completableFuture2;
                 if (chunkStatus == ChunkStatus.LIGHT) {
-                    CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completableFuture = this.scheduleChunkGeneration(chunkHolder, chunkStatus);
+                    completableFuture2 = this.scheduleChunkGeneration(chunkHolder, chunkStatus); // MagmaCube - decompile error
                 } else {
                     completableFuture2 = chunkStatus.load(this.level, this.structureManager, this.lightEngine, chunkAccess -> this.protoChunkToFullChunk(chunkHolder), chunkAccess2);
                 }
@@ -478,11 +478,12 @@ implements ChunkHolder.PlayerProvider {
         ChunkPos chunkPos = chunkHolder.getPos();
         CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> completableFuture = this.getChunkRangeFuture(chunkPos, chunkStatus.getRange(), i -> this.getDependencyStatus(chunkStatus, i));
         this.level.getProfiler().incrementCounter(() -> "chunkGenerate " + chunkStatus.getName());
-        return completableFuture.thenComposeAsync(either -> (CompletableFuture)either.map(list -> {
+        return completableFuture.thenComposeAsync(either -> either.map(list -> { // MagmaCube - decompile error
             try {
-                CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completableFuture = chunkStatus.generate(this.level, this.generator, this.structureManager, this.lightEngine, chunkAccess -> this.protoChunkToFullChunk(chunkHolder), (List<ChunkAccess>)list);
+                // MagmaCube - decompile error
+                CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completableFuture1 = chunkStatus.generate(this.level, this.generator, this.structureManager, this.lightEngine, chunkAccess -> this.protoChunkToFullChunk(chunkHolder), (List<ChunkAccess>)list);
                 this.progressListener.onStatusChange(chunkPos, chunkStatus);
-                return completableFuture;
+                return completableFuture1; // MagmaCube - decompile error
             }
             catch (Exception exception) {
                 CrashReport crashReport = CrashReport.forThrowable(exception, "Exception generating new chunk");
@@ -505,7 +506,7 @@ implements ChunkHolder.PlayerProvider {
     private ChunkStatus getDependencyStatus(ChunkStatus chunkStatus, int i) {
         ChunkStatus chunkStatus3;
         if (i == 0) {
-            ChunkStatus chunkStatus2 = chunkStatus.getParent();
+            chunkStatus3 = chunkStatus.getParent(); // MagmaCube - decompile error
         } else {
             chunkStatus3 = ChunkStatus.getStatus(ChunkStatus.getDistance(chunkStatus) + i);
         }
@@ -523,7 +524,7 @@ implements ChunkHolder.PlayerProvider {
                 LevelChunk levelChunk2;
                 ChunkPos chunkPos = chunkHolder.getPos();
                 if (chunkAccess instanceof ImposterProtoChunk) {
-                    LevelChunk levelChunk = ((ImposterProtoChunk)chunkAccess).getWrapped();
+                    levelChunk2 = ((ImposterProtoChunk)chunkAccess).getWrapped(); // MagmaCube - decompile error
                 } else {
                     levelChunk2 = new LevelChunk(this.level, (ProtoChunk)chunkAccess);
                     chunkHolder.replaceProtoChunk(new ImposterProtoChunk(levelChunk2));
@@ -533,12 +534,12 @@ implements ChunkHolder.PlayerProvider {
                 if (this.entitiesInLevel.add(chunkPos.toLong())) {
                     levelChunk2.setLoaded(true);
                     this.level.addAllPendingBlockEntities(levelChunk2.getBlockEntities().values());
-                    Iterable list = null;
+                    List<Entity> list = null; // MagmaCube - decompile error
                     for (ClassInstanceMultiMap<Entity> classInstanceMultiMap : levelChunk2.getEntitySections()) {
                         for (Entity entity : classInstanceMultiMap) {
                             if (entity instanceof Player || this.level.loadFromChunk(entity)) continue;
                             if (list == null) {
-                                list = Lists.newArrayList((Object[])new Entity[]{entity});
+                                list = Lists.newArrayList(new Entity[]{entity}); // MagmaCube - decompile error
                                 continue;
                             }
                             list.add(entity);
@@ -556,18 +557,19 @@ implements ChunkHolder.PlayerProvider {
     public CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> postProcess(ChunkHolder chunkHolder) {
         ChunkPos chunkPos = chunkHolder.getPos();
         CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> completableFuture = this.getChunkRangeFuture(chunkPos, 1, i -> ChunkStatus.FULL);
-        CompletionStage completableFuture2 = completableFuture.thenApplyAsync(either -> either.flatMap(list -> {
+        // MagmaCube - decompile error
+        CompletionStage<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> completableFuture2 = completableFuture.thenApplyAsync(either -> either.flatMap(list -> {
             LevelChunk levelChunk = (LevelChunk)list.get(list.size() / 2);
             levelChunk.postProcessGeneration();
             return Either.left(levelChunk);
         }), runnable -> this.mainThreadMailbox.tell(ChunkTaskPriorityQueueSorter.message(chunkHolder, runnable)));
-        ((CompletableFuture)completableFuture2).thenAcceptAsync(either -> either.mapLeft(levelChunk -> {
+        completableFuture2.thenAcceptAsync(either -> either.mapLeft(levelChunk -> { // MagmaCube - decompile error
             this.tickingGenerated.getAndIncrement();
             Packet[] packets = new Packet[2];
             this.getPlayers(chunkPos, false).forEach(serverPlayer -> this.playerLoadedChunk((ServerPlayer)serverPlayer, packets, (LevelChunk)levelChunk));
             return Either.left(levelChunk);
         }), runnable -> this.mainThreadMailbox.tell(ChunkTaskPriorityQueueSorter.message(chunkHolder, runnable)));
-        return completableFuture2;
+        return (CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>>) completableFuture2; // MagmaCube - decompile error
     }
 
     public CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> unpackTicks(ChunkHolder chunkHolder) {
@@ -616,14 +618,16 @@ implements ChunkHolder.PlayerProvider {
      * WARNING - void declaration
      */
     private boolean isExistingChunkFull(ChunkPos chunkPos) {
-        void compoundTag2;
+        CompoundTag compoundTag2; // MagmaCube - decompile error
         byte b = this.chunkTypeCache.get(chunkPos.toLong());
         if (b != 0) {
             return b == 1;
         }
         try {
-            CompoundTag compoundTag = this.readChunk(chunkPos);
-            if (compoundTag == null) {
+            // MagmaCube start - decompile error
+            compoundTag2 = this.readChunk(chunkPos);
+            if (compoundTag2 == null) {
+            // MagmaCube end - decompile error
                 this.markPositionReplaceable(chunkPos);
                 return false;
             }
@@ -647,9 +651,11 @@ implements ChunkHolder.PlayerProvider {
                 ChunkPos chunkPos = chunkHolder.getPos();
                 Packet[] packets = new Packet[2];
                 this.getPlayers(chunkPos, false).forEach(serverPlayer -> {
-                    int i2 = ChunkMap.checkerboardDistance(chunkPos, serverPlayer, true);
-                    boolean flag = i2 <= i3;
-                    boolean flag2 = i2 <= this.viewDistance;
+                    // MagmaCube start - decompile error
+                    int i5 = ChunkMap.checkerboardDistance(chunkPos, serverPlayer, true);
+                    boolean flag = i5 <= i3;
+                    boolean flag2 = i5 <= this.viewDistance;
+                    // MagmaCube end - decompile error
                     this.updateChunkTracking((ServerPlayer)serverPlayer, chunkPos, packets, flag, flag2);
                 });
             }
@@ -691,7 +697,7 @@ implements ChunkHolder.PlayerProvider {
             ChunkPos chunkPos = new ChunkPos(entry.getLongKey());
             ChunkHolder chunkHolder = (ChunkHolder)entry.getValue();
             Optional<ChunkAccess> optional = Optional.ofNullable(chunkHolder.getLastAvailable());
-            Optional<Object> optional2 = optional.flatMap(chunkAccess -> chunkAccess instanceof LevelChunk ? Optional.of((LevelChunk)chunkAccess) : Optional.empty());
+            Optional<LevelChunk> optional2 = optional.flatMap(chunkAccess -> chunkAccess instanceof LevelChunk ? Optional.of((LevelChunk)chunkAccess) : Optional.empty()); // MagmaCube - type
             csvOutput.writeRow(chunkPos.x, chunkPos.z, chunkHolder.getTicketLevel(), optional.isPresent(), optional.map(ChunkAccess::getStatus).orElse(null), optional2.map(LevelChunk::getFullStatus).orElse(null), ChunkMap.printFuture(chunkHolder.getFullChunkFuture()), ChunkMap.printFuture(chunkHolder.getTickingChunkFuture()), ChunkMap.printFuture(chunkHolder.getEntityTickingChunkFuture()), this.distanceManager.getTicketDebugString(entry.getLongKey()), !this.noPlayersCloseForSpawning(chunkPos), optional2.map(levelChunk -> Stream.of(levelChunk.getEntitySections()).mapToInt(ClassInstanceMultiMap::size).sum()).orElse(0), optional2.map(levelChunk -> levelChunk.getBlockEntities().size()).orElse(0));
         }
     }
@@ -929,8 +935,8 @@ implements ChunkHolder.PlayerProvider {
         }
         serverPlayer.trackChunk(levelChunk.getPos(), packets[0], packets[1]);
         DebugPackets.sendPoiPacketsForChunk(this.level, levelChunk.getPos());
-        ArrayList list = Lists.newArrayList();
-        ArrayList list2 = Lists.newArrayList();
+        ArrayList<Entity> list = Lists.newArrayList(); // MagmaCube - type
+        ArrayList<Entity> list2 = Lists.newArrayList(); // MagmaCube - type
         for (TrackedEntity trackedEntity : this.entityMap.values()) {
             Entity entity = trackedEntity.entity;
             if (entity == serverPlayer || entity.xChunk != levelChunk.getPos().x || entity.zChunk != levelChunk.getPos().z) continue;
diff --git a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java
index 1aedcba5bfb3b8620c4de9a8e65e9f3e9890dd5d..05c1bb125e93c6f7e1c430f3101a63ed07663353 100644
--- a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java
+++ b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java
@@ -18,7 +18,7 @@ import net.minecraft.world.level.ChunkPos;
 
 public class ChunkTaskPriorityQueue<T> {
     public static final int PRIORITY_LEVEL_COUNT = ChunkMap.MAX_CHUNK_DISTANCE + 2;
-    private final List<Long2ObjectLinkedOpenHashMap<List<Optional<T>>>> taskQueue = IntStream.range(0, PRIORITY_LEVEL_COUNT).mapToObj(i -> new Long2ObjectLinkedOpenHashMap()).collect(Collectors.toList());
+    private final List<Long2ObjectLinkedOpenHashMap<List<Optional<T>>>> taskQueue = IntStream.range(0, PRIORITY_LEVEL_COUNT).mapToObj(i -> new Long2ObjectLinkedOpenHashMap<List<Optional<T>>>()).collect(Collectors.toList()); // MagmaCube - decompile error
     private volatile int firstQueue = PRIORITY_LEVEL_COUNT;
     private final String name;
     private final LongSet acquired = new LongOpenHashSet();
@@ -53,7 +53,7 @@ public class ChunkTaskPriorityQueue<T> {
 
     protected void release(long l, boolean flag) {
         for (Long2ObjectLinkedOpenHashMap<List<Optional<T>>> long2ObjectLinkedOpenHashMap : this.taskQueue) {
-            List list = (List)long2ObjectLinkedOpenHashMap.get(l);
+            List<Optional<T>> list = long2ObjectLinkedOpenHashMap.get(l); // MagmaCube - type
             if (list == null) continue;
             if (flag) {
                 list.clear();
@@ -82,11 +82,11 @@ public class ChunkTaskPriorityQueue<T> {
             int i = this.firstQueue;
             Long2ObjectLinkedOpenHashMap<List<Optional<T>>> long2ObjectLinkedOpenHashMap = this.taskQueue.get(i);
             long l = long2ObjectLinkedOpenHashMap.firstLongKey();
-            List list = (List)long2ObjectLinkedOpenHashMap.removeFirst();
+            List<Optional<T>> list = long2ObjectLinkedOpenHashMap.removeFirst(); // MagmaCube - type
             while (this.firstQueue < PRIORITY_LEVEL_COUNT && this.taskQueue.get(this.firstQueue).isEmpty()) {
                 ++this.firstQueue;
             }
-            return list.stream().map(optional -> optional.map(Either::left).orElseGet(() -> Either.right(this.acquire(l))));
+            return (Stream) list.stream().map(optional -> optional.map(Either::left).orElseGet(() -> Either.right(this.acquire(l)))); // MagmaCube - untype
         }
         return null;
     }
diff --git a/src/main/java/net/minecraft/server/level/DemoMode.java b/src/main/java/net/minecraft/server/level/DemoMode.java
index 8a5006b4f353753ee766125000c45045b7f7d410..18f8ab9e8ad78dc672bfe8854c18325f3566043c 100644
--- a/src/main/java/net/minecraft/server/level/DemoMode.java
+++ b/src/main/java/net/minecraft/server/level/DemoMode.java
@@ -8,10 +8,8 @@ import net.minecraft.world.level.Level;
 import net.minecraft.core.Direction;
 import net.minecraft.network.protocol.game.ServerboundPlayerActionPacket;
 import net.minecraft.core.BlockPos;
-import net.minecraft.network.chat.Component;
 import net.minecraft.Util;
 import net.minecraft.network.chat.TranslatableComponent;
-import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientboundGameEventPacket;
 
 public class DemoMode extends ServerPlayerGameMode
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 94adff666e007e31809a487de833754318652af9..87e96ee06fcc0490a81c7389ad013d6b5ca22374 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -134,8 +134,7 @@ public class ServerChunkCache extends ChunkSource
         final IllegalStateException throwable;
         final ChunkAccess chunkAccess3 = (ChunkAccess)completableFuture.join().map(chunkAccess -> chunkAccess, chunkLoadingFailure -> {
             if (flag) {
-                new IllegalStateException("Chunk not there when requested: " + chunkLoadingFailure);
-                throw Util.pauseInIde(throwable);
+                throw Util.pauseInIde(new IllegalStateException("Chunk not there when requested: " + chunkLoadingFailure)); // MagmaCube - decompile error
             }
             else {
                 return null;
@@ -187,8 +186,8 @@ public class ServerChunkCache extends ChunkSource
         final boolean flag2 = Thread.currentThread() == this.mainThread;
         final CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completableFuture3;
         if (flag2) {
-            final CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completableFuture2 = this.getChunkFutureMainThread(i, i2, chunkStatus, flag);
-            this.mainThreadProcessor.managedBlock(completableFuture2::isDone);
+            completableFuture3 = this.getChunkFutureMainThread(i, i2, chunkStatus, flag); // MagmaCube - decompile error
+            this.mainThreadProcessor.managedBlock(completableFuture3::isDone); // MagmaCube - decompile error
         }
         else {
             completableFuture3 = CompletableFuture.supplyAsync(() -> this.getChunkFutureMainThread(i, i2, chunkStatus, flag), this.mainThreadProcessor).thenCompose(completableFuture -> completableFuture);
@@ -339,17 +338,9 @@ public class ServerChunkCache extends ChunkSource
             this.level.getProfiler().pop();
             final List<ChunkHolder> list = (List<ChunkHolder>)Lists.newArrayList((Iterable)this.chunkMap.getChunks());
             Collections.shuffle(list);
-            final Optional<LevelChunk> optional;
-            final Optional<LevelChunk> optional2;
-            final LevelChunk levelChunk;
-            final ChunkPos chunkPos;
-            final long n;
-            final boolean b;
-            final NaturalSpawner.SpawnState spawnState2;
-            final boolean flag4;
-            final int j;
             list.forEach(chunkHolder -> {
-                optional = (Optional<LevelChunk>)chunkHolder.getTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK).left();
+                // MagmaCube - decompile error
+                Optional<LevelChunk> optional = (Optional<LevelChunk>)chunkHolder.getTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK).left();
                 if (!optional.isPresent()) {
                     return;
                 }
@@ -357,22 +348,27 @@ public class ServerChunkCache extends ChunkSource
                     this.level.getProfiler().push("broadcast");
                     chunkHolder.broadcastChanges(optional.get());
                     this.level.getProfiler().pop();
-                    optional2 = (Optional<LevelChunk>)chunkHolder.getEntityTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK).left();
+                    // MagmaCube - decompile error
+                    Optional<LevelChunk> optional2 = (Optional<LevelChunk>)chunkHolder.getEntityTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK).left();
                     if (!optional2.isPresent()) {
                         return;
                     }
                     else {
-                        levelChunk = optional2.get();
-                        chunkPos = chunkHolder.getPos();
+                        // MagmaCube start - decompile error
+                        LevelChunk levelChunk = optional2.get();
+                        ChunkPos chunkPos = chunkHolder.getPos();
+                        // MagmaCube end - decompile error
                         if (this.chunkMap.noPlayersCloseForSpawning(chunkPos)) {
                             return;
                         }
                         else {
-                            levelChunk.setInhabitedTime(levelChunk.getInhabitedTime() + n);
-                            if (b && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(levelChunk.getPos())) {
-                                NaturalSpawner.spawnForChunk(this.level, levelChunk, spawnState2, this.spawnFriendlies, this.spawnEnemies, flag4);
+                            // MagmaCube start - decompile error
+                            levelChunk.setInhabitedTime(levelChunk.getInhabitedTime() + l2);
+                            if (flag2 && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(levelChunk.getPos())) {
+                                NaturalSpawner.spawnForChunk(this.level, levelChunk, spawnState, this.spawnFriendlies, this.spawnEnemies, flag3);
                             }
-                            this.level.tickChunk(levelChunk, j);
+                            this.level.tickChunk(levelChunk, i);
+                            // MagmaCube end - decompile error
                             return;
                         }
                     }
@@ -424,9 +420,8 @@ public class ServerChunkCache extends ChunkSource
     
     @Override
     public void onLightUpdate(final LightLayer lightLayer, final SectionPos sectionPos) {
-        final ChunkHolder chunkHolder;
         this.mainThreadProcessor.execute(() -> {
-            chunkHolder = this.getVisibleChunkIfPresent(sectionPos.chunk().toLong());
+            ChunkHolder chunkHolder = this.getVisibleChunkIfPresent(sectionPos.chunk().toLong()); // MagmaCube - decompile error
             if (chunkHolder != null) {
                 chunkHolder.sectionLightChanged(lightLayer, sectionPos.y());
             }
diff --git a/src/main/java/net/minecraft/server/level/ServerEntity.java b/src/main/java/net/minecraft/server/level/ServerEntity.java
index c574ef5568867adc174ee2ebb969be6103699911..a86ece0b1e3553b9cd67e76b10fa9380b4a81364 100644
--- a/src/main/java/net/minecraft/server/level/ServerEntity.java
+++ b/src/main/java/net/minecraft/server/level/ServerEntity.java
@@ -210,7 +210,7 @@ public class ServerEntity
             consumer.accept(new ClientboundSetEntityMotionPacket(this.entity.getId(), this.ap));
         }
         if (this.entity instanceof LivingEntity) {
-            final List<Pair<EquipmentSlot, ItemStack>> list = (List<Pair<EquipmentSlot, ItemStack>>)Lists.newArrayList();
+            final List<Pair<EquipmentSlot, ItemStack>> list = Lists.newArrayList(); // MagmaCube - decompile error
             for (final EquipmentSlot equipmentSlot : EquipmentSlot.values()) {
                 final ItemStack itemStack = ((LivingEntity)this.entity).getItemBySlot(equipmentSlot);
                 if (!itemStack.isEmpty()) {
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 7c63de5a562e43f8cbc0397628d2a8531ed6146b..68a02deb311247301ba2da67407fb8aba5f267cc 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1067,8 +1067,10 @@ implements WorldGenLevel {
         ChunkPos chunkPos = new ChunkPos(i, i2);
         long l = chunkPos.toLong();
         if (flag) {
-            boolean flag2 = forcedChunksSavedData.getChunks().add(l);
-            if (flag2) {
+            // MagmaCube start - decompile error
+            flag3 = forcedChunksSavedData.getChunks().add(l);
+            if (flag3) {
+            // MagmaCube end - decompile error
                 this.getChunk(i, i2);
             }
         } else {
@@ -1144,14 +1146,13 @@ implements WorldGenLevel {
     }
 
     public void saveDebugReport(Path path) throws IOException {
-        Object entry2;
         Object spawnState;
         ChunkMap chunkMap = this.getChunkSource().chunkMap;
         try (BufferedWriter writer = Files.newBufferedWriter(path.resolve("stats.txt"), new OpenOption[0]);){
             writer.write(String.format("spawning_chunks: %d\n", chunkMap.getDistanceManager().getNaturalSpawnChunkCount()));
             spawnState = this.getChunkSource().getLastSpawnState();
             if (spawnState != null) {
-                for (Object entry2 : ((NaturalSpawner.SpawnState)spawnState).getMobCategoryCounts().object2IntEntrySet()) {
+                for (Object2IntMap.Entry<MobCategory> entry2 : ((NaturalSpawner.SpawnState)spawnState).getMobCategoryCounts().object2IntEntrySet()) { // MagmaCube - decompile error
                     writer.write(String.format("spawn_count.%s: %d\n", ((MobCategory)entry2.getKey()).getName(), entry2.getIntValue()));
                 }
             }
@@ -1213,7 +1214,7 @@ implements WorldGenLevel {
         }
         Path path3 = path.resolve("entities.csv");
         BufferedWriter writer4 = Files.newBufferedWriter(path3, new OpenOption[0]);
-        entry2 = null;
+        Object entry2 = null; // MagmaCube - decompile error
         try {
             ServerLevel.dumpEntities(writer4, (Iterable<Entity>)this.entitiesById.values());
         }
@@ -1314,12 +1315,12 @@ implements WorldGenLevel {
 
     private static <T> String getTypeCount(Collection<T> collection, Function<T, ResourceLocation> function) {
         try {
-            Object2IntOpenHashMap object2IntOpenHashMap = new Object2IntOpenHashMap();
+            Object2IntOpenHashMap<ResourceLocation> object2IntOpenHashMap = new Object2IntOpenHashMap(); // MagmaCube - decompile error
             for (T object : collection) {
                 ResourceLocation resourceLocation = function.apply(object);
                 object2IntOpenHashMap.addTo(resourceLocation, 1);
             }
-            return object2IntOpenHashMap.object2IntEntrySet().stream().sorted(Comparator.comparing(Object2IntMap.Entry::getIntValue).reversed()).limit(5L).map(entry -> entry.getKey() + ":" + entry.getIntValue()).collect(Collectors.joining(","));
+            return object2IntOpenHashMap.object2IntEntrySet().stream().sorted(Comparator.comparing(Object2IntMap.Entry<ResourceLocation>::getIntValue).reversed()).limit(5L).map(entry -> entry.getKey() + ":" + entry.getIntValue()).collect(Collectors.joining(",")); // MagmaCube - decompile error
         }
         catch (Exception exception) {
             return "";
@@ -1334,22 +1335,4 @@ implements WorldGenLevel {
         BlockPos.betweenClosed(i - 2, i2 + 1, i3 - 2, i + 2, i2 + 3, i3 + 2).forEach(blockPos -> serverLevel.setBlockAndUpdate((BlockPos)blockPos, Blocks.AIR.defaultBlockState()));
         BlockPos.betweenClosed(i - 2, i2, i3 - 2, i + 2, i2, i3 + 2).forEach(blockPos -> serverLevel.setBlockAndUpdate((BlockPos)blockPos, Blocks.OBSIDIAN.defaultBlockState()));
     }
-
-    @Override
-    public /* synthetic */ Scoreboard getScoreboard() {
-        return this.getScoreboard();
-    }
-
-    @Override
-    public /* synthetic */ ChunkSource getChunkSource() {
-        return this.getChunkSource();
-    }
-
-    public /* synthetic */ TickList getLiquidTicks() {
-        return this.getLiquidTicks();
-    }
-
-    public /* synthetic */ TickList getBlockTicks() {
-        return this.getBlockTicks();
-    }
 }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 751e7f543dba6cf2a16a0c8f82947c8b724227ea..a19ee6b6395837b0807482695d6efcaa9f4b3d0d 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -264,7 +264,8 @@ implements ContainerListener {
             this.respawnForced = compoundTag.getBoolean("SpawnForced");
             this.respawnAngle = compoundTag.getFloat("SpawnAngle");
             if (compoundTag.contains("SpawnDimension")) {
-                this.respawnDimension = Level.RESOURCE_KEY_CODEC.parse((DynamicOps)NbtOps.INSTANCE, compoundTag.get("SpawnDimension")).resultOrPartial(((Logger)LOGGER)::error).orElse(Level.OVERWORLD);
+                // MagmaCube - decompile error
+                this.respawnDimension = Level.RESOURCE_KEY_CODEC.parse(NbtOps.INSTANCE, compoundTag.get("SpawnDimension")).resultOrPartial(((Logger)LOGGER)::error).orElse(Level.OVERWORLD);
             }
         }
     }
@@ -1002,7 +1003,7 @@ implements ContainerListener {
     @Override
     protected void completeUsingItem() {
         if (!this.useItem.isEmpty() && this.isUsingItem()) {
-            this.connection.send(new ClientboundEntityEventPacket(this, 9));
+            this.connection.send(new ClientboundEntityEventPacket(this, (byte) 9)); // MagmaCube - decompile error
             super.completeUsingItem();
         }
     }
diff --git a/src/main/java/net/minecraft/server/level/progress/LoggerChunkProgressListener.java b/src/main/java/net/minecraft/server/level/progress/LoggerChunkProgressListener.java
index 88a7d639b50f7965662eebb3caa2cfa828098607..8eac80425521b87457d01fc15f02ba43346e52a3 100644
--- a/src/main/java/net/minecraft/server/level/progress/LoggerChunkProgressListener.java
+++ b/src/main/java/net/minecraft/server/level/progress/LoggerChunkProgressListener.java
@@ -48,7 +48,7 @@ public class LoggerChunkProgressListener implements ChunkProgressListener
     }
     
     public int getProgress() {
-        return Mth.floor(this.count * 100.0f / this.maxCount);
+        return Mth.floor((float) this.count * 100.0f / (float) this.maxCount);
     }
     
     static {
diff --git a/src/main/java/net/minecraft/server/network/ServerConnectionListener.java b/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
index 6ee0a2861c7972b5604ba099a98185e06918af95..0633892b0fa801ddfda2e58b66c0bc6e2a872725 100644
--- a/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
+++ b/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
@@ -16,6 +16,7 @@ import io.netty.channel.epoll.EpollServerSocketChannel;
 import io.netty.channel.local.LocalAddress;
 import io.netty.channel.local.LocalServerChannel;
 import io.netty.channel.nio.NioEventLoopGroup;
+import io.netty.channel.socket.ServerSocketChannel; // MagmaCube
 import io.netty.channel.socket.nio.NioServerSocketChannel;
 import io.netty.handler.timeout.ReadTimeoutHandler;
 import io.netty.util.concurrent.Future;
@@ -66,11 +67,13 @@ public class ServerConnectionListener {
     public void startTcpServerListener(@Nullable InetAddress inetAddress, int i) throws IOException {
         List<ChannelFuture> list = this.channels;
         synchronized (list) {
-            LazyLoadedValue<NioEventLoopGroup> lazyLoadedValue2;
-            Class<NioServerSocketChannel> clazz2;
+            // MagmaCube start - decompile error
+            LazyLoadedValue<? extends EventLoopGroup> lazyLoadedValue2;
+            Class<? extends ServerSocketChannel> clazz2;
             if (Epoll.isAvailable() && this.server.isEpollEnabled()) {
-                Class<EpollServerSocketChannel> clazz = EpollServerSocketChannel.class;
-                LazyLoadedValue<EpollEventLoopGroup> lazyLoadedValue = SERVER_EPOLL_EVENT_GROUP;
+                clazz2 = EpollServerSocketChannel.class;
+                lazyLoadedValue2 = SERVER_EPOLL_EVENT_GROUP;
+            // MagmaCube end - decompile error
                 LOGGER.info("Using epoll channel type");
             } else {
                 clazz2 = NioServerSocketChannel.class;
@@ -102,19 +105,19 @@ public class ServerConnectionListener {
      * WARNING - void declaration
      */
     public SocketAddress startMemoryChannel() {
-        void channelFuture2;
+        ChannelFuture channelFuture2; // MagmaCube - decompile error
         List<ChannelFuture> list = this.channels;
         synchronized (list) {
-            ChannelFuture channelFuture = ((ServerBootstrap)((ServerBootstrap)new ServerBootstrap().channel(LocalServerChannel.class)).childHandler((ChannelHandler)new ChannelInitializer<Channel>(){
+            channelFuture2 = ((ServerBootstrap)((ServerBootstrap)new ServerBootstrap().channel(LocalServerChannel.class)).childHandler((ChannelHandler)new ChannelInitializer<Channel>(){
 
-                protected void initChannel(Channel channel) throws Exception {
+                protected void initChannel(Channel channel) throws Exception { // MagmaCube - decompile error
                     Connection connection = new Connection(PacketFlow.SERVERBOUND);
                     connection.setListener(new MemoryServerHandshakePacketListenerImpl(ServerConnectionListener.this.server, connection));
                     ServerConnectionListener.this.connections.add(connection);
                     channel.pipeline().addLast("packet_handler", (ChannelHandler)connection);
                 }
             }).group((EventLoopGroup)SERVER_EVENT_GROUP.get()).localAddress((SocketAddress)LocalAddress.ANY)).bind().syncUninterruptibly();
-            this.channels.add(channelFuture);
+            this.channels.add(channelFuture2); // MagmaCube - decompile error
         }
         return channelFuture2.channel().localAddress();
     }
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 52f2ffd5fb06b1ac0321c2a71ed64b745c60311e..49a0834d3c18398a703416c57f1d80bed0284bc2 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -296,7 +296,7 @@ implements ServerGamePacketListener {
 
     private <T> void filterTextPacket(T object2, Consumer<T> consumer, BiFunction<TextFilter, T, CompletableFuture<Optional<T>>> biFunction) {
         MinecraftServer blockableEventLoop = this.player.getLevel().getServer();
-        Consumer<Object> consumer2 = object -> {
+        Consumer<T> consumer2 = object -> { // MagmaCube - type
             if (this.getConnection().isConnected()) {
                 consumer.accept(object);
             } else {
@@ -305,7 +305,7 @@ implements ServerGamePacketListener {
         };
         TextFilter textFilter = this.player.getTextFilter();
         if (textFilter != null) {
-            biFunction.apply(textFilter, (TextFilter)object2).thenAcceptAsync(optional -> optional.ifPresent(consumer2), (Executor)blockableEventLoop);
+            biFunction.apply(textFilter, object2).thenAcceptAsync(optional -> optional.ifPresent(consumer2), (Executor)blockableEventLoop); // MagmaCube - decompile error
         } else {
             blockableEventLoop.execute(() -> consumer2.accept(object2));
         }
diff --git a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index a5e4ee701c8e52f2d6f5aa02134e0497ce5b9280..a41fe49ad38b702f1f64d6223b72f8a9ce994def 100644
--- a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -141,7 +141,7 @@ implements ServerLoginPacketListener {
      */
     @Override
     public void handleKey(ServerboundKeyPacket serverboundKeyPacket) {
-        void s2;
+        String s2; // MagmaCube - decompile error
         Validate.validState((this.state == State.KEY ? 1 : 0) != 0, (String)"Unexpected key packet", (Object[])new Object[0]);
         PrivateKey privateKey = this.server.getKeyPair().getPrivate();
         try {
@@ -151,32 +151,26 @@ implements ServerLoginPacketListener {
             this.secretKey = serverboundKeyPacket.getSecretKey(privateKey);
             Cipher cipher = Crypt.getCipher(2, this.secretKey);
             Cipher cipher2 = Crypt.getCipher(1, this.secretKey);
-            String s = new BigInteger(Crypt.digestData("", this.server.getKeyPair().getPublic(), this.secretKey)).toString(16);
+            s2 = new BigInteger(Crypt.digestData("", this.server.getKeyPair().getPublic(), this.secretKey)).toString(16); // MagmaCube - decompile error
             this.state = State.AUTHENTICATING;
             this.connection.setEncryptionKey(cipher, cipher2);
         }
         catch (CryptException cryptException) {
             throw new IllegalStateException("Protocol error", cryptException);
         }
-        Thread thread = new Thread("User Authenticator #" + UNIQUE_THREAD_ID.incrementAndGet(), (String)s2){
-            final /* synthetic */ String val$digest;
-            {
-                this.val$digest = string;
-                super(s);
-            }
-
+        Thread thread = new Thread("User Authenticator #" + UNIQUE_THREAD_ID.incrementAndGet()){
             @Override
             public void run() {
                 GameProfile gameProfile = ServerLoginPacketListenerImpl.this.gameProfile;
                 try {
-                    ServerLoginPacketListenerImpl.this.gameProfile = ServerLoginPacketListenerImpl.this.server.getSessionService().hasJoinedServer(new GameProfile(null, gameProfile.getName()), this.val$digest, this.getAddress());
+                    ServerLoginPacketListenerImpl.this.gameProfile = ServerLoginPacketListenerImpl.this.server.getSessionService().hasJoinedServer(new GameProfile(null, gameProfile.getName()), s2, this.getAddress()); // MagmaCube - decompile error
                     if (ServerLoginPacketListenerImpl.this.gameProfile != null) {
                         LOGGER.info("UUID of player {} is {}", ServerLoginPacketListenerImpl.this.gameProfile.getName(), ServerLoginPacketListenerImpl.this.gameProfile.getId());
-                        ServerLoginPacketListenerImpl.this.state = State.READY_TO_ACCEPT;
+                        ServerLoginPacketListenerImpl.this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT; // MagmaCube - decompile error
                     } else if (ServerLoginPacketListenerImpl.this.server.isSingleplayer()) {
                         LOGGER.warn("Failed to verify username but will let them in anyway!");
                         ServerLoginPacketListenerImpl.this.gameProfile = ServerLoginPacketListenerImpl.this.createFakeProfile(gameProfile);
-                        ServerLoginPacketListenerImpl.this.state = State.READY_TO_ACCEPT;
+                        ServerLoginPacketListenerImpl.this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT; // MagmaCube - decompile error
                     } else {
                         ServerLoginPacketListenerImpl.this.disconnect(new TranslatableComponent("multiplayer.disconnect.unverified_username"));
                         LOGGER.error("Username '{}' tried to join with an invalid session", gameProfile.getName());
@@ -186,7 +180,7 @@ implements ServerLoginPacketListener {
                     if (ServerLoginPacketListenerImpl.this.server.isSingleplayer()) {
                         LOGGER.warn("Authentication servers are down but will let them in anyway!");
                         ServerLoginPacketListenerImpl.this.gameProfile = ServerLoginPacketListenerImpl.this.createFakeProfile(gameProfile);
-                        ServerLoginPacketListenerImpl.this.state = State.READY_TO_ACCEPT;
+                        ServerLoginPacketListenerImpl.this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT; // MagmaCube - decompile error
                     }
                     ServerLoginPacketListenerImpl.this.disconnect(new TranslatableComponent("multiplayer.disconnect.authservers_down"));
                     LOGGER.error("Couldn't verify username because servers are unavailable");
diff --git a/src/main/java/net/minecraft/server/packs/FolderPackResources.java b/src/main/java/net/minecraft/server/packs/FolderPackResources.java
index fd8ec25928bf10bc2c6a35540fb8c8fbc86991a6..e0dfb43a86226b5795c93d7cf123c8f3156b7789 100644
--- a/src/main/java/net/minecraft/server/packs/FolderPackResources.java
+++ b/src/main/java/net/minecraft/server/packs/FolderPackResources.java
@@ -67,7 +67,7 @@ public class FolderPackResources extends AbstractPackResources
     
     @Override
     public Set<String> getNamespaces(final PackType packType) {
-        final Set<String> set = (Set<String>)Sets.newHashSet();
+        final Set<String> set = Sets.newHashSet(); // MagmaCube - decompile error
         final File file = new File(this.file, packType.getDirectory());
         final File[] files = file.listFiles((FileFilter)DirectoryFileFilter.DIRECTORY);
         if (files != null) {
@@ -91,7 +91,7 @@ public class FolderPackResources extends AbstractPackResources
     @Override
     public Collection<ResourceLocation> getResources(final PackType packType, final String s, final String s2, final int i, final Predicate<String> predicate) {
         final File file = new File(this.file, packType.getDirectory());
-        final List<ResourceLocation> list = (List<ResourceLocation>)Lists.newArrayList();
+        final List<ResourceLocation> list = Lists.newArrayList(); // MagmaCube - decompile error
         this.listResources(new File(new File(file, s), s2), i, s, list, s2 + "/", predicate);
         return list;
     }
diff --git a/src/main/java/net/minecraft/server/packs/VanillaPackResources.java b/src/main/java/net/minecraft/server/packs/VanillaPackResources.java
index 3417e8f45fad14dee65097464e4002902885ab41..6e695ff198c86d344fe8066d47545648b2df3fe3 100644
--- a/src/main/java/net/minecraft/server/packs/VanillaPackResources.java
+++ b/src/main/java/net/minecraft/server/packs/VanillaPackResources.java
@@ -45,7 +45,7 @@ public class VanillaPackResources implements PackResources
     public final Set<String> namespaces;
     
     public VanillaPackResources(final String... strings) {
-        this.namespaces = (Set<String>)ImmutableSet.copyOf((Object[])strings);
+        this.namespaces = (Set<String>)ImmutableSet.copyOf(strings); // MagmaCube - decompile error
     }
     
     @Override
@@ -73,7 +73,7 @@ public class VanillaPackResources implements PackResources
     
     @Override
     public Collection<ResourceLocation> getResources(final PackType packType, final String s, final String s2, final int i, final Predicate<String> predicate) {
-        final Set<ResourceLocation> set = (Set<ResourceLocation>)Sets.newHashSet();
+        final Set<ResourceLocation> set = Sets.newHashSet(); // MagmaCube - decompile error
         if (VanillaPackResources.generatedDir != null) {
             try {
                 getResources(set, i, s, VanillaPackResources.generatedDir.resolve(packType.getDirectory()), s2, predicate);
@@ -119,9 +119,7 @@ public class VanillaPackResources implements PackResources
         }
         catch (FileNotFoundException | NoSuchFileException ex5) {}
         catch (URISyntaxException | IOException ex6) {
-            final Exception ex;
-            final Exception exception = ex;
-            VanillaPackResources.LOGGER.error("Couldn't get a list of all vanilla resources", (Throwable)exception);
+            VanillaPackResources.LOGGER.error("Couldn't get a list of all vanilla resources", ex6); // MagmaCube - decompile error
         }
         return set;
     }
@@ -129,7 +127,7 @@ public class VanillaPackResources implements PackResources
     private static void getResources(final Collection<ResourceLocation> collection, final int i, final String s, final Path path, final String s2, final Predicate<String> predicate) throws IOException {
         final Path path3 = path.resolve(s);
         try (final Stream<Path> stream = Files.walk(path3.resolve(s2), i, new FileVisitOption[0])) {
-            stream.filter(path -> !path.endsWith(".mcmeta") && Files.isRegularFile(path, new LinkOption[0]) && predicate.test(path.getFileName().toString())).map(path2 -> new ResourceLocation(s, path3.relativize(path2).toString().replaceAll("\\\\", "/"))).forEach(collection::add);
+            stream.filter(path1 -> !path1.endsWith(".mcmeta") && Files.isRegularFile(path1, new LinkOption[0]) && predicate.test(path1.getFileName().toString())).map(path2 -> new ResourceLocation(s, path3.relativize(path2).toString().replaceAll("\\\\", "/"))).forEach(collection::add); // MagmaCube - decompile error
         }
     }
     
@@ -200,8 +198,6 @@ public class VanillaPackResources implements PackResources
             return AbstractPackResources.getMetadataFromStream(metadataSectionSerializer, inputStream);
         }
         catch (RuntimeException | FileNotFoundException ex2) {
-            final Exception ex;
-            final Exception exception = ex;
             return null;
         }
     }
@@ -217,37 +213,30 @@ public class VanillaPackResources implements PackResources
     
     static {
         LOGGER = LogManager.getLogger();
-        final PackType[] array;
-        int length;
-        int i;
-        PackType packType;
-        URL uRL;
-        URI uRI;
-        FileSystem fileSystem;
-        FileSystem fileSystem2;
-        final Exception ex;
-        Exception exception;
-        JAR_FILESYSTEM_BY_TYPE = Util.make((Map<PackType, FileSystem>)Maps.newHashMap(), hashMap -> {
+        // MagmaCube start - decompile error
+        JAR_FILESYSTEM_BY_TYPE = Util.make(Maps.newHashMap(), hashMap -> {
             synchronized (VanillaPackResources.class) {
-                PackType.values();
-                for (length = array.length; i < length; ++i) {
-                    packType = array[i];
-                    uRL = VanillaPackResources.class.getResource("/" + packType.getDirectory() + "/.mcassetsroot");
+                PackType[] array = PackType.values();
+                int i = 0;
+                for (int length = array.length; i < length; ++i) {
+                    PackType packType = array[i];
+                    URL uRL = VanillaPackResources.class.getResource("/" + packType.getDirectory() + "/.mcassetsroot");
+                    // MagmaCube end - decompile error
                     try {
-                        uRI = uRL.toURI();
+                        URI uRI = uRL.toURI(); // MagmaCube - decompile error
                         if ("jar".equals(uRI.getScheme())) {
+                            FileSystem fileSystem; // MagmaCube - decompile error
                             try {
                                 fileSystem = FileSystems.getFileSystem(uRI);
                             }
                             catch (FileSystemNotFoundException fileSystemNotFoundException) {
-                                fileSystem2 = FileSystems.newFileSystem(uRI, Collections.emptyMap());
+                                fileSystem = FileSystems.newFileSystem(uRI, Collections.emptyMap()); // MagmaCube - decompile error
                             }
-                            hashMap.put(packType, fileSystem2);
+                            hashMap.put(packType, fileSystem); // MagmaCube - decompile error
                         }
                     }
                     catch (URISyntaxException | IOException ex2) {
-                        exception = ex;
-                        VanillaPackResources.LOGGER.error("Couldn't get a list of all vanilla resources", (Throwable)exception);
+                        VanillaPackResources.LOGGER.error("Couldn't get a list of all vanilla resources", ex2); // MagmaCube - decompile error
                     }
                 }
             }
diff --git a/src/main/java/net/minecraft/server/packs/repository/Pack.java b/src/main/java/net/minecraft/server/packs/repository/Pack.java
index 0f9d034640b0d7825a4922a58d3a922c4edf14b9..da1e90ff7889c84a6e9bfa6d1623e443592b1f63 100644
--- a/src/main/java/net/minecraft/server/packs/repository/Pack.java
+++ b/src/main/java/net/minecraft/server/packs/repository/Pack.java
@@ -79,12 +79,12 @@ public class Pack implements AutoCloseable
     }
     
     public Component getChatLink(final boolean flag) {
-        final HoverEvent hoverEvent;
-        final Style style2;
         return ComponentUtils.wrapInSquareBrackets(this.packSource.decorate(new TextComponent(this.id))).withStyle(style -> {
             style.withColor(flag ? ChatFormatting.GREEN : ChatFormatting.RED).withInsertion(StringArgumentType.escapeIfRequired(this.id));
-            new HoverEvent((HoverEvent.Action<MutableComponent>)HoverEvent.Action.SHOW_TEXT, new TextComponent("").append(this.title).append("\n").append(this.description));
-            return style2.withHoverEvent(hoverEvent);
+            // MagmaCube start - decompile error
+            HoverEvent hoverEvent = new HoverEvent(HoverEvent.Action.SHOW_TEXT, new TextComponent("").append(this.title).append("\n").append(this.description));
+            return style.withHoverEvent(hoverEvent);
+            // MagmaCube end - decompile error
         });
     }
     
diff --git a/src/main/java/net/minecraft/server/packs/repository/PackRepository.java b/src/main/java/net/minecraft/server/packs/repository/PackRepository.java
index e79769a549eed1f58afbd9a6a82f5ef6526d70e7..b9c0483744a7f0d7b42ee1f1714b7e53f85fc9b7 100644
--- a/src/main/java/net/minecraft/server/packs/repository/PackRepository.java
+++ b/src/main/java/net/minecraft/server/packs/repository/PackRepository.java
@@ -27,7 +27,7 @@ implements AutoCloseable {
 
     public PackRepository(Pack.PackConstructor packConstructor, RepositorySource ... repositorySources) {
         this.constructor = packConstructor;
-        this.sources = ImmutableSet.copyOf((Object[])repositorySources);
+        this.sources = ImmutableSet.copyOf(repositorySources); // MagmaCube - decompile error
     }
 
     public PackRepository(RepositorySource ... repositorySources) {
diff --git a/src/main/java/net/minecraft/server/packs/repository/PackSource.java b/src/main/java/net/minecraft/server/packs/repository/PackSource.java
index 4a6ed3265d3dfb53babdb753c50f348ae5a4dad3..0286348a3f00870fce7e1fd1aaad3dad3179ecd1 100644
--- a/src/main/java/net/minecraft/server/packs/repository/PackSource.java
+++ b/src/main/java/net/minecraft/server/packs/repository/PackSource.java
@@ -13,17 +13,14 @@ public interface PackSource
     
     Component decorate(final Component p0);
     
-    default PackSource passThrough() {
+    static PackSource passThrough() { // MagmaCube - default -> static
         return component -> component;
     }
     
-    default PackSource decorating(final String s) {
+    static PackSource decorating(final String s) { // MagmaCube - default -> static
         final Component component3 = new TranslatableComponent(s);
-        final TranslatableComponent translatableComponent;
-        final Object o;
         return component2 -> {
-            new TranslatableComponent("pack.nameAndSource", new Object[] { component2, o });
-            return translatableComponent.withStyle(ChatFormatting.GRAY);
+            return new TranslatableComponent("pack.nameAndSource", component2, component3).withStyle(ChatFormatting.GRAY); // MagmaCube - decompile error
         };
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/packs/repository/ServerPacksSource.java b/src/main/java/net/minecraft/server/packs/repository/ServerPacksSource.java
index e2df239a4c14516eff59c93f36971a6b1cc23fab..cea331493ef84dd94ab4594c627bf20b0e43d552 100644
--- a/src/main/java/net/minecraft/server/packs/repository/ServerPacksSource.java
+++ b/src/main/java/net/minecraft/server/packs/repository/ServerPacksSource.java
@@ -1,6 +1,5 @@
 package net.minecraft.server.packs.repository;
 
-import net.minecraft.server.packs.PackResources;
 import java.util.function.Consumer;
 import net.minecraft.server.packs.VanillaPackResources;
 
diff --git a/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java b/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
index 35933b9c2aa20793546e8c332ad166e758b0469f..0f6503e229bf7bb2099997e55bb57349b06ff366 100644
--- a/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
+++ b/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
@@ -16,39 +16,32 @@ import java.util.List;
 import com.google.common.base.Stopwatch;
 import org.apache.logging.log4j.Logger;
 
-public class ProfiledReloadInstance extends SimpleReloadInstance<State>
+public class ProfiledReloadInstance extends SimpleReloadInstance<ProfiledReloadInstance.State> // MagmaCube - decompile error
 {
     private static final Logger LOGGER;
     private final Stopwatch total;
     
     public ProfiledReloadInstance(final ResourceManager resourceManager, final List<PreparableReloadListener> list, final Executor executor, final Executor executor2, final CompletableFuture<Unit> completableFuture) {
-        final AtomicLong atomicLong;
-        final AtomicLong atomicLong2;
-        final ActiveProfiler activeProfiler;
-        final ActiveProfiler activeProfiler2;
-        final long l;
-        final AtomicLong atomicLong3;
-        final long i;
-        final AtomicLong atomicLong4;
-        final CompletableFuture<Void> completableFuture2;
-        super(executor, executor2, resourceManager, list, (preparationBarrier, resourceManager, preparableReloadListener, executor2, executor3) -> {
-            atomicLong = new AtomicLong();
-            atomicLong2 = new AtomicLong();
-            activeProfiler = new ActiveProfiler(Util.timeSource, () -> 0, false);
-            activeProfiler2 = new ActiveProfiler(Util.timeSource, () -> 0, false);
-            completableFuture2 = preparableReloadListener.reload(preparationBarrier, resourceManager, activeProfiler, activeProfiler2, runnable -> executor2.execute(() -> {
-                l = Util.getNanos();
+        // MagmaCube start - decompile error
+        super(executor, executor2, resourceManager, list, (preparationBarrier, resourceManager1, preparableReloadListener, executor23, executor3) -> {
+            AtomicLong atomicLong = new AtomicLong();
+            AtomicLong atomicLong2 = new AtomicLong();
+            ActiveProfiler activeProfiler = new ActiveProfiler(Util.timeSource, () -> 0, false);
+            ActiveProfiler activeProfiler2 = new ActiveProfiler(Util.timeSource, () -> 0, false);
+            CompletableFuture<Void> completableFuture2 = preparableReloadListener.reload(preparationBarrier, resourceManager1, activeProfiler, activeProfiler2, runnable -> executor23.execute(() -> {
+                long l = Util.getNanos();
                 runnable.run();
-                atomicLong3.addAndGet(Util.getNanos() - l);
+                atomicLong.addAndGet(Util.getNanos() - l);
             }), runnable -> executor3.execute(() -> {
-                i = Util.getNanos();
+                long i = Util.getNanos();
                 runnable.run();
-                atomicLong4.addAndGet(Util.getNanos() - i);
+                atomicLong2.addAndGet(Util.getNanos() - i);
             }));
-            return completableFuture2.thenApplyAsync(void_ -> new State(preparableReloadListener.getName(), activeProfiler.getResults(), activeProfiler2.getResults(), atomicLong, atomicLong2), executor2);
+            return completableFuture2.thenApplyAsync(void_ -> new State(preparableReloadListener.getName(), activeProfiler.getResults(), activeProfiler2.getResults(), atomicLong, atomicLong2), executor23);
         }, completableFuture);
         (this.total = Stopwatch.createUnstarted()).start();
-        this.allDone.thenAcceptAsync((Consumer<? super List<S>>)this::finish, executor2);
+        this.allDone.thenAcceptAsync(this::finish, executor2);
+        // MagmaCube end - decompile error
     }
     
     private void finish(final List<State> list) {
diff --git a/src/main/java/net/minecraft/server/packs/resources/ResourceManager.java b/src/main/java/net/minecraft/server/packs/resources/ResourceManager.java
index 3340a094abc397fdb5fc391ac42c1e25ccdc7400..6f4a0fb78c9d0ee6d37b3b912fd5404499f51637 100644
--- a/src/main/java/net/minecraft/server/packs/resources/ResourceManager.java
+++ b/src/main/java/net/minecraft/server/packs/resources/ResourceManager.java
@@ -32,7 +32,7 @@ public interface ResourceManager
         
         @Override
         public Set<String> getNamespaces() {
-            return (Set<String>)ImmutableSet.of();
+            return ImmutableSet.of(); // MagmaCube - decompile error
         }
         
         @Override
@@ -47,12 +47,12 @@ public interface ResourceManager
         
         @Override
         public List<Resource> getResources(final ResourceLocation resourceLocation) {
-            return (List<Resource>)ImmutableList.of();
+            return ImmutableList.of(); // MagmaCube - decompile error
         }
         
         @Override
         public Collection<ResourceLocation> listResources(final String s, final Predicate<String> predicate) {
-            return (Collection<ResourceLocation>)ImmutableSet.of();
+            return ImmutableSet.of(); // MagmaCube - decompile error
         }
         
         @Override
diff --git a/src/main/java/net/minecraft/server/packs/resources/SimpleJsonResourceReloadListener.java b/src/main/java/net/minecraft/server/packs/resources/SimpleJsonResourceReloadListener.java
index e15175018a1d55c20d6dab8c22ce83fe62997e5a..d08611414b7b19b3409096c98ee32e5e89026893 100644
--- a/src/main/java/net/minecraft/server/packs/resources/SimpleJsonResourceReloadListener.java
+++ b/src/main/java/net/minecraft/server/packs/resources/SimpleJsonResourceReloadListener.java
@@ -32,7 +32,7 @@ public abstract class SimpleJsonResourceReloadListener extends SimplePreparableR
     
     @Override
     protected Map<ResourceLocation, JsonElement> prepare(final ResourceManager resourceManager, final ProfilerFiller profilerFiller) {
-        final Map<ResourceLocation, JsonElement> map = (Map<ResourceLocation, JsonElement>)Maps.newHashMap();
+        final Map<ResourceLocation, JsonElement> map = Maps.newHashMap(); // MagmaCube - decompile error
         final int i = this.directory.length() + 1;
         for (final ResourceLocation resourceLocation : resourceManager.listResources(this.directory, s -> s.endsWith(".json"))) {
             final String s2 = resourceLocation.getPath();
@@ -52,9 +52,7 @@ public abstract class SimpleJsonResourceReloadListener extends SimplePreparableR
                 }
             }
             catch (JsonParseException | IllegalArgumentException | IOException ex2) {
-                final Exception ex;
-                final Exception exception = ex;
-                SimpleJsonResourceReloadListener.LOGGER.error("Couldn't parse data file {} from {}", resourceLocation2, resourceLocation, exception);
+                SimpleJsonResourceReloadListener.LOGGER.error("Couldn't parse data file {} from {}", resourceLocation2, resourceLocation, ex2); // MagmaCube - decompile error
             }
         }
         return map;
diff --git a/src/main/java/net/minecraft/server/packs/resources/SimplePreparableReloadListener.java b/src/main/java/net/minecraft/server/packs/resources/SimplePreparableReloadListener.java
index da2dd5c95d8a394d8b8e844cc166c6a504321530..4c37e91736f3a429f3970e07dc1f9c715ed82777 100644
--- a/src/main/java/net/minecraft/server/packs/resources/SimplePreparableReloadListener.java
+++ b/src/main/java/net/minecraft/server/packs/resources/SimplePreparableReloadListener.java
@@ -10,7 +10,8 @@ public abstract class SimplePreparableReloadListener<T> implements PreparableRel
 {
     @Override
     public final CompletableFuture<Void> reload(final PreparationBarrier preparationBarrier, final ResourceManager resourceManager, final ProfilerFiller profilerFiller, final ProfilerFiller profilerFiller2, final Executor executor, final Executor executor2) {
-        return CompletableFuture.supplyAsync(() -> this.prepare(resourceManager, profilerFiller), executor).thenCompose((Function<? super Object, ? extends CompletionStage<Object>>)preparationBarrier::wait).thenAcceptAsync(object -> this.apply(object, resourceManager, profilerFiller2), executor2);
+        // MagmaCube - decompile error
+        return CompletableFuture.supplyAsync(() -> this.prepare(resourceManager, profilerFiller), executor).thenCompose(preparationBarrier::wait).thenAcceptAsync(object -> this.apply(object, resourceManager, profilerFiller2), executor2);
     }
     
     protected abstract T prepare(final ResourceManager p0, final ProfilerFiller p1);
diff --git a/src/main/java/net/minecraft/server/players/GameProfileCache.java b/src/main/java/net/minecraft/server/players/GameProfileCache.java
index c523db4c9f91d8aacc7515509d46e06c821c1343..b43c9ce98fd1bfc0fb8d8e4fa3257ef0cc727e4f 100644
--- a/src/main/java/net/minecraft/server/players/GameProfileCache.java
+++ b/src/main/java/net/minecraft/server/players/GameProfileCache.java
@@ -2,6 +2,8 @@ package net.minecraft.server.players;
 
 import org.apache.logging.log4j.LogManager;
 import com.google.gson.JsonObject;
+
+import java.text.ParseException;
 import java.util.function.Function;
 import java.util.Comparator;
 import java.util.Collection;
@@ -52,13 +54,15 @@ public class GameProfileCache
     private final AtomicLong operationCount;
     
     public GameProfileCache(final GameProfileRepository gameProfileRepository, final File file) {
-        this.profilesByName = (Map<String, GameProfileInfo>)Maps.newConcurrentMap();
-        this.profilesByUUID = (Map<UUID, GameProfileInfo>)Maps.newConcurrentMap();
+        // MagmaCube start - decompile error
+        this.profilesByName = Maps.newConcurrentMap();
+        this.profilesByUUID = Maps.newConcurrentMap();
+        // MagmaCube end - decompile error
         this.gson = new GsonBuilder().create();
         this.operationCount = new AtomicLong();
         this.profileRepository = gameProfileRepository;
         this.file = file;
-        Lists.reverse((List)this.load()).forEach(this::safeAdd);
+        Lists.reverse(this.load()).forEach(this::safeAdd); // MagmaCube - decompile error
     }
     
     private void safeAdd(final GameProfileInfo gameProfileInfo) {
@@ -131,7 +135,7 @@ public class GameProfileCache
         final GameProfile gameProfile2;
         if (gameProfileInfo != null) {
             gameProfileInfo.setLastAccess(this.getNextOperation());
-            final GameProfile gameProfile = gameProfileInfo.getProfile();
+            gameProfile2 = gameProfileInfo.getProfile(); // MagmaCube - decompile error
         }
         else {
             gameProfile2 = lookupGameProfile(this.profileRepository, s2);
@@ -161,29 +165,24 @@ public class GameProfileCache
     }
     
     public List<GameProfileInfo> load() {
-        final List<GameProfileInfo> list = (List<GameProfileInfo>)Lists.newArrayList();
+        final List<GameProfileInfo> list = Lists.newArrayList(); // MagmaCube - decompile error
         try (final Reader reader = Files.newReader(this.file, StandardCharsets.UTF_8)) {
             final JsonArray jsonArray = (JsonArray)this.gson.fromJson(reader, (Class)JsonArray.class);
             if (jsonArray == null) {
                 return list;
             }
             final DateFormat dateFormat = createDateFormat();
-            final DateFormat dateFormat2;
-            final GameProfileInfo gameProfileInfo;
-            final List<GameProfileInfo> list2;
             jsonArray.forEach(jsonElement -> {
-                gameProfileInfo = readGameProfile(jsonElement, dateFormat2);
+                GameProfileInfo gameProfileInfo = readGameProfile(jsonElement, dateFormat); // MagmaCube - decompile error
                 if (gameProfileInfo != null) {
-                    list2.add(gameProfileInfo);
+                    list.add(gameProfileInfo); // MagmaCube - decompile error
                 }
                 return;
             });
         }
         catch (FileNotFoundException ex2) {}
         catch (IOException | JsonParseException ex3) {
-            final Exception ex;
-            final Exception exception = ex;
-            GameProfileCache.LOGGER.warn("Failed to load profile cache {}", this.file, exception);
+            GameProfileCache.LOGGER.warn("Failed to load profile cache {}", this.file, ex3); // MagmaCube - decompile error
         }
         return list;
     }
@@ -200,7 +199,7 @@ public class GameProfileCache
     }
     
     private Stream<GameProfileInfo> getTopMRUProfiles(final int i) {
-        return ImmutableList.copyOf((Collection)this.profilesByUUID.values()).stream().sorted(Comparator.comparing((Function<? super Object, ? extends Comparable>)GameProfileInfo::getLastAccess).reversed()).limit(i);
+        return ImmutableList.copyOf((Collection)this.profilesByUUID.values()).stream().sorted(Comparator.comparing(GameProfileInfo::getLastAccess).reversed()).limit(i); // MagmaCube - decompile error
     }
     
     private static JsonElement writeGameProfile(final GameProfileInfo gameProfileInfo, final DateFormat dateFormat) {
@@ -214,91 +213,40 @@ public class GameProfileCache
     
     @Nullable
     private static GameProfileInfo readGameProfile(final JsonElement jsonElement, final DateFormat dateFormat) {
-        // 
-        // This method could not be decompiled.
-        // 
-        // Original Bytecode:
-        // 
-        //     1: invokevirtual   com/google/gson/JsonElement.isJsonObject:()Z
-        //     4: ifeq            139
-        //     7: aload_0         /* jsonElement */
-        //     8: invokevirtual   com/google/gson/JsonElement.getAsJsonObject:()Lcom/google/gson/JsonObject;
-        //    11: astore_2        /* jsonObject */
-        //    12: aload_2         /* jsonObject */
-        //    13: ldc_w           "name"
-        //    16: invokevirtual   com/google/gson/JsonObject.get:(Ljava/lang/String;)Lcom/google/gson/JsonElement;
-        //    19: astore_3        /* jsonElement2 */
-        //    20: aload_2         /* jsonObject */
-        //    21: ldc_w           "uuid"
-        //    24: invokevirtual   com/google/gson/JsonObject.get:(Ljava/lang/String;)Lcom/google/gson/JsonElement;
-        //    27: astore          jsonElement3
-        //    29: aload_2         /* jsonObject */
-        //    30: ldc_w           "expiresOn"
-        //    33: invokevirtual   com/google/gson/JsonObject.get:(Ljava/lang/String;)Lcom/google/gson/JsonElement;
-        //    36: astore          jsonElement4
-        //    38: aload_3         /* jsonElement2 */
-        //    39: ifnull          47
-        //    42: aload           jsonElement3
-        //    44: ifnonnull       49
-        //    47: aconst_null    
-        //    48: areturn        
-        //    49: aload           jsonElement3
-        //    51: invokevirtual   com/google/gson/JsonElement.getAsString:()Ljava/lang/String;
-        //    54: astore          s
-        //    56: aload_3         /* jsonElement2 */
-        //    57: invokevirtual   com/google/gson/JsonElement.getAsString:()Ljava/lang/String;
-        //    60: astore          s2
-        //    62: aconst_null    
-        //    63: astore          date
-        //    65: aload           jsonElement4
-        //    67: ifnull          86
-        //    70: aload_1         /* dateFormat */
-        //    71: aload           jsonElement4
-        //    73: invokevirtual   com/google/gson/JsonElement.getAsString:()Ljava/lang/String;
-        //    76: invokevirtual   java/text/DateFormat.parse:(Ljava/lang/String;)Ljava/util/Date;
-        //    79: astore          date
-        //    81: goto            86
-        //    84: astore          9
-        //    86: aload           s2
-        //    88: ifnull          101
-        //    91: aload           s
-        //    93: ifnull          101
-        //    96: aload           date
-        //    98: ifnonnull       103
-        //   101: aconst_null    
-        //   102: areturn        
-        //   103: aload           s
-        //   105: invokestatic    java/util/UUID.fromString:(Ljava/lang/String;)Ljava/util/UUID;
-        //   108: astore          uuid
-        //   110: goto            117
-        //   113: astore          throwable
-        //   115: aconst_null    
-        //   116: areturn        
-        //   117: new             Lnet/minecraft/server/players/GameProfileCache$GameProfileInfo;
-        //   120: dup            
-        //   121: new             Lcom/mojang/authlib/GameProfile;
-        //   124: dup            
-        //   125: aload           uuid2
-        //   127: aload           s2
-        //   129: invokespecial   com/mojang/authlib/GameProfile.<init>:(Ljava/util/UUID;Ljava/lang/String;)V
-        //   132: aload           date
-        //   134: aconst_null    
-        //   135: invokespecial   net/minecraft/server/players/GameProfileCache$GameProfileInfo.<init>:(Lcom/mojang/authlib/GameProfile;Ljava/util/Date;Lnet/minecraft/server/players/GameProfileCache$1;)V
-        //   138: areturn        
-        //   139: aconst_null    
-        //   140: areturn        
-        //    Exceptions:
-        //  Try           Handler
-        //  Start  End    Start  End    Type                      
-        //  -----  -----  -----  -----  --------------------------
-        //  70     81     84     86     Ljava/text/ParseException;
-        //  103    110    113    117    Ljava/lang/Throwable;
-        // 
-        // The error that occurred was:
-        // 
-        // java.lang.NullPointerException
-        // 
-        throw new IllegalStateException("An error occurred while decompiling this method.");
+        // MagmaCube start - decompile error
+        if (jsonElement.isJsonObject()) {
+            JsonObject object = jsonElement.getAsJsonObject();
+            JsonElement jsonName = object.get("name");
+            JsonElement jsonUuid = object.get("uuid");
+            JsonElement jsonExpiresOn = object.get("expiresOn");
+            if (jsonName != null && jsonUuid != null) {
+                String profileUuid = jsonUuid.getAsString();
+                String profileName = jsonName.getAsString();
+                Date date = null;
+                if (jsonExpiresOn != null) {
+                    try {
+                        date = dateFormat.parse(jsonExpiresOn.getAsString());
+                    } catch (ParseException parseexception) {}
+                }
+                if (profileName != null && profileUuid != null && date != null) {
+                    UUID uuid;
+                    try {
+                        uuid = UUID.fromString(profileUuid);
+                    } catch (Throwable throwable) {
+                        return null;
+                    }
+
+                    return new GameProfileCache.GameProfileInfo(new GameProfile(uuid, profileName), date);
+                } else {
+                    return null;
+                }
+            } else {
+                return null;
+            }
+        } else {
+            return null;
+        }
+        // MagmaCube end - decompile error
     }
     
     static {
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 80a96f78c986b70f8d103044cd33670f15771c13..68a788c3ee02a6398d85de008f452e34ec01b30a 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -143,7 +143,7 @@ public abstract class PlayerList {
         ServerLevel serverLevel = this.server.getLevel(resourceKey);
         if (serverLevel == null) {
             LOGGER.warn("Unknown respawn dimension {}, defaulting to overworld", resourceKey);
-            ServerLevel serverLevel2 = this.server.overworld();
+            serverLevel3 = this.server.overworld(); // MagmaCube - decompile error
         } else {
             serverLevel3 = serverLevel;
         }
@@ -173,7 +173,7 @@ public abstract class PlayerList {
         this.updateEntireScoreboard(serverLevel3.getScoreboard(), serverPlayer);
         this.server.invalidateStatus();
         if (serverPlayer.getGameProfile().getName().equalsIgnoreCase(s)) {
-            TranslatableComponent mutableComponent = new TranslatableComponent("multiplayer.player.joined", serverPlayer.getDisplayName());
+            mutableComponent2 = new TranslatableComponent("multiplayer.player.joined", serverPlayer.getDisplayName()); // MagmaCube - decompile error
         } else {
             mutableComponent2 = new TranslatableComponent("multiplayer.player.joined.renamed", serverPlayer.getDisplayName(), s);
         }
@@ -202,7 +202,7 @@ public abstract class PlayerList {
         })) != null) {
             Object uuid2;
             if (compoundTag2.hasUUID("Attach")) {
-                UUID uuid = compoundTag2.getUUID("Attach");
+                uuid2 = compoundTag2.getUUID("Attach"); // MagmaCube - decompile error
             } else {
                 uuid2 = null;
             }
@@ -285,8 +285,10 @@ public abstract class PlayerList {
         CompoundTag compoundTag3;
         CompoundTag compoundTag = this.server.getWorldData().getLoadedPlayerTag();
         if (serverPlayer.getName().getString().equals(this.server.getSingleplayerName()) && compoundTag != null) {
-            CompoundTag compoundTag2 = compoundTag;
-            serverPlayer.load(compoundTag2);
+            // MagmaCube start - decompile error
+            compoundTag3 = compoundTag;
+            serverPlayer.load(compoundTag3);
+            // MagmaCube end - decompile error
             LOGGER.debug("loading single player");
         } else {
             compoundTag3 = this.playerIo.load(serverPlayer);
@@ -367,7 +369,7 @@ public abstract class PlayerList {
     public ServerPlayer getPlayerForLogin(GameProfile gameProfile) {
         ServerPlayerGameMode serverPlayerGameMode2;
         UUID uuid = Player.createPlayerUUID(gameProfile);
-        ArrayList list = Lists.newArrayList();
+        ArrayList<ServerPlayer> list = Lists.newArrayList(); // MagmaCube - type
         for (int i = 0; i < this.players.size(); ++i) {
             ServerPlayer serverPlayer = this.players.get(i);
             if (!serverPlayer.getUUID().equals(uuid)) continue;
@@ -382,7 +384,7 @@ public abstract class PlayerList {
         }
         ServerLevel serverLevel = this.server.overworld();
         if (this.server.isDemo()) {
-            DemoMode serverPlayerGameMode = new DemoMode(serverLevel);
+            serverPlayerGameMode2 = new DemoMode(serverLevel); // MagmaCube - decompile error
         } else {
             serverPlayerGameMode2 = new ServerPlayerGameMode(serverLevel);
         }
@@ -400,13 +402,13 @@ public abstract class PlayerList {
         boolean flag2 = serverPlayer.isRespawnForced();
         ServerLevel serverLevel = this.server.getLevel(serverPlayer.getRespawnDimension());
         if (serverLevel != null && blockPos != null) {
-            Optional<Vec3> optional = Player.findRespawnPositionAndUseSpawnBlock(serverLevel, blockPos, f, flag2, flag);
+            optional2 = Player.findRespawnPositionAndUseSpawnBlock(serverLevel, blockPos, f, flag2, flag); // MagmaCube - decompile error
         } else {
             optional2 = Optional.empty();
         }
         ServerLevel serverLevel3 = serverLevel2 = serverLevel != null && optional2.isPresent() ? serverLevel : this.server.overworld();
         if (this.server.isDemo()) {
-            DemoMode serverPlayerGameMode = new DemoMode(serverLevel2);
+            serverPlayerGameMode2 = new DemoMode(serverLevel2); // MagmaCube - decompile error
         } else {
             serverPlayerGameMode2 = new ServerPlayerGameMode(serverLevel2);
         }
@@ -427,7 +429,7 @@ public abstract class PlayerList {
             Vec3 vec3 = (Vec3)optional2.get();
             if (blockState.is(BlockTags.BEDS) || flag4) {
                 Vec3 vec32 = Vec3.atBottomCenterOf(blockPos).subtract(vec3).normalize();
-                float f2 = (float)Mth.wrapDegrees(Mth.atan2(vec32.z, vec32.x) * 57.2957763671875 - 90.0);
+                f3 = (float)Mth.wrapDegrees(Mth.atan2(vec32.z, vec32.x) * 57.2957763671875 - 90.0); // MagmaCube - decompile error
             } else {
                 f3 = f;
             }
@@ -548,9 +550,9 @@ public abstract class PlayerList {
         if (serverPlayer.connection != null) {
             byte b3;
             if (i <= 0) {
-                int b = 24;
+                b3 = 24; // MagmaCube - decompile error
             } else if (i >= 4) {
-                int b2 = 28;
+                b3 = 28; // MagmaCube - decompile error
             } else {
                 b3 = (byte)(24 + i);
             }
diff --git a/src/main/java/net/minecraft/server/rcon/thread/RconClient.java b/src/main/java/net/minecraft/server/rcon/thread/RconClient.java
index b270a6b47e32207ac95cf711f4ecf53bde18702b..1170db8609581e88e3d2c68e2005dbe4741b204e 100644
--- a/src/main/java/net/minecraft/server/rcon/thread/RconClient.java
+++ b/src/main/java/net/minecraft/server/rcon/thread/RconClient.java
@@ -2,7 +2,6 @@ package net.minecraft.server.rcon.thread;
 
 import org.apache.logging.log4j.LogManager;
 import java.nio.charset.StandardCharsets;
-import java.io.OutputStream;
 import java.io.DataOutputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
diff --git a/src/main/java/net/minecraft/sounds/Music.java b/src/main/java/net/minecraft/sounds/Music.java
index 0d71a1a147a5b37c5f4b27a3027e47ed1ea8d971..e1836a13638d3bd2a508b6793f5f3e41de1c4886 100644
--- a/src/main/java/net/minecraft/sounds/Music.java
+++ b/src/main/java/net/minecraft/sounds/Music.java
@@ -37,6 +37,7 @@ public class Music
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)SoundEvent.CODEC.fieldOf("sound").forGetter(music -> music.event), (App)Codec.INT.fieldOf("min_delay").forGetter(music -> music.minDelay), (App)Codec.INT.fieldOf("max_delay").forGetter(music -> music.maxDelay), (App)Codec.BOOL.fieldOf("replace_current_music").forGetter(music -> music.replaceCurrentMusic)).apply(instance, Music::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(SoundEvent.CODEC.fieldOf("sound").forGetter(music -> music.event), Codec.INT.fieldOf("min_delay").forGetter(music -> music.minDelay), Codec.INT.fieldOf("max_delay").forGetter(music -> music.maxDelay), Codec.BOOL.fieldOf("replace_current_music").forGetter(music -> music.replaceCurrentMusic)).apply(instance, Music::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/sounds/SoundEvent.java b/src/main/java/net/minecraft/sounds/SoundEvent.java
index 54ba829da83001f4f3ff054aae827a573cc93c2c..2bcc5abed2c48b88abad1ba0f58bcdf372f6a861 100644
--- a/src/main/java/net/minecraft/sounds/SoundEvent.java
+++ b/src/main/java/net/minecraft/sounds/SoundEvent.java
@@ -18,6 +18,7 @@ public class SoundEvent
     }
     
     static {
-        CODEC = ResourceLocation.CODEC.xmap((Function)SoundEvent::new, soundEvent -> soundEvent.location);
+        // MagmaCube - decompile error
+        CODEC = ResourceLocation.CODEC.xmap(SoundEvent::new, soundEvent -> soundEvent.location);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/stats/RecipeBook.java b/src/main/java/net/minecraft/stats/RecipeBook.java
index f5c96feb7cf27284a09816ed1199b11411709873..7fbd93ba19a016419c91448d041f01a51e077f05 100644
--- a/src/main/java/net/minecraft/stats/RecipeBook.java
+++ b/src/main/java/net/minecraft/stats/RecipeBook.java
@@ -4,7 +4,6 @@ import net.minecraft.world.inventory.RecipeBookMenu;
 import net.minecraft.world.inventory.RecipeBookType;
 import javax.annotation.Nullable;
 import net.minecraft.world.item.crafting.Recipe;
-import java.util.Collection;
 import com.google.common.collect.Sets;
 import net.minecraft.resources.ResourceLocation;
 import java.util.Set;
@@ -16,8 +15,8 @@ public class RecipeBook
     private final RecipeBookSettings bookSettings;
     
     public RecipeBook() {
-        this.known = (Set<ResourceLocation>)Sets.newHashSet();
-        this.highlight = (Set<ResourceLocation>)Sets.newHashSet();
+        this.known = Sets.newHashSet(); // MagmaCube - decompile fix
+        this.highlight = Sets.newHashSet(); // MagmaCube - decompile fix
         this.bookSettings = new RecipeBookSettings();
     }
     
diff --git a/src/main/java/net/minecraft/stats/ServerRecipeBook.java b/src/main/java/net/minecraft/stats/ServerRecipeBook.java
index 50590cb5d24604807f42de24e8c80f4beab00516..0359e5e46bc9c90681430d22770feb7c9fec84f0 100644
--- a/src/main/java/net/minecraft/stats/ServerRecipeBook.java
+++ b/src/main/java/net/minecraft/stats/ServerRecipeBook.java
@@ -28,7 +28,7 @@ public class ServerRecipeBook extends RecipeBook
     private static final Logger LOGGER;
     
     public int addRecipes(final Collection<Recipe<?>> collection, final ServerPlayer serverPlayer) {
-        final List<ResourceLocation> list = (List<ResourceLocation>)Lists.newArrayList();
+        final List<ResourceLocation> list = Lists.newArrayList(); // MagmaCube - decompile error
         int i = 0;
         for (final Recipe<?> recipe : collection) {
             final ResourceLocation resourceLocation = recipe.getId();
@@ -45,7 +45,7 @@ public class ServerRecipeBook extends RecipeBook
     }
     
     public int removeRecipes(final Collection<Recipe<?>> collection, final ServerPlayer serverPlayer) {
-        final List<ResourceLocation> list = (List<ResourceLocation>)Lists.newArrayList();
+        final List<ResourceLocation> list = Lists.newArrayList(); // MagmaCube - decompile error
         int i = 0;
         for (final Recipe<?> recipe : collection) {
             final ResourceLocation resourceLocation = recipe.getId();
@@ -60,7 +60,7 @@ public class ServerRecipeBook extends RecipeBook
     }
     
     private void sendRecipes(final ClientboundRecipePacket.State state, final ServerPlayer serverPlayer, final List<ResourceLocation> list) {
-        serverPlayer.connection.send(new ClientboundRecipePacket(state, list, (Collection<ResourceLocation>)Collections.emptyList(), this.getBookSettings()));
+        serverPlayer.connection.send(new ClientboundRecipePacket(state, list, Collections.emptyList(), this.getBookSettings())); // MagmaCube - decompile error
     }
     
     public CompoundTag toNbt() {
@@ -68,12 +68,12 @@ public class ServerRecipeBook extends RecipeBook
         this.getBookSettings().write(compoundTag);
         final ListTag listTag = new ListTag();
         for (final ResourceLocation resourceLocation : this.known) {
-            ((AbstractList<StringTag>)listTag).add(StringTag.valueOf(resourceLocation.toString()));
+            listTag.add(StringTag.valueOf(resourceLocation.toString())); // MagmaCube - decompile error
         }
         compoundTag.put("recipes", listTag);
         final ListTag listTag2 = new ListTag();
         for (final ResourceLocation resourceLocation2 : this.highlight) {
-            ((AbstractList<StringTag>)listTag2).add(StringTag.valueOf(resourceLocation2.toString()));
+            listTag2.add(StringTag.valueOf(resourceLocation2.toString())); // MagmaCube - decompile error
         }
         compoundTag.put("toBeDisplayed", listTag2);
         return compoundTag;
diff --git a/src/main/java/net/minecraft/stats/ServerStatsCounter.java b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
index 2097f5cecc6eaedc23bf16b4e7dc11e4a6ea0a55..060a947c83d415de097af1e3edc0c8d023772dc7 100644
--- a/src/main/java/net/minecraft/stats/ServerStatsCounter.java
+++ b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
@@ -101,14 +101,16 @@ extends StatsCounter {
                 for (String s2 : compoundTag2.getAllKeys()) {
                     if (!compoundTag2.contains(s2, 10)) continue;
                     Util.ifElse(Registry.STAT_TYPE.getOptional(new ResourceLocation(s2)), statType -> {
-                        CompoundTag compoundTag2 = compoundTag2.getCompound(s2);
-                        for (String s2 : compoundTag2.getAllKeys()) {
-                            if (compoundTag2.contains(s2, 99)) {
-                                Util.ifElse(this.getStat((StatType)statType, s2), stat -> this.stats.put(stat, compoundTag2.getInt(s2)), () -> LOGGER.warn("Invalid statistic in {}: Don't know what {} is", this.file, s2));
+                        // MagmaCube start - decompile error
+                        CompoundTag compoundTag21 = compoundTag2.getCompound(s2);
+                        for (String s21 : compoundTag21.getAllKeys()) {
+                            if (compoundTag21.contains(s21, 99)) {
+                                Util.ifElse(this.getStat(statType, s21), stat -> this.stats.put(stat, compoundTag21.getInt(s21)), () -> LOGGER.warn("Invalid statistic in {}: Don't know what {} is", this.file, s21));
                                 continue;
                             }
-                            LOGGER.warn("Invalid statistic value in {}: Don't know what {} is for key {}", this.file, compoundTag2.get(s2), s2);
+                            LOGGER.warn("Invalid statistic value in {}: Don't know what {} is for key {}", this.file, compoundTag21.get(s21), s21);
                         }
+                        // MagmaCube end - decompile error
                     }, () -> LOGGER.warn("Invalid statistic type in {}: Don't know what {} is", this.file, s2));
                 }
             }
@@ -138,8 +140,10 @@ extends StatsCounter {
     }
 
     protected String toJson() {
-        HashMap map = Maps.newHashMap();
-        for (Object entry : this.stats.object2IntEntrySet()) {
+        // MagmaCube start - type
+        HashMap<StatType<?>, JsonObject> map = Maps.newHashMap();
+        for (Object2IntMap.Entry<Stat<?>> entry : this.stats.object2IntEntrySet()) {
+            // MagmaCube end - type
             Stat stat = (Stat)entry.getKey();
             map.computeIfAbsent(stat.getType(), statType -> new JsonObject()).addProperty(ServerStatsCounter.getKey(stat).toString(), (Number)entry.getIntValue());
         }
diff --git a/src/main/java/net/minecraft/tags/Tag.java b/src/main/java/net/minecraft/tags/Tag.java
index 737b314811a7929abe0124245c371e2e34777903..c83874cab5e732fc12736c58704c7ed677888eed 100644
--- a/src/main/java/net/minecraft/tags/Tag.java
+++ b/src/main/java/net/minecraft/tags/Tag.java
@@ -22,7 +22,8 @@ import java.util.function.Supplier;
 public interface Tag<T>
 {
     default <T> Codec<Tag<T>> codec(final Supplier<TagCollection<T>> supplier) {
-        return (Codec<Tag<T>>)ResourceLocation.CODEC.flatXmap(resourceLocation -> Optional.ofNullable(supplier.get().getTag(resourceLocation)).map((Function<? super Tag<T>, ?>)DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + resourceLocation)), tag -> Optional.ofNullable(supplier.get().getId(tag)).map((Function<? super ResourceLocation, ?>)DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + tag)));
+        // MagmaCube - decompile error
+        return ResourceLocation.CODEC.flatXmap(resourceLocation -> Optional.ofNullable(supplier.get().getTag(resourceLocation)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + resourceLocation)), tag -> Optional.ofNullable(supplier.get().getId(tag)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + tag)));
     }
     
     boolean contains(final T p0);
@@ -34,7 +35,8 @@ public interface Tag<T>
         return list.get(random.nextInt(list.size()));
     }
     
-    default <T> Tag<T> fromSet(final Set<T> set) {
+    // MagmaCube - default -> static
+    static <T> Tag<T> fromSet(final Set<T> set) {
         return SetTag.create(set);
     }
     
@@ -63,7 +65,7 @@ public interface Tag<T>
         private final List<BuilderEntry> entries;
         
         public Builder() {
-            this.entries = (List<BuilderEntry>)Lists.newArrayList();
+            this.entries = Lists.newArrayList(); // MagmaCube - decompile error
         }
         
         public static Builder tag() {
@@ -107,7 +109,7 @@ public interface Tag<T>
         
         public Builder addFromJson(final JsonObject jsonObject, final String s) {
             final JsonArray jsonArray = GsonHelper.getAsJsonArray(jsonObject, "values");
-            final List<Entry> list = (List<Entry>)Lists.newArrayList();
+            final List<Entry> list = Lists.newArrayList(); // MagmaCube - decompile error
             for (final JsonElement jsonElement : jsonArray) {
                 list.add(parseEntry(jsonElement));
             }
@@ -123,8 +125,10 @@ public interface Tag<T>
             final boolean flag2;
             if (jsonElement.isJsonObject()) {
                 final JsonObject jsonObject = jsonElement.getAsJsonObject();
-                final String s = GsonHelper.getAsString(jsonObject, "id");
-                final boolean flag = GsonHelper.getAsBoolean(jsonObject, "required", true);
+                // MagmaCube start - decompile error
+                s2 = GsonHelper.getAsString(jsonObject, "id");
+                flag2 = GsonHelper.getAsBoolean(jsonObject, "required", true);
+                // MagmaCube end - decompile error
             }
             else {
                 s2 = GsonHelper.convertToString(jsonElement, "id");
diff --git a/src/main/java/net/minecraft/tags/TagCollection.java b/src/main/java/net/minecraft/tags/TagCollection.java
index 42a541e4d8352b8c3cdfbc06e8923850342291b5..5cccd744581565fa79372b10531348e9d987e576 100644
--- a/src/main/java/net/minecraft/tags/TagCollection.java
+++ b/src/main/java/net/minecraft/tags/TagCollection.java
@@ -43,7 +43,7 @@ public interface TagCollection<T>
     }
     
     default Collection<ResourceLocation> getMatchingTags(final T object) {
-        final List<ResourceLocation> list = (List<ResourceLocation>)Lists.newArrayList();
+        final List<ResourceLocation> list = Lists.newArrayList(); // MagmaCube - decompile error
         for (final Map.Entry<ResourceLocation, Tag<T>> entry : this.getAllTags().entrySet()) {
             if (entry.getValue().contains(object)) {
                 list.add(entry.getKey());
@@ -64,8 +64,9 @@ public interface TagCollection<T>
         }
     }
     
-    default <T> TagCollection<T> loadFromNetwork(final FriendlyByteBuf friendlyByteBuf, final Registry<T> registry) {
-        final Map<ResourceLocation, Tag<T>> map = (Map<ResourceLocation, Tag<T>>)Maps.newHashMap();
+    // MagmaCube - default -> static
+    static <T> TagCollection<T> loadFromNetwork(final FriendlyByteBuf friendlyByteBuf, final Registry<T> registry) {
+        final Map<ResourceLocation, Tag<T>> map = Maps.newHashMap(); // MagmaCube - decompile error
         for (int i = friendlyByteBuf.readVarInt(), i2 = 0; i2 < i; ++i2) {
             final ResourceLocation resourceLocation = friendlyByteBuf.readResourceLocation();
             final int i3 = friendlyByteBuf.readVarInt();
@@ -78,11 +79,11 @@ public interface TagCollection<T>
         return of(map);
     }
     
-    default <T> TagCollection<T> empty() {
-        return of((Map<ResourceLocation, Tag<T>>)ImmutableBiMap.of());
+    static <T> TagCollection<T> empty() { // MagmaCube - default -> static
+        return of(ImmutableBiMap.of()); // MagmaCube - decompile error
     }
     
-    default <T> TagCollection<T> of(final Map<ResourceLocation, Tag<T>> map) {
+    static <T> TagCollection<T> of(final Map<ResourceLocation, Tag<T>> map) { // MagmaCube - default -> static
         final BiMap<ResourceLocation, Tag<T>> biMap = (BiMap<ResourceLocation, Tag<T>>)ImmutableBiMap.copyOf((Map)map);
         return new TagCollection<T>() {
             private final Tag<T> empty = SetTag.empty();
diff --git a/src/main/java/net/minecraft/tags/TagContainer.java b/src/main/java/net/minecraft/tags/TagContainer.java
index 0e8faa7575f1d53be16e4123b48df115713db590..5de21a38dc728b30219bfbf268fe120128c329ec 100644
--- a/src/main/java/net/minecraft/tags/TagContainer.java
+++ b/src/main/java/net/minecraft/tags/TagContainer.java
@@ -10,7 +10,8 @@ import net.minecraft.world.level.block.Block;
 
 public interface TagContainer
 {
-    public static final TagContainer EMPTY = of(TagCollection.empty(), TagCollection.empty(), TagCollection.empty(), TagCollection.empty());
+    // MagmaCube - decompile error
+    public final TagContainer EMPTY = of(TagCollection.empty(), TagCollection.empty(), TagCollection.empty(), TagCollection.empty());
     
     TagCollection<Block> getBlocks();
     
@@ -40,7 +41,8 @@ public interface TagContainer
         return of(tagCollection, tagCollection2, tagCollection3, tagCollection4);
     }
     
-    default TagContainer of(final TagCollection<Block> tagCollection, final TagCollection<Item> tagCollection2, final TagCollection<Fluid> tagCollection3, final TagCollection<EntityType<?>> tagCollection4) {
+    // MagmaCube - default -> static
+    static TagContainer of(final TagCollection<Block> tagCollection, final TagCollection<Item> tagCollection2, final TagCollection<Fluid> tagCollection3, final TagCollection<EntityType<?>> tagCollection4) {
         return new TagContainer() {
             @Override
             public TagCollection<Block> getBlocks() {
diff --git a/src/main/java/net/minecraft/util/Crypt.java b/src/main/java/net/minecraft/util/Crypt.java
index 91e6ca201f133a6ff2006a20cbe9fa3c934ad17d..eee7fdbaaffebaf7bb186333c646bf71e29bd253 100644
--- a/src/main/java/net/minecraft/util/Crypt.java
+++ b/src/main/java/net/minecraft/util/Crypt.java
@@ -1,13 +1,11 @@
 package net.minecraft.util;
 
-import java.security.spec.AlgorithmParameterSpec;
 import javax.crypto.spec.IvParameterSpec;
 import javax.crypto.Cipher;
 import javax.crypto.spec.SecretKeySpec;
 import java.security.Key;
 import java.security.PrivateKey;
 import java.security.spec.EncodedKeySpec;
-import java.security.spec.KeySpec;
 import java.security.KeyFactory;
 import java.security.spec.X509EncodedKeySpec;
 import java.security.MessageDigest;
diff --git a/src/main/java/net/minecraft/util/ExceptionCollector.java b/src/main/java/net/minecraft/util/ExceptionCollector.java
index 3d0e04978e3784353331b0172d0754749b03c502..0b0ae1ce39cde26c9b71430b2bb9b7bf6f7e0485 100644
--- a/src/main/java/net/minecraft/util/ExceptionCollector.java
+++ b/src/main/java/net/minecraft/util/ExceptionCollector.java
@@ -16,7 +16,7 @@ public class ExceptionCollector<T extends Throwable>
         }
     }
     
-    public void throwIfPresent() throws T, Throwable {
+    public void throwIfPresent() throws T { // MagmaCube - decompile fix
         if (this.result != null) {
             throw this.result;
         }
diff --git a/src/main/java/net/minecraft/util/SortedArraySet.java b/src/main/java/net/minecraft/util/SortedArraySet.java
index b94f68dd8474e48337bf350ec879a29e5d084aa3..c80d261348ade3e736a59c81fd7b5b3895443472 100644
--- a/src/main/java/net/minecraft/util/SortedArraySet.java
+++ b/src/main/java/net/minecraft/util/SortedArraySet.java
@@ -30,7 +30,7 @@ public class SortedArraySet<T> extends AbstractSet<T>
     }
     
     private int findIndex(final T object) {
-        return Arrays.binarySearch(this.contents, 0, this.size, object, (Comparator<? super Object>)this.comparator);
+        return Arrays.binarySearch(this.contents, 0, this.size, object, this.comparator); // MagmaCube - decompile error
     }
     
     private static int getInsertionPosition(final int i) {
@@ -95,7 +95,7 @@ public class SortedArraySet<T> extends AbstractSet<T>
     
     @Override
     public boolean remove(final Object object) {
-        final int i = this.findIndex(object);
+        final int i = this.findIndex((T) object); // MagmaCube - decompile error
         if (i >= 0) {
             this.removeInternal(i);
             return true;
@@ -109,7 +109,7 @@ public class SortedArraySet<T> extends AbstractSet<T>
     
     @Override
     public boolean contains(final Object object) {
-        final int i = this.findIndex(object);
+        final int i = this.findIndex((T) object); // MagmaCube - decompile error
         return i >= 0;
     }
     
diff --git a/src/main/java/net/minecraft/util/StringRepresentable.java b/src/main/java/net/minecraft/util/StringRepresentable.java
index 78f379bec8d664409dea0dfa0e2fee2144ac2c06..6abe49b91e96593498745655a62b2a528fe9dcd8 100644
--- a/src/main/java/net/minecraft/util/StringRepresentable.java
+++ b/src/main/java/net/minecraft/util/StringRepresentable.java
@@ -17,13 +17,15 @@ import java.util.function.Supplier;
 public interface StringRepresentable
 {
     String getSerializedName();
-    
-    default <E extends Enum> Codec<E> fromEnum(final Supplier<E[]> supplier, final Function<? super String, ? extends E> function) {
+
+    // MagmaCube - default -> static, decompile error
+    static <E extends Enum<E> & StringRepresentable> Codec<E> fromEnum(final Supplier<E[]> supplier, final Function<? super String, ? extends E> function) {
         final E[] enums = supplier.get();
         return fromStringResolver(java.lang.Enum::ordinal, i -> enums[i], function);
     }
     
-    default <E extends StringRepresentable> Codec<E> fromStringResolver(final ToIntFunction<E> toIntFunction, final IntFunction<E> intFunction, final Function<? super String, ? extends E> function) {
+    // MagmaCube - default -> static
+    static <E extends StringRepresentable> Codec<E> fromStringResolver(final ToIntFunction<E> toIntFunction, final IntFunction<E> intFunction, final Function<? super String, ? extends E> function) {
         return (Codec<E>)new Codec<E>() {
             public <T> DataResult<T> encode(final E stringRepresentable, final DynamicOps<T> dynamicOps, final T object) {
                 if (dynamicOps.compressMaps()) {
@@ -34,9 +36,11 @@ public interface StringRepresentable
             
             public <T> DataResult<Pair<E, T>> decode(final DynamicOps<T> dynamicOps, final T object) {
                 if (dynamicOps.compressMaps()) {
-                    return (DataResult<Pair<E, T>>)dynamicOps.getNumberValue(object).flatMap(number -> Optional.ofNullable(intFunction.apply(number.intValue())).map((Function<? super Object, ?>)DataResult::success).orElseGet(() -> DataResult.error("Unknown element id: " + number))).map(stringRepresentable -> Pair.of(stringRepresentable, dynamicOps.empty()));
+                    // MagmaCube - decompile error
+                    return dynamicOps.getNumberValue(object).flatMap(number -> Optional.ofNullable(intFunction.apply(number.intValue())).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown element id: " + number))).map(stringRepresentable -> Pair.of(stringRepresentable, dynamicOps.empty()));
                 }
-                return (DataResult<Pair<E, T>>)dynamicOps.getStringValue(object).flatMap(s -> Optional.ofNullable(function.apply(s)).map((Function<? super Object, ?>)DataResult::success).orElseGet(() -> DataResult.error("Unknown element name: " + s))).map(stringRepresentable -> Pair.of(stringRepresentable, dynamicOps.empty()));
+                // MagmaCube - decompile error
+                return dynamicOps.getStringValue(object).flatMap(s -> Optional.ofNullable(function.apply(s)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown element name: " + s))).map(stringRepresentable -> Pair.of(stringRepresentable, dynamicOps.empty()));
             }
             
             @Override
@@ -52,7 +56,7 @@ public interface StringRepresentable
                 if (dynamicOps.compressMaps()) {
                     return IntStream.range(0, stringRepresentables.length).mapToObj((IntFunction<? extends T>)dynamicOps::createInt);
                 }
-                return Arrays.stream(stringRepresentables).map((Function<? super StringRepresentable, ?>)StringRepresentable::getSerializedName).map((Function<? super Object, ? extends T>)dynamicOps::createString);
+                return Arrays.stream(stringRepresentables).map(StringRepresentable::getSerializedName).map(dynamicOps::createString); // MagmaCube - decompile error
             }
         };
     }
diff --git a/src/main/java/net/minecraft/util/UniformInt.java b/src/main/java/net/minecraft/util/UniformInt.java
index 903dd45e133f32fe1242922a7136b326438712c3..6eb219846d080c185f73bf8c126064de6de5b769 100644
--- a/src/main/java/net/minecraft/util/UniformInt.java
+++ b/src/main/java/net/minecraft/util/UniformInt.java
@@ -77,13 +77,14 @@ public class UniformInt
     }
     
     static {
-        CODEC = Codec.either((Codec)Codec.INT, RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)Codec.INT.fieldOf("base").forGetter(uniformInt -> uniformInt.baseValue), (App)Codec.INT.fieldOf("spread").forGetter(uniformInt -> uniformInt.spread)).apply(instance, (BiFunction)UniformInt::new)).comapFlatMap(uniformInt -> {
+        // MagmaCube - decompile error
+        CODEC = Codec.either(Codec.INT, RecordCodecBuilder.<UniformInt>create(instance -> instance.group(Codec.INT.fieldOf("base").forGetter(uniformInt -> uniformInt.baseValue), Codec.INT.fieldOf("spread").forGetter(uniformInt -> uniformInt.spread)).apply(instance, UniformInt::new)).comapFlatMap(uniformInt -> {
             if (uniformInt.spread < 0) {
                 return DataResult.error("Spread must be non-negative, got: " + uniformInt.spread);
             }
             else {
                 return DataResult.success(uniformInt);
             }
-        }, (Function)Function.identity())).xmap(either -> (UniformInt)either.map((Function)UniformInt::fixed, uniformInt -> uniformInt), uniformInt -> (uniformInt.spread == 0) ? Either.left(uniformInt.baseValue) : Either.right(uniformInt));
+        }, Function.identity())).xmap(either -> either.map(UniformInt::fixed, uniformInt -> uniformInt), uniformInt -> (uniformInt.spread == 0) ? Either.left(uniformInt.baseValue) : Either.right(uniformInt)); // MagmaCube - decompile error
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java
index fd8a99a0e376001caa9f08502db8b73ca376e3a0..93998a498a9f2f54508f0c6da777dca2cce5f3a1 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java
@@ -26,7 +26,7 @@ public abstract class AbstractUUIDFix extends DataFix
     protected Typed<?> updateNamedChoice(final Typed<?> typed, final String s, final Function<Dynamic<?>, Dynamic<?>> function) {
         final Type<?> type = (Type<?>)this.getInputSchema().getChoiceType(this.typeReference, s);
         final Type<?> type2 = (Type<?>)this.getOutputSchema().getChoiceType(this.typeReference, s);
-        return (Typed<?>)typed.updateTyped(DSL.namedChoice(s, (Type)type), (Type)type2, typed -> typed.update(DSL.remainderFinder(), (Function)function));
+        return (Typed<?>)typed.updateTyped(DSL.namedChoice(s, (Type)type), (Type)type2, typed1 -> typed1.update(DSL.remainderFinder(), (Function)function)); // MagmaCube - decompile error
     }
     
     protected static Optional<Dynamic<?>> replaceUUIDString(final Dynamic<?> dynamic, final String s, final String s2) {
@@ -44,13 +44,11 @@ public abstract class AbstractUUIDFix extends DataFix
     }
     
     protected static Optional<Dynamic<?>> createUUIDFromString(final Dynamic<?> dynamic, final String s) {
-        final String s2;
-        UUID uuid;
         return dynamic.get(s).result().flatMap(dynamic2 -> {
-            s2 = dynamic2.asString((String)null);
+            String s2 = dynamic2.asString((String)null); // MagmaCube - decompile error
             if (s2 != null) {
                 try {
-                    uuid = UUID.fromString(s2);
+                    UUID uuid = UUID.fromString(s2); // MagmaCube - decompile error
                     return createUUIDTag(dynamic, uuid.getMostSignificantBits(), uuid.getLeastSignificantBits());
                 }
                 catch (IllegalArgumentException ex) {}
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java b/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java
index 88865ab87ab1f4dbf662f879f4d6e89f13848b2c..1947cc7105306654a5b340f550f6ce80f8f17e9a 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java
@@ -28,8 +28,8 @@ extends DataFix {
         if (taggedChoiceType.getKeyType() != taggedChoiceType2.getKeyType()) {
             throw new IllegalStateException("Could not inject: key type is not the same");
         }
-        TaggedChoice.TaggedChoiceType<?> taggedChoiceType3 = taggedChoiceType2;
-        return this.fixTypeEverywhere(s, (Type)taggedChoiceType, (Type)taggedChoiceType3, dynamicOps -> pair -> {
+        TaggedChoice.TaggedChoiceType taggedChoiceType3 = taggedChoiceType2; // MagmaCube - untype
+        return this.fixTypeEverywhere(s, taggedChoiceType, taggedChoiceType3, dynamicOps -> pair -> { // MagmaCube - decompile error
             if (!taggedChoiceType3.hasType(pair.getFirst())) {
                 throw new IllegalArgumentException(String.format("Unknown type %s in %s ", new Object[]{pair.getFirst(), this.type}));
             }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java b/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java
index 38d9a5fa583a62dcc895b749d7bb5f283339b40c..45303d0b68d1ef07f6a85ff5ec34c02edb969e51 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java
@@ -26,7 +26,7 @@ public class AttributesRename extends DataFix
     protected TypeRewriteRule makeRule() {
         final Type<?> type = (Type<?>)this.getInputSchema().getType(References.ITEM_STACK);
         final OpticFinder<?> opticFinder = (OpticFinder<?>)type.findField("tag");
-        return TypeRewriteRule.seq(this.fixTypeEverywhereTyped("Rename ItemStack Attributes", (Type)type, typed -> typed.updateTyped((OpticFinder)opticFinder, (Function)AttributesRename::fixItemStackTag)), new TypeRewriteRule[] { this.fixTypeEverywhereTyped("Rename Entity Attributes", this.getInputSchema().getType(References.ENTITY), (Function)AttributesRename::fixEntity), this.fixTypeEverywhereTyped("Rename Player Attributes", this.getInputSchema().getType(References.PLAYER), (Function)AttributesRename::fixEntity) });
+        return TypeRewriteRule.seq(this.fixTypeEverywhereTyped("Rename ItemStack Attributes", (Type)type, typed -> typed.updateTyped((OpticFinder)opticFinder, AttributesRename::fixItemStackTag)), new TypeRewriteRule[] { this.fixTypeEverywhereTyped("Rename Entity Attributes", this.getInputSchema().getType(References.ENTITY), AttributesRename::fixEntity), this.fixTypeEverywhereTyped("Rename Player Attributes", this.getInputSchema().getType(References.PLAYER), AttributesRename::fixEntity) }); // MagmaCube - decompile error
     }
     
     private static Dynamic<?> fixName(final Dynamic<?> dynamic) {
@@ -34,11 +34,11 @@ public class AttributesRename extends DataFix
     }
     
     private static Typed<?> fixItemStackTag(final Typed<?> typed) {
-        return (Typed<?>)typed.update(DSL.remainderFinder(), dynamic -> dynamic.update("AttributeModifiers", dynamic -> (Dynamic)DataFixUtils.orElse((Optional)((Dynamic)dynamic).asStreamOpt().result().map(stream -> stream.map(dynamic -> dynamic.update("AttributeName", (Function)AttributesRename::fixName))).map(dynamic::createList), dynamic)));
+        return (Typed<?>)typed.update(DSL.remainderFinder(), dynamic -> dynamic.update("AttributeModifiers", dynamic1 -> (Dynamic)DataFixUtils.orElse((dynamic1).asStreamOpt().result().map(stream -> stream.map(dynamic2 -> dynamic2.update("AttributeName", AttributesRename::fixName))).map(dynamic1::createList), dynamic1))); // MagmaCube - decompile error
     }
     
     private static Typed<?> fixEntity(final Typed<?> typed) {
-        return (Typed<?>)typed.update(DSL.remainderFinder(), dynamic -> dynamic.update("Attributes", dynamic -> (Dynamic)DataFixUtils.orElse((Optional)((Dynamic)dynamic).asStreamOpt().result().map(stream -> stream.map(dynamic -> dynamic.update("Name", (Function)AttributesRename::fixName))).map(dynamic::createList), dynamic)));
+        return (Typed<?>)typed.update(DSL.remainderFinder(), dynamic -> dynamic.update("Attributes", dynamic1 -> (Dynamic)DataFixUtils.orElse((dynamic1).asStreamOpt().result().map(stream -> stream.map(dynamic2 -> dynamic2.update("Name", AttributesRename::fixName))).map(dynamic1::createList), dynamic1))); // MagmaCube - decompile error
     }
     
     static {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BedBlockEntityInjecter.java b/src/main/java/net/minecraft/util/datafix/fixes/BedBlockEntityInjecter.java
index 416258e2056d6231f730427e37d151ddd13e20d5..ae5034ecb007a42036ac88d278f0bb6cacb0c126 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BedBlockEntityInjecter.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BedBlockEntityInjecter.java
@@ -40,57 +40,40 @@ public class BedBlockEntityInjecter extends DataFix
         final OpticFinder<?> opticFinder = (OpticFinder<?>)DSL.fieldFinder("Level", (Type)type);
         final OpticFinder<java.util.List<TE>> opticFinder2 = (OpticFinder<java.util.List<TE>>)DSL.fieldFinder("TileEntities", (Type)listType);
         final int i = 416;
-        final OpticFinder opticFinder3;
-        final Typed<?> typed2;
-        final Dynamic<?> dynamic2;
-        final int j;
-        final int i2;
-        final OpticFinder opticFinder4;
-        final java.util.List<Object> list;
-        java.util.List<? extends Dynamic<?>> list2;
-        int i3;
-        Dynamic<?> dynamic3;
-        int i4;
-        Stream<Integer> stream;
-        int i5;
-        final Iterator<Integer> iterator;
-        int i6;
-        int i7;
-        int i8;
-        int i9;
-        Map<Dynamic<?>, Dynamic<?>> map;
-        final Type type3;
-        return TypeRewriteRule.seq(this.fixTypeEverywhere("InjectBedBlockEntityType", (Type)this.getInputSchema().findChoiceType(References.BLOCK_ENTITY), (Type)this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY), dynamicOps -> pair -> pair), this.fixTypeEverywhereTyped("BedBlockEntityInjecter", this.getOutputSchema().getType(References.CHUNK), typed -> {
-            typed2 = (Typed<?>)typed.getTyped(opticFinder3);
-            dynamic2 = (Dynamic<?>)typed2.get(DSL.remainderFinder());
-            j = dynamic2.get("xPos").asInt(0);
-            i2 = dynamic2.get("zPos").asInt(0);
-            list = (java.util.List<Object>)Lists.newArrayList((Iterable)typed2.getOrCreate(opticFinder4));
-            for (list2 = (java.util.List<? extends Dynamic<?>>)dynamic2.get("Sections").asList((Function)Function.identity()), i3 = 0; i3 < list2.size(); ++i3) {
-                dynamic3 = (Dynamic<?>)list2.get(i3);
-                i4 = dynamic3.get("Y").asInt(0);
-                stream = dynamic3.get("Blocks").asStream().map(dynamic -> dynamic.asInt(0));
-                i5 = 0;
-                stream::iterator.iterator();
+        // MagmaCube start - decompile error
+        return TypeRewriteRule.seq(this.fixTypeEverywhere("InjectBedBlockEntityType", this.getInputSchema().findChoiceType(References.BLOCK_ENTITY), (Type)this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY), dynamicOps -> pair -> pair), this.fixTypeEverywhereTyped("BedBlockEntityInjecter", this.getOutputSchema().getType(References.CHUNK), typed -> {
+            Typed<?> typed2 = (Typed<?>)typed.getTyped(opticFinder);
+            Dynamic<?> dynamic2 = typed2.get(DSL.remainderFinder());
+            int j = dynamic2.get("xPos").asInt(0);
+            int i2 = dynamic2.get("zPos").asInt(0);
+            java.util.List<TE> list = Lists.newArrayList(typed2.getOrCreate(opticFinder2));
+            java.util.List<? extends Dynamic<?>> list2 = dynamic2.get("Sections").asList(Function.identity());
+            for (int i3 = 0; i3 < list2.size(); ++i3) {
+                Dynamic<?> dynamic3 = (Dynamic<?>)list2.get(i3);
+                int i4 = dynamic3.get("Y").asInt(0);
+                Stream<Integer> stream = dynamic3.get("Blocks").asStream().map(dynamic -> dynamic.asInt(0));
+                int i5 = 0; 
+                Iterator<Integer> iterator = stream.iterator();
                 while (iterator.hasNext()) {
-                    i6 = iterator.next();
+                    int i6 = iterator.next();
                     if (416 == (i6 & 0xFF) << 4) {
-                        i7 = (i5 & 0xF);
-                        i8 = (i5 >> 8 & 0xF);
-                        i9 = (i5 >> 4 & 0xF);
-                        map = (Map<Dynamic<?>, Dynamic<?>>)Maps.newHashMap();
+                        int i7 = (i5 & 0xF);
+                        int i8 = (i5 >> 8 & 0xF);
+                        int i9 = (i5 >> 4 & 0xF);
+                        Map<Dynamic<?>, Dynamic<?>> map = Maps.newHashMap();
+                        // MagmaCube end - decompile error
                         map.put((Dynamic<?>)dynamic3.createString("id"), (Dynamic<?>)dynamic3.createString("minecraft:bed"));
                         map.put((Dynamic<?>)dynamic3.createString("x"), (Dynamic<?>)dynamic3.createInt(i7 + (j << 4)));
                         map.put((Dynamic<?>)dynamic3.createString("y"), (Dynamic<?>)dynamic3.createInt(i8 + (i4 << 4)));
                         map.put((Dynamic<?>)dynamic3.createString("z"), (Dynamic<?>)dynamic3.createInt(i9 + (i2 << 4)));
                         map.put((Dynamic<?>)dynamic3.createString("color"), (Dynamic<?>)dynamic3.createShort((short)14));
-                        list.add(((Pair)type3.read(dynamic3.createMap((Map)map)).result().orElseThrow(() -> new IllegalStateException("Could not parse newly created bed block entity."))).getFirst());
+                        list.add((type2.read(dynamic3.createMap(map)).result().orElseThrow(() -> new IllegalStateException("Could not parse newly created bed block entity."))).getFirst()); // MagmaCube - decompile error
                     }
                     ++i5;
                 }
             }
             if (!list.isEmpty()) {
-                return typed.set(opticFinder3, typed2.set(opticFinder4, list));
+                return typed.set(opticFinder, typed2.set(opticFinder2, list)); // MagmaCube - decompile error
             }
             else {
                 return typed;
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityShulkerBoxColorFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityShulkerBoxColorFix.java
index 14d1026d88ca7dc070300189a11ace6a6a17672a..fc598bb6793c9992d921fc600912ddfd6afd526a 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityShulkerBoxColorFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityShulkerBoxColorFix.java
@@ -1,6 +1,5 @@
 package net.minecraft.util.datafix.fixes;
 
-import com.mojang.serialization.Dynamic;
 import com.mojang.datafixers.DSL;
 import com.mojang.datafixers.Typed;
 import com.mojang.datafixers.schemas.Schema;
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java
index f8c0b5380e41048482c96c29f8ccc637195bcf15..1adf59b04b6f3c682586dd69501b9d4845a2a8c0 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java
@@ -20,7 +20,7 @@ public class BlockEntityUUIDFix extends AbstractUUIDFix
     }
     
     private Dynamic<?> updateSkull(final Dynamic<?> dynamic) {
-        return dynamic.get("Owner").get().map(dynamic -> AbstractUUIDFix.replaceUUIDString(dynamic, "Id", "Id").orElse(dynamic)).map(dynamic2 -> dynamic.remove("Owner").set("SkullOwner", dynamic2)).result().orElse(dynamic);
+        return dynamic.get("Owner").get().map(dynamic1 -> AbstractUUIDFix.replaceUUIDString(dynamic1, "Id", "Id").orElse(dynamic1)).map(dynamic2 -> dynamic.remove("Owner").set("SkullOwner", dynamic2)).result().orElse((Dynamic) dynamic); // MagmaCube - decompile error
     }
     
     private Dynamic<?> updateConduit(final Dynamic<?> dynamic) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ColorlessShulkerEntityFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ColorlessShulkerEntityFix.java
index 426ccaa815e7ea556e0856188f13ac459454cd9e..d52729d6a9ab3a6324921c65cf2b035d137ef039 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ColorlessShulkerEntityFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ColorlessShulkerEntityFix.java
@@ -1,6 +1,5 @@
 package net.minecraft.util.datafix.fixes;
 
-import com.mojang.serialization.Dynamic;
 import com.mojang.datafixers.DSL;
 import com.mojang.datafixers.Typed;
 import com.mojang.datafixers.schemas.Schema;
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityRedundantChanceTagsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityRedundantChanceTagsFix.java
index 1a04a37bd4d4b1cea391def9d9685abd59ec5a51..7391056a9ac8f866884328cd69a216e3f37d9b9a 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityRedundantChanceTagsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityRedundantChanceTagsFix.java
@@ -32,7 +32,7 @@ public class EntityRedundantChanceTagsFix extends DataFix
     }
     
     private static boolean isZeroList(final OptionalDynamic<?> optionalDynamic, final int i) {
-        return optionalDynamic.flatMap((Function)EntityRedundantChanceTagsFix.FLOAT_LIST_CODEC::parse).map(list -> list.size() == i && list.stream().allMatch(f -> f == 0.0f)).result().orElse(false);
+        return optionalDynamic.flatMap(EntityRedundantChanceTagsFix.FLOAT_LIST_CODEC::parse).map(list -> list.size() == i && list.stream().allMatch(f -> f == 0.0f)).result().orElse(false); // MagmaCube - decompile error
     }
     
     static {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java b/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
index 86f56d6eb7b06d285aad8f9bc563a5e5ff1c3a37..874111c104e95670923dccbcea8edf621978cfe1 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
@@ -11,7 +11,6 @@ import com.mojang.datafixers.TypeRewriteRule;
 import com.mojang.datafixers.Typed;
 import com.mojang.datafixers.schemas.Schema;
 import com.mojang.datafixers.types.Type;
-import com.mojang.datafixers.types.templates.List;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.Dynamic;
 import it.unimi.dsi.fastutil.ints.Int2IntMap;
@@ -45,30 +44,33 @@ extends DataFix {
         object2IntOpenHashMap.put("minecraft:oak_leaves", 4);
         object2IntOpenHashMap.put("minecraft:spruce_leaves", 5);
     });
-    private static final Set<String> LOGS = ImmutableSet.of("minecraft:acacia_bark", "minecraft:birch_bark", "minecraft:dark_oak_bark", "minecraft:jungle_bark", "minecraft:oak_bark", "minecraft:spruce_bark", (Object[])new String[]{"minecraft:acacia_log", "minecraft:birch_log", "minecraft:dark_oak_log", "minecraft:jungle_log", "minecraft:oak_log", "minecraft:spruce_log", "minecraft:stripped_acacia_log", "minecraft:stripped_birch_log", "minecraft:stripped_dark_oak_log", "minecraft:stripped_jungle_log", "minecraft:stripped_oak_log", "minecraft:stripped_spruce_log"});
+    // MagmaCube - decompile error
+    private static final Set<String> LOGS = ImmutableSet.of("minecraft:acacia_bark", "minecraft:birch_bark", "minecraft:dark_oak_bark", "minecraft:jungle_bark", "minecraft:oak_bark", "minecraft:spruce_bark", new String[]{"minecraft:acacia_log", "minecraft:birch_log", "minecraft:dark_oak_log", "minecraft:jungle_log", "minecraft:oak_log", "minecraft:spruce_log", "minecraft:stripped_acacia_log", "minecraft:stripped_birch_log", "minecraft:stripped_dark_oak_log", "minecraft:stripped_jungle_log", "minecraft:stripped_oak_log", "minecraft:stripped_spruce_log"});
 
     public LeavesFix(Schema schema, boolean flag) {
         super(schema, flag);
     }
 
     protected TypeRewriteRule makeRule() {
-        Type type = this.getInputSchema().getType(References.CHUNK);
-        OpticFinder opticFinder = type.findField("Level");
-        OpticFinder opticFinder2 = opticFinder.type().findField("Sections");
-        Type type2 = opticFinder2.type();
-        if (!(type2 instanceof List.ListType)) {
+        // MagmaCube start - decompile error
+        Type<?> type = this.getInputSchema().getType(References.CHUNK);
+        OpticFinder<?> opticFinder = type.findField("Level");
+        OpticFinder<?> opticFinder2 = opticFinder.type().findField("Sections");
+        Type<?> type2 = opticFinder2.type();
+        if (!(type2 instanceof com.mojang.datafixers.types.templates.List.ListType)) {
             throw new IllegalStateException("Expecting sections to be a list.");
         }
-        Type type3 = ((List.ListType)type2).getElement();
-        OpticFinder opticFinder3 = DSL.typeFinder((Type)type3);
+        Type<?> type3 = ((com.mojang.datafixers.types.templates.List.ListType<?>)type2).getElement();
+        OpticFinder<?> opticFinder3 = DSL.typeFinder(type3);
         return this.fixTypeEverywhereTyped("Leaves fix", type, typed2 -> typed2.updateTyped(opticFinder, typed -> {
             int[] ints = new int[]{0};
-            Typed typed22 = typed.updateTyped(opticFinder2, typed2 -> {
-                Int2ObjectOpenHashMap int2ObjectMap = new Int2ObjectOpenHashMap(typed2.getAllTyped(opticFinder3).stream().map(typed -> new LeavesSection((Typed<?>)typed, this.getInputSchema())).collect(Collectors.toMap(Section::getIndex, leavesSection -> leavesSection)));
+            Typed<?> typed22 = typed.updateTyped(opticFinder2, typed21 -> {
+                Int2ObjectOpenHashMap<LeavesSection> int2ObjectMap = new Int2ObjectOpenHashMap<>(typed21.getAllTyped(opticFinder3).stream().map(typed1 -> new LeavesSection((Typed<?>)typed1, this.getInputSchema())).collect(Collectors.toMap(Section::getIndex, leavesSection -> leavesSection)));
                 if (int2ObjectMap.values().stream().allMatch(Section::isSkippable)) {
-                    return typed2;
+                    return typed21;
                 }
-                ArrayList list = Lists.newArrayList();
+                ArrayList<IntSet> list = Lists.newArrayList();
+        // MagmaCube end - decompile error
                 for (int i = 0; i < 7; ++i) {
                     list.add(new IntOpenHashSet());
                 }
@@ -109,7 +111,7 @@ extends DataFix {
                         }
                     }
                 }
-                return typed2.updateTyped(opticFinder3, arg_0 -> LeavesFix.lambda$null$3((Int2ObjectMap)int2ObjectMap, arg_0));
+                return typed21.updateTyped(opticFinder3, arg_0 -> LeavesFix.lambda$null$3((Int2ObjectMap)int2ObjectMap, arg_0)); // MagmaCube - decompile error
             });
             if (ints[0] != 0) {
                 typed22 = typed22.update(DSL.remainderFinder(), dynamic -> {
@@ -248,7 +250,7 @@ extends DataFix {
             if (!Objects.equals(schema.getType(References.BLOCK_STATE), this.blockStateType)) {
                 throw new IllegalStateException("Block state type is not what was expected.");
             }
-            Optional optional = typed.getOptional(this.paletteFinder);
+            Optional<List<Pair<String, Dynamic<?>>>> optional = typed.getOptional(this.paletteFinder); // MagmaCube - type
             this.palette = optional.map(list -> list.stream().map(Pair::getSecond).collect(Collectors.toList())).orElse((List)ImmutableList.of());
             Dynamic dynamic = (Dynamic)typed.get(DSL.remainderFinder());
             this.index = dynamic.get("Y").asInt(0);
@@ -269,7 +271,8 @@ extends DataFix {
             if (this.isSkippable()) {
                 return typed;
             }
-            return typed.update(DSL.remainderFinder(), dynamic -> dynamic.set("BlockStates", dynamic.createLongList(Arrays.stream(this.storage.getRaw())))).set(this.paletteFinder, this.palette.stream().map(dynamic -> Pair.of(References.BLOCK_STATE.typeName(), dynamic)).collect(Collectors.toList()));
+            // MagmaCube - decompile error
+            return typed.update(DSL.remainderFinder(), dynamic -> dynamic.set("BlockStates", dynamic.createLongList(Arrays.stream(this.storage.getRaw())))).set(this.paletteFinder, (List) this.palette.stream().map(dynamic -> Pair.of(References.BLOCK_STATE.typeName(), dynamic)).collect(Collectors.toList()));
         }
 
         public boolean isSkippable() {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/PoiTypeRename.java b/src/main/java/net/minecraft/util/datafix/fixes/PoiTypeRename.java
index 98273210351e17440f4b5fb8373ddd536dcd48bd..260260f5cb8fb11bcf353d77abb7a36e864cf43e 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/PoiTypeRename.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/PoiTypeRename.java
@@ -25,15 +25,15 @@ public abstract class PoiTypeRename extends DataFix
         if (!Objects.equals(type, this.getInputSchema().getType(References.POI_CHUNK))) {
             throw new IllegalStateException("Poi type is not what was expected.");
         }
-        return this.fixTypeEverywhere("POI rename", (Type)type, dynamicOps -> pair -> pair.mapSecond((Function)this::cap));
+        return this.fixTypeEverywhere("POI rename", type, dynamicOps -> pair -> pair.mapSecond(this::cap)); // MagmaCube - decompile error
     }
     
     private <T> Dynamic<T> cap(final Dynamic<T> dynamic) {
-        return (Dynamic<T>)dynamic.update("Sections", dynamic -> dynamic.updateMapValues(pair -> pair.mapSecond(dynamic -> dynamic.update("Records", dynamic -> (Dynamic)DataFixUtils.orElse((Optional)this.renameRecords(dynamic), dynamic)))));
+        return (Dynamic<T>)dynamic.update("Sections", dynamic1 -> dynamic1.updateMapValues(pair -> pair.mapSecond(dynamic2 -> dynamic2.update("Records", dynamic4 -> DataFixUtils.orElse(this.renameRecords(dynamic4), dynamic4))))); // MagmaCube - decompile error
     }
     
     private <T> Optional<Dynamic<T>> renameRecords(final Dynamic<T> dynamic) {
-        return (Optional<Dynamic<T>>)dynamic.asStreamOpt().map(stream -> dynamic.createList((Stream)stream.map(dynamic -> dynamic.update("type", dynamic -> (Dynamic)DataFixUtils.orElse(((Dynamic)dynamic).asString().map((Function)this::rename).map((Function)dynamic::createString).result(), dynamic))))).result();
+        return (Optional<Dynamic<T>>)dynamic.asStreamOpt().map(stream -> dynamic.createList(stream.map(dynamic1 -> dynamic1.update("type", dynamic2 -> DataFixUtils.orElse(dynamic2.asString().map(this::rename).map(dynamic2::createString).result(), dynamic2))))).result(); // MagmaCube - decompile error
     }
     
     protected abstract String rename(final String p0);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/SwimStatsRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/SwimStatsRenameFix.java
index dcc3148004211cd5ada3d2415cf9a512a6788f07..0348249d8126e6f00b3f6283dfeae63946cf2820 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/SwimStatsRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/SwimStatsRenameFix.java
@@ -1,6 +1,5 @@
 package net.minecraft.util.datafix.fixes;
 
-import com.mojang.datafixers.Typed;
 import com.mojang.datafixers.types.Type;
 import com.mojang.datafixers.OpticFinder;
 import net.minecraft.util.datafix.schemas.NamespacedSchema;
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V704.java b/src/main/java/net/minecraft/util/datafix/schemas/V704.java
index 0d3acf9bc0c6c09c47b57edf24c4051832ac68c3..f8b68e2c14c307b3ad97481da5f9fed3f91ceb0c 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V704.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V704.java
@@ -36,7 +36,7 @@ public class V704 extends Schema
     }
     
     public Map<String, Supplier<TypeTemplate>> registerBlockEntities(final Schema schema) {
-        final Map<String, Supplier<TypeTemplate>> map = (Map<String, Supplier<TypeTemplate>>)Maps.newHashMap();
+        final Map<String, Supplier<TypeTemplate>> map = Maps.newHashMap(); // MagmaCube - decompile error
         registerInventory(schema, map, "minecraft:furnace");
         registerInventory(schema, map, "minecraft:chest");
         schema.registerSimple((Map)map, "minecraft:ender_chest");
diff --git a/src/main/java/net/minecraft/util/profiling/ActiveProfiler.java b/src/main/java/net/minecraft/util/profiling/ActiveProfiler.java
index 6fee7c4fed71de44ed37dae5c4c4f57a5894ccfd..409e89f8e4b202c4a2e97c4d0d734bf7c211ec85 100644
--- a/src/main/java/net/minecraft/util/profiling/ActiveProfiler.java
+++ b/src/main/java/net/minecraft/util/profiling/ActiveProfiler.java
@@ -36,9 +36,9 @@ public class ActiveProfiler implements ProfileCollector
     private final boolean warn;
     
     public ActiveProfiler(final LongSupplier longSupplier, final IntSupplier intSupplier, final boolean flag) {
-        this.paths = (List<String>)Lists.newArrayList();
+        this.paths = Lists.newArrayList(); // MagmaCube - decompile error
         this.startTimes = (LongList)new LongArrayList();
-        this.entries = (Map<String, PathEntry>)Maps.newHashMap();
+        this.entries = Maps.newHashMap(); // MagmaCube - decompile error
         this.path = "";
         this.startTimeNano = longSupplier.getAsLong();
         this.getRealTime = longSupplier;
diff --git a/src/main/java/net/minecraft/util/profiling/ProfileResults.java b/src/main/java/net/minecraft/util/profiling/ProfileResults.java
index 5b396de71dc27178f7a6763bddf948f40e36f0f8..2e2449839270bdc820482800fed1ba51343766e5 100644
--- a/src/main/java/net/minecraft/util/profiling/ProfileResults.java
+++ b/src/main/java/net/minecraft/util/profiling/ProfileResults.java
@@ -25,7 +25,7 @@ public interface ProfileResults
         return this.getEndTimeTicks() - this.getStartTimeTicks();
     }
     
-    default String demanglePath(final String s) {
+    static String demanglePath(final String s) { // MagmaCube - decompile error (default -> static)
         return s.replace('\u001e', '.');
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/profiling/ProfilerFiller.java b/src/main/java/net/minecraft/util/profiling/ProfilerFiller.java
index da029143bf534766866d7d54337ee4e6c6543e87..8fdd95349ac796fa7528bbb8257ad84cdf8cc54c 100644
--- a/src/main/java/net/minecraft/util/profiling/ProfilerFiller.java
+++ b/src/main/java/net/minecraft/util/profiling/ProfilerFiller.java
@@ -22,7 +22,8 @@ public interface ProfilerFiller
     
     void incrementCounter(final Supplier<String> p0);
     
-    default ProfilerFiller tee(final ProfilerFiller profilerFiller, final ProfilerFiller profilerFiller2) {
+    // MagmaCube - default -> static
+    static ProfilerFiller tee(final ProfilerFiller profilerFiller, final ProfilerFiller profilerFiller2) {
         if (profilerFiller == InactiveProfiler.INSTANCE) {
             return profilerFiller2;
         }
diff --git a/src/main/java/net/minecraft/util/profiling/SingleTickProfiler.java b/src/main/java/net/minecraft/util/profiling/SingleTickProfiler.java
index 71715b20ac327c7fd5b003346d89b84082caf13c..bd0acbceb9d156e83b8dba36a30209c4cc0d790a 100644
--- a/src/main/java/net/minecraft/util/profiling/SingleTickProfiler.java
+++ b/src/main/java/net/minecraft/util/profiling/SingleTickProfiler.java
@@ -1,5 +1,6 @@
 package net.minecraft.util.profiling;
 
+import net.minecraft.Util;
 import org.apache.logging.log4j.LogManager;
 import javax.annotation.Nullable;
 import java.util.Date;
@@ -11,10 +12,10 @@ import org.apache.logging.log4j.Logger;
 public class SingleTickProfiler
 {
     private static final Logger LOGGER;
-    private final LongSupplier realTime;
-    private final long saveThreshold;
+    private final LongSupplier realTime = null;
+    private final long saveThreshold = 0L;
     private int tick;
-    private final File location;
+    private final File location = null;
     private ProfileCollector profiler;
     
     public ProfilerFiller startTick() {
diff --git a/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java b/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
index 37f5ef671b535706aa1b93f1c3e0c5918e44cc45..4f9dac4e3f0db7d1c7a13072a0eb0ed01c4ef930 100644
--- a/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
+++ b/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
@@ -18,7 +18,7 @@ public abstract class BlockableEventLoop<R extends Runnable> implements Processo
     private int blockingCount;
     
     protected BlockableEventLoop(final String s) {
-        this.pendingRunnables = (Queue<R>)Queues.newConcurrentLinkedQueue();
+        this.pendingRunnables = Queues.newConcurrentLinkedQueue(); // MagmaCube - decompile error
         this.name = s;
     }
     
diff --git a/src/main/java/net/minecraft/util/thread/ProcessorHandle.java b/src/main/java/net/minecraft/util/thread/ProcessorHandle.java
index d691c15d9b362dec0aeebb3f43c1ea8e4ac41713..2835ea9023d55adb0fff77a1831150a6ffdac34b 100644
--- a/src/main/java/net/minecraft/util/thread/ProcessorHandle.java
+++ b/src/main/java/net/minecraft/util/thread/ProcessorHandle.java
@@ -23,17 +23,18 @@ public interface ProcessorHandle<Msg> extends AutoCloseable
     
     default <Source> CompletableFuture<Source> askEither(final Function<? super ProcessorHandle<Either<Source, Exception>>, ? extends Msg> function) {
         final CompletableFuture<Source> completableFuture = new CompletableFuture<Source>();
-        final CompletableFuture<Object> completableFuture2;
         final Msg object = (Msg)function.apply(of("ask future procesor handle", either -> {
-            either.ifLeft((Consumer)completableFuture2::complete);
-            either.ifRight((Consumer)completableFuture2::completeExceptionally);
+            // MagmaCube start - decompile error
+            either.ifLeft(completableFuture::complete);
+            either.ifRight(completableFuture::completeExceptionally);
+            // MagmaCube end - decompile error
             return;
         }));
         this.tell(object);
         return completableFuture;
     }
     
-    default <Msg> ProcessorHandle<Msg> of(final String s, final Consumer<Msg> consumer) {
+    static <Msg> ProcessorHandle<Msg> of(final String s, final Consumer<Msg> consumer) { // MagmaCube - default -> static
         return new ProcessorHandle<Msg>() {
             @Override
             public String name() {
diff --git a/src/main/java/net/minecraft/util/thread/StrictQueue.java b/src/main/java/net/minecraft/util/thread/StrictQueue.java
index 720c07ef94b5365ffd0798a9dbc7cf9fbf4df8fd..f997b00fc69854d9dfdd98c78b7e2651d53dd293 100644
--- a/src/main/java/net/minecraft/util/thread/StrictQueue.java
+++ b/src/main/java/net/minecraft/util/thread/StrictQueue.java
@@ -21,7 +21,7 @@ public interface StrictQueue<T, F> {
         private final List<Queue<Runnable>> queueList;
 
         public FixedPriorityQueue(int i2) {
-            this.queueList = IntStream.range(0, i2).mapToObj(i -> Queues.newConcurrentLinkedQueue()).collect(Collectors.toList());
+            this.queueList = IntStream.range(0, i2).mapToObj(i -> (Queue<Runnable>) Queues.<Runnable>newConcurrentLinkedQueue()).collect(Collectors.toList()); // MagmaCube - decompile error
         }
 
         @Override
@@ -46,12 +46,6 @@ public interface StrictQueue<T, F> {
         public boolean isEmpty() {
             return this.queueList.stream().allMatch(Collection::isEmpty);
         }
-
-        @Override
-        @Nullable
-        public /* synthetic */ Object pop() {
-            return this.pop();
-        }
     }
 
     public static final class IntRunnable
diff --git a/src/main/java/net/minecraft/world/Snooper.java b/src/main/java/net/minecraft/world/Snooper.java
index 9b5cc4f687c579af5b9e55320c70e3b7f37760d7..522e2cfff4848752029574422294e8ef6bca3980 100644
--- a/src/main/java/net/minecraft/world/Snooper.java
+++ b/src/main/java/net/minecraft/world/Snooper.java
@@ -20,8 +20,10 @@ public class Snooper
     private boolean started;
     
     public Snooper(final String s, final SnooperPopulator snooperPopulator, final long l) {
-        this.fixedData = (Map<String, Object>)Maps.newHashMap();
-        this.dynamicData = (Map<String, Object>)Maps.newHashMap();
+        // MagmaCube start - decompile error
+        this.fixedData = Maps.newHashMap();
+        this.dynamicData = Maps.newHashMap();
+        // MagmaCube end - decompile error
         this.token = UUID.randomUUID().toString();
         this.timer = new Timer("Snooper Timer", true);
         this.lock = new Object();
diff --git a/src/main/java/net/minecraft/world/damagesource/BadRespawnPointDamage.java b/src/main/java/net/minecraft/world/damagesource/BadRespawnPointDamage.java
index 6e2ea669a7f68ebec2d61163ae6f0d9e11a52ff5..3bde60027aa1fc2490f81d8f89fff063b99c52e0 100644
--- a/src/main/java/net/minecraft/world/damagesource/BadRespawnPointDamage.java
+++ b/src/main/java/net/minecraft/world/damagesource/BadRespawnPointDamage.java
@@ -19,11 +19,11 @@ public class BadRespawnPointDamage extends DamageSource
     
     @Override
     public Component getLocalizedDeathMessage(final LivingEntity livingEntity) {
-        final HoverEvent hoverEvent;
-        final Style style2;
         final Component component = ComponentUtils.wrapInSquareBrackets(new TranslatableComponent("death.attack.badRespawnPoint.link")).withStyle(style -> {
-            style.withClickEvent(new ClickEvent(ClickEvent.Action.OPEN_URL, "https://bugs.mojang.com/browse/MCPE-28723"));
-            new HoverEvent((HoverEvent.Action<TextComponent>)HoverEvent.Action.SHOW_TEXT, new TextComponent("MCPE-28723"));
+            // MagmaCube start - decompile error
+            Style style2 = style.withClickEvent(new ClickEvent(ClickEvent.Action.OPEN_URL, "https://bugs.mojang.com/browse/MCPE-28723"));
+            HoverEvent hoverEvent = new HoverEvent(HoverEvent.Action.SHOW_TEXT, new TextComponent("MCPE-28723")); // MagmaCube - decompile error
+            // MagmaCube end - decompile error
             return style2.withHoverEvent(hoverEvent);
         });
         return new TranslatableComponent("death.attack.badRespawnPoint.message", new Object[] { livingEntity.getDisplayName(), component });
diff --git a/src/main/java/net/minecraft/world/damagesource/CombatTracker.java b/src/main/java/net/minecraft/world/damagesource/CombatTracker.java
index 43e99028c3ba7325a0f0bc402d6d500988eb44f7..745722ab6c981bd2404d4183d0ef13756d39caa9 100644
--- a/src/main/java/net/minecraft/world/damagesource/CombatTracker.java
+++ b/src/main/java/net/minecraft/world/damagesource/CombatTracker.java
@@ -30,7 +30,7 @@ public class CombatTracker
     private String nextLocation;
     
     public CombatTracker(final LivingEntity livingEntity) {
-        this.entries = (List<CombatEntry>)Lists.newArrayList();
+        this.entries = Lists.newArrayList(); // MagmaCube - decompile error
         this.mob = livingEntity;
     }
     
@@ -90,29 +90,29 @@ public class CombatTracker
         if (combatEntry != null && combatEntry2.getSource() == DamageSource.FALL) {
             final Component component2 = combatEntry.getAttackerName();
             if (combatEntry.getSource() == DamageSource.FALL || combatEntry.getSource() == DamageSource.OUT_OF_WORLD) {
-                final Component component3 = new TranslatableComponent("death.fell.accident." + this.getFallLocation(combatEntry), new Object[] { this.mob.getDisplayName() });
+                component9 = new TranslatableComponent("death.fell.accident." + this.getFallLocation(combatEntry), new Object[] { this.mob.getDisplayName() }); // MagmaCube - decompile error
             }
             else if (component2 != null && (component == null || !component2.equals(component))) {
                 final Entity entity2 = combatEntry.getSource().getEntity();
                 final ItemStack itemStack = (entity2 instanceof LivingEntity) ? ((LivingEntity)entity2).getMainHandItem() : ItemStack.EMPTY;
                 if (!itemStack.isEmpty() && itemStack.hasCustomHoverName()) {
-                    final Component component4 = new TranslatableComponent("death.fell.assist.item", new Object[] { this.mob.getDisplayName(), component2, itemStack.getDisplayName() });
+                    component9 = new TranslatableComponent("death.fell.assist.item", new Object[] { this.mob.getDisplayName(), component2, itemStack.getDisplayName() }); // MagmaCube - decompile error
                 }
                 else {
-                    final Component component5 = new TranslatableComponent("death.fell.assist", new Object[] { this.mob.getDisplayName(), component2 });
+                    component9 = new TranslatableComponent("death.fell.assist", new Object[] { this.mob.getDisplayName(), component2 }); // MagmaCube - decompile error
                 }
             }
             else if (component != null) {
                 final ItemStack itemStack2 = (entity instanceof LivingEntity) ? ((LivingEntity)entity).getMainHandItem() : ItemStack.EMPTY;
                 if (!itemStack2.isEmpty() && itemStack2.hasCustomHoverName()) {
-                    final Component component6 = new TranslatableComponent("death.fell.finish.item", new Object[] { this.mob.getDisplayName(), component, itemStack2.getDisplayName() });
+                    component9 = new TranslatableComponent("death.fell.finish.item", new Object[] { this.mob.getDisplayName(), component, itemStack2.getDisplayName() }); // MagmaCube - decompile error
                 }
                 else {
-                    final Component component7 = new TranslatableComponent("death.fell.finish", new Object[] { this.mob.getDisplayName(), component });
+                    component9 = new TranslatableComponent("death.fell.finish", new Object[] { this.mob.getDisplayName(), component }); // MagmaCube - decompile error
                 }
             }
             else {
-                final Component component8 = new TranslatableComponent("death.fell.killer", new Object[] { this.mob.getDisplayName() });
+                component9 = new TranslatableComponent("death.fell.killer", new Object[] { this.mob.getDisplayName() }); // MagmaCube - decompile error
             }
         }
         else {
diff --git a/src/main/java/net/minecraft/world/effect/MobEffect.java b/src/main/java/net/minecraft/world/effect/MobEffect.java
index e58a906c0dcdd5bf689b9bfbdb46d2e8202125c1..ea5a50965ce57b1730342ff6e889239d474025c2 100644
--- a/src/main/java/net/minecraft/world/effect/MobEffect.java
+++ b/src/main/java/net/minecraft/world/effect/MobEffect.java
@@ -36,7 +36,7 @@ public class MobEffect
     }
     
     protected MobEffect(final MobEffectCategory mobEffectCategory, final int i) {
-        this.attributeModifiers = (Map<Attribute, AttributeModifier>)Maps.newHashMap();
+        this.attributeModifiers = Maps.newHashMap(); // MagmaCube - decompile error
         this.category = mobEffectCategory;
         this.color = i;
     }
diff --git a/src/main/java/net/minecraft/world/entity/AgableMob.java b/src/main/java/net/minecraft/world/entity/AgableMob.java
index dd7e6c0ae0b0fa9c171f86094dcc01d65a9f11fa..6811ddad36682f8b0afa2ed81fcb884ce070b27a 100644
--- a/src/main/java/net/minecraft/world/entity/AgableMob.java
+++ b/src/main/java/net/minecraft/world/entity/AgableMob.java
@@ -2,7 +2,6 @@ package net.minecraft.world.entity;
 
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.network.syncher.EntityDataSerializers;
-import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.nbt.CompoundTag;
diff --git a/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java b/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
index 498d68ed3c01c3dde6a39108a5d29afe4e397fbb..1c6c79e968a9233c37a68cbeba00da84f27e3744 100644
--- a/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
+++ b/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
@@ -57,8 +57,10 @@ public class AreaEffectCloud extends Entity
     public AreaEffectCloud(final EntityType<? extends AreaEffectCloud> entityType, final Level level) {
         super(entityType, level);
         this.potion = Potions.EMPTY;
-        this.effects = (List<MobEffectInstance>)Lists.newArrayList();
-        this.victims = (Map<Entity, Integer>)Maps.newHashMap();
+        // MagmaCube start - decompile error
+        this.effects = Lists.newArrayList();
+        this.victims = Maps.newHashMap();
+        // MagmaCube end - decompile error
         this.duration = 600;
         this.waitTime = 20;
         this.reapplicationDelay = 20;
@@ -229,7 +231,7 @@ public class AreaEffectCloud extends Entity
                         iterator.remove();
                     }
                 }
-                final List<MobEffectInstance> list = (List<MobEffectInstance>)Lists.newArrayList();
+                final List<MobEffectInstance> list = Lists.newArrayList(); // MagmaCube - decompile error
                 for (final MobEffectInstance mobEffectInstance : this.potion.getEffects()) {
                     list.add(new MobEffectInstance(mobEffectInstance.getEffect(), mobEffectInstance.getDuration() / 4, mobEffectInstance.getAmplifier(), mobEffectInstance.isAmbient(), mobEffectInstance.isVisible()));
                 }
@@ -375,7 +377,7 @@ public class AreaEffectCloud extends Entity
         if (!this.effects.isEmpty()) {
             final ListTag listTag = new ListTag();
             for (final MobEffectInstance mobEffectInstance : this.effects) {
-                ((AbstractList<CompoundTag>)listTag).add(mobEffectInstance.save(new CompoundTag()));
+                listTag.add(mobEffectInstance.save(new CompoundTag())); // MagmaCube - decompile error
             }
             compoundTag.put("Effects", listTag);
         }
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 5f4d7e1c3f016823ef74e3553b7b2f501230de12..bc53e8d57123ee3775ac5df98d9708226371527c 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -651,7 +651,7 @@ CommandSource {
         AABB aabb = this.getBoundingBox();
         CollisionContext collisionContext = CollisionContext.of(this);
         VoxelShape voxelShape = this.level.getWorldBorder().getCollisionShape();
-        Stream<Object> stream = Shapes.joinIsNotEmpty(voxelShape, Shapes.create(aabb.deflate(1.0E-7)), BooleanOp.AND) ? Stream.empty() : Stream.of(voxelShape);
+        Stream<VoxelShape> stream = Shapes.joinIsNotEmpty(voxelShape, Shapes.create(aabb.deflate(1.0E-7)), BooleanOp.AND) ? Stream.empty() : Stream.of(voxelShape); // MagmaCube - type
         Stream<VoxelShape> stream2 = this.level.getEntityCollisions(this, aabb.expandTowards(vec3), entity -> true);
         RewindableStream<VoxelShape> rewindableStream = new RewindableStream<VoxelShape>(Stream.concat(stream2, stream));
         Vec3 vec32 = vec3.lengthSqr() == 0.0 ? vec3 : Entity.collideBoundingBoxHeuristically(this, vec3, aabb, this.level, collisionContext, rewindableStream);
@@ -1839,7 +1839,7 @@ CommandSource {
         double d2;
         Vec3 vec3 = this.getDeltaMovement();
         if (flag) {
-            double d = Math.max(-0.9, vec3.y - 0.03);
+            d2 = Math.max(-0.9, vec3.y - 0.03); // MagmaCube - decompile error
         } else {
             d2 = Math.min(1.8, vec3.y + 0.1);
         }
@@ -1850,7 +1850,7 @@ CommandSource {
         double d2;
         Vec3 vec3 = this.getDeltaMovement();
         if (flag) {
-            double d = Math.max(-0.3, vec3.y - 0.03);
+            d2 = Math.max(-0.3, vec3.y - 0.03); // MagmaCube - decompile error
         } else {
             d2 = Math.min(0.7, vec3.y + 0.06);
         }
@@ -1978,7 +1978,7 @@ CommandSource {
             return null;
         }
         this.level.getProfiler().popPush("reloading");
-        Object entity = this.getType().create(serverLevel);
+        Entity entity = this.getType().create(serverLevel); // MagmaCube - type
         if (entity != null) {
             ((Entity)entity).restoreFrom(this);
             ((Entity)entity).moveTo(portalInfo.pos.x, portalInfo.pos.y, portalInfo.pos.z, portalInfo.yRot, ((Entity)entity).xRot);
@@ -2009,7 +2009,7 @@ CommandSource {
         if (flag || flag2) {
             BlockPos blockPos2;
             if (flag2) {
-                BlockPos blockPos = ServerLevel.END_SPAWN_POINT;
+                blockPos2 = ServerLevel.END_SPAWN_POINT; // MagmaCube - decompile error
             } else {
                 blockPos2 = serverLevel.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, serverLevel.getSharedSpawnPos());
             }
@@ -2031,9 +2031,11 @@ CommandSource {
             Direction.Axis axis2;
             BlockState blockState = this.level.getBlockState(this.portalEntrancePos);
             if (blockState.hasProperty(BlockStateProperties.HORIZONTAL_AXIS)) {
-                Direction.Axis axis = blockState.getValue(BlockStateProperties.HORIZONTAL_AXIS);
-                BlockUtil.FoundRectangle foundRectangle2 = BlockUtil.getLargestRectangleAround(this.portalEntrancePos, axis, 21, Direction.Axis.Y, 21, blockPos -> this.level.getBlockState((BlockPos)blockPos) == blockState);
-                Vec3 vec3 = this.getRelativePortalPosition(axis, foundRectangle2);
+                // MagmaCube start - decompile error
+                axis2 = blockState.getValue(BlockStateProperties.HORIZONTAL_AXIS);
+                BlockUtil.FoundRectangle foundRectangle2 = BlockUtil.getLargestRectangleAround(this.portalEntrancePos, axis2, 21, Direction.Axis.Y, 21, blockPos -> this.level.getBlockState((BlockPos)blockPos) == blockState);
+                vec32 = this.getRelativePortalPosition(axis2, foundRectangle2);
+                // MagmaCube end - decompile error
             } else {
                 axis2 = Direction.Axis.X;
                 vec32 = new Vec3(0.5, 0.0, 0.0);
diff --git a/src/main/java/net/minecraft/world/entity/EntityType.java b/src/main/java/net/minecraft/world/entity/EntityType.java
index a2264f8c99871b5f020c02a9a771a9d4d57522a5..68314927f2169532aa149bb3bb81d2b39c007ad0 100644
--- a/src/main/java/net/minecraft/world/entity/EntityType.java
+++ b/src/main/java/net/minecraft/world/entity/EntityType.java
@@ -150,13 +150,14 @@ import org.apache.logging.log4j.Logger;
 
 public class EntityType<T extends Entity> {
     private static final Logger LOGGER = LogManager.getLogger();
-    public static final EntityType<AreaEffectCloud> AREA_EFFECT_CLOUD = EntityType.register("area_effect_cloud", Builder.of(AreaEffectCloud::new, MobCategory.MISC).fireImmune().sized(6.0f, 0.5f).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
-    public static final EntityType<ArmorStand> ARMOR_STAND = EntityType.register("armor_stand", Builder.of(ArmorStand::new, MobCategory.MISC).sized(0.5f, 1.975f).clientTrackingRange(10));
-    public static final EntityType<Arrow> ARROW = EntityType.register("arrow", Builder.of(Arrow::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(4).updateInterval(20));
+    // MagmaCube start - decompile error
+    public static final EntityType<AreaEffectCloud> AREA_EFFECT_CLOUD = EntityType.register("area_effect_cloud", Builder.of((EntityFactory<AreaEffectCloud>) AreaEffectCloud::new, MobCategory.MISC).fireImmune().sized(6.0f, 0.5f).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
+    public static final EntityType<ArmorStand> ARMOR_STAND = EntityType.register("armor_stand", Builder.of((EntityFactory<ArmorStand>) ArmorStand::new, MobCategory.MISC).sized(0.5f, 1.975f).clientTrackingRange(10));
+    public static final EntityType<Arrow> ARROW = EntityType.register("arrow", Builder.of((EntityFactory<Arrow>) Arrow::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(4).updateInterval(20));
     public static final EntityType<Bat> BAT = EntityType.register("bat", Builder.of(Bat::new, MobCategory.AMBIENT).sized(0.5f, 0.9f).clientTrackingRange(5));
     public static final EntityType<Bee> BEE = EntityType.register("bee", Builder.of(Bee::new, MobCategory.CREATURE).sized(0.7f, 0.6f).clientTrackingRange(8));
     public static final EntityType<Blaze> BLAZE = EntityType.register("blaze", Builder.of(Blaze::new, MobCategory.MONSTER).fireImmune().sized(0.6f, 1.8f).clientTrackingRange(8));
-    public static final EntityType<Boat> BOAT = EntityType.register("boat", Builder.of(Boat::new, MobCategory.MISC).sized(1.375f, 0.5625f).clientTrackingRange(10));
+    public static final EntityType<Boat> BOAT = EntityType.register("boat", Builder.of((EntityFactory<Boat>) Boat::new, MobCategory.MISC).sized(1.375f, 0.5625f).clientTrackingRange(10));
     public static final EntityType<Cat> CAT = EntityType.register("cat", Builder.of(Cat::new, MobCategory.CREATURE).sized(0.6f, 0.7f).clientTrackingRange(8));
     public static final EntityType<CaveSpider> CAVE_SPIDER = EntityType.register("cave_spider", Builder.of(CaveSpider::new, MobCategory.MONSTER).sized(0.7f, 0.5f).clientTrackingRange(8));
     public static final EntityType<Chicken> CHICKEN = EntityType.register("chicken", Builder.of(Chicken::new, MobCategory.CREATURE).sized(0.4f, 0.7f).clientTrackingRange(10));
@@ -165,19 +166,19 @@ public class EntityType<T extends Entity> {
     public static final EntityType<Creeper> CREEPER = EntityType.register("creeper", Builder.of(Creeper::new, MobCategory.MONSTER).sized(0.6f, 1.7f).clientTrackingRange(8));
     public static final EntityType<Dolphin> DOLPHIN = EntityType.register("dolphin", Builder.of(Dolphin::new, MobCategory.WATER_CREATURE).sized(0.9f, 0.6f));
     public static final EntityType<Donkey> DONKEY = EntityType.register("donkey", Builder.of(Donkey::new, MobCategory.CREATURE).sized(1.3964844f, 1.5f).clientTrackingRange(10));
-    public static final EntityType<DragonFireball> DRAGON_FIREBALL = EntityType.register("dragon_fireball", Builder.of(DragonFireball::new, MobCategory.MISC).sized(1.0f, 1.0f).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<DragonFireball> DRAGON_FIREBALL = EntityType.register("dragon_fireball", Builder.of((EntityFactory<DragonFireball>) DragonFireball::new, MobCategory.MISC).sized(1.0f, 1.0f).clientTrackingRange(4).updateInterval(10));
     public static final EntityType<Drowned> DROWNED = EntityType.register("drowned", Builder.of(Drowned::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
     public static final EntityType<ElderGuardian> ELDER_GUARDIAN = EntityType.register("elder_guardian", Builder.of(ElderGuardian::new, MobCategory.MONSTER).sized(1.9975f, 1.9975f).clientTrackingRange(10));
-    public static final EntityType<EndCrystal> END_CRYSTAL = EntityType.register("end_crystal", Builder.of(EndCrystal::new, MobCategory.MISC).sized(2.0f, 2.0f).clientTrackingRange(16).updateInterval(Integer.MAX_VALUE));
+    public static final EntityType<EndCrystal> END_CRYSTAL = EntityType.register("end_crystal", Builder.of((EntityFactory<EndCrystal>) EndCrystal::new, MobCategory.MISC).sized(2.0f, 2.0f).clientTrackingRange(16).updateInterval(Integer.MAX_VALUE));
     public static final EntityType<EnderDragon> ENDER_DRAGON = EntityType.register("ender_dragon", Builder.of(EnderDragon::new, MobCategory.MONSTER).fireImmune().sized(16.0f, 8.0f).clientTrackingRange(10));
     public static final EntityType<EnderMan> ENDERMAN = EntityType.register("enderman", Builder.of(EnderMan::new, MobCategory.MONSTER).sized(0.6f, 2.9f).clientTrackingRange(8));
     public static final EntityType<Endermite> ENDERMITE = EntityType.register("endermite", Builder.of(Endermite::new, MobCategory.MONSTER).sized(0.4f, 0.3f).clientTrackingRange(8));
     public static final EntityType<Evoker> EVOKER = EntityType.register("evoker", Builder.of(Evoker::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
-    public static final EntityType<EvokerFangs> EVOKER_FANGS = EntityType.register("evoker_fangs", Builder.of(EvokerFangs::new, MobCategory.MISC).sized(0.5f, 0.8f).clientTrackingRange(6).updateInterval(2));
-    public static final EntityType<ExperienceOrb> EXPERIENCE_ORB = EntityType.register("experience_orb", Builder.of(ExperienceOrb::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(6).updateInterval(20));
-    public static final EntityType<EyeOfEnder> EYE_OF_ENDER = EntityType.register("eye_of_ender", Builder.of(EyeOfEnder::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(4));
-    public static final EntityType<FallingBlockEntity> FALLING_BLOCK = EntityType.register("falling_block", Builder.of(FallingBlockEntity::new, MobCategory.MISC).sized(0.98f, 0.98f).clientTrackingRange(10).updateInterval(20));
-    public static final EntityType<FireworkRocketEntity> FIREWORK_ROCKET = EntityType.register("firework_rocket", Builder.of(FireworkRocketEntity::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<EvokerFangs> EVOKER_FANGS = EntityType.register("evoker_fangs", Builder.of((EntityFactory<EvokerFangs>) EvokerFangs::new, MobCategory.MISC).sized(0.5f, 0.8f).clientTrackingRange(6).updateInterval(2));
+    public static final EntityType<ExperienceOrb> EXPERIENCE_ORB = EntityType.register("experience_orb", Builder.of((EntityFactory<ExperienceOrb>) ExperienceOrb::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(6).updateInterval(20));
+    public static final EntityType<EyeOfEnder> EYE_OF_ENDER = EntityType.register("eye_of_ender", Builder.of((EntityFactory<EyeOfEnder>) EyeOfEnder::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(4));
+    public static final EntityType<FallingBlockEntity> FALLING_BLOCK = EntityType.register("falling_block", Builder.of((EntityFactory<FallingBlockEntity>) FallingBlockEntity::new, MobCategory.MISC).sized(0.98f, 0.98f).clientTrackingRange(10).updateInterval(20));
+    public static final EntityType<FireworkRocketEntity> FIREWORK_ROCKET = EntityType.register("firework_rocket", Builder.of((EntityFactory<FireworkRocketEntity>) FireworkRocketEntity::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
     public static final EntityType<Fox> FOX = EntityType.register("fox", Builder.of(Fox::new, MobCategory.CREATURE).sized(0.6f, 0.7f).clientTrackingRange(8).immuneTo(Blocks.SWEET_BERRY_BUSH));
     public static final EntityType<Ghast> GHAST = EntityType.register("ghast", Builder.of(Ghast::new, MobCategory.MONSTER).fireImmune().sized(4.0f, 4.0f).clientTrackingRange(10));
     public static final EntityType<Giant> GIANT = EntityType.register("giant", Builder.of(Giant::new, MobCategory.MONSTER).sized(3.6f, 12.0f).clientTrackingRange(10));
@@ -187,25 +188,25 @@ public class EntityType<T extends Entity> {
     public static final EntityType<Husk> HUSK = EntityType.register("husk", Builder.of(Husk::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
     public static final EntityType<Illusioner> ILLUSIONER = EntityType.register("illusioner", Builder.of(Illusioner::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
     public static final EntityType<IronGolem> IRON_GOLEM = EntityType.register("iron_golem", Builder.of(IronGolem::new, MobCategory.MISC).sized(1.4f, 2.7f).clientTrackingRange(10));
-    public static final EntityType<ItemEntity> ITEM = EntityType.register("item", Builder.of(ItemEntity::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(6).updateInterval(20));
-    public static final EntityType<ItemFrame> ITEM_FRAME = EntityType.register("item_frame", Builder.of(ItemFrame::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
-    public static final EntityType<LargeFireball> FIREBALL = EntityType.register("fireball", Builder.of(LargeFireball::new, MobCategory.MISC).sized(1.0f, 1.0f).clientTrackingRange(4).updateInterval(10));
-    public static final EntityType<LeashFenceKnotEntity> LEASH_KNOT = EntityType.register("leash_knot", Builder.of(LeashFenceKnotEntity::new, MobCategory.MISC).noSave().sized(0.5f, 0.5f).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
+    public static final EntityType<ItemEntity> ITEM = EntityType.register("item", Builder.of((EntityFactory<ItemEntity>) ItemEntity::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(6).updateInterval(20));
+    public static final EntityType<ItemFrame> ITEM_FRAME = EntityType.register("item_frame", Builder.of((EntityFactory<ItemFrame>) ItemFrame::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
+    public static final EntityType<LargeFireball> FIREBALL = EntityType.register("fireball", Builder.of((EntityFactory<LargeFireball>) LargeFireball::new, MobCategory.MISC).sized(1.0f, 1.0f).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<LeashFenceKnotEntity> LEASH_KNOT = EntityType.register("leash_knot", Builder.of((EntityFactory<LeashFenceKnotEntity>) LeashFenceKnotEntity::new, MobCategory.MISC).noSave().sized(0.5f, 0.5f).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
     public static final EntityType<LightningBolt> LIGHTNING_BOLT = EntityType.register("lightning_bolt", Builder.of(LightningBolt::new, MobCategory.MISC).noSave().sized(0.0f, 0.0f).clientTrackingRange(16).updateInterval(Integer.MAX_VALUE));
     public static final EntityType<Llama> LLAMA = EntityType.register("llama", Builder.of(Llama::new, MobCategory.CREATURE).sized(0.9f, 1.87f).clientTrackingRange(10));
-    public static final EntityType<LlamaSpit> LLAMA_SPIT = EntityType.register("llama_spit", Builder.of(LlamaSpit::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<LlamaSpit> LLAMA_SPIT = EntityType.register("llama_spit", Builder.of((EntityFactory<LlamaSpit>) LlamaSpit::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
     public static final EntityType<MagmaCube> MAGMA_CUBE = EntityType.register("magma_cube", Builder.of(MagmaCube::new, MobCategory.MONSTER).fireImmune().sized(2.04f, 2.04f).clientTrackingRange(8));
-    public static final EntityType<Minecart> MINECART = EntityType.register("minecart", Builder.of(Minecart::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
-    public static final EntityType<MinecartChest> CHEST_MINECART = EntityType.register("chest_minecart", Builder.of(MinecartChest::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
-    public static final EntityType<MinecartCommandBlock> COMMAND_BLOCK_MINECART = EntityType.register("command_block_minecart", Builder.of(MinecartCommandBlock::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
-    public static final EntityType<MinecartFurnace> FURNACE_MINECART = EntityType.register("furnace_minecart", Builder.of(MinecartFurnace::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
-    public static final EntityType<MinecartHopper> HOPPER_MINECART = EntityType.register("hopper_minecart", Builder.of(MinecartHopper::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
-    public static final EntityType<MinecartSpawner> SPAWNER_MINECART = EntityType.register("spawner_minecart", Builder.of(MinecartSpawner::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
-    public static final EntityType<MinecartTNT> TNT_MINECART = EntityType.register("tnt_minecart", Builder.of(MinecartTNT::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
+    public static final EntityType<Minecart> MINECART = (EntityType) EntityType.register("minecart", Builder.of(Minecart::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
+    public static final EntityType<MinecartChest> CHEST_MINECART = EntityType.register("chest_minecart", Builder.of((EntityFactory<MinecartChest>) MinecartChest::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
+    public static final EntityType<MinecartCommandBlock> COMMAND_BLOCK_MINECART = EntityType.register("command_block_minecart", Builder.of((EntityFactory<MinecartCommandBlock>) MinecartCommandBlock::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
+    public static final EntityType<MinecartFurnace> FURNACE_MINECART = EntityType.register("furnace_minecart", Builder.of((EntityFactory<MinecartFurnace>) MinecartFurnace::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
+    public static final EntityType<MinecartHopper> HOPPER_MINECART = EntityType.register("hopper_minecart", Builder.of((EntityFactory<MinecartHopper>) MinecartHopper::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
+    public static final EntityType<MinecartSpawner> SPAWNER_MINECART = EntityType.register("spawner_minecart", Builder.of((EntityFactory<MinecartSpawner>) MinecartSpawner::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
+    public static final EntityType<MinecartTNT> TNT_MINECART = EntityType.register("tnt_minecart", Builder.of((EntityFactory<MinecartTNT>) MinecartTNT::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
     public static final EntityType<Mule> MULE = EntityType.register("mule", Builder.of(Mule::new, MobCategory.CREATURE).sized(1.3964844f, 1.6f).clientTrackingRange(8));
     public static final EntityType<MushroomCow> MOOSHROOM = EntityType.register("mooshroom", Builder.of(MushroomCow::new, MobCategory.CREATURE).sized(0.9f, 1.4f).clientTrackingRange(10));
     public static final EntityType<Ocelot> OCELOT = EntityType.register("ocelot", Builder.of(Ocelot::new, MobCategory.CREATURE).sized(0.6f, 0.7f).clientTrackingRange(10));
-    public static final EntityType<Painting> PAINTING = EntityType.register("painting", Builder.of(Painting::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
+    public static final EntityType<Painting> PAINTING = EntityType.register("painting", Builder.of((EntityFactory<Painting>) Painting::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
     public static final EntityType<Panda> PANDA = EntityType.register("panda", Builder.of(Panda::new, MobCategory.CREATURE).sized(1.3f, 1.25f).clientTrackingRange(10));
     public static final EntityType<Parrot> PARROT = EntityType.register("parrot", Builder.of(Parrot::new, MobCategory.CREATURE).sized(0.5f, 0.9f).clientTrackingRange(8));
     public static final EntityType<Phantom> PHANTOM = EntityType.register("phantom", Builder.of(Phantom::new, MobCategory.MONSTER).sized(0.9f, 0.5f).clientTrackingRange(8));
@@ -214,50 +215,51 @@ public class EntityType<T extends Entity> {
     public static final EntityType<PiglinBrute> PIGLIN_BRUTE = EntityType.register("piglin_brute", Builder.of(PiglinBrute::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
     public static final EntityType<Pillager> PILLAGER = EntityType.register("pillager", Builder.of(Pillager::new, MobCategory.MONSTER).canSpawnFarFromPlayer().sized(0.6f, 1.95f).clientTrackingRange(8));
     public static final EntityType<PolarBear> POLAR_BEAR = EntityType.register("polar_bear", Builder.of(PolarBear::new, MobCategory.CREATURE).sized(1.4f, 1.4f).clientTrackingRange(10));
-    public static final EntityType<PrimedTnt> TNT = EntityType.register("tnt", Builder.of(PrimedTnt::new, MobCategory.MISC).fireImmune().sized(0.98f, 0.98f).clientTrackingRange(10).updateInterval(10));
+    public static final EntityType<PrimedTnt> TNT = EntityType.register("tnt", Builder.of((EntityFactory<PrimedTnt>) PrimedTnt::new, MobCategory.MISC).fireImmune().sized(0.98f, 0.98f).clientTrackingRange(10).updateInterval(10));
     public static final EntityType<Pufferfish> PUFFERFISH = EntityType.register("pufferfish", Builder.of(Pufferfish::new, MobCategory.WATER_AMBIENT).sized(0.7f, 0.7f).clientTrackingRange(4));
     public static final EntityType<Rabbit> RABBIT = EntityType.register("rabbit", Builder.of(Rabbit::new, MobCategory.CREATURE).sized(0.4f, 0.5f).clientTrackingRange(8));
     public static final EntityType<Ravager> RAVAGER = EntityType.register("ravager", Builder.of(Ravager::new, MobCategory.MONSTER).sized(1.95f, 2.2f).clientTrackingRange(10));
     public static final EntityType<Salmon> SALMON = EntityType.register("salmon", Builder.of(Salmon::new, MobCategory.WATER_AMBIENT).sized(0.7f, 0.4f).clientTrackingRange(4));
     public static final EntityType<Sheep> SHEEP = EntityType.register("sheep", Builder.of(Sheep::new, MobCategory.CREATURE).sized(0.9f, 1.3f).clientTrackingRange(10));
     public static final EntityType<Shulker> SHULKER = EntityType.register("shulker", Builder.of(Shulker::new, MobCategory.MONSTER).fireImmune().canSpawnFarFromPlayer().sized(1.0f, 1.0f).clientTrackingRange(10));
-    public static final EntityType<ShulkerBullet> SHULKER_BULLET = EntityType.register("shulker_bullet", Builder.of(ShulkerBullet::new, MobCategory.MISC).sized(0.3125f, 0.3125f).clientTrackingRange(8));
+    public static final EntityType<ShulkerBullet> SHULKER_BULLET = EntityType.register("shulker_bullet", Builder.of((EntityFactory<ShulkerBullet>) ShulkerBullet::new, MobCategory.MISC).sized(0.3125f, 0.3125f).clientTrackingRange(8));
     public static final EntityType<Silverfish> SILVERFISH = EntityType.register("silverfish", Builder.of(Silverfish::new, MobCategory.MONSTER).sized(0.4f, 0.3f).clientTrackingRange(8));
     public static final EntityType<Skeleton> SKELETON = EntityType.register("skeleton", Builder.of(Skeleton::new, MobCategory.MONSTER).sized(0.6f, 1.99f).clientTrackingRange(8));
     public static final EntityType<SkeletonHorse> SKELETON_HORSE = EntityType.register("skeleton_horse", Builder.of(SkeletonHorse::new, MobCategory.CREATURE).sized(1.3964844f, 1.6f).clientTrackingRange(10));
     public static final EntityType<Slime> SLIME = EntityType.register("slime", Builder.of(Slime::new, MobCategory.MONSTER).sized(2.04f, 2.04f).clientTrackingRange(10));
-    public static final EntityType<SmallFireball> SMALL_FIREBALL = EntityType.register("small_fireball", Builder.of(SmallFireball::new, MobCategory.MISC).sized(0.3125f, 0.3125f).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<SmallFireball> SMALL_FIREBALL = EntityType.register("small_fireball", Builder.of((EntityFactory<SmallFireball>) SmallFireball::new, MobCategory.MISC).sized(0.3125f, 0.3125f).clientTrackingRange(4).updateInterval(10));
     public static final EntityType<SnowGolem> SNOW_GOLEM = EntityType.register("snow_golem", Builder.of(SnowGolem::new, MobCategory.MISC).sized(0.7f, 1.9f).clientTrackingRange(8));
-    public static final EntityType<Snowball> SNOWBALL = EntityType.register("snowball", Builder.of(Snowball::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
-    public static final EntityType<SpectralArrow> SPECTRAL_ARROW = EntityType.register("spectral_arrow", Builder.of(SpectralArrow::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(4).updateInterval(20));
+    public static final EntityType<Snowball> SNOWBALL = EntityType.register("snowball", Builder.of((EntityFactory<Snowball>) Snowball::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<SpectralArrow> SPECTRAL_ARROW = EntityType.register("spectral_arrow", Builder.of((EntityFactory<SpectralArrow>) SpectralArrow::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(4).updateInterval(20));
     public static final EntityType<Spider> SPIDER = EntityType.register("spider", Builder.of(Spider::new, MobCategory.MONSTER).sized(1.4f, 0.9f).clientTrackingRange(8));
     public static final EntityType<Squid> SQUID = EntityType.register("squid", Builder.of(Squid::new, MobCategory.WATER_CREATURE).sized(0.8f, 0.8f).clientTrackingRange(8));
     public static final EntityType<Stray> STRAY = EntityType.register("stray", Builder.of(Stray::new, MobCategory.MONSTER).sized(0.6f, 1.99f).clientTrackingRange(8));
     public static final EntityType<Strider> STRIDER = EntityType.register("strider", Builder.of(Strider::new, MobCategory.CREATURE).fireImmune().sized(0.9f, 1.7f).clientTrackingRange(10));
-    public static final EntityType<ThrownEgg> EGG = EntityType.register("egg", Builder.of(ThrownEgg::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
-    public static final EntityType<ThrownEnderpearl> ENDER_PEARL = EntityType.register("ender_pearl", Builder.of(ThrownEnderpearl::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
-    public static final EntityType<ThrownExperienceBottle> EXPERIENCE_BOTTLE = EntityType.register("experience_bottle", Builder.of(ThrownExperienceBottle::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
-    public static final EntityType<ThrownPotion> POTION = EntityType.register("potion", Builder.of(ThrownPotion::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
-    public static final EntityType<ThrownTrident> TRIDENT = EntityType.register("trident", Builder.of(ThrownTrident::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(4).updateInterval(20));
+    public static final EntityType<ThrownEgg> EGG = EntityType.register("egg", Builder.of((EntityFactory<ThrownEgg>) ThrownEgg::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<ThrownEnderpearl> ENDER_PEARL = EntityType.register("ender_pearl", Builder.of((EntityFactory<ThrownEnderpearl>) ThrownEnderpearl::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<ThrownExperienceBottle> EXPERIENCE_BOTTLE = EntityType.register("experience_bottle", Builder.of((EntityFactory<ThrownExperienceBottle>) ThrownExperienceBottle::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<ThrownPotion> POTION = EntityType.register("potion", Builder.of((EntityFactory<ThrownPotion>) ThrownPotion::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<ThrownTrident> TRIDENT = EntityType.register("trident", Builder.of((EntityFactory<ThrownTrident>) ThrownTrident::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(4).updateInterval(20));
     public static final EntityType<TraderLlama> TRADER_LLAMA = EntityType.register("trader_llama", Builder.of(TraderLlama::new, MobCategory.CREATURE).sized(0.9f, 1.87f).clientTrackingRange(10));
     public static final EntityType<TropicalFish> TROPICAL_FISH = EntityType.register("tropical_fish", Builder.of(TropicalFish::new, MobCategory.WATER_AMBIENT).sized(0.5f, 0.4f).clientTrackingRange(4));
     public static final EntityType<Turtle> TURTLE = EntityType.register("turtle", Builder.of(Turtle::new, MobCategory.CREATURE).sized(1.2f, 0.4f).clientTrackingRange(10));
     public static final EntityType<Vex> VEX = EntityType.register("vex", Builder.of(Vex::new, MobCategory.MONSTER).fireImmune().sized(0.4f, 0.8f).clientTrackingRange(8));
-    public static final EntityType<Villager> VILLAGER = EntityType.register("villager", Builder.of(Villager::new, MobCategory.MISC).sized(0.6f, 1.95f).clientTrackingRange(10));
+    public static final EntityType<Villager> VILLAGER = EntityType.register("villager", Builder.of((EntityFactory<Villager>) Villager::new, MobCategory.MISC).sized(0.6f, 1.95f).clientTrackingRange(10));
     public static final EntityType<Vindicator> VINDICATOR = EntityType.register("vindicator", Builder.of(Vindicator::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
     public static final EntityType<WanderingTrader> WANDERING_TRADER = EntityType.register("wandering_trader", Builder.of(WanderingTrader::new, MobCategory.CREATURE).sized(0.6f, 1.95f).clientTrackingRange(10));
     public static final EntityType<Witch> WITCH = EntityType.register("witch", Builder.of(Witch::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
     public static final EntityType<WitherBoss> WITHER = EntityType.register("wither", Builder.of(WitherBoss::new, MobCategory.MONSTER).fireImmune().immuneTo(Blocks.WITHER_ROSE).sized(0.9f, 3.5f).clientTrackingRange(10));
     public static final EntityType<WitherSkeleton> WITHER_SKELETON = EntityType.register("wither_skeleton", Builder.of(WitherSkeleton::new, MobCategory.MONSTER).fireImmune().immuneTo(Blocks.WITHER_ROSE).sized(0.7f, 2.4f).clientTrackingRange(8));
-    public static final EntityType<WitherSkull> WITHER_SKULL = EntityType.register("wither_skull", Builder.of(WitherSkull::new, MobCategory.MISC).sized(0.3125f, 0.3125f).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<WitherSkull> WITHER_SKULL = EntityType.register("wither_skull", Builder.of((EntityFactory<WitherSkull>) WitherSkull::new, MobCategory.MISC).sized(0.3125f, 0.3125f).clientTrackingRange(4).updateInterval(10));
     public static final EntityType<Wolf> WOLF = EntityType.register("wolf", Builder.of(Wolf::new, MobCategory.CREATURE).sized(0.6f, 0.85f).clientTrackingRange(10));
     public static final EntityType<Zoglin> ZOGLIN = EntityType.register("zoglin", Builder.of(Zoglin::new, MobCategory.MONSTER).fireImmune().sized(1.3964844f, 1.4f).clientTrackingRange(8));
-    public static final EntityType<Zombie> ZOMBIE = EntityType.register("zombie", Builder.of(Zombie::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
+    public static final EntityType<Zombie> ZOMBIE = EntityType.register("zombie", Builder.of((EntityFactory<Zombie>) Zombie::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
     public static final EntityType<ZombieHorse> ZOMBIE_HORSE = EntityType.register("zombie_horse", Builder.of(ZombieHorse::new, MobCategory.CREATURE).sized(1.3964844f, 1.6f).clientTrackingRange(10));
     public static final EntityType<ZombieVillager> ZOMBIE_VILLAGER = EntityType.register("zombie_villager", Builder.of(ZombieVillager::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
     public static final EntityType<ZombifiedPiglin> ZOMBIFIED_PIGLIN = EntityType.register("zombified_piglin", Builder.of(ZombifiedPiglin::new, MobCategory.MONSTER).fireImmune().sized(0.6f, 1.95f).clientTrackingRange(8));
-    public static final EntityType<Player> PLAYER = EntityType.register("player", Builder.createNothing(MobCategory.MISC).noSave().noSummon().sized(0.6f, 1.8f).clientTrackingRange(32).updateInterval(2));
-    public static final EntityType<FishingHook> FISHING_BOBBER = EntityType.register("fishing_bobber", Builder.createNothing(MobCategory.MISC).noSave().noSummon().sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(5));
+    public static final EntityType<Player> PLAYER = (EntityType) EntityType.register("player", Builder.createNothing(MobCategory.MISC).noSave().noSummon().sized(0.6f, 1.8f).clientTrackingRange(32).updateInterval(2));
+    public static final EntityType<FishingHook> FISHING_BOBBER = (EntityType) EntityType.register("fishing_bobber", Builder.createNothing(MobCategory.MISC).noSave().noSummon().sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(5));
+    // MagmaCube end - decompile error
     private final EntityFactory<T> factory;
     private final MobCategory category;
     private final ImmutableSet<Block> immuneTo;
@@ -323,7 +325,7 @@ public class EntityType<T extends Entity> {
         }
         if (flag) {
             ((Entity)entity).setPos((double)blockPos.getX() + 0.5, blockPos.getY() + 1, (double)blockPos.getZ() + 0.5);
-            double d = EntityType.getYOffset(serverLevel, blockPos, flag2, ((Entity)entity).getBoundingBox());
+            d2 = EntityType.getYOffset(serverLevel, blockPos, flag2, ((Entity)entity).getBoundingBox()); // MagmaCube - decompile error
         } else {
             d2 = 0.0;
         }
@@ -533,7 +535,7 @@ public class EntityType<T extends Entity> {
         }
 
         public static <T extends Entity> Builder<T> createNothing(MobCategory mobCategory) {
-            return new Builder<Entity>((entityType, level) -> null, mobCategory);
+            return new Builder<>((entityType, level) -> null, mobCategory); // MagmaCube - decompile error
         }
 
         public Builder<T> sized(float f, float f2) {
@@ -557,7 +559,7 @@ public class EntityType<T extends Entity> {
         }
 
         public Builder<T> immuneTo(Block ... blocks) {
-            this.immuneTo = ImmutableSet.copyOf((Object[])blocks);
+            this.immuneTo = ImmutableSet.copyOf(blocks); // MagmaCube - decompile error
             return this;
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/EquipmentSlot.java b/src/main/java/net/minecraft/world/entity/EquipmentSlot.java
index e2108292f76ab5542bfdbb78cb975c6487e3c417..f87b7a6dfe81322de1c11816a774a20a1043e812 100644
--- a/src/main/java/net/minecraft/world/entity/EquipmentSlot.java
+++ b/src/main/java/net/minecraft/world/entity/EquipmentSlot.java
@@ -58,6 +58,6 @@ public enum EquipmentSlot
     public enum Type
     {
         HAND, 
-        ARMOR;
+        ARMOR
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/LightningBolt.java b/src/main/java/net/minecraft/world/entity/LightningBolt.java
index d9a42b844580a80b53d8383fb6886312379160b6..8d0be63ee2354bfc0b3a7d485ec37aa495d2afa3 100644
--- a/src/main/java/net/minecraft/world/entity/LightningBolt.java
+++ b/src/main/java/net/minecraft/world/entity/LightningBolt.java
@@ -5,17 +5,14 @@ import net.minecraft.network.protocol.Packet;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.core.BlockPos;
-import net.minecraft.world.level.LevelReader;
-import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.BaseFireBlock;
 import net.minecraft.world.level.GameRules;
-import java.util.Iterator;
+
 import java.util.List;
-import java.util.Collection;
+
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.server.level.ServerLevel;
-import net.minecraft.world.entity.player.Player;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.world.Difficulty;
 import net.minecraft.sounds.SoundSource;
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index ecb6fd7621138868b76b2cd2bd8ecfde2bed1660..74cfbf867195dc0e01035644aa9886357be3d403 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -658,7 +658,7 @@ extends Entity {
         if (i > 0) {
             boolean flag3;
             if (this.isInvisible()) {
-                boolean flag2 = this.random.nextInt(15) == 0;
+                flag3 = this.random.nextInt(15) == 0; // MagmaCube - decompile error
             } else {
                 flag3 = this.random.nextBoolean();
             }
@@ -930,11 +930,11 @@ extends Entity {
             } else {
                 int b4;
                 if (damageSource == DamageSource.DROWN) {
-                    int b = 36;
+                    b4 = 36; // MagmaCube - decompile error
                 } else if (damageSource.isFire()) {
-                    int b2 = 37;
+                    b4 = 37; // MagmaCube - decompile error
                 } else if (damageSource == DamageSource.SWEET_BERRY_BUSH) {
-                    int b3 = 44;
+                    b4 = 44; // MagmaCube - decompile error
                 } else {
                     b4 = 2;
                 }
@@ -1114,7 +1114,7 @@ extends Entity {
         int i2;
         Entity entity = damageSource.getEntity();
         if (entity instanceof Player) {
-            int i = EnchantmentHelper.getMobLooting((LivingEntity)entity);
+            i2 = EnchantmentHelper.getMobLooting((LivingEntity)entity); // MagmaCube - decompile error
         } else {
             i2 = 0;
         }
@@ -1435,11 +1435,11 @@ extends Entity {
                     this.playSound(SoundEvents.THORNS_HIT, this.getSoundVolume(), (this.random.nextFloat() - this.random.nextFloat()) * 0.2f + 1.0f);
                 }
                 if (flag3) {
-                    DamageSource damageSource = DamageSource.ON_FIRE;
+                    damageSource4 = DamageSource.ON_FIRE; // MagmaCube - decompile error
                 } else if (flag2) {
-                    DamageSource damageSource2 = DamageSource.DROWN;
+                    damageSource4 = DamageSource.DROWN; // MagmaCube - decompile error
                 } else if (flag4) {
-                    DamageSource damageSource3 = DamageSource.SWEET_BERRY_BUSH;
+                    damageSource4 = DamageSource.SWEET_BERRY_BUSH; // MagmaCube - decompile error
                 } else {
                     damageSource4 = DamageSource.GENERIC;
                 }
@@ -1664,7 +1664,7 @@ extends Entity {
     private void dismountVehicle(Entity entity) {
         Vec3 vec32;
         if (entity.removed || this.level.getBlockState(entity.blockPosition()).getBlock().is(BlockTags.PORTALS)) {
-            Vec3 vec3 = new Vec3(entity.getX(), entity.getY() + (double)entity.getBbHeight(), entity.getZ());
+            vec32 = new Vec3(entity.getX(), entity.getY() + (double)entity.getBbHeight(), entity.getZ()); // MagmaCube - decompile error
         } else {
             vec32 = entity.getDismountLocationForPassenger(this);
         }
@@ -1854,7 +1854,7 @@ extends Entity {
         if (!this.isNoGravity() && !this.isSprinting()) {
             double d3;
             if (flag && Math.abs(vec3.y - 0.005) >= 0.003 && Math.abs(vec3.y - d / 16.0) < 0.003) {
-                double d2 = -0.003;
+                d3 = -0.003; // MagmaCube - decompile error
             } else {
                 d3 = vec3.y - d / 16.0;
             }
@@ -2013,14 +2013,14 @@ extends Entity {
     private Map<EquipmentSlot, ItemStack> collectEquipmentChanges() {
         EnumMap map = null;
         block4: for (EquipmentSlot equipmentSlot : EquipmentSlot.values()) {
-            void itemStack3;
+            ItemStack itemStack3; // MagmaCube - decompile error
             switch (equipmentSlot.getType()) {
                 case HAND: {
-                    ItemStack itemStack = this.getLastHandItem(equipmentSlot);
+                    itemStack3 = this.getLastHandItem(equipmentSlot); // MagmaCube - decompile error
                     break;
                 }
                 case ARMOR: {
-                    ItemStack itemStack2 = this.getLastArmorItem(equipmentSlot);
+                    itemStack3 = this.getLastArmorItem(equipmentSlot); // MagmaCube - decompile error
                     break;
                 }
                 default: {
@@ -2046,7 +2046,7 @@ extends Entity {
         ItemStack itemStack = map.get(EquipmentSlot.MAINHAND);
         ItemStack itemStack2 = map.get(EquipmentSlot.OFFHAND);
         if (itemStack != null && itemStack2 != null && ItemStack.matches(itemStack, this.getLastHandItem(EquipmentSlot.OFFHAND)) && ItemStack.matches(itemStack2, this.getLastHandItem(EquipmentSlot.MAINHAND))) {
-            ((ServerLevel)this.level).getChunkSource().broadcast(this, new ClientboundEntityEventPacket(this, 55));
+            ((ServerLevel)this.level).getChunkSource().broadcast(this, new ClientboundEntityEventPacket(this, (byte) 55)); // MagmaCube - decompile error
             map.remove(EquipmentSlot.MAINHAND);
             map.remove(EquipmentSlot.OFFHAND);
             this.setLastHandItem(EquipmentSlot.MAINHAND, itemStack.copy());
@@ -2164,7 +2164,7 @@ extends Entity {
         if (this.jumping && this.isAffectedByFluids()) {
             double d9;
             if (this.isInLava()) {
-                double d8 = this.getFluidHeight(FluidTags.LAVA);
+                d9 = this.getFluidHeight(FluidTags.LAVA); // MagmaCube - decompile error
             } else {
                 d9 = this.getFluidHeight(FluidTags.WATER);
             }
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 7b34a70da4bf195f0cb9e5533396771494dcc597..8a01541582c5c793aa9a8aac974510bd4e47f02c 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -340,7 +340,7 @@ public abstract class Mob extends LivingEntity
             if (!itemStack.isEmpty()) {
                 itemStack.save(compoundTag2);
             }
-            ((AbstractList<CompoundTag>)listTag).add(compoundTag2);
+            listTag.add(compoundTag2); // MagmaCube - decompile error
         }
         compoundTag.put("ArmorItems", listTag);
         final ListTag listTag2 = new ListTag();
@@ -349,17 +349,17 @@ public abstract class Mob extends LivingEntity
             if (!itemStack2.isEmpty()) {
                 itemStack2.save(compoundTag3);
             }
-            ((AbstractList<CompoundTag>)listTag2).add(compoundTag3);
+            listTag2.add(compoundTag3); // MagmaCube - decompile error
         }
         compoundTag.put("HandItems", listTag2);
         final ListTag listTag3 = new ListTag();
         for (final float f : this.armorDropChances) {
-            ((AbstractList<FloatTag>)listTag3).add(FloatTag.valueOf(f));
+            listTag3.add(FloatTag.valueOf(f)); // MagmaCube - decompile error
         }
         compoundTag.put("ArmorDropChances", listTag3);
         final ListTag listTag4 = new ListTag();
         for (final float f2 : this.handDropChances) {
-            ((AbstractList<FloatTag>)listTag4).add(FloatTag.valueOf(f2));
+            listTag4.add(FloatTag.valueOf(f2)); // MagmaCube - decompile error
         }
         compoundTag.put("HandDropChances", listTag4);
         if (this.leashHolder != null) {
@@ -700,7 +700,7 @@ public abstract class Mob extends LivingEntity
         final double d4;
         if (entity instanceof LivingEntity) {
             final LivingEntity livingEntity = (LivingEntity)entity;
-            final double d3 = livingEntity.getEyeY() - this.getEyeY();
+            d4 = livingEntity.getEyeY() - this.getEyeY(); // MagmaCube - decompile error
         }
         else {
             d4 = (entity.getBoundingBox().minY + entity.getBoundingBox().maxY) / 2.0 - this.getEyeY();
@@ -817,11 +817,11 @@ public abstract class Mob extends LivingEntity
         final float f3;
         switch (equipmentSlot.getType()) {
             case HAND: {
-                final float f = this.handDropChances[equipmentSlot.getIndex()];
+                f3 = this.handDropChances[equipmentSlot.getIndex()]; // MagmaCube - decompile error
                 break;
             }
             case ARMOR: {
-                final float f2 = this.armorDropChances[equipmentSlot.getIndex()];
+                f3 = this.armorDropChances[equipmentSlot.getIndex()]; // MagmaCube - decompile error
                 break;
             }
             default: {
@@ -1244,30 +1244,32 @@ public abstract class Mob extends LivingEntity
     
     @Override
     public boolean setSlot(final int i, final ItemStack itemStack) {
+        EquipmentSlot equipmentSlot; // MagmaCube - decompile error
         if (i == 98) {
-            final EquipmentSlot equipmentSlot = EquipmentSlot.MAINHAND;
+            equipmentSlot = EquipmentSlot.MAINHAND; // MagmaCube - decompile error
         }
         else if (i == 99) {
-            final EquipmentSlot equipmentSlot2 = EquipmentSlot.OFFHAND;
+            equipmentSlot = EquipmentSlot.OFFHAND; // MagmaCube - decompile error
         }
         else if (i == 100 + EquipmentSlot.HEAD.getIndex()) {
-            final EquipmentSlot equipmentSlot3 = EquipmentSlot.HEAD;
+            equipmentSlot = EquipmentSlot.HEAD; // MagmaCube - decompile error
         }
         else if (i == 100 + EquipmentSlot.CHEST.getIndex()) {
-            final EquipmentSlot equipmentSlot4 = EquipmentSlot.CHEST;
+            equipmentSlot = EquipmentSlot.CHEST; // MagmaCube - decompile error
         }
         else if (i == 100 + EquipmentSlot.LEGS.getIndex()) {
-            final EquipmentSlot equipmentSlot5 = EquipmentSlot.LEGS;
+            equipmentSlot = EquipmentSlot.LEGS; // MagmaCube - decompile error
         }
         else {
             if (i != 100 + EquipmentSlot.FEET.getIndex()) {
                 return false;
             }
-            final EquipmentSlot equipmentSlot6 = EquipmentSlot.FEET;
+            equipmentSlot = EquipmentSlot.FEET; // MagmaCube - decompile error
         }
-        final EquipmentSlot equipmentSlot7;
-        if (itemStack.isEmpty() || isValidSlotForItem(equipmentSlot7, itemStack) || equipmentSlot7 == EquipmentSlot.HEAD) {
-            this.setItemSlot(equipmentSlot7, itemStack);
+        // MagmaCube start - decompile error
+        if (itemStack.isEmpty() || isValidSlotForItem(equipmentSlot, itemStack) || equipmentSlot == EquipmentSlot.HEAD) {
+            this.setItemSlot(equipmentSlot, itemStack);
+            // MagmaCube end - decompile error
             return true;
         }
         return false;
diff --git a/src/main/java/net/minecraft/world/entity/SpawnPlacements.java b/src/main/java/net/minecraft/world/entity/SpawnPlacements.java
index d9de7db0561c51d9cd632c9befb727a541650445..1c03f8ed38ef5fb990e7f62cd25e8f865c590459 100644
--- a/src/main/java/net/minecraft/world/entity/SpawnPlacements.java
+++ b/src/main/java/net/minecraft/world/entity/SpawnPlacements.java
@@ -58,7 +58,7 @@ public class SpawnPlacements
     
     public static <T extends Entity> boolean checkSpawnRules(final EntityType<T> entityType, final ServerLevelAccessor serverLevelAccessor, final MobSpawnType mobSpawnType, final BlockPos blockPos, final Random random) {
         final Data data = SpawnPlacements.DATA_BY_TYPE.get(entityType);
-        return data == null || data.predicate.test(entityType, serverLevelAccessor, mobSpawnType, blockPos, random);
+        return data == null || data.predicate.test((EntityType) entityType, serverLevelAccessor, mobSpawnType, blockPos, random); // MagmaCube - decompile error
     }
     
     static {
diff --git a/src/main/java/net/minecraft/world/entity/ai/Brain.java b/src/main/java/net/minecraft/world/entity/ai/Brain.java
index d0bffe851258bac4daea3dfa17d10400f60159c1..8f68113a01c388485d2ac5131348c7ce0d20e016 100644
--- a/src/main/java/net/minecraft/world/entity/ai/Brain.java
+++ b/src/main/java/net/minecraft/world/entity/ai/Brain.java
@@ -70,22 +70,21 @@ public class Brain<E extends LivingEntity>
             }
             
             public <T> DataResult<Brain<E>> decode(final DynamicOps<T> dynamicOps, final MapLike<T> mapLike) {
-                final MutableObject<DataResult<ImmutableList.Builder<MemoryValue<?>>>> mutableObject = (MutableObject<DataResult<ImmutableList.Builder<MemoryValue<?>>>>)new MutableObject(DataResult.success(ImmutableList.builder()));
-                final DataResult<MemoryModuleType<?>> dataResult;
-                final DataResult<? extends MemoryValue<?>> dataResult2;
-                final MutableObject mutableObject2;
+                // MagmaCube start - decompile error
+                final MutableObject<DataResult<ImmutableList.Builder<MemoryValue<?>>>> mutableObject = new MutableObject<>(DataResult.success(ImmutableList.builder()));
                 mapLike.entries().forEach(pair -> {
-                    dataResult = (DataResult<MemoryModuleType<?>>)Registry.MEMORY_MODULE_TYPE.parse((DynamicOps)dynamicOps, pair.getFirst());
-                    dataResult2 = (DataResult<? extends MemoryValue<?>>)dataResult.flatMap(memoryModuleType -> this.captureRead(memoryModuleType, (com.mojang.serialization.DynamicOps<Object>)dynamicOps, pair.getSecond()));
-                    mutableObject2.setValue(((DataResult)mutableObject2.getValue()).apply2((BiFunction)ImmutableList.Builder::add, (DataResult)dataResult2));
-                    return;
+                    DataResult<MemoryModuleType<?>> dataResult = Registry.MEMORY_MODULE_TYPE.parse(dynamicOps, pair.getFirst());
+                    DataResult<? extends MemoryValue<?>> dataResult2 = dataResult.flatMap(memoryModuleType -> this.captureRead(memoryModuleType, dynamicOps, pair.getSecond()));
+                    mutableObject.setValue(mutableObject.getValue().apply2(ImmutableList.Builder::add, dataResult2));
                 });
-                final ImmutableList<MemoryValue<?>> immutableList = (ImmutableList<MemoryValue<?>>)((DataResult)mutableObject.getValue()).resultOrPartial((Consumer)Brain.LOGGER::error).map(ImmutableList.Builder::build).orElseGet(ImmutableList::of);
-                return (DataResult<Brain<E>>)DataResult.success(new Brain(collection, collection2, immutableList, mutableObject::getValue));
+                final ImmutableList<MemoryValue<?>> immutableList = mutableObject.getValue().resultOrPartial(Brain.LOGGER::error).map(ImmutableList.Builder::build).orElseGet(ImmutableList::of);
+                return DataResult.success(new Brain(collection, collection2, immutableList, mutableObject::getValue));
+                // MagmaCube end - decompile error
             }
             
             private <T, U> DataResult<MemoryValue<U>> captureRead(final MemoryModuleType<U> memoryModuleType, final DynamicOps<T> dynamicOps, final T object) {
-                return (DataResult<MemoryValue<U>>)memoryModuleType.getCodec().map((Function<? super com.mojang.serialization.Codec<ExpirableValue<U>>, ? extends DataResult>)DataResult::success).orElseGet(() -> DataResult.error("No codec for memory: " + memoryModuleType)).flatMap(codec -> codec.parse((DynamicOps)dynamicOps, object)).map(expirableValue -> new MemoryValue((MemoryModuleType)memoryModuleType, (Optional)Optional.of(expirableValue)));
+                // MagmaCube - decompile error
+                return memoryModuleType.getCodec().map(DataResult::success).orElseGet(() -> DataResult.error("No codec for memory: " + memoryModuleType)).flatMap(codec -> codec.parse(dynamicOps, object)).map(expirableValue -> new MemoryValue(memoryModuleType, Optional.of(expirableValue)));
             }
             
             public <T> RecordBuilder<T> encode(final Brain<E> brain, final DynamicOps<T> dynamicOps, final RecordBuilder<T> recordBuilder) {
@@ -97,14 +96,16 @@ public class Brain<E extends LivingEntity>
     }
     
     public Brain(final Collection<? extends MemoryModuleType<?>> collection, final Collection<? extends SensorType<? extends Sensor<? super E>>> collection2, final ImmutableList<MemoryValue<?>> immutableList, final Supplier<Codec<Brain<E>>> supplier) {
-        this.memories = (Map<MemoryModuleType<?>, Optional<? extends ExpirableValue<?>>>)Maps.newHashMap();
-        this.sensors = (Map<SensorType<? extends Sensor<? super E>>, Sensor<? super E>>)Maps.newLinkedHashMap();
-        this.availableBehaviorsByPriority = (Map<Integer, Map<Activity, Set<Behavior<? super E>>>>)Maps.newTreeMap();
+        // MagmaCube start - decompile error
+        this.memories = Maps.newHashMap();
+        this.sensors = Maps.newLinkedHashMap();
+        this.availableBehaviorsByPriority = Maps.newTreeMap();
         this.schedule = Schedule.EMPTY;
-        this.activityRequirements = (Map<Activity, Set<Pair<MemoryModuleType<?>, MemoryStatus>>>)Maps.newHashMap();
-        this.activityMemoriesToEraseWhenStopped = (Map<Activity, Set<MemoryModuleType<?>>>)Maps.newHashMap();
-        this.coreActivities = (Set<Activity>)Sets.newHashSet();
-        this.activeActivities = (Set<Activity>)Sets.newHashSet();
+        this.activityRequirements = Maps.newHashMap();
+        this.activityMemoriesToEraseWhenStopped = Maps.newHashMap();
+        this.coreActivities = Sets.newHashSet();
+        this.activeActivities = Sets.newHashSet();
+        // MagmaCube end - decompile error
         this.defaultActivity = Activity.IDLE;
         this.lastScheduleUpdate = -9999L;
         this.codec = supplier;
@@ -129,7 +130,7 @@ public class Brain<E extends LivingEntity>
     }
     
     private Stream<MemoryValue<?>> memories() {
-        return this.memories.entrySet().stream().map(entry -> createUnchecked((MemoryModuleType<Object>)entry.getKey(), (Optional)entry.getValue()));
+        return this.memories.entrySet().stream().map(entry -> MemoryValue.createUnchecked((MemoryModuleType<Object>)entry.getKey(), (Optional)entry.getValue())); // MagmaCube - decompile error
     }
     
     public boolean hasMemoryValue(final MemoryModuleType<?> memoryModuleType) {
@@ -164,7 +165,7 @@ public class Brain<E extends LivingEntity>
     }
     
     public <U> Optional<U> getMemory(final MemoryModuleType<U> memoryModuleType) {
-        return this.memories.get(memoryModuleType).map((Function<? super ExpirableValue<?>, ? extends U>)ExpirableValue::getValue);
+        return (Optional<U>) this.memories.get(memoryModuleType).map(ExpirableValue::getValue); // MagmaCube - decompile error
     }
     
     public <U> boolean isMemoryValue(final MemoryModuleType<U> memoryModuleType, final U object) {
@@ -277,13 +278,15 @@ public class Brain<E extends LivingEntity>
     }
     
     public void addActivityAndRemoveMemoryWhenStopped(final Activity activity, final int i, final ImmutableList<? extends Behavior<? super E>> immutableList, final MemoryModuleType<?> memoryModuleType) {
-        final Set<Pair<MemoryModuleType<?>, MemoryStatus>> set = (Set<Pair<MemoryModuleType<?>, MemoryStatus>>)ImmutableSet.of(Pair.of(memoryModuleType, MemoryStatus.VALUE_PRESENT));
-        final Set<MemoryModuleType<?>> set2 = (Set<MemoryModuleType<?>>)ImmutableSet.of(memoryModuleType);
+        // MagmaCube start - decompile error
+        final Set<Pair<MemoryModuleType<?>, MemoryStatus>> set = ImmutableSet.of(Pair.of(memoryModuleType, MemoryStatus.VALUE_PRESENT));
+        final Set<MemoryModuleType<?>> set2 = ImmutableSet.of(memoryModuleType);
+        // MagmaCube end - decompile error
         this.addActivityAndRemoveMemoriesWhenStopped(activity, this.createPriorityPairs(i, immutableList), set, set2);
     }
     
     public void addActivity(final Activity activity, final ImmutableList<? extends Pair<Integer, ? extends Behavior<? super E>>> immutableList) {
-        this.addActivityAndRemoveMemoriesWhenStopped(activity, immutableList, (Set<Pair<MemoryModuleType<?>, MemoryStatus>>)ImmutableSet.of(), Sets.newHashSet());
+        this.addActivityAndRemoveMemoriesWhenStopped(activity, immutableList, ImmutableSet.of(), Sets.newHashSet()); // MagmaCube - decompile error
     }
     
     public void addActivityWithConditions(final Activity activity, final ImmutableList<? extends Pair<Integer, ? extends Behavior<? super E>>> immutableList, final Set<Pair<MemoryModuleType<?>, MemoryStatus>> set) {
@@ -296,7 +299,7 @@ public class Brain<E extends LivingEntity>
             this.activityMemoriesToEraseWhenStopped.put(activity, set2);
         }
         for (final Pair<Integer, ? extends Behavior<? super E>> pair : immutableList) {
-            this.availableBehaviorsByPriority.computeIfAbsent((Integer)pair.getFirst(), integer -> Maps.newHashMap()).computeIfAbsent(activity, activity -> Sets.newLinkedHashSet()).add((Behavior<? super E>)pair.getSecond());
+            this.availableBehaviorsByPriority.computeIfAbsent((Integer)pair.getFirst(), integer -> Maps.newHashMap()).computeIfAbsent(activity, activity1 -> Sets.newLinkedHashSet()).add((Behavior<? super E>)pair.getSecond()); // MagmaCube - decompile error
         }
     }
     
@@ -305,7 +308,7 @@ public class Brain<E extends LivingEntity>
     }
     
     public Brain<E> copyWithoutBehaviors() {
-        final Brain<E> brain = new Brain<E>(this.memories.keySet(), this.sensors.keySet(), (ImmutableList<MemoryValue<?>>)ImmutableList.of(), this.codec);
+        final Brain<E> brain = new Brain<E>(this.memories.keySet(), this.sensors.keySet(), ImmutableList.of(), this.codec); // MagmaCube - decompile error
         for (final Map.Entry<MemoryModuleType<?>, Optional<? extends ExpirableValue<?>>> entry : this.memories.entrySet()) {
             final MemoryModuleType<?> memoryModuleType = entry.getKey();
             if (entry.getValue().isPresent()) {
@@ -392,7 +395,7 @@ public class Brain<E extends LivingEntity>
     
     ImmutableList<? extends Pair<Integer, ? extends Behavior<? super E>>> createPriorityPairs(final int i, final ImmutableList<? extends Behavior<? super E>> immutableList) {
         int i2 = i;
-        final ImmutableList.Builder<Pair<Integer, ? extends Behavior<? super E>>> builder = (ImmutableList.Builder<Pair<Integer, ? extends Behavior<? super E>>>)ImmutableList.builder();
+        final ImmutableList.Builder<Pair<Integer, ? extends Behavior<? super E>>> builder = ImmutableList.builder(); // MagmaCube - decompile error
         for (final Behavior<? super E> behavior : immutableList) {
             builder.add(Pair.of((i2++), behavior));
         }
@@ -416,7 +419,7 @@ public class Brain<E extends LivingEntity>
         }
         
         public Brain<E> makeBrain(final Dynamic<?> dynamic) {
-            return this.codec.parse((Dynamic)dynamic).resultOrPartial((Consumer)Brain.LOGGER::error).orElseGet(() -> new Brain(this.memoryTypes, (Collection<? extends SensorType<? extends Sensor<? super LivingEntity>>>)this.sensorTypes, (ImmutableList<MemoryValue<?>>)ImmutableList.of(), () -> this.codec));
+            return this.codec.parse(dynamic).resultOrPartial(Brain.LOGGER::error).orElseGet(() -> new Brain(this.memoryTypes, this.sensorTypes, ImmutableList.of(), () -> this.codec)); // MagmaCube - decompile error
         }
     }
     
diff --git a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeInstance.java b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeInstance.java
index 6f9457d6c08ed8fc4104dda012db4937f49a99f5..8e534ea32e4327bc11f17428bcf3ad61d88cd17c 100644
--- a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeInstance.java
+++ b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeInstance.java
@@ -57,7 +57,7 @@ public class AttributeInstance
     }
     
     public Set<AttributeModifier> getModifiers(final AttributeModifier.Operation operation) {
-        return this.modifiersByOperation.computeIfAbsent(operation, operation -> Sets.newHashSet());
+        return this.modifiersByOperation.computeIfAbsent(operation, operation1 -> Sets.newHashSet()); // MagmaCube - decompile error
     }
     
     public Set<AttributeModifier> getModifiers() {
@@ -170,7 +170,7 @@ public class AttributeInstance
         if (!this.permanentModifiers.isEmpty()) {
             final ListTag listTag = new ListTag();
             for (final AttributeModifier attributeModifier : this.permanentModifiers) {
-                ((AbstractList<CompoundTag>)listTag).add(attributeModifier.save());
+                listTag.add(attributeModifier.save()); // MagmaCube - decompile error
             }
             compoundTag.put("Modifiers", listTag);
         }
diff --git a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeSupplier.java b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeSupplier.java
index 521acb597e982a40a2df5615a0050af51e8db03b..aecc08c6342c9da81b7c372d28da8edaedc25b67 100644
--- a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeSupplier.java
+++ b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeSupplier.java
@@ -70,15 +70,13 @@ public class AttributeSupplier
         private boolean instanceFrozen;
         
         public Builder() {
-            this.builder = (Map<Attribute, AttributeInstance>)Maps.newHashMap();
+            this.builder = Maps.newHashMap(); // MagmaCube - decompile error
         }
         
         private AttributeInstance create(final Attribute attribute) {
-            final UnsupportedOperationException ex;
-            final AttributeInstance attributeInstance = new AttributeInstance(attribute, attributeInstance -> {
+            final AttributeInstance attributeInstance = new AttributeInstance(attribute, attributeInstance1 -> { // MagmaCube - decompile error
                 if (this.instanceFrozen) {
-                    new UnsupportedOperationException("Tried to change value for default attribute instance: " + Registry.ATTRIBUTE.getKey(attribute));
-                    throw ex;
+                    throw new UnsupportedOperationException("Tried to change value for default attribute instance: " + Registry.ATTRIBUTE.getKey(attribute)); // MagmaCube - decompile error
                 }
                 else {
                     return;
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/AcquirePoi.java b/src/main/java/net/minecraft/world/entity/ai/behavior/AcquirePoi.java
index 98e89b03ff07af5f0c8a508d8fbb7dcb6eed57f2..5fb66a4149b3ae5724c33c8e2ced3f7fd4682c30 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/AcquirePoi.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/AcquirePoi.java
@@ -84,7 +84,7 @@ extends Behavior<PathfinderMob> {
         if (path != null && path.canReach()) {
             BlockPos blockPos2 = path.getTarget();
             poiManager.getType(blockPos2).ifPresent(poiType -> {
-                poiManager.take(this.poiType.getPredicate(), blockPos2 -> blockPos2.equals(blockPos2), blockPos2, 1);
+                poiManager.take(this.poiType.getPredicate(), b1 -> b1.equals(blockPos2), blockPos2, 1); // MagmaCube - decompile error
                 pathfinderMob.getBrain().setMemory(this.memoryToAcquire, GlobalPos.of(serverLevel.dimension(), blockPos2));
                 this.onPoiAcquisitionEvent.ifPresent(byte_ -> serverLevel.broadcastEntityEvent(pathfinderMob, (byte)byte_));
                 this.batchCache.clear();
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/AnimalMakeLove.java b/src/main/java/net/minecraft/world/entity/ai/behavior/AnimalMakeLove.java
index 0229c5d271474ddbaf5cf33f49c45408cabec8a9..19baab03b83a5c651e8ae9cdcef15f20a6ac28fc 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/AnimalMakeLove.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/AnimalMakeLove.java
@@ -74,7 +74,7 @@ public class AnimalMakeLove extends Behavior<Animal>
     }
     
     private Animal getBreedTarget(final Animal animal) {
-        return animal.getBrain().getMemory((MemoryModuleType<Animal>)MemoryModuleType.BREED_TARGET).get();
+        return (Animal) animal.getBrain().getMemory(MemoryModuleType.BREED_TARGET).get(); // MagmaCube - decompile error
     }
     
     private boolean hasBreedTargetOfRightType(final Animal animal) {
@@ -83,6 +83,6 @@ public class AnimalMakeLove extends Behavior<Animal>
     }
     
     private Optional<? extends Animal> findValidBreedPartner(final Animal animal) {
-        return (Optional<? extends Animal>)animal.getBrain().getMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES).get().stream().filter(livingEntity -> livingEntity.getType() == this.partnerType).map(livingEntity -> livingEntity).filter((Predicate<? super Object>)animal::canMate).findFirst();
+        return (Optional<? extends Animal>)animal.getBrain().getMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES).get().stream().filter(livingEntity -> livingEntity.getType() == this.partnerType).map(livingEntity -> (Animal) livingEntity).filter(animal::canMate).findFirst(); // MagmaCube - decompile error
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/AssignProfessionFromJobSite.java b/src/main/java/net/minecraft/world/entity/ai/behavior/AssignProfessionFromJobSite.java
index fdc3359f01f5b349ec6f4821929d0f3becd81e70..1fb5ebada396d64d2ae444ed24c0f9fedb5012e1 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/AssignProfessionFromJobSite.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/AssignProfessionFromJobSite.java
@@ -17,7 +17,7 @@ import net.minecraft.world.entity.npc.VillagerProfession;
 public class AssignProfessionFromJobSite
 extends Behavior<Villager> {
     public AssignProfessionFromJobSite() {
-        super((Map<MemoryModuleType<?>, MemoryStatus>)ImmutableMap.of(MemoryModuleType.POTENTIAL_JOB_SITE, (MemoryStatus.VALUE_PRESENT)));
+        super(ImmutableMap.of(MemoryModuleType.POTENTIAL_JOB_SITE, (MemoryStatus.VALUE_PRESENT))); // MagmaCube - decompile error
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/BackUpIfTooClose.java b/src/main/java/net/minecraft/world/entity/ai/behavior/BackUpIfTooClose.java
index 857f48f8997fbf3a27878e8c6dabf5b664bb118b..55bfab0b46319bd94d9c02e50126001c08226ec2 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/BackUpIfTooClose.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/BackUpIfTooClose.java
@@ -29,7 +29,7 @@ public class BackUpIfTooClose<E extends Mob> extends Behavior<E>
     
     @Override
     protected void start(final ServerLevel serverLevel, final E mob, final long l) {
-        mob.getBrain().setMemory((MemoryModuleType<EntityTracker>)MemoryModuleType.LOOK_TARGET, new EntityTracker(this.getTarget(mob), true));
+        mob.getBrain().setMemory(MemoryModuleType.LOOK_TARGET, new EntityTracker(this.getTarget(mob), true)); // MagmaCube - decompile error
         mob.getMoveControl().strafe(-this.strafeSpeed, 0.0f);
         mob.yRot = Mth.rotateIfNecessary(mob.yRot, mob.yHeadRot, 0.0f);
     }
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/BlockPosTracker.java b/src/main/java/net/minecraft/world/entity/ai/behavior/BlockPosTracker.java
index f43202b136926eea9e501df6607d8258332fba0c..04c8b94b3cb50e66289daf4ba28d2f062d161336 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/BlockPosTracker.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/BlockPosTracker.java
@@ -1,7 +1,6 @@
 package net.minecraft.world.entity.ai.behavior;
 
 import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.core.Vec3i;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.core.BlockPos;
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/CrossbowAttack.java b/src/main/java/net/minecraft/world/entity/ai/behavior/CrossbowAttack.java
index 803d11062d58e80f6a1cb066556d74b786911f23..865a25b1f89b41fbafcfc926008d4d68aec0fc02 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/CrossbowAttack.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/CrossbowAttack.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.entity.ai.behavior;
 
 import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.Mob; // MagmaCube
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.entity.monster.RangedAttackMob;
 import net.minecraft.world.entity.projectile.ProjectileUtil;
@@ -87,7 +88,7 @@ public class CrossbowAttack<E extends Mob, T extends LivingEntity> extends Behav
     }
     
     private void lookAtTarget(final Mob mob, final LivingEntity livingEntity) {
-        mob.getBrain().setMemory((MemoryModuleType<EntityTracker>)MemoryModuleType.LOOK_TARGET, new EntityTracker(livingEntity, true));
+        mob.getBrain().setMemory(MemoryModuleType.LOOK_TARGET, new EntityTracker(livingEntity, true)); // MagmaCube - decompile error
     }
     
     private static LivingEntity getAttackTarget(final LivingEntity livingEntity) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/EntityTracker.java b/src/main/java/net/minecraft/world/entity/ai/behavior/EntityTracker.java
index d080f5909d1af1eddbeb03348cc56150502a78af..4049fb9a39c0b7cc2ac5d22925d36a9bf6f2cc43 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/EntityTracker.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/EntityTracker.java
@@ -20,7 +20,7 @@ public class EntityTracker implements PositionTracker
     
     @Override
     public Vec3 currentPosition() {
-        return this.trackEyeHeight ? this.entity.position().add(0.0, this.entity.getEyeHeight(), 0.0) : this.entity.position();
+        return this.trackEyeHeight ? this.entity.position().add(0.0, (double) this.entity.getEyeHeight(), 0.0) : this.entity.position();
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/ResetProfession.java b/src/main/java/net/minecraft/world/entity/ai/behavior/ResetProfession.java
index 27c78f02cddac44253d567c6b5ef56073b9ea677..8ef2f1e3dcbd6dc492671bd7beeb0096bc8ca337 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/ResetProfession.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/ResetProfession.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.entity.ai.behavior;
 
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.npc.VillagerData;
 import net.minecraft.world.entity.npc.VillagerProfession;
 import net.minecraft.server.level.ServerLevel;
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/Swim.java b/src/main/java/net/minecraft/world/entity/ai/behavior/Swim.java
index 448bf7720eaceaa117476512b911bd94f6e5584d..8909f0a9732d97f6e392802286377ba8a68edc12 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/Swim.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/Swim.java
@@ -1,8 +1,5 @@
 package net.minecraft.world.entity.ai.behavior;
 
-import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.level.material.Fluid;
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.server.level.ServerLevel;
 import java.util.Map;
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/VictoryStroll.java b/src/main/java/net/minecraft/world/entity/ai/behavior/VictoryStroll.java
index e27dd2a209f24646cddcb87a735fd281cd579723..a8a8362693e813ac7713af640040f40573b418b7 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/VictoryStroll.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/VictoryStroll.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.entity.ai.behavior;
 
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.raid.Raid;
 import net.minecraft.world.entity.PathfinderMob;
 import net.minecraft.server.level.ServerLevel;
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerCalmDown.java b/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerCalmDown.java
index f350e25546e5bf8870aaeb492972bed1fc604512..99e29beabdf1b426c19c0fb56c01338d425f9ca1 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerCalmDown.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerCalmDown.java
@@ -1,8 +1,6 @@
 package net.minecraft.world.entity.ai.behavior;
 
-import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.server.level.ServerLevel;
 import java.util.Map;
 import com.google.common.collect.ImmutableMap;
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/WeightedList.java b/src/main/java/net/minecraft/world/entity/ai/behavior/WeightedList.java
index 4988d04919c8f6af35c75e58dc6651ca51287896..dc2323760af55078ab31f78e16c9b51dffc1f434 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/WeightedList.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/WeightedList.java
@@ -28,7 +28,8 @@ public class WeightedList<U>
     }
     
     public static <U> Codec<WeightedList<U>> codec(final Codec<U> codec) {
-        return (Codec<WeightedList<U>>)WeightedEntry.codec(codec).listOf().xmap((Function)WeightedList::new, weightedList -> weightedList.entries);
+        // MagmaCube - decompile error
+        return (Codec<WeightedList<U>>)WeightedEntry.codec(codec).listOf().xmap(WeightedList::new, weightedList -> weightedList.entries);
     }
     
     public WeightedList<U> add(final U object, final int i) {
@@ -51,11 +52,13 @@ public class WeightedList<U>
     }
     
     public Stream<U> stream() {
-        return this.entries.stream().map((Function<? super Object, ? extends U>)WeightedEntry::getData);
+        // MagmaCube - decompile error
+        return this.entries.stream().map(WeightedEntry::getData);
     }
     
     public U getOne(final Random random) {
-        return this.shuffle(random).stream().findFirst().orElseThrow((Supplier<? extends Throwable>)RuntimeException::new);
+        // MagmaCube - decompile error
+        return this.shuffle(random).stream().findFirst().orElseThrow(RuntimeException::new);
     }
     
     @Override
@@ -95,11 +98,11 @@ public class WeightedList<U>
             return (Codec<WeightedEntry<E>>)new Codec<WeightedEntry<E>>() {
                 public <T> DataResult<Pair<WeightedEntry<E>, T>> decode(final DynamicOps<T> dynamicOps, final T object) {
                     final Dynamic<T> dynamic = (Dynamic<T>)new Dynamic((DynamicOps)dynamicOps, object);
-                    return (DataResult<Pair<WeightedEntry<E>, T>>)dynamic.get("data").flatMap((Function)codec::parse).map(object -> new WeightedEntry(object, dynamic.get("weight").asInt(1))).map(weightedEntry -> Pair.of(weightedEntry, dynamicOps.empty()));
+                    return (DataResult<Pair<WeightedEntry<E>, T>>)dynamic.get("data").flatMap(codec::parse).map(object1 -> new WeightedEntry<>(object1, dynamic.get("weight").asInt(1))).map(weightedEntry -> Pair.of(weightedEntry, dynamicOps.empty())); // MagmaCube - decompile error
                 }
                 
                 public <T> DataResult<T> encode(final WeightedEntry<E> weightedEntry, final DynamicOps<T> dynamicOps, final T object) {
-                    return (DataResult<T>)dynamicOps.mapBuilder().add("weight", dynamicOps.createInt(((WeightedEntry<Object>)weightedEntry).weight)).add("data", codec.encodeStart((DynamicOps)dynamicOps, ((WeightedEntry<Object>)weightedEntry).data)).build(object);
+                    return (DataResult<T>)dynamicOps.mapBuilder().add("weight", dynamicOps.createInt(((WeightedEntry<Object>)weightedEntry).weight)).add("data", codec.encodeStart((DynamicOps)dynamicOps, weightedEntry.data)).build(object); // MagmaCube - decompile error
                 }
             };
         }
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/WorkAtComposter.java b/src/main/java/net/minecraft/world/entity/ai/behavior/WorkAtComposter.java
index dc7e56ca868e132be4fe6c345f47ce5eb8d5a649..64fdbdb916cf125a41a924c80fd301d7e599f3e0 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/WorkAtComposter.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/WorkAtComposter.java
@@ -1,12 +1,10 @@
 package net.minecraft.world.entity.ai.behavior;
 
 import com.google.common.collect.ImmutableList;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.SimpleContainer;
 import net.minecraft.core.BlockPos;
-import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.properties.Property;
 import net.minecraft.world.level.block.ComposterBlock;
 import net.minecraft.world.level.block.state.BlockState;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/AvoidEntityGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/AvoidEntityGoal.java
index 8370b1346144097d54ca52efbeba69499136e09d..66bfd9cfe6f087aba619aa10306e0d26f1a4e8b0 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/AvoidEntityGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/AvoidEntityGoal.java
@@ -27,7 +27,7 @@ public class AvoidEntityGoal<T extends LivingEntity> extends Goal
     private final TargetingConditions avoidEntityTargeting;
     
     public AvoidEntityGoal(final PathfinderMob pathfinderMob, final Class<T> clazz, final float f, final double d, final double d2) {
-        this(pathfinderMob, clazz, livingEntity -> true, f, d, d2, (Predicate)EntitySelector.NO_CREATIVE_OR_SPECTATOR::test);
+        this(pathfinderMob, clazz, livingEntity -> true, f, d, d2, EntitySelector.NO_CREATIVE_OR_SPECTATOR::test); // MagmaCube - decompile error
     }
     
     public AvoidEntityGoal(final PathfinderMob pathfinderMob, final Class<T> clazz, final Predicate<LivingEntity> predicate, final float f, final double d, final double d2, final Predicate<LivingEntity> predicate2) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/BreedGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/BreedGoal.java
index 43eb7c8a124bf40d2f2b9b6378ae85ede061f71f..244522be8b44f5a62fd8552ed3a345b29241d935 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/BreedGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/BreedGoal.java
@@ -2,10 +2,9 @@ package net.minecraft.world.entity.ai.goal;
 
 import net.minecraft.server.level.ServerLevel;
 import javax.annotation.Nullable;
-import java.util.Iterator;
 import java.util.List;
 import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.Entity;
+
 import java.util.EnumSet;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.entity.animal.Animal;
@@ -55,7 +54,7 @@ public class BreedGoal extends Goal
     
     @Override
     public void tick() {
-        this.animal.getLookControl().setLookAt(this.partner, 10.0f, this.animal.getMaxHeadXRot());
+        this.animal.getLookControl().setLookAt(this.partner, 10.0f, (float) this.animal.getMaxHeadXRot());
         this.animal.getNavigation().moveTo(this.partner, this.speedModifier);
         ++this.loveTime;
         if (this.loveTime >= 60 && this.animal.distanceToSqr(this.partner) < 9.0) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/CatLieOnBedGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/CatLieOnBedGoal.java
index 3d4bd44de1e68c881e9741de15b5b096ee54c7c7..a7f9c3f2faa05c5da9049ee66cbe5f84d19a018d 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/CatLieOnBedGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/CatLieOnBedGoal.java
@@ -1,7 +1,5 @@
 package net.minecraft.world.entity.ai.goal;
 
-import net.minecraft.world.level.block.Block;
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.LevelReader;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/EatBlockGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/EatBlockGoal.java
index 15d5d1f6ebf02a03144e1a84a763d2fab80bcfbe..b290763c2200f2547703d932d0ff3321f006e23f 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/EatBlockGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/EatBlockGoal.java
@@ -3,7 +3,6 @@ package net.minecraft.world.entity.ai.goal;
 import net.minecraft.world.level.block.state.predicate.BlockStatePredicate;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.GameRules;
-import net.minecraft.world.entity.Entity;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.block.Blocks;
 import java.util.EnumSet;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/FleeSunGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/FleeSunGoal.java
index b9a5a345b257bbf69c3021ee996a58b21a77021d..2da4186ea0268dfc1401097e80e2930b74a09146 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/FleeSunGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/FleeSunGoal.java
@@ -3,7 +3,7 @@ package net.minecraft.world.entity.ai.goal;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
-import net.minecraft.core.Vec3i;
+
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.entity.EquipmentSlot;
 import java.util.EnumSet;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/FloatGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/FloatGoal.java
index 7e7953c8f4b155159f0812528b3a2312e1fcbe30..ce05b04ed7ce8855ac88dad976c1f6b516a1b449 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/FloatGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/FloatGoal.java
@@ -1,7 +1,5 @@
 package net.minecraft.world.entity.ai.goal;
 
-import net.minecraft.world.level.material.Fluid;
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.FluidTags;
 import java.util.EnumSet;
 import net.minecraft.world.entity.Mob;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/FollowParentGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/FollowParentGoal.java
index a1cef86b70139ce89f8c76bec97a4cff2a84c9ed..3ace1a9ff79e7ab7a2f8555c3dd39c8f15ebf6f6 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/FollowParentGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/FollowParentGoal.java
@@ -1,8 +1,7 @@
 package net.minecraft.world.entity.ai.goal;
 
-import java.util.Iterator;
 import java.util.List;
-import net.minecraft.world.entity.Entity;
+
 import net.minecraft.world.entity.animal.Animal;
 
 public class FollowParentGoal extends Goal
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/LookAtTradingPlayerGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/LookAtTradingPlayerGoal.java
index ebe8f9dbd9c52e4ed547d974316610fcc59806be..f9c23e4f9b1498b0edf584c9788bc56212d8e75b 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/LookAtTradingPlayerGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/LookAtTradingPlayerGoal.java
@@ -1,7 +1,5 @@
 package net.minecraft.world.entity.ai.goal;
 
-import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.npc.AbstractVillager;
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/MoveBackToVillageGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/MoveBackToVillageGoal.java
index fc85854df057728f96211c8d166ae1e564ab420f..ce58817e7c56e5a7a10716df536009a8981dc496 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/MoveBackToVillageGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/MoveBackToVillageGoal.java
@@ -2,7 +2,6 @@ package net.minecraft.world.entity.ai.goal;
 
 import javax.annotation.Nullable;
 import net.minecraft.world.entity.ai.util.RandomPos;
-import net.minecraft.core.Vec3i;
 import net.minecraft.world.entity.ai.behavior.BehaviorUtils;
 import net.minecraft.core.SectionPos;
 import net.minecraft.world.phys.Vec3;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/MoveTowardsRestrictionGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/MoveTowardsRestrictionGoal.java
index 0babd77a6f0623134663cdf61de7731019037989..31111c7aea3232e72a15c85f04292c96604ea834 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/MoveTowardsRestrictionGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/MoveTowardsRestrictionGoal.java
@@ -1,7 +1,6 @@
 package net.minecraft.world.entity.ai.goal;
 
 import net.minecraft.world.entity.ai.util.RandomPos;
-import net.minecraft.core.Vec3i;
 import net.minecraft.world.phys.Vec3;
 import java.util.EnumSet;
 import net.minecraft.world.entity.PathfinderMob;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/MoveTowardsTargetGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/MoveTowardsTargetGoal.java
index ec90a7932466fa77782346e1bb7fff3a96f6b1ae..13fb2a0fe44e6e04cae5ae6c8f6b5d098f745386 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/MoveTowardsTargetGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/MoveTowardsTargetGoal.java
@@ -2,7 +2,7 @@ package net.minecraft.world.entity.ai.goal;
 
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.entity.ai.util.RandomPos;
-import net.minecraft.world.entity.Entity;
+
 import java.util.EnumSet;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.PathfinderMob;
@@ -30,7 +30,7 @@ public class MoveTowardsTargetGoal extends Goal
         if (this.target == null) {
             return false;
         }
-        if (this.target.distanceToSqr(this.mob) > this.within * this.within) {
+        if (this.target.distanceToSqr(this.mob) > (double) (this.within * this.within)) {
             return false;
         }
         final Vec3 vec3 = RandomPos.getPosTowards(this.mob, 16, 7, this.target.position());
@@ -45,7 +45,7 @@ public class MoveTowardsTargetGoal extends Goal
     
     @Override
     public boolean canContinueToUse() {
-        return !this.mob.getNavigation().isDone() && this.target.isAlive() && this.target.distanceToSqr(this.mob) < this.within * this.within;
+        return !this.mob.getNavigation().isDone() && this.target.isAlive() && this.target.distanceToSqr(this.mob) < (double) (this.within * this.within);
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/OfferFlowerGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/OfferFlowerGoal.java
index 611835360394167cb7bbbc35ea9a6e7323fd58b9..5f23c59f12b7e2a19ca3e3bc08126e5f4715b948 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/OfferFlowerGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/OfferFlowerGoal.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.entity.ai.goal;
 
-import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
 import java.util.EnumSet;
 import net.minecraft.world.entity.npc.Villager;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/RangedBowAttackGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/RangedBowAttackGoal.java
index 7b502e7c511f223b97b781dc97d5cd481454c782..4c4c19774cdf916f07175592b9f3e62e909f94d8 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/RangedBowAttackGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/RangedBowAttackGoal.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.entity.ai.goal;
 
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.monster.Monster; // MagmaCube
 import net.minecraft.world.entity.projectile.ProjectileUtil;
 import net.minecraft.world.item.BowItem;
 import net.minecraft.world.entity.monster.RangedAttackMob;
@@ -23,7 +24,7 @@ public class RangedBowAttackGoal<T extends Monster> extends Goal
     public RangedBowAttackGoal(final T monster, final double d, final int i, final float f) {
         this.attackTime = -1;
         this.strafingTime = -1;
-        this.mob = (Monster)monster;
+        this.mob = monster; // MagmaCube - decompile error
         this.speedModifier = d;
         this.attackIntervalMin = i;
         this.attackRadiusSqr = f * f;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/RangedCrossbowAttackGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/RangedCrossbowAttackGoal.java
index e4a13100f34687cb392f99ed1fa602953ff50ecf..a1f97a100d589ba355adba31b19242717bf19e53 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/RangedCrossbowAttackGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/RangedCrossbowAttackGoal.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.entity.ai.goal;
 
+import net.minecraft.world.entity.monster.Monster; // MagmaCube
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.entity.monster.RangedAttackMob;
 import net.minecraft.world.entity.projectile.ProjectileUtil;
@@ -24,7 +25,7 @@ public class RangedCrossbowAttackGoal<T extends Monster> extends Goal
     
     public RangedCrossbowAttackGoal(final T monster, final double d, final float f) {
         this.crossbowState = CrossbowState.UNCHARGED;
-        this.mob = (Monster)monster;
+        this.mob = monster; // MagmaCube - decompile error
         this.speedModifier = d;
         this.attackRadiusSqr = f * f;
         this.setFlags(EnumSet.of(Flag.MOVE, Flag.LOOK));
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/RestrictSunGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/RestrictSunGoal.java
index c23a849a7f4feb3a6972b80a811cfc4269f3595a..9ae6812196de2eae12924d4643ce44deb6b764b7 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/RestrictSunGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/RestrictSunGoal.java
@@ -1,7 +1,6 @@
 package net.minecraft.world.entity.ai.goal;
 
 import net.minecraft.world.entity.ai.navigation.GroundPathNavigation;
-import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.ai.util.GoalUtils;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.PathfinderMob;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/RunAroundLikeCrazyGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/RunAroundLikeCrazyGoal.java
index 1d0d4f300fb1e20c2e80635ab7c103cd03d6c123..15607cde233b61e7493613feb4ba0e4be097743e 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/RunAroundLikeCrazyGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/RunAroundLikeCrazyGoal.java
@@ -3,7 +3,6 @@ package net.minecraft.world.entity.ai.goal;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.phys.Vec3;
-import net.minecraft.world.entity.PathfinderMob;
 import net.minecraft.world.entity.ai.util.RandomPos;
 import java.util.EnumSet;
 import net.minecraft.world.entity.animal.horse.AbstractHorse;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/SitWhenOrderedToGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/SitWhenOrderedToGoal.java
index 61c53bbc3e8685afef1da07d54ecd17f1c264856..ac78f8a55f85c8fd42a309726bb65c33f9700ed8 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/SitWhenOrderedToGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/SitWhenOrderedToGoal.java
@@ -1,7 +1,7 @@
 package net.minecraft.world.entity.ai.goal;
 
 import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.Entity;
+
 import java.util.EnumSet;
 import net.minecraft.world.entity.TamableAnimal;
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/SwellGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/SwellGoal.java
index 7b08d6f672e69299a917baa5484cd47006bb5e3a..523e3bd25d4c59de5e68ed396ce3ec7319be5711 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/SwellGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/SwellGoal.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.entity.ai.goal;
 
-import net.minecraft.world.entity.Entity;
 import java.util.EnumSet;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.monster.Creeper;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java
index 9ece251cb94de69fcd1de883e0492f2a1cfc89a6..d3cd5a45dc73a281f33ffa37d48c2d3e7302b4e3 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java
@@ -1,8 +1,6 @@
 package net.minecraft.world.entity.ai.goal;
 
-import net.minecraft.world.entity.Entity;
 import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.ai.navigation.FlyingPathNavigation;
 import net.minecraft.world.entity.ai.navigation.GroundPathNavigation;
 import java.util.EnumSet;
@@ -63,7 +61,7 @@ public class TemptGoal extends Goal
                 if (this.player.distanceToSqr(this.px, this.py, this.pz) > 0.010000000000000002) {
                     return false;
                 }
-                if (Math.abs(this.player.xRot - this.pRotX) > 5.0 || Math.abs(this.player.yRot - this.pRotY) > 5.0) {
+                if (Math.abs((double) this.player.xRot - this.pRotX) > 5.0 || Math.abs((double) this.player.yRot - this.pRotY) > 5.0) {
                     return false;
                 }
             }
@@ -72,8 +70,8 @@ public class TemptGoal extends Goal
                 this.py = this.player.getY();
                 this.pz = this.player.getZ();
             }
-            this.pRotX = this.player.xRot;
-            this.pRotY = this.player.yRot;
+            this.pRotX = (double) this.player.xRot;
+            this.pRotY = (double) this.player.yRot;
         }
         return this.canUse();
     }
@@ -100,7 +98,7 @@ public class TemptGoal extends Goal
     
     @Override
     public void tick() {
-        this.mob.getLookControl().setLookAt(this.player, this.mob.getMaxHeadYRot() + 20, this.mob.getMaxHeadXRot());
+        this.mob.getLookControl().setLookAt(this.player, (float) (this.mob.getMaxHeadYRot() + 20), (float) this.mob.getMaxHeadXRot());
         if (this.mob.distanceToSqr(this.player) < 6.25) {
             this.mob.getNavigation().stop();
         }
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/TradeWithPlayerGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/TradeWithPlayerGoal.java
index 3d80316da25b876cdc6a59097ccf4f94b8eac030..8db591f5daa87a4b7d2a377499951140d9add102 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/TradeWithPlayerGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/TradeWithPlayerGoal.java
@@ -1,7 +1,7 @@
 package net.minecraft.world.entity.ai.goal;
 
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.entity.Entity;
+
 import java.util.EnumSet;
 import net.minecraft.world.entity.npc.AbstractVillager;
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/WaterAvoidingRandomFlyingGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/WaterAvoidingRandomFlyingGoal.java
index 9937d01b7a231fbc51d13b2d7b0f34d063731882..2961b4f010fd85a837203fc414ee73f5cb969828 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/WaterAvoidingRandomFlyingGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/WaterAvoidingRandomFlyingGoal.java
@@ -1,11 +1,8 @@
 package net.minecraft.world.entity.ai.goal;
 
-import java.util.Iterator;
 import net.minecraft.world.level.block.Block;
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.world.level.block.LeavesBlock;
-import net.minecraft.core.Vec3i;
 import net.minecraft.core.Direction;
 import net.minecraft.util.Mth;
 import net.minecraft.core.BlockPos;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/ZombieAttackGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/ZombieAttackGoal.java
index c85fdc8f899a43506ec63752b5dba9b5e162d01f..eea752b6c35d1ecaa0e6bfd8cebb8c4cc5b090aa 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/ZombieAttackGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/ZombieAttackGoal.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.entity.ai.goal;
 
-import net.minecraft.world.entity.PathfinderMob;
 import net.minecraft.world.entity.monster.Zombie;
 
 public class ZombieAttackGoal extends MeleeAttackGoal
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/target/DefendVillageTargetGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/target/DefendVillageTargetGoal.java
index 88105ae5d213c16d34e3064f5610eeb65069095d..a7d9bc7069b7fd92902b1ea9fba0860f53c87471 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/target/DefendVillageTargetGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/target/DefendVillageTargetGoal.java
@@ -1,13 +1,11 @@
 package net.minecraft.world.entity.ai.goal.target;
 
-import java.util.Iterator;
 import java.util.List;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.npc.Villager;
 import java.util.EnumSet;
-import net.minecraft.world.entity.ai.goal.Goal;
-import net.minecraft.world.entity.Mob;
+
 import net.minecraft.world.entity.ai.targeting.TargetingConditions;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.animal.IronGolem;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/target/HurtByTargetGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/target/HurtByTargetGoal.java
index 6444df124b3d8ab5352166052a0a7593a5e2271b..237bfbf505faf2d838f38dc6386d02f9639c9330 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/target/HurtByTargetGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/target/HurtByTargetGoal.java
@@ -1,15 +1,14 @@
 package net.minecraft.world.entity.ai.goal.target;
 
-import java.util.Iterator;
 import java.util.List;
-import net.minecraft.world.entity.Entity;
+
 import net.minecraft.world.entity.TamableAnimal;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.entity.EntityType;
 import java.util.EnumSet;
-import net.minecraft.world.entity.ai.goal.Goal;
+
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.PathfinderMob;
 import net.minecraft.world.entity.ai.targeting.TargetingConditions;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/target/NearestAttackableTargetGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/target/NearestAttackableTargetGoal.java
index 6ce851c0827003a13c5a51680030805519780291..3269c4e41e7c41dff71bd187f19090f5f2443788 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/target/NearestAttackableTargetGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/target/NearestAttackableTargetGoal.java
@@ -4,7 +4,6 @@ import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.phys.AABB;
 import java.util.EnumSet;
-import net.minecraft.world.entity.ai.goal.Goal;
 import javax.annotation.Nullable;
 import java.util.function.Predicate;
 import net.minecraft.world.entity.Mob;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/target/NearestAttackableWitchTargetGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/target/NearestAttackableWitchTargetGoal.java
index 7db74d632349370533dcd759541f164e36c53444..de08857bbf99b0f1935a1a4d4b129fd664eaaae5 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/target/NearestAttackableWitchTargetGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/target/NearestAttackableWitchTargetGoal.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.entity.ai.goal.target;
 
-import net.minecraft.world.entity.Mob;
 import javax.annotation.Nullable;
 import java.util.function.Predicate;
 import net.minecraft.world.entity.raid.Raider;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/target/NearestHealableRaiderTargetGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/target/NearestHealableRaiderTargetGoal.java
index fdf6de62724b7623d98f864148b736f5bf15afc3..33c328371a40eef342e2bef395e8e3b89103af05 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/target/NearestHealableRaiderTargetGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/target/NearestHealableRaiderTargetGoal.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.entity.ai.goal.target;
 
-import net.minecraft.world.entity.Mob;
 import javax.annotation.Nullable;
 import java.util.function.Predicate;
 import net.minecraft.world.entity.raid.Raider;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/target/NonTameRandomTargetGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/target/NonTameRandomTargetGoal.java
index 787e73babccff9a679bc4dfa31f5d92c1b7ae044..a0b3b15bb070c51043c18dabaf6de7c1cc85ac22 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/target/NonTameRandomTargetGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/target/NonTameRandomTargetGoal.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.entity.ai.goal.target;
 
-import net.minecraft.world.entity.Mob;
 import javax.annotation.Nullable;
 import java.util.function.Predicate;
 import net.minecraft.world.entity.TamableAnimal;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/target/OwnerHurtByTargetGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/target/OwnerHurtByTargetGoal.java
index 35332fe9f113c44847aa326027b48d28b3950721..583e13d350be603a2ceb2d24176ef86edb2d4ddf 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/target/OwnerHurtByTargetGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/target/OwnerHurtByTargetGoal.java
@@ -2,8 +2,7 @@ package net.minecraft.world.entity.ai.goal.target;
 
 import net.minecraft.world.entity.ai.targeting.TargetingConditions;
 import java.util.EnumSet;
-import net.minecraft.world.entity.ai.goal.Goal;
-import net.minecraft.world.entity.Mob;
+
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.TamableAnimal;
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/target/OwnerHurtTargetGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/target/OwnerHurtTargetGoal.java
index 2a075ec37f0d0dd3e053cc8cb6f4413c3e9a9249..4956621efc7abcc2900326e9264a4c3c2a55b5d9 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/target/OwnerHurtTargetGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/target/OwnerHurtTargetGoal.java
@@ -2,8 +2,7 @@ package net.minecraft.world.entity.ai.goal.target;
 
 import net.minecraft.world.entity.ai.targeting.TargetingConditions;
 import java.util.EnumSet;
-import net.minecraft.world.entity.ai.goal.Goal;
-import net.minecraft.world.entity.Mob;
+
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.TamableAnimal;
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/target/ResetUniversalAngerTargetGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/target/ResetUniversalAngerTargetGoal.java
index ee3ef48281c50f6a016e6a1d6915948c772bad81..a39fee55e21ffa012f671d6513d8f4bb29337527 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/target/ResetUniversalAngerTargetGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/target/ResetUniversalAngerTargetGoal.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.entity.ai.goal.target;
 
+import net.minecraft.world.entity.Mob; // MagmaCube
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import java.util.List;
@@ -15,7 +16,7 @@ public class ResetUniversalAngerTargetGoal<T extends Mob> extends Goal
     private int lastHurtByPlayerTimestamp;
     
     public ResetUniversalAngerTargetGoal(final T mob, final boolean flag) {
-        this.mob = (Mob)mob;
+        this.mob = mob; // MagmaCube - decompile error
         this.alertOthersOfSameType = flag;
     }
     
@@ -33,7 +34,7 @@ public class ResetUniversalAngerTargetGoal<T extends Mob> extends Goal
         this.lastHurtByPlayerTimestamp = this.mob.getLastHurtByMobTimestamp();
         ((NeutralMob)this.mob).forgetCurrentTargetAndRefreshUniversalAnger();
         if (this.alertOthersOfSameType) {
-            this.getNearbyMobsOfSameType().stream().filter(mob -> mob != this.mob).map(mob -> mob).forEach(NeutralMob::forgetCurrentTargetAndRefreshUniversalAnger);
+            this.getNearbyMobsOfSameType().stream().filter(mob -> mob != this.mob).map(mob -> (NeutralMob) mob).forEach(NeutralMob::forgetCurrentTargetAndRefreshUniversalAnger); // MagmaCube - type
         }
         super.start();
     }
diff --git a/src/main/java/net/minecraft/world/entity/ai/navigation/WallClimberNavigation.java b/src/main/java/net/minecraft/world/entity/ai/navigation/WallClimberNavigation.java
index 170e9680a89e262127718342afa102511bf41920..0ef6011d0b68625f1b7f407f7a85aaa412b70fd6 100644
--- a/src/main/java/net/minecraft/world/entity/ai/navigation/WallClimberNavigation.java
+++ b/src/main/java/net/minecraft/world/entity/ai/navigation/WallClimberNavigation.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.entity.ai.navigation;
 
-import net.minecraft.core.Position;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.pathfinder.Path;
 import net.minecraft.world.level.Level;
@@ -42,11 +41,11 @@ public class WallClimberNavigation extends GroundPathNavigation
     public void tick() {
         if (this.isDone()) {
             if (this.pathToPosition != null) {
-                if (this.pathToPosition.closerThan(this.mob.position(), this.mob.getBbWidth()) || (this.mob.getY() > this.pathToPosition.getY() && new BlockPos(this.pathToPosition.getX(), this.mob.getY(), this.pathToPosition.getZ()).closerThan(this.mob.position(), this.mob.getBbWidth()))) {
+                if (this.pathToPosition.closerThan(this.mob.position(), (double) this.mob.getBbWidth()) || (this.mob.getY() > (double) this.pathToPosition.getY() && new BlockPos((double) this.pathToPosition.getX(), this.mob.getY(), (double) this.pathToPosition.getZ()).closerThan(this.mob.position(), (double) this.mob.getBbWidth()))) {
                     this.pathToPosition = null;
                 }
                 else {
-                    this.mob.getMoveControl().setWantedPosition(this.pathToPosition.getX(), this.pathToPosition.getY(), this.pathToPosition.getZ(), this.speedModifier);
+                    this.mob.getMoveControl().setWantedPosition((double) this.pathToPosition.getX(), (double) this.pathToPosition.getY(), (double) this.pathToPosition.getZ(), this.speedModifier);
                 }
             }
             return;
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/AdultSensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/AdultSensor.java
index 8834fd637469279973eeab106b41df18fbefddbe..a6826355870a9f39fbaf1b496fbc2e43870b0beb 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/AdultSensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/AdultSensor.java
@@ -22,7 +22,7 @@ public class AdultSensor extends Sensor<AgableMob>
     }
     
     private void setNearestVisibleAdult(final AgableMob agableMob, final List<LivingEntity> list) {
-        final Optional<AgableMob> optional = list.stream().filter(livingEntity -> livingEntity.getType() == agableMob.getType()).map(livingEntity -> livingEntity).filter(agableMob -> !agableMob.isBaby()).findFirst();
+        final Optional<AgableMob> optional = list.stream().filter(livingEntity -> livingEntity.getType() == agableMob.getType()).map(livingEntity -> (AgableMob) livingEntity).filter(agableMob1 -> !agableMob1.isBaby()).findFirst(); // MagmaCube - decompile error
         agableMob.getBrain().setMemory(MemoryModuleType.NEAREST_VISIBLE_ADULT, optional);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/DummySensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/DummySensor.java
index 2d27df3988e0a1b48c328ed4a5e341ffee90eca5..d968af58988428c5245a2d552906cbcd885e4f6f 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/DummySensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/DummySensor.java
@@ -14,6 +14,6 @@ public class DummySensor extends Sensor<LivingEntity>
     
     @Override
     public Set<MemoryModuleType<?>> requires() {
-        return (Set<MemoryModuleType<?>>)ImmutableSet.of();
+        return ImmutableSet.of(); // MagmaCube - decompile fix
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/ai/targeting/TargetingConditions.java b/src/main/java/net/minecraft/world/entity/ai/targeting/TargetingConditions.java
index 4b20707168c82b0230bb0e3d661e20dbb9636e74..fc8fa304d95b303f61adb181199e0e38e954ec36 100644
--- a/src/main/java/net/minecraft/world/entity/ai/targeting/TargetingConditions.java
+++ b/src/main/java/net/minecraft/world/entity/ai/targeting/TargetingConditions.java
@@ -1,7 +1,7 @@
 package net.minecraft.world.entity.ai.targeting;
 
 import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.Entity;
+
 import javax.annotation.Nullable;
 import net.minecraft.world.entity.LivingEntity;
 import java.util.function.Predicate;
diff --git a/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java b/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
index dbafb10aecd748acf56579e215b8505b8f9b7617..cc193843c1c6694fedc3a2db3eacf08401d08320 100644
--- a/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
@@ -110,7 +110,7 @@ public abstract class AbstractFish extends WaterAnimal
     protected void registerGoals() {
         super.registerGoals();
         this.goalSelector.addGoal(0, new PanicGoal(this, 1.25));
-        this.goalSelector.addGoal(2, new AvoidEntityGoal<Object>(this, Player.class, 8.0f, 1.6, 1.4, EntitySelector.NO_SPECTATORS::test));
+        this.goalSelector.addGoal(2, new AvoidEntityGoal<>(this, Player.class, 8.0f, 1.6, 1.4, EntitySelector.NO_SPECTATORS::test)); // MagmaCube - decompile error
         this.goalSelector.addGoal(4, new FishSwimGoal(this));
     }
     
diff --git a/src/main/java/net/minecraft/world/entity/animal/Bee.java b/src/main/java/net/minecraft/world/entity/animal/Bee.java
index 1ba28a855ad2f69555285c3be59349f1db00467e..5d0204f230bac3e540bdc5cb6945e5a8944a07b5 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Bee.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Bee.java
@@ -584,11 +584,6 @@ FlyingAnimal {
         return blockPos.closerThan(this.blockPosition(), (double)i);
     }
 
-    @Override
-    public /* synthetic */ AgableMob getBreedOffspring(ServerLevel serverLevel, AgableMob agableMob) {
-        return this.getBreedOffspring(serverLevel, agableMob);
-    }
-
     class BeeEnterHiveGoal
     extends BaseBeeGoal {
         private BeeEnterHiveGoal() {
@@ -1143,7 +1138,7 @@ FlyingAnimal {
             Vec3 vec33;
             if (Bee.this.isHiveValid() && !Bee.this.closerThan(Bee.this.hivePos, 22)) {
                 Vec3 vec3 = Vec3.atCenterOf(Bee.this.hivePos);
-                Vec3 vec32 = vec3.subtract(Bee.this.position()).normalize();
+                vec33 = vec3.subtract(Bee.this.position()).normalize(); // MagmaCube - decompile error
             } else {
                 vec33 = Bee.this.getViewVector(0.0f);
             }
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cat.java b/src/main/java/net/minecraft/world/entity/animal/Cat.java
index 881d339e540bc32a907a5ad6676e3e1457d25927..251976c2251df4bcb1ff99fa4444303fd2c5ff64 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cat.java
@@ -70,6 +70,11 @@ import net.minecraft.world.level.storage.loot.parameters.LootContextParamSets;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 import net.minecraft.world.phys.AABB;
 
+// MagmaCube start
+import net.minecraft.world.item.DyeItem;
+import net.minecraft.world.item.Item;
+// MagmaCube end
+
 public class Cat
 extends TamableAnimal {
     private static final Ingredient TEMPT_INGREDIENT = Ingredient.of(Items.COD, Items.SALMON);
@@ -368,25 +373,55 @@ extends TamableAnimal {
      */
     @Override
     public InteractionResult mobInteract(Player player, InteractionHand interactionHand) {
-        /*
-         * This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
-         * org.benf.cfr.reader.util.ConfusedCFRException: Started 2 blocks at once
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.getStartingBlocks(Op04StructuredStatement.java:406)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:481)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:728)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:806)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:258)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:192)
-         * org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:94)
-         * org.benf.cfr.reader.entities.Method.analyse(Method.java:521)
-         * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1035)
-         * org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:922)
-         * org.benf.cfr.reader.Driver.doJarVersionTypes(Driver.java:253)
-         * org.benf.cfr.reader.Driver.doJar(Driver.java:135)
-         * org.benf.cfr.reader.CfrDriverImpl.analyse(CfrDriverImpl.java:65)
-         * org.benf.cfr.reader.Main.main(Main.java:49)
-         */
-        throw new IllegalStateException(Decompilation failed);
+        // MagmaCube start - fix whole method
+        ItemStack itemStack = player.getItemInHand(interactionHand);
+        Item item = itemStack.getItem();
+        if (this.level.isClientSide) {
+            if (isTame() && isOwnedBy((LivingEntity)player))
+                return InteractionResult.SUCCESS;
+            if (isFood(itemStack) && (getHealth() < getMaxHealth() || !isTame()))
+                return InteractionResult.SUCCESS;
+            return InteractionResult.PASS;
+        }
+        if (isTame()) {
+            if (isOwnedBy((LivingEntity)player))
+                if (item instanceof DyeItem) {
+                    DyeColor dyeColor = ((DyeItem)item).getDyeColor();
+                    if (dyeColor != getCollarColor()) {
+                        setCollarColor(dyeColor);
+                        if (!player.abilities.instabuild)
+                            itemStack.shrink(1);
+                        setPersistenceRequired();
+                        return InteractionResult.CONSUME;
+                    }
+                } else {
+                    if (item.isEdible() && isFood(itemStack) && getHealth() < getMaxHealth()) {
+                        usePlayerItem(player, itemStack);
+                        heal(item.getFoodProperties().getNutrition());
+                        return InteractionResult.CONSUME;
+                    }
+                    InteractionResult interactionResult = super.mobInteract(player, interactionHand);
+                    if (!interactionResult.consumesAction() || isBaby())
+                        setOrderedToSit(!isOrderedToSit());
+                    return interactionResult;
+                }
+        } else if (isFood(itemStack)) {
+            usePlayerItem(player, itemStack);
+            if (this.random.nextInt(3) == 0) {
+                tame(player);
+                setOrderedToSit(true);
+                this.level.broadcastEntityEvent((Entity)this, (byte)7);
+            } else {
+                this.level.broadcastEntityEvent((Entity)this, (byte)6);
+            }
+            setPersistenceRequired();
+            return InteractionResult.CONSUME;
+        }
+        InteractionResult interactionResult2 = super.mobInteract(player, interactionHand);
+        if (interactionResult2.consumesAction())
+            setPersistenceRequired();
+        return interactionResult2;
+        // MagmaCube end - fix whole method
     }
 
     @Override
@@ -415,11 +450,6 @@ extends TamableAnimal {
         }
     }
 
-    @Override
-    public /* synthetic */ AgableMob getBreedOffspring(ServerLevel serverLevel, AgableMob agableMob) {
-        return this.getBreedOffspring(serverLevel, agableMob);
-    }
-
     static class CatRelaxOnOwnerGoal
     extends Goal {
         private final Cat cat;
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cod.java b/src/main/java/net/minecraft/world/entity/animal/Cod.java
index 010cdd8a2415ea9dc57b4fcd9165fd222e760fcf..1fbc5d96dcadc88d6c4a5157b5343a283b0dbd87 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cod.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cod.java
@@ -3,7 +3,6 @@ package net.minecraft.world.entity.animal;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundEvent;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cow.java b/src/main/java/net/minecraft/world/entity/animal/Cow.java
index 8d39531fae9b8f216f054fcc02b1092122dae982..7857402a6961dd0edb5d3b0256505568258cfb79 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cow.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cow.java
@@ -16,7 +16,6 @@ import net.minecraft.sounds.SoundEvent;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.goal.RandomLookAroundGoal;
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
@@ -24,11 +23,8 @@ import net.minecraft.world.entity.ai.goal.FollowParentGoal;
 import net.minecraft.world.entity.ai.goal.TemptGoal;
 import net.minecraft.world.item.crafting.Ingredient;
 import net.minecraft.world.item.Items;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.entity.ai.goal.BreedGoal;
-import net.minecraft.world.entity.PathfinderMob;
 import net.minecraft.world.entity.ai.goal.PanicGoal;
-import net.minecraft.world.entity.ai.goal.Goal;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.ai.goal.FloatGoal;
 import net.minecraft.world.level.Level;
diff --git a/src/main/java/net/minecraft/world/entity/animal/Fox.java b/src/main/java/net/minecraft/world/entity/animal/Fox.java
index e0acd04433b7c4feeff98225c31df3070cf71e93..c47759ae788512fabffb91b1174b74c94887c8ca 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Fox.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Fox.java
@@ -217,15 +217,15 @@ extends Animal {
             ItemStack itemStack6;
             float f = this.random.nextFloat();
             if (f < 0.05f) {
-                ItemStack itemStack = new ItemStack(Items.EMERALD);
+                itemStack6 = new ItemStack(Items.EMERALD); // MagmaCube - decompile error
             } else if (f < 0.2f) {
-                ItemStack itemStack2 = new ItemStack(Items.EGG);
+                itemStack6 = new ItemStack(Items.EGG); // MagmaCube - decompile error
             } else if (f < 0.4f) {
-                ItemStack itemStack3 = this.random.nextBoolean() ? new ItemStack(Items.RABBIT_FOOT) : new ItemStack(Items.RABBIT_HIDE);
+                itemStack6 = this.random.nextBoolean() ? new ItemStack(Items.RABBIT_FOOT) : new ItemStack(Items.RABBIT_HIDE); // MagmaCube - decompile error
             } else if (f < 0.6f) {
-                ItemStack itemStack4 = new ItemStack(Items.WHEAT);
+                itemStack6 = new ItemStack(Items.WHEAT); // MagmaCube - decompile error
             } else if (f < 0.8f) {
-                ItemStack itemStack5 = new ItemStack(Items.LEATHER);
+                itemStack6 = new ItemStack(Items.LEATHER); // MagmaCube - decompile error
             } else {
                 itemStack6 = new ItemStack(Items.FEATHER);
             }
@@ -639,11 +639,6 @@ extends Animal {
         return new Vec3(0.0, 0.55f * this.getEyeHeight(), this.getBbWidth() * 0.4f);
     }
 
-    @Override
-    public /* synthetic */ AgableMob getBreedOffspring(ServerLevel serverLevel, AgableMob agableMob) {
-        return this.getBreedOffspring(serverLevel, agableMob);
-    }
-
     class FoxLookAtPlayerGoal
     extends LookAtPlayerGoal {
         public FoxLookAtPlayerGoal(Mob mob, Class<? extends LivingEntity> clazz, float f) {
@@ -1105,11 +1100,6 @@ extends Animal {
             }
             return !livingEntity.isSleeping() && !livingEntity.isDiscrete();
         }
-
-        @Override
-        public /* synthetic */ boolean test(Object object) {
-            return this.test((LivingEntity)object);
-        }
     }
 
     class SeekShelterGoal
diff --git a/src/main/java/net/minecraft/world/entity/animal/Pig.java b/src/main/java/net/minecraft/world/entity/animal/Pig.java
index b1f8f7a24f85ec5259324af247629c996642e1ba..57b95f479a098de6081dc6f3c0442224db600475 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Pig.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Pig.java
@@ -9,9 +9,6 @@ import net.minecraft.world.Difficulty;
 import net.minecraft.world.entity.LightningBolt;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.phys.AABB;
-import com.google.common.collect.UnmodifiableIterator;
-import net.minecraft.world.level.CollisionGetter;
-import net.minecraft.core.Vec3i;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.vehicle.DismountHelper;
 import net.minecraft.core.Direction;
@@ -38,11 +35,8 @@ import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
 import net.minecraft.world.entity.ai.goal.FollowParentGoal;
 import net.minecraft.world.entity.ai.goal.TemptGoal;
 import net.minecraft.world.item.Items;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.entity.ai.goal.BreedGoal;
-import net.minecraft.world.entity.PathfinderMob;
 import net.minecraft.world.entity.ai.goal.PanicGoal;
-import net.minecraft.world.entity.ai.goal.Goal;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.ai.goal.FloatGoal;
 import net.minecraft.world.level.Level;
@@ -273,7 +267,7 @@ public class Pig extends Animal implements ItemSteerable, Saddleable
     
     @Override
     public Vec3 getLeashOffset() {
-        return new Vec3(0.0, 0.6f * this.getEyeHeight(), this.getBbWidth() * 0.4f);
+        return new Vec3(0.0, (double) (0.6f * this.getEyeHeight()), (double) (this.getBbWidth() * 0.4f));
     }
     
     static {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Salmon.java b/src/main/java/net/minecraft/world/entity/animal/Salmon.java
index f379c4751d84fc9326c1a63dda50458fa51f998c..2860f5eea47f339e48235c1d7e9c2f0b132c79a7 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Salmon.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Salmon.java
@@ -3,7 +3,6 @@ package net.minecraft.world.entity.animal;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundEvent;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
diff --git a/src/main/java/net/minecraft/world/entity/animal/Sheep.java b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
index bfb6d1bff661a0deeb94b59196b6d71fbccfe8b6..07d7a08752d1c50ba1b0094d0de61c976bacc4b0 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Sheep.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
@@ -384,9 +384,4 @@ implements Shearable {
     protected float getStandingEyeHeight(Pose pose, EntityDimensions entityDimensions) {
         return 0.95f * entityDimensions.height;
     }
-
-    @Override
-    public /* synthetic */ AgableMob getBreedOffspring(ServerLevel serverLevel, AgableMob agableMob) {
-        return this.getBreedOffspring(serverLevel, agableMob);
-    }
 }
diff --git a/src/main/java/net/minecraft/world/entity/animal/WaterAnimal.java b/src/main/java/net/minecraft/world/entity/animal/WaterAnimal.java
index 2ccac6c6da73524c0ddbf809875dbfca4139b8af..7bfed7ca34fbbc51a188da5ba70aac60a9ac9181 100644
--- a/src/main/java/net/minecraft/world/entity/animal/WaterAnimal.java
+++ b/src/main/java/net/minecraft/world/entity/animal/WaterAnimal.java
@@ -2,7 +2,6 @@ package net.minecraft.world.entity.animal;
 
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.entity.MobType;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java
index 66c3b3da4f7f3f5b2cd7d5016c3e72e7c086be6c..f9ab0bb3839cc76ec76d6a494ccfc97ea2ab4b29 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java
@@ -89,7 +89,7 @@ public abstract class AbstractChestedHorse extends AbstractHorse
                     final CompoundTag compoundTag2 = new CompoundTag();
                     compoundTag2.putByte("Slot", (byte)i);
                     itemStack.save(compoundTag2);
-                    ((AbstractList<CompoundTag>)listTag).add(compoundTag2);
+                    listTag.add(compoundTag2); // MagmaCube - decompile error
                 }
             }
             compoundTag.put("Items", listTag);
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
index 7db58c91af012cfdaa975310c7314c112bef6386..b61e28c85733bd95dca5cabac65b1b8b64524c56 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
@@ -1,7 +1,6 @@
 package net.minecraft.world.entity.animal.horse;
 
 import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.InteractionHand;
@@ -9,13 +8,10 @@ import net.minecraft.world.entity.player.Player;
 import javax.annotation.Nullable;
 import net.minecraft.world.entity.AgableMob;
 import net.minecraft.server.level.ServerLevel;
-import net.minecraft.world.entity.ai.goal.Goal;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.world.entity.MobType;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.sounds.SoundEvents;
-import net.minecraft.world.level.material.Fluid;
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.world.entity.ai.attributes.Attributes;
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java b/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
index 68419e0843ce8081efbd7b06482bf2901f6f300d..b76283554257f8cdbb611c9efe64785938abac91 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
@@ -2,10 +2,10 @@ package net.minecraft.world.entity.animal.horse;
 
 import net.minecraft.world.entity.ai.targeting.TargetingConditions;
 import java.util.EnumSet;
-import net.minecraft.world.entity.Mob;
+
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.ai.goal.target.TargetGoal;
-import net.minecraft.world.entity.AgableMob;
+
 import javax.annotation.Nullable;
 import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.MobSpawnType;
@@ -14,8 +14,6 @@ import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.npc.WanderingTrader;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.entity.ai.goal.Goal;
-import net.minecraft.world.entity.PathfinderMob;
 import net.minecraft.world.entity.ai.goal.PanicGoal;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.world.level.Level;
@@ -113,7 +111,7 @@ public class TraderLlama extends Llama
         return super.finalizeSpawn(serverLevelAccessor, difficultyInstance, mobSpawnType, spawnGroupData, compoundTag);
     }
     
-    public class TraderLlamaDefendWanderingTraderGoal extends TargetGoal
+    public static class TraderLlamaDefendWanderingTraderGoal extends TargetGoal
     {
         private final Llama llama;
         private LivingEntity ownerLastHurtBy;
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
index 155dcde3249f88be00a96dec968c3dbe91e8800e..61edb2500d123d71d82236e42e51a188f4524052 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
@@ -1,7 +1,6 @@
 package net.minecraft.world.entity.animal.horse;
 
 import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.InteractionHand;
diff --git a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EndCrystal.java b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EndCrystal.java
index cf129c22c4b893c86f0712524d19f96899e29201..cf894c9914d480f85a9213948e8b571511cbda80 100644
--- a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EndCrystal.java
+++ b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EndCrystal.java
@@ -8,10 +8,8 @@ import javax.annotation.Nullable;
 import net.minecraft.world.level.dimension.end.EndDragonFight;
 import net.minecraft.world.level.Explosion;
 import net.minecraft.world.damagesource.DamageSource;
-import net.minecraft.nbt.Tag;
 import net.minecraft.nbt.NbtUtils;
 import net.minecraft.nbt.CompoundTag;
-import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.BaseFireBlock;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.Level;
diff --git a/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonLandingPhase.java b/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonLandingPhase.java
index de189175d99b7255b30cedff6e6e1fe5ef26630d..51f643ec263079d580cc740df8ba998fca3742d7 100644
--- a/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonLandingPhase.java
+++ b/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonLandingPhase.java
@@ -3,11 +3,10 @@ package net.minecraft.world.entity.boss.enderdragon.phases;
 import javax.annotation.Nullable;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Entity;
-import net.minecraft.core.Vec3i;
 import net.minecraft.world.level.levelgen.feature.EndPodiumFeature;
 import net.minecraft.world.level.levelgen.Heightmap;
 import java.util.Random;
-import net.minecraft.core.particles.ParticleOptions;
+
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
 import net.minecraft.world.phys.Vec3;
diff --git a/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java b/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
index 35ea7c6dacba12e626efd7397d6bfd7f1b000b19..4193090b1a2beab3e61a0fba9fe0dbc45dce2615 100644
--- a/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
+++ b/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
@@ -167,30 +167,32 @@ public class ArmorStand extends LivingEntity
     
     @Override
     public boolean setSlot(final int i, final ItemStack itemStack) {
+        EquipmentSlot equipmentSlot; // MagmaCube - decompile error
         if (i == 98) {
-            final EquipmentSlot equipmentSlot = EquipmentSlot.MAINHAND;
+            equipmentSlot = EquipmentSlot.MAINHAND; // MagmaCube - decompile error
         }
         else if (i == 99) {
-            final EquipmentSlot equipmentSlot2 = EquipmentSlot.OFFHAND;
+            equipmentSlot = EquipmentSlot.OFFHAND; // MagmaCube - decompile error
         }
         else if (i == 100 + EquipmentSlot.HEAD.getIndex()) {
-            final EquipmentSlot equipmentSlot3 = EquipmentSlot.HEAD;
+            equipmentSlot = EquipmentSlot.HEAD; // MagmaCube - decompile error
         }
         else if (i == 100 + EquipmentSlot.CHEST.getIndex()) {
-            final EquipmentSlot equipmentSlot4 = EquipmentSlot.CHEST;
+            equipmentSlot = EquipmentSlot.CHEST; // MagmaCube - decompile error
         }
         else if (i == 100 + EquipmentSlot.LEGS.getIndex()) {
-            final EquipmentSlot equipmentSlot5 = EquipmentSlot.LEGS;
+            equipmentSlot = EquipmentSlot.LEGS; // MagmaCube - decompile error
         }
         else {
             if (i != 100 + EquipmentSlot.FEET.getIndex()) {
                 return false;
             }
-            final EquipmentSlot equipmentSlot6 = EquipmentSlot.FEET;
+            equipmentSlot = EquipmentSlot.FEET; // MagmaCube - decompile error
         }
-        final EquipmentSlot equipmentSlot7;
-        if (itemStack.isEmpty() || Mob.isValidSlotForItem(equipmentSlot7, itemStack) || equipmentSlot7 == EquipmentSlot.HEAD) {
-            this.setItemSlot(equipmentSlot7, itemStack);
+        // MagmaCube start - decompile error
+        if (itemStack.isEmpty() || Mob.isValidSlotForItem(equipmentSlot, itemStack) || equipmentSlot == EquipmentSlot.HEAD) {
+            this.setItemSlot(equipmentSlot, itemStack);
+            // MagmaCube end - decompile error
             return true;
         }
         return false;
@@ -211,7 +213,7 @@ public class ArmorStand extends LivingEntity
             if (!itemStack.isEmpty()) {
                 itemStack.save(compoundTag2);
             }
-            ((AbstractList<CompoundTag>)listTag).add(compoundTag2);
+            listTag.add(compoundTag2); // MagmaCube - decompile error
         }
         compoundTag.put("ArmorItems", listTag);
         final ListTag listTag2 = new ListTag();
@@ -220,7 +222,7 @@ public class ArmorStand extends LivingEntity
             if (!itemStack2.isEmpty()) {
                 itemStack2.save(compoundTag3);
             }
-            ((AbstractList<CompoundTag>)listTag2).add(compoundTag3);
+            listTag2.add(compoundTag3); // MagmaCube - decompile error
         }
         compoundTag.put("HandItems", listTag2);
         compoundTag.putBoolean("Invisible", this.isInvisible());
@@ -672,10 +674,10 @@ public class ArmorStand extends LivingEntity
     
     private byte setBit(byte b, final int i, final boolean flag) {
         if (flag) {
-            b |= (byte)i;
+            b = (byte) (b | (byte) i); // MagmaCube - decompile error
         }
         else {
-            b &= (byte)~i;
+            b = (byte) (b & (byte) ~i); // MagmaCube - decompile error
         }
         return b;
     }
@@ -839,6 +841,6 @@ public class ArmorStand extends LivingEntity
         DATA_RIGHT_ARM_POSE = SynchedEntityData.defineId(ArmorStand.class, EntityDataSerializers.ROTATIONS);
         DATA_LEFT_LEG_POSE = SynchedEntityData.defineId(ArmorStand.class, EntityDataSerializers.ROTATIONS);
         DATA_RIGHT_LEG_POSE = SynchedEntityData.defineId(ArmorStand.class, EntityDataSerializers.ROTATIONS);
-        RIDABLE_MINECARTS = (entity -> entity instanceof AbstractMinecart && entity.getMinecartType() == AbstractMinecart.Type.RIDEABLE);
+        RIDABLE_MINECARTS = (entity -> entity instanceof AbstractMinecart && ((AbstractMinecart) entity).getMinecartType() == AbstractMinecart.Type.RIDEABLE); // MagmaCube - decompile error
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/monster/AbstractIllager.java b/src/main/java/net/minecraft/world/entity/monster/AbstractIllager.java
index 3fc2ed4eef7a23aa0ac030d409aff82ed647267d..5aaff5ba0c4de0fc7fa50de6f6732b7f903acc63 100644
--- a/src/main/java/net/minecraft/world/entity/monster/AbstractIllager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/AbstractIllager.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.entity.monster;
 
-import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.ai.goal.OpenDoorGoal;
 import net.minecraft.world.entity.MobType;
 import net.minecraft.world.level.Level;
@@ -36,7 +35,7 @@ public abstract class AbstractIllager extends Raider
         CROSSBOW_HOLD, 
         CROSSBOW_CHARGE, 
         CELEBRATING, 
-        NEUTRAL;
+        NEUTRAL
     }
     
     public class RaiderOpenDoorGoal extends OpenDoorGoal
diff --git a/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java b/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java
index 2b0e05531b7ff2522bb36d8361845c009b712d24..468682dea56f91a984458dbddf1b0ec54d51929d 100644
--- a/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java
+++ b/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java
@@ -78,14 +78,14 @@ public abstract class AbstractSkeleton extends Monster implements RangedAttackMo
     protected void registerGoals() {
         this.goalSelector.addGoal(2, new RestrictSunGoal(this));
         this.goalSelector.addGoal(3, new FleeSunGoal(this, 1.0));
-        this.goalSelector.addGoal(3, new AvoidEntityGoal<Object>(this, Wolf.class, 6.0f, 1.0, 1.2));
+        this.goalSelector.addGoal(3, new AvoidEntityGoal<>(this, Wolf.class, 6.0f, 1.0, 1.2)); // MagmaCube - decompile error
         this.goalSelector.addGoal(5, new WaterAvoidingRandomStrollGoal(this, 1.0));
         this.goalSelector.addGoal(6, new LookAtPlayerGoal(this, Player.class, 8.0f));
         this.goalSelector.addGoal(6, new RandomLookAroundGoal(this));
         this.targetSelector.addGoal(1, new HurtByTargetGoal(this, (Class<?>[])new Class[0]));
-        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<Object>(this, Player.class, true));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, IronGolem.class, true));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, Turtle.class, 10, true, false, Turtle.BABY_ON_LAND_SELECTOR));
+        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true)); // MagmaCube - decompile error
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, true)); // MagmaCube - decompile error
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Turtle.class, 10, true, false, Turtle.BABY_ON_LAND_SELECTOR)); // MagmaCube - decompile error
     }
     
     public static AttributeSupplier.Builder createAttributes() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/ElderGuardian.java b/src/main/java/net/minecraft/world/entity/monster/ElderGuardian.java
index 874d3f118c6670368be856bff3c581492aba3619..91bca8a0fa4b6a6ec3a692a15430af8a98c9de06 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ElderGuardian.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ElderGuardian.java
@@ -1,13 +1,10 @@
 package net.minecraft.world.entity.monster;
 
-import java.util.Iterator;
 import java.util.List;
 import net.minecraft.world.effect.MobEffect;
 import net.minecraft.world.effect.MobEffectInstance;
-import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientboundGameEventPacket;
 import net.minecraft.server.level.ServerPlayer;
-import net.minecraft.world.entity.Entity;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.damagesource.DamageSource;
diff --git a/src/main/java/net/minecraft/world/entity/monster/Husk.java b/src/main/java/net/minecraft/world/entity/monster/Husk.java
index aba2c7b85759670cecb46ae3a624d51f114ed906..8fd1ee73c11887cb6f31a8582a50e28a3f76b206 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Husk.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Husk.java
@@ -1,7 +1,6 @@
 package net.minecraft.world.entity.monster;
 
 import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.LivingEntity;
diff --git a/src/main/java/net/minecraft/world/entity/monster/Monster.java b/src/main/java/net/minecraft/world/entity/monster/Monster.java
index d076d0039530f5cb8670d2d1d28e5005e9bd3297..8ada170facbb18ba062ae054e605d0efee97bffb 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Monster.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Monster.java
@@ -1,9 +1,8 @@
 package net.minecraft.world.entity.monster;
 
 import java.util.function.Predicate;
-import net.minecraft.world.level.ItemLike;
+
 import net.minecraft.world.item.Items;
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.item.ProjectileWeaponItem;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.entity.player.Player;
diff --git a/src/main/java/net/minecraft/world/entity/monster/Skeleton.java b/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
index cb09128e4936efef7fcd6d93609181ba12c5f501..ad46fd5fe9ee06fc1cdcba637fb175feb8895991 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
@@ -1,7 +1,6 @@
 package net.minecraft.world.entity.monster;
 
 import net.minecraft.world.entity.Entity;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.sounds.SoundEvents;
diff --git a/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java b/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java
index 45c4ca62cbb7339197e7ba54e177cbdc8bc929ab..120449119e34ba8a648a5d258f2559ee85f1ed7c 100644
--- a/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java
+++ b/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java
@@ -16,13 +16,10 @@ import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.entity.Entity;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundEvent;
-import net.minecraft.world.entity.ai.goal.Goal;
-import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
 import net.minecraft.world.entity.monster.piglin.AbstractPiglin;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
@@ -38,7 +35,7 @@ public class WitherSkeleton extends AbstractSkeleton
     
     @Override
     protected void registerGoals() {
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, AbstractPiglin.class, true));
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractPiglin.class, true)); // MagmaCube - decompile fix
         super.registerGoals();
     }
     
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zombie.java b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
index 4bb8b496a1850e8d974f5d4e4b261ce496d026ca..dfafa422f5456fe33a8f8b273e191f7327d5a5d5 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zombie.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
@@ -108,10 +108,12 @@ public class Zombie extends Monster
         this.goalSelector.addGoal(6, new MoveThroughVillageGoal(this, 1.0, true, 4, this::canBreakDoors));
         this.goalSelector.addGoal(7, new WaterAvoidingRandomStrollGoal(this, 1.0));
         this.targetSelector.addGoal(1, new HurtByTargetGoal(this, (Class<?>[])new Class[0]).setAlertOthers(ZombifiedPiglin.class));
-        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<Object>(this, Player.class, true));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, AbstractVillager.class, false));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, IronGolem.class, true));
-        this.targetSelector.addGoal(5, new NearestAttackableTargetGoal<Object>(this, Turtle.class, 10, true, false, Turtle.BABY_ON_LAND_SELECTOR));
+        // MagmaCube start - decompile error
+        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true));
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractVillager.class, false));
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, true));
+        this.targetSelector.addGoal(5, new NearestAttackableTargetGoal<>(this, Turtle.class, 10, true, false, Turtle.BABY_ON_LAND_SELECTOR));
+        // MagmaCube end - decompile error
     }
     
     public static AttributeSupplier.Builder createAttributes() {
@@ -393,7 +395,7 @@ public class Zombie extends Monster
             final ZombieVillager zombieVillager = villager.convertTo(EntityType.ZOMBIE_VILLAGER, false);
             zombieVillager.finalizeSpawn(serverLevel, serverLevel.getCurrentDifficultyAt(zombieVillager.blockPosition()), MobSpawnType.CONVERSION, new ZombieGroupData(false, true), null);
             zombieVillager.setVillagerData(villager.getVillagerData());
-            zombieVillager.setGossips((net.minecraft.nbt.Tag)villager.getGossips().store((com.mojang.serialization.DynamicOps<Object>)NbtOps.INSTANCE).getValue());
+            zombieVillager.setGossips((net.minecraft.nbt.Tag)villager.getGossips().store(NbtOps.INSTANCE).getValue()); // MagmaCube - decompile error
             zombieVillager.setTradeOffers(villager.getOffers().createTag());
             zombieVillager.setVillagerXp(villager.getVillagerXp());
             if (!this.isSilent()) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/StopHoldingItemIfNoLongerAdmiring.java b/src/main/java/net/minecraft/world/entity/monster/piglin/StopHoldingItemIfNoLongerAdmiring.java
index 59f1b5c52de0d3caaf5a1b4ad76448aa86317541..a8348a4030324f558da45c5059710483b47df437 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/StopHoldingItemIfNoLongerAdmiring.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/StopHoldingItemIfNoLongerAdmiring.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.entity.monster.piglin;
 
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.item.Items;
 import net.minecraft.server.level.ServerLevel;
 import java.util.Map;
diff --git a/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java b/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
index 998afd0ef4d1d25f07cb3b87bc4cee3ae5fd4871..ac84e0fbb1f7bdac25f355a314e50e4bf90d6106 100644
--- a/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
@@ -232,7 +232,7 @@ public abstract class AbstractVillager extends AgableMob implements Npc, Merchan
     protected abstract void updateTrades();
     
     protected void addOffersFromItemListings(final MerchantOffers merchantOffers, final VillagerTrades.ItemListing[] itemListings, final int i) {
-        final Set<Integer> set = (Set<Integer>)Sets.newHashSet();
+        final Set<Integer> set = Sets.newHashSet(); // MagmaCube - decompile error
         if (itemListings.length > i) {
             while (set.size() < i) {
                 set.add(this.random.nextInt(itemListings.length));
diff --git a/src/main/java/net/minecraft/world/entity/npc/CatSpawner.java b/src/main/java/net/minecraft/world/entity/npc/CatSpawner.java
index d538ec8509bb2db8e7d7aba8db13b8ff27d2ad57..41955e3c5f86f4ad3fc93887f32de38e9d6c6d37 100644
--- a/src/main/java/net/minecraft/world/entity/npc/CatSpawner.java
+++ b/src/main/java/net/minecraft/world/entity/npc/CatSpawner.java
@@ -1,11 +1,7 @@
 package net.minecraft.world.entity.npc;
 
-import net.minecraft.world.entity.Entity;
-import net.minecraft.nbt.CompoundTag;
-import net.minecraft.world.entity.SpawnGroupData;
-import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.entity.MobSpawnType;
-import net.minecraft.world.level.Level;
+
 import java.util.List;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.entity.animal.Cat;
@@ -15,7 +11,6 @@ import net.minecraft.core.BlockPos;
 import java.util.Random;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.levelgen.feature.StructureFeature;
-import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.NaturalSpawner;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.SpawnPlacements;
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 28ff097e5a88f787d3e79bc46a72ab491496f05d..a96c1f6b6e93904c50ec712941fed73c49f42c84 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -99,7 +99,7 @@ implements ReputationEventHandler,
 VillagerDataHolder {
     private static final EntityDataAccessor<VillagerData> DATA_VILLAGER_DATA = SynchedEntityData.defineId(Villager.class, EntityDataSerializers.VILLAGER_DATA);
     public static final Map<Item, Integer> FOOD_POINTS = ImmutableMap.of(Items.BREAD, 4, Items.POTATO, 1, Items.CARROT, 1, Items.BEETROOT, 1);
-    private static final Set<Item> WANTED_ITEMS = ImmutableSet.of(Items.BREAD, Items.POTATO, Items.CARROT, Items.WHEAT, Items.WHEAT_SEEDS, Items.BEETROOT, (Object[])new Item[]{Items.BEETROOT_SEEDS});
+    private static final Set<Item> WANTED_ITEMS = ImmutableSet.of(Items.BREAD, Items.POTATO, Items.CARROT, Items.WHEAT, Items.WHEAT_SEEDS, Items.BEETROOT, Items.BEETROOT_SEEDS); // MagmaCube - decompile error
     private int updateMerchantTimer;
     private boolean increaseProfessionLevelOnUpdate;
     @Nullable
@@ -113,7 +113,8 @@ VillagerDataHolder {
     private int numberOfRestocksToday;
     private long lastRestockCheckDayTime;
     private boolean assignProfessionWhenSpawned;
-    private static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.HOME, MemoryModuleType.JOB_SITE, MemoryModuleType.POTENTIAL_JOB_SITE, MemoryModuleType.MEETING_POINT, MemoryModuleType.LIVING_ENTITIES, MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.VISIBLE_VILLAGER_BABIES, MemoryModuleType.NEAREST_PLAYERS, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.WALK_TARGET, (Object[])new MemoryModuleType[]{MemoryModuleType.LOOK_TARGET, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.BREED_TARGET, MemoryModuleType.PATH, MemoryModuleType.DOORS_TO_CLOSE, MemoryModuleType.NEAREST_BED, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.NEAREST_HOSTILE, MemoryModuleType.SECONDARY_JOB_SITE, MemoryModuleType.HIDING_PLACE, MemoryModuleType.HEARD_BELL_TIME, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.LAST_SLEPT, MemoryModuleType.LAST_WOKEN, MemoryModuleType.LAST_WORKED_AT_POI, MemoryModuleType.GOLEM_DETECTED_RECENTLY});
+    // MagmaCube - decompile error
+    private static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.HOME, MemoryModuleType.JOB_SITE, MemoryModuleType.POTENTIAL_JOB_SITE, MemoryModuleType.MEETING_POINT, MemoryModuleType.LIVING_ENTITIES, MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.VISIBLE_VILLAGER_BABIES, MemoryModuleType.NEAREST_PLAYERS, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.WALK_TARGET, new MemoryModuleType[]{MemoryModuleType.LOOK_TARGET, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.BREED_TARGET, MemoryModuleType.PATH, MemoryModuleType.DOORS_TO_CLOSE, MemoryModuleType.NEAREST_BED, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.NEAREST_HOSTILE, MemoryModuleType.SECONDARY_JOB_SITE, MemoryModuleType.HIDING_PLACE, MemoryModuleType.HEARD_BELL_TIME, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.LAST_SLEPT, MemoryModuleType.LAST_WOKEN, MemoryModuleType.LAST_WORKED_AT_POI, MemoryModuleType.GOLEM_DETECTED_RECENTLY});
     private static final ImmutableList<SensorType<? extends Sensor<? super Villager>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.NEAREST_BED, SensorType.HURT_BY, SensorType.VILLAGER_HOSTILES, SensorType.VILLAGER_BABIES, SensorType.SECONDARY_POIS, SensorType.GOLEM_DETECTED);
     public static final Map<MemoryModuleType<GlobalPos>, BiPredicate<Villager, PoiType>> POI_MEMORIES = ImmutableMap.of(MemoryModuleType.HOME, (villager, poiType) -> poiType == PoiType.HOME, MemoryModuleType.JOB_SITE, (villager, poiType) -> villager.getVillagerData().getProfession().getJobPoiType() == poiType, MemoryModuleType.POTENTIAL_JOB_SITE, (villager, poiType) -> PoiType.ALL_JOBS.test((PoiType)poiType), MemoryModuleType.MEETING_POINT, (villager, poiType) -> poiType == PoiType.MEETING);
 
@@ -130,7 +131,7 @@ VillagerDataHolder {
     }
 
     public Brain<Villager> getBrain() {
-        return super.getBrain();
+        return (Brain<Villager>) super.getBrain(); // MagmaCube - decompile error
     }
 
     protected Brain.Provider<Villager> brainProvider() {
@@ -158,10 +159,10 @@ VillagerDataHolder {
             brain.addActivity(Activity.PLAY, VillagerGoalPackages.getPlayPackage(0.5f));
         } else {
             brain.setSchedule(Schedule.VILLAGER_DEFAULT);
-            brain.addActivityWithConditions(Activity.WORK, (ImmutableList<Pair<Integer, Behavior<Villager>>>)VillagerGoalPackages.getWorkPackage(villagerProfession, 0.5f), (Set<Pair<MemoryModuleType<?>, MemoryStatus>>)ImmutableSet.of(Pair.of(MemoryModuleType.JOB_SITE, (MemoryStatus.VALUE_PRESENT))));
+            brain.addActivityWithConditions(Activity.WORK, VillagerGoalPackages.getWorkPackage(villagerProfession, 0.5f), ImmutableSet.of(Pair.of(MemoryModuleType.JOB_SITE, (MemoryStatus.VALUE_PRESENT)))); // MagmaCube - decompile error
         }
         brain.addActivity(Activity.CORE, VillagerGoalPackages.getCorePackage(villagerProfession, 0.5f));
-        brain.addActivityWithConditions(Activity.MEET, (ImmutableList<Pair<Integer, Behavior<Villager>>>)VillagerGoalPackages.getMeetPackage(villagerProfession, 0.5f), (Set<Pair<MemoryModuleType<?>, MemoryStatus>>)ImmutableSet.of(Pair.of(MemoryModuleType.MEETING_POINT, (MemoryStatus.VALUE_PRESENT))));
+        brain.addActivityWithConditions(Activity.MEET, VillagerGoalPackages.getMeetPackage(villagerProfession, 0.5f), ImmutableSet.of(Pair.of(MemoryModuleType.MEETING_POINT, (MemoryStatus.VALUE_PRESENT)))); // MagmaCube - decompile error
         brain.addActivity(Activity.REST, VillagerGoalPackages.getRestPackage(villagerProfession, 0.5f));
         brain.addActivity(Activity.IDLE, VillagerGoalPackages.getIdlePackage(villagerProfession, 0.5f));
         brain.addActivity(Activity.PANIC, VillagerGoalPackages.getPanicPackage(villagerProfession, 0.5f));
@@ -397,7 +398,7 @@ VillagerDataHolder {
     public void readAdditionalSaveData(CompoundTag compoundTag) {
         super.readAdditionalSaveData(compoundTag);
         if (compoundTag.contains("VillagerData", 10)) {
-            DataResult dataResult = VillagerData.CODEC.parse(new Dynamic((DynamicOps)NbtOps.INSTANCE, compoundTag.get("VillagerData")));
+            DataResult<VillagerData> dataResult = VillagerData.CODEC.parse(new Dynamic((DynamicOps)NbtOps.INSTANCE, compoundTag.get("VillagerData"))); // MagmaCube - type
             dataResult.resultOrPartial(((Logger)LOGGER)::error).ifPresent(this::setVillagerData);
         }
         if (compoundTag.contains("Offers", 10)) {
@@ -640,9 +641,9 @@ VillagerDataHolder {
         VillagerType villagerType3;
         double d = this.random.nextDouble();
         if (d < 0.5) {
-            VillagerType villagerType = VillagerType.byBiome(serverLevel.getBiomeName(this.blockPosition()));
+            villagerType3 = VillagerType.byBiome(serverLevel.getBiomeName(this.blockPosition())); // MagmaCube - decompile error
         } else if (d < 0.75) {
-            VillagerType villagerType2 = this.getVillagerData().getType();
+            villagerType3 = this.getVillagerData().getType(); // MagmaCube - decompile error
         } else {
             villagerType3 = ((Villager)agableMob).getVillagerData().getType();
         }
@@ -874,9 +875,4 @@ VillagerDataHolder {
         }
         return false;
     }
-
-    @Override
-    public /* synthetic */ AgableMob getBreedOffspring(ServerLevel serverLevel, AgableMob agableMob) {
-        return this.getBreedOffspring(serverLevel, agableMob);
-    }
 }
diff --git a/src/main/java/net/minecraft/world/entity/npc/WanderingTraderSpawner.java b/src/main/java/net/minecraft/world/entity/npc/WanderingTraderSpawner.java
index fc75fd317f9e8fc91262267cb304827374e2ff47..4447f6cd8c34990aeead97943b4af797a16ffdbc 100644
--- a/src/main/java/net/minecraft/world/entity/npc/WanderingTraderSpawner.java
+++ b/src/main/java/net/minecraft/world/entity/npc/WanderingTraderSpawner.java
@@ -1,15 +1,11 @@
 package net.minecraft.world.entity.npc;
 
-import java.util.Iterator;
 import javax.annotation.Nullable;
 import net.minecraft.world.level.NaturalSpawner;
 import net.minecraft.world.entity.SpawnPlacements;
 import net.minecraft.world.level.levelgen.Heightmap;
-import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.animal.horse.TraderLlama;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.network.chat.Component;
-import net.minecraft.nbt.CompoundTag;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.EntityType;
 import java.util.Optional;
diff --git a/src/main/java/net/minecraft/world/entity/player/Abilities.java b/src/main/java/net/minecraft/world/entity/player/Abilities.java
index c7e9a759d564af0faf55c132a1aeaff24a53ce3e..13534ae0a5e21f3f57a3fc45ae2993e4ca47f52a 100644
--- a/src/main/java/net/minecraft/world/entity/player/Abilities.java
+++ b/src/main/java/net/minecraft/world/entity/player/Abilities.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.entity.player;
 
-import net.minecraft.nbt.Tag;
 import net.minecraft.nbt.CompoundTag;
 
 public class Abilities
diff --git a/src/main/java/net/minecraft/world/entity/player/Inventory.java b/src/main/java/net/minecraft/world/entity/player/Inventory.java
index bf8f0c5f39c27c8a4018bf2ecea9ae0bde0c047c..7826deb38b6fe26bb9f00a18b5f97ece51f45d4c 100644
--- a/src/main/java/net/minecraft/world/entity/player/Inventory.java
+++ b/src/main/java/net/minecraft/world/entity/player/Inventory.java
@@ -380,7 +380,7 @@ public class Inventory implements Container, Nameable
                 final CompoundTag compoundTag = new CompoundTag();
                 compoundTag.putByte("Slot", (byte)i);
                 this.items.get(i).save(compoundTag);
-                ((AbstractList<CompoundTag>)listTag).add(compoundTag);
+                (listTag).add(compoundTag); // MagmaCube - decompile error
             }
         }
         for (int i2 = 0; i2 < this.armor.size(); ++i2) {
@@ -388,7 +388,7 @@ public class Inventory implements Container, Nameable
                 final CompoundTag compoundTag2 = new CompoundTag();
                 compoundTag2.putByte("Slot", (byte)(i2 + 100));
                 this.armor.get(i2).save(compoundTag2);
-                ((AbstractList<CompoundTag>)listTag).add(compoundTag2);
+                (listTag).add(compoundTag2); // MagmaCube - decompile error
             }
         }
         for (int i3 = 0; i3 < this.offhand.size(); ++i3) {
@@ -396,7 +396,7 @@ public class Inventory implements Container, Nameable
                 final CompoundTag compoundTag3 = new CompoundTag();
                 compoundTag3.putByte("Slot", (byte)(i3 + 150));
                 this.offhand.get(i3).save(compoundTag3);
-                ((AbstractList<CompoundTag>)listTag).add(compoundTag3);
+                (listTag).add(compoundTag3); // MagmaCube - decompile error
             }
         }
         return listTag;
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 61bb6ed9b1f2a5995db779060f83e9f632af9a63..0d4a7b76b8f33f2cb767ab83acf28beae2fc88ed 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -339,29 +339,29 @@ public abstract class Player extends LivingEntity
         }
         final Pose pose6;
         if (this.isFallFlying()) {
-            final Pose pose = Pose.FALL_FLYING;
+            pose6 = Pose.FALL_FLYING; // MagmaCube - decompile error
         }
         else if (this.isSleeping()) {
-            final Pose pose2 = Pose.SLEEPING;
+            pose6 = Pose.SLEEPING; // MagmaCube - decompile error
         }
         else if (this.isSwimming()) {
-            final Pose pose3 = Pose.SWIMMING;
+            pose6 = Pose.SWIMMING; // MagmaCube - decompile error
         }
         else if (this.isAutoSpinAttack()) {
-            final Pose pose4 = Pose.SPIN_ATTACK;
+            pose6 = Pose.SPIN_ATTACK; // MagmaCube - decompile error
         }
         else if (this.isShiftKeyDown() && !this.abilities.flying) {
-            final Pose pose5 = Pose.CROUCHING;
+            pose6 = Pose.CROUCHING; // MagmaCube - decompile error
         }
         else {
             pose6 = Pose.STANDING;
         }
         final Pose pose9;
         if (this.isSpectator() || this.isPassenger() || this.canEnterPose(pose6)) {
-            final Pose pose7 = pose6;
+            pose9 = pose6; // MagmaCube - decompile error
         }
         else if (this.canEnterPose(Pose.CROUCHING)) {
-            final Pose pose8 = Pose.CROUCHING;
+            pose9 = Pose.CROUCHING; // MagmaCube - decompile error
         }
         else {
             pose9 = Pose.SWIMMING;
@@ -492,12 +492,12 @@ public abstract class Player extends LivingEntity
         super.aiStep();
         this.flyingSpeed = 0.02f;
         if (this.isSprinting()) {
-            this.flyingSpeed += 0.005999999865889549;
+            this.flyingSpeed = (float) (this.flyingSpeed + 0.005999999865889549);
         }
         this.setSpeed((float)this.getAttributeValue(Attributes.MOVEMENT_SPEED));
         final float f2;
         if (!this.onGround || this.isDeadOrDying() || this.isSwimming()) {
-            final float f = 0.0f;
+            f2 = 0.0f; // MagmaCube - decompile error
         }
         else {
             f2 = Math.min(0.1f, Mth.sqrt(Entity.getHorizontalDistanceSqr(this.getDeltaMovement())));
@@ -506,7 +506,7 @@ public abstract class Player extends LivingEntity
         if (this.getHealth() > 0.0f && !this.isSpectator()) {
             final AABB aabb2;
             if (this.isPassenger() && !this.getVehicle().removed) {
-                final AABB aabb = this.getBoundingBox().minmax(this.getVehicle().getBoundingBox()).inflate(1.0, 0.0, 1.0);
+                aabb2 = this.getBoundingBox().minmax(this.getVehicle().getBoundingBox()).inflate(1.0, 0.0, 1.0); // MagmaCube - decompile error
             }
             else {
                 aabb2 = this.getBoundingBox().inflate(1.0, 0.5, 1.0);
@@ -668,15 +668,15 @@ public abstract class Player extends LivingEntity
             final float f5;
             switch (this.getEffect(MobEffects.DIG_SLOWDOWN).getAmplifier()) {
                 case 0: {
-                    final float f2 = 0.3f;
+                    f5 = 0.3f; // MagmaCube - decompile error
                     break;
                 }
                 case 1: {
-                    final float f3 = 0.09f;
+                    f5 = 0.09f; // MagmaCube - decompile error
                     break;
                 }
                 case 2: {
-                    final float f4 = 0.0027f;
+                    f5 = 0.0027f; // MagmaCube - decompile error
                     break;
                 }
                 default: {
@@ -1203,7 +1203,7 @@ public abstract class Player extends LivingEntity
     public Either<BedSleepingProblem, Unit> startSleepInBed(final BlockPos blockPos) {
         this.startSleeping(blockPos);
         this.sleepCounter = 0;
-        return (Either<BedSleepingProblem, Unit>)Either.right(Unit.INSTANCE);
+        return Either.right(Unit.INSTANCE); // MagmaCube - decompile error
     }
     
     public void stopSleepInBed(final boolean flag, final boolean flag2) {
@@ -1225,7 +1225,7 @@ public abstract class Player extends LivingEntity
         if (block instanceof RespawnAnchorBlock && blockState.getValue((Property<Integer>)RespawnAnchorBlock.CHARGE) > 0 && RespawnAnchorBlock.canSetSpawn(serverLevel)) {
             final Optional<Vec3> optional = RespawnAnchorBlock.findStandUpPosition(EntityType.PLAYER, serverLevel, blockPos);
             if (!flag2 && optional.isPresent()) {
-                serverLevel.setBlock(blockPos, ((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)RespawnAnchorBlock.CHARGE, blockState.getValue((Property<Integer>)RespawnAnchorBlock.CHARGE) - 1), 3);
+                serverLevel.setBlock(blockPos, blockState.setValue(RespawnAnchorBlock.CHARGE, blockState.getValue((Property<Integer>)RespawnAnchorBlock.CHARGE) - 1), 3); // MagmaCube - decompile error
             }
             return optional;
         }
@@ -1486,7 +1486,7 @@ public abstract class Player extends LivingEntity
     
     public void giveExperiencePoints(final int i) {
         this.increaseScore(i);
-        this.experienceProgress += i / this.getXpNeededForNextLevel();
+        this.experienceProgress += (float) i / this.getXpNeededForNextLevel(); // MagmaCube - decompile error
         this.totalExperience = Mth.clamp(this.totalExperience + i, 0, Integer.MAX_VALUE);
         while (this.experienceProgress < 0.0f) {
             final float f = this.experienceProgress * this.getXpNeededForNextLevel();
@@ -1657,7 +1657,7 @@ public abstract class Player extends LivingEntity
     
     @Override
     public Iterable<ItemStack> getHandSlots() {
-        return (Iterable<ItemStack>)Lists.newArrayList((Object[])new ItemStack[] { this.getMainHandItem(), this.getOffhandItem() });
+        return (Iterable<ItemStack>)Lists.newArrayList(new ItemStack[] { this.getMainHandItem(), this.getOffhandItem() }); // MagmaCube - decompile error
     }
     
     @Override
@@ -1695,7 +1695,7 @@ public abstract class Player extends LivingEntity
         if (!this.level.isClientSide && !compoundTag.isEmpty()) {
             EntityType.create(compoundTag, this.level).ifPresent(entity -> {
                 if (entity instanceof TamableAnimal) {
-                    entity.setOwnerUUID(this.uuid);
+                    ((TamableAnimal) entity).setOwnerUUID(this.uuid); // MagmaCube - decompile error
                 }
                 entity.setPos(this.getX(), this.getY() + 0.699999988079071, this.getZ());
                 ((ServerLevel)this.level).addWithUUID(entity);
@@ -1730,11 +1730,11 @@ public abstract class Player extends LivingEntity
     
     private MutableComponent decorateDisplayNameComponent(final MutableComponent mutableComponent) {
         final String s = this.getGameProfile().getName();
-        final ClickEvent clickEvent;
-        final String s2;
         return mutableComponent.withStyle(style -> {
-            new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, "/tell " + s2 + " ");
-            return style.withClickEvent(clickEvent).withHoverEvent(this.createHoverEvent()).withInsertion(s2);
+            // MagmaCube start - decompile error
+            ClickEvent clickEvent = new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, "/tell " + s + " ");
+            return style.withClickEvent(clickEvent).withHoverEvent(this.createHoverEvent()).withInsertion(s);
+            // MagmaCube end - decompile error
         });
     }
     
@@ -1796,16 +1796,16 @@ public abstract class Player extends LivingEntity
         }
         final EquipmentSlot equipmentSlot5;
         if (i == 100 + EquipmentSlot.HEAD.getIndex()) {
-            final EquipmentSlot equipmentSlot = EquipmentSlot.HEAD;
+            equipmentSlot5 = EquipmentSlot.HEAD; // MagmaCube - decompile error
         }
         else if (i == 100 + EquipmentSlot.CHEST.getIndex()) {
-            final EquipmentSlot equipmentSlot2 = EquipmentSlot.CHEST;
+            equipmentSlot5 = EquipmentSlot.CHEST; // MagmaCube - decompile error
         }
         else if (i == 100 + EquipmentSlot.LEGS.getIndex()) {
-            final EquipmentSlot equipmentSlot3 = EquipmentSlot.LEGS;
+            equipmentSlot5 = EquipmentSlot.LEGS; // MagmaCube - decompile error
         }
         else if (i == 100 + EquipmentSlot.FEET.getIndex()) {
-            final EquipmentSlot equipmentSlot4 = EquipmentSlot.FEET;
+            equipmentSlot5 = EquipmentSlot.FEET; // MagmaCube - decompile error
         }
         else {
             equipmentSlot5 = null;
@@ -1973,7 +1973,7 @@ public abstract class Player extends LivingEntity
             if (d2 > 0.0 && d3 > 0.0) {
                 final double d4 = (vec4.x * vec3.x + vec4.z * vec3.z) / Math.sqrt(d2 * d3);
                 final double d5 = vec4.x * vec3.z - vec4.z * vec3.x;
-                final float f4 = (float)(Math.signum(d5) * Math.acos(d4));
+                f5 = (float)(Math.signum(d5) * Math.acos(d4)); // MagmaCube - decompile error
             }
             else {
                 f5 = 0.0f;
diff --git a/src/main/java/net/minecraft/world/entity/player/StackedContents.java b/src/main/java/net/minecraft/world/entity/player/StackedContents.java
index d79985e3ed0c3313066b38ee77e56f2e2053e346..d70aa349ff770f006d5e72bb3c1137ec8e1c74a9 100644
--- a/src/main/java/net/minecraft/world/entity/player/StackedContents.java
+++ b/src/main/java/net/minecraft/world/entity/player/StackedContents.java
@@ -106,7 +106,7 @@ public class StackedContents
         private final IntList path;
         
         public RecipePicker(final Recipe<?> recipe) {
-            this.ingredients = (List<Ingredient>)Lists.newArrayList();
+            this.ingredients = Lists.newArrayList(); // MagmaCube - decompile error
             this.path = (IntList)new IntArrayList();
             this.recipe = recipe;
             this.ingredients.addAll(recipe.getIngredients());
diff --git a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
index b933ee47b9924eeff6aceedd79fcceff5e124df9..08b9a4c7537f985257f1449749e97783b48755d2 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
@@ -283,7 +283,7 @@ public abstract class AbstractArrow extends Projectile
                 this.piercingIgnoreEntityIds = new IntOpenHashSet(5);
             }
             if (this.piercedAndKilledEntities == null) {
-                this.piercedAndKilledEntities = (List<Entity>)Lists.newArrayListWithCapacity(5);
+                this.piercedAndKilledEntities = Lists.newArrayListWithCapacity(5); // MagmaCube - decompile error
             }
             if (this.piercingIgnoreEntityIds.size() >= this.getPierceLevel() + 1) {
                 this.remove();
@@ -298,7 +298,7 @@ public abstract class AbstractArrow extends Projectile
         final Entity entity2 = this.getOwner();
         final DamageSource damageSource2;
         if (entity2 == null) {
-            final DamageSource damageSource = DamageSource.arrow(this, this);
+            damageSource2 = DamageSource.arrow(this, this); // MagmaCube - decompile error
         }
         else {
             damageSource2 = DamageSource.arrow(this, entity2);
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Arrow.java b/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
index f150c15a96bb8efeb50a410f65fe58027757b516..d8d2b430e9b90e1b6e0eae8d852e69d0b3876b8f 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
@@ -36,19 +36,19 @@ public class Arrow extends AbstractArrow
     public Arrow(final EntityType<? extends Arrow> entityType, final Level level) {
         super(entityType, level);
         this.potion = Potions.EMPTY;
-        this.effects = (Set<MobEffectInstance>)Sets.newHashSet();
+        this.effects = Sets.newHashSet(); // MagmaCube - decompile error
     }
     
     public Arrow(final Level level, final double d, final double d2, final double d3) {
         super(EntityType.ARROW, d, d2, d3, level);
         this.potion = Potions.EMPTY;
-        this.effects = (Set<MobEffectInstance>)Sets.newHashSet();
+        this.effects = Sets.newHashSet(); // MagmaCube - decompile error
     }
     
     public Arrow(final Level level, final LivingEntity livingEntity) {
         super(EntityType.ARROW, livingEntity, level);
         this.potion = Potions.EMPTY;
-        this.effects = (Set<MobEffectInstance>)Sets.newHashSet();
+        this.effects = Sets.newHashSet(); // MagmaCube - decompile error
     }
     
     public void setEffectsFromItem(final ItemStack itemStack) {
@@ -159,7 +159,7 @@ public class Arrow extends AbstractArrow
         if (!this.effects.isEmpty()) {
             final ListTag listTag = new ListTag();
             for (final MobEffectInstance mobEffectInstance : this.effects) {
-                ((AbstractList<CompoundTag>)listTag).add(mobEffectInstance.save(new CompoundTag()));
+                listTag.add(mobEffectInstance.save(new CompoundTag())); // MagmaCube - decompile error
             }
             compoundTag.put("CustomPotionEffects", listTag);
         }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Fireball.java b/src/main/java/net/minecraft/world/entity/projectile/Fireball.java
index 5f53502edfbb614ea6baf53f40d387afdeb34a57..184c804e1eb39e42f093d36a0009acd668f36d36 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Fireball.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Fireball.java
@@ -32,7 +32,7 @@ public abstract class Fireball extends AbstractHurtingProjectile implements Item
     
     public void setItem(final ItemStack itemStack) {
         if (itemStack.getItem() != Items.FIRE_CHARGE || itemStack.hasTag()) {
-            this.getEntityData().set(Fireball.DATA_ITEM_STACK, (ItemStack)Util.make((T)itemStack.copy(), itemStack -> itemStack.setCount(1)));
+            this.getEntityData().set(Fireball.DATA_ITEM_STACK, (ItemStack)Util.make(itemStack.copy(), itemStack1 -> itemStack1.setCount(1))); // MagmaCube - decompile error
         }
     }
     
diff --git a/src/main/java/net/minecraft/world/entity/projectile/SmallFireball.java b/src/main/java/net/minecraft/world/entity/projectile/SmallFireball.java
index c469b000db4c564595454fd035f784a72912aa9b..90212c17490711e9a2e00d7b4044b732cbae4b22 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/SmallFireball.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/SmallFireball.java
@@ -2,7 +2,6 @@ package net.minecraft.world.entity.projectile;
 
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.core.BlockPos;
-import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.BaseFireBlock;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.entity.Mob;
diff --git a/src/main/java/net/minecraft/world/entity/projectile/SpectralArrow.java b/src/main/java/net/minecraft/world/entity/projectile/SpectralArrow.java
index cf16d2c656c17ffbc4e2f0865d40fe7624ca238a..c02a30419be2a6a8bbc589a1e1edc60945dea380 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/SpectralArrow.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/SpectralArrow.java
@@ -3,10 +3,8 @@ package net.minecraft.world.entity.projectile;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.effect.MobEffects;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.ItemStack;
-import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.level.Level;
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ThrownEnderpearl.java b/src/main/java/net/minecraft/world/entity/projectile/ThrownEnderpearl.java
index 32c20039ea0969c6a91b2cebd9aba0c07318c0fb..cc053171a85f914e9de45c2bdc2cb71730a75207 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ThrownEnderpearl.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ThrownEnderpearl.java
@@ -6,7 +6,6 @@ import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.monster.Endermite;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.server.level.ServerPlayer;
-import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.entity.Entity;
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ThrownExperienceBottle.java b/src/main/java/net/minecraft/world/entity/projectile/ThrownExperienceBottle.java
index 4683a216a4013acd8c28613bca349c77574ba833..606016ce78f72bb9102731bd995955c40870b866 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ThrownExperienceBottle.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ThrownExperienceBottle.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.entity.projectile;
 
-import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.ExperienceOrb;
 import net.minecraft.world.item.alchemy.PotionUtils;
 import net.minecraft.world.item.alchemy.Potions;
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
index 3efc8ead6646b175d892f55d2f30ad8fbb65f462..1cdbe9b8fdccbebb283aecf0132e043e7d54ba6d 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -159,7 +159,7 @@ public abstract class AbstractMinecart extends Entity
         for (final Pose pose : immutableList) {
             final EntityDimensions entityDimensions = livingEntity.getDimensions(pose);
             final float f = Math.min(entityDimensions.width, 1.0f) / 2.0f;
-            for (final int i2 : (ImmutableList)AbstractMinecart.POSE_DISMOUNT_HEIGHTS.get(pose)) {
+            for (final int i2 : AbstractMinecart.POSE_DISMOUNT_HEIGHTS.get(pose)) { // MagmaCube - decompile error
                 for (final int[] ints : i) {
                     mutableBlockPos.set(blockPos2.getX() + ints[0], blockPos2.getY() + i2, blockPos2.getZ() + ints[1]);
                     final double d = this.level.getBlockFloorHeight(DismountHelper.nonClimbableShape(this.level, mutableBlockPos), () -> DismountHelper.nonClimbableShape(this.level, mutableBlockPos.below()));
@@ -450,10 +450,10 @@ public abstract class AbstractMinecart extends Entity
         d6 = d16 - d14;
         final double d21;
         if (d5 == 0.0) {
-            final double d17 = d3 - blockPos.getZ();
+            d21 = d3 - blockPos.getZ(); // MagmaCube - decompile error
         }
         else if (d6 == 0.0) {
-            final double d18 = d - blockPos.getX();
+            d21 = d - blockPos.getX(); // MagmaCube - decompile error
         }
         else {
             final double d19 = d - d13;
@@ -596,10 +596,10 @@ public abstract class AbstractMinecart extends Entity
             final double d12 = d9 - d6;
             final double d17;
             if (d10 == 0.0) {
-                final double d13 = d3 - i3;
+                d17 = d3 - i3; // MagmaCube - decompile error
             }
             else if (d12 == 0.0) {
-                final double d14 = d - i;
+                d17 = d - i; // MagmaCube - decompile error
             }
             else {
                 final double d15 = d - d4;
@@ -811,23 +811,17 @@ public abstract class AbstractMinecart extends Entity
         DATA_ID_DISPLAY_OFFSET = SynchedEntityData.defineId(AbstractMinecart.class, EntityDataSerializers.INT);
         DATA_ID_CUSTOM_DISPLAY = SynchedEntityData.defineId(AbstractMinecart.class, EntityDataSerializers.BOOLEAN);
         POSE_DISMOUNT_HEIGHTS = ImmutableMap.of(Pose.STANDING, ImmutableList.of(0, 1, (-1)), Pose.CROUCHING, ImmutableList.of(0, 1, (-1)), Pose.SWIMMING, ImmutableList.of(0, 1));
-        final Vec3i vec3i;
-        final Vec3i vec3i2;
-        final Vec3i vec3i3;
-        final Vec3i vec3i4;
-        final Vec3i vec3i5;
-        final Vec3i vec3i6;
-        final Vec3i vec3i7;
-        final Vec3i vec3i8;
         EXITS = Util.make((Map<RailShape, Pair<Vec3i, Vec3i>>)Maps.newEnumMap((Class)RailShape.class), enumMap -> {
-            vec3i = Direction.WEST.getNormal();
-            vec3i2 = Direction.EAST.getNormal();
-            vec3i3 = Direction.NORTH.getNormal();
-            vec3i4 = Direction.SOUTH.getNormal();
-            vec3i5 = vec3i.below();
-            vec3i6 = vec3i2.below();
-            vec3i7 = vec3i3.below();
-            vec3i8 = vec3i4.below();
+            // MagmaCube start - decompile error
+            Vec3i vec3i = Direction.WEST.getNormal();
+            Vec3i vec3i2 = Direction.EAST.getNormal();
+            Vec3i vec3i3 = Direction.NORTH.getNormal();
+            Vec3i vec3i4 = Direction.SOUTH.getNormal();
+            Vec3i vec3i5 = vec3i.below();
+            Vec3i vec3i6 = vec3i2.below();
+            Vec3i vec3i7 = vec3i3.below();
+            Vec3i vec3i8 = vec3i4.below();
+            // MagmaCube end - decompile error
             enumMap.put(RailShape.NORTH_SOUTH, Pair.of(vec3i3, vec3i4));
             enumMap.put(RailShape.EAST_WEST, Pair.of(vec3i, vec3i2));
             enumMap.put(RailShape.ASCENDING_EAST, Pair.of(vec3i5, vec3i2));
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/Minecart.java b/src/main/java/net/minecraft/world/entity/vehicle/Minecart.java
index 9e9dc790786bdd85d89d26823a684090f328864e..16d6d770e62d0eb298ea83d6b090f6b1b0b492bd 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/Minecart.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/Minecart.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.entity.vehicle;
 
-import net.minecraft.world.entity.Entity;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.entity.player.Player;
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/MinecartChest.java b/src/main/java/net/minecraft/world/entity/vehicle/MinecartChest.java
index 97706f7610d450a5fe54afa4672c0f652665720c..2291d2be57c5ef7de35406a442a71ed22aafa28d 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/MinecartChest.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/MinecartChest.java
@@ -1,15 +1,11 @@
 package net.minecraft.world.entity.vehicle;
 
-import net.minecraft.world.level.block.state.StateHolder;
-import net.minecraft.world.Container;
 import net.minecraft.world.inventory.ChestMenu;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.entity.player.Inventory;
-import net.minecraft.world.level.block.state.properties.Property;
 import net.minecraft.core.Direction;
 import net.minecraft.world.level.block.ChestBlock;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.damagesource.DamageSource;
@@ -46,7 +42,7 @@ public class MinecartChest extends AbstractMinecartContainer
     
     @Override
     public BlockState getDefaultDisplayBlockState() {
-        return ((StateHolder<O, BlockState>)Blocks.CHEST.defaultBlockState()).setValue((Property<Comparable>)ChestBlock.FACING, Direction.NORTH);
+        return Blocks.CHEST.defaultBlockState().setValue(ChestBlock.FACING, Direction.NORTH); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/MinecartHopper.java b/src/main/java/net/minecraft/world/entity/vehicle/MinecartHopper.java
index d66af7fe7630a8c8a04a69b34d4494ab5d17f832..c372ffcfb76f72b997afc229aa199093bbf63bbd 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/MinecartHopper.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/MinecartHopper.java
@@ -4,11 +4,9 @@ import net.minecraft.world.inventory.HopperMenu;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.nbt.CompoundTag;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.damagesource.DamageSource;
 import java.util.List;
-import net.minecraft.world.Container;
 import java.util.function.Predicate;
 import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.item.ItemEntity;
diff --git a/src/main/java/net/minecraft/world/food/FoodProperties.java b/src/main/java/net/minecraft/world/food/FoodProperties.java
index 6a85a815db229f26213a104820df5f87395b11ef..bd683c44dc2a0d903140d0c29393e36a5f2fa1ee 100644
--- a/src/main/java/net/minecraft/world/food/FoodProperties.java
+++ b/src/main/java/net/minecraft/world/food/FoodProperties.java
@@ -57,7 +57,7 @@ public class FoodProperties
         private final List<Pair<MobEffectInstance, Float>> effects;
         
         public Builder() {
-            this.effects = (List<Pair<MobEffectInstance, Float>>)Lists.newArrayList();
+            this.effects = Lists.newArrayList(); // MagmaCube - decompile error
         }
         
         public Builder nutrition(final int i) {
@@ -91,7 +91,7 @@ public class FoodProperties
         }
         
         public FoodProperties build() {
-            return new FoodProperties(this.nutrition, this.saturationModifier, this.isMeat, this.canAlwaysEat, this.fastFood, this.effects, null);
+            return new FoodProperties(this.nutrition, this.saturationModifier, this.isMeat, this.canAlwaysEat, this.fastFood, this.effects); // MagmaCube - decompile error
         }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
index fffa689551d7e39746cd5ca9af5e7fa4766828db..9f276810f4ea407c8a655055eb37e79f30b4b8e3 100644
--- a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -39,12 +39,16 @@ public abstract class AbstractContainerMenu
     
     protected AbstractContainerMenu(@Nullable final MenuType<?> menuType, final int i) {
         this.lastSlots = NonNullList.create();
-        this.slots = (List<Slot>)Lists.newArrayList();
-        this.dataSlots = (List<DataSlot>)Lists.newArrayList();
+        // MagmaCube start - decompile error
+        this.slots = Lists.newArrayList();
+        this.dataSlots = Lists.newArrayList();
+        // MagmaCube end - decompile error
         this.quickcraftType = -1;
-        this.quickcraftSlots = (Set<Slot>)Sets.newHashSet();
-        this.containerListeners = (List<ContainerListener>)Lists.newArrayList();
-        this.unSynchedPlayers = (Set<Player>)Sets.newHashSet();
+        // MagmaCube start - decompile error
+        this.quickcraftSlots = Sets.newHashSet();
+        this.containerListeners = Lists.newArrayList();
+        this.unSynchedPlayers = Sets.newHashSet();
+        // MagmaCube end - decompile error
         this.menuType = menuType;
         this.containerId = i;
     }
@@ -591,7 +595,7 @@ public abstract class AbstractContainerMenu
     public static void getQuickCraftSlotCount(final Set<Slot> set, final int i, final ItemStack itemStack, final int i2) {
         switch (i) {
             case 0: {
-                itemStack.setCount(Mth.floor(itemStack.getCount() / set.size()));
+                itemStack.setCount(Mth.floor((float) itemStack.getCount() / set.size())); // MagmaCube - math
                 break;
             }
             case 1: {
@@ -626,7 +630,7 @@ public abstract class AbstractContainerMenu
         for (int i2 = 0; i2 < container.getContainerSize(); ++i2) {
             final ItemStack itemStack = container.getItem(i2);
             if (!itemStack.isEmpty()) {
-                f += itemStack.getCount() / Math.min(container.getMaxStackSize(), itemStack.getMaxStackSize());
+                f += (float) itemStack.getCount() / Math.min(container.getMaxStackSize(), itemStack.getMaxStackSize()); // MagmaCube - math
                 ++i;
             }
         }
diff --git a/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java b/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java
index 24df5164de08b081863ac0e02ae0b013d5ed1819..3528d4025440e55719797ae323131f3a74b97414 100644
--- a/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java
@@ -63,7 +63,7 @@ public abstract class AbstractFurnaceMenu extends RecipeBookMenu<Container>
     
     @Override
     public void handlePlacement(final boolean flag, final Recipe<?> recipe, final ServerPlayer serverPlayer) {
-        new ServerPlaceSmeltingRecipe<Object>(this).recipeClicked(serverPlayer, recipe, flag);
+        new ServerPlaceSmeltingRecipe<>(this).recipeClicked(serverPlayer, (Recipe<Container>) recipe, flag); // MagmaCube - decompile error
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/inventory/BeaconMenu.java b/src/main/java/net/minecraft/world/inventory/BeaconMenu.java
index 0efaa81cb616fe01a6e63dbfcfe92486836de0f0..a5dfc711a31607d48e328acbcad924428cbb12e6 100644
--- a/src/main/java/net/minecraft/world/inventory/BeaconMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/BeaconMenu.java
@@ -4,8 +4,6 @@ import javax.annotation.Nullable;
 import net.minecraft.world.effect.MobEffect;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.item.Item;
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.ItemTags;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.SimpleContainer;
@@ -146,7 +144,7 @@ public class BeaconMenu extends AbstractContainerMenu
         return !this.beacon.getItem(0).isEmpty();
     }
     
-    class PaymentSlot extends Slot
+    static class PaymentSlot extends Slot
     {
         public PaymentSlot(final Container container, final int i, final int i2, final int i3) {
             super(container, i, i2, i3);
diff --git a/src/main/java/net/minecraft/world/inventory/BlastFurnaceMenu.java b/src/main/java/net/minecraft/world/inventory/BlastFurnaceMenu.java
index fa88e55f58b0f73ea52fbeaa47df5cfbce426414..4ac36d3e25a3330f8ea4605c8dc3ce5daf61ccbf 100644
--- a/src/main/java/net/minecraft/world/inventory/BlastFurnaceMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/BlastFurnaceMenu.java
@@ -1,7 +1,6 @@
 package net.minecraft.world.inventory;
 
 import net.minecraft.world.Container;
-import net.minecraft.world.item.crafting.AbstractCookingRecipe;
 import net.minecraft.world.item.crafting.RecipeType;
 import net.minecraft.world.entity.player.Inventory;
 
diff --git a/src/main/java/net/minecraft/world/inventory/ContainerLevelAccess.java b/src/main/java/net/minecraft/world/inventory/ContainerLevelAccess.java
index a624c3adec16683ec972facd6bc2543e02bcba2a..4ada68bb5497c8fd4dc2b61c72eeb841066f44b2 100644
--- a/src/main/java/net/minecraft/world/inventory/ContainerLevelAccess.java
+++ b/src/main/java/net/minecraft/world/inventory/ContainerLevelAccess.java
@@ -15,7 +15,7 @@ public interface ContainerLevelAccess
         }
     };
     
-    default ContainerLevelAccess create(final Level level, final BlockPos blockPos) {
+    static ContainerLevelAccess create(final Level level, final BlockPos blockPos) { // MagmaCube - default -> static
         return new ContainerLevelAccess() {
             @Override
             public <T> Optional<T> evaluate(final BiFunction<Level, BlockPos, T> biFunction) {
diff --git a/src/main/java/net/minecraft/world/inventory/CraftingContainer.java b/src/main/java/net/minecraft/world/inventory/CraftingContainer.java
index 8fb2978211312cc3da007d134dbd5c30f82c5cbc..bd7f49d3dffabf89306f80a995a7764b36652a6a 100644
--- a/src/main/java/net/minecraft/world/inventory/CraftingContainer.java
+++ b/src/main/java/net/minecraft/world/inventory/CraftingContainer.java
@@ -2,9 +2,7 @@ package net.minecraft.world.inventory;
 
 import net.minecraft.world.entity.player.StackedContents;
 import net.minecraft.world.entity.player.Player;
-import java.util.List;
 import net.minecraft.world.ContainerHelper;
-import java.util.Iterator;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.core.NonNullList;
 import net.minecraft.world.Container;
diff --git a/src/main/java/net/minecraft/world/inventory/FurnaceMenu.java b/src/main/java/net/minecraft/world/inventory/FurnaceMenu.java
index 2641c87f11479d57ff41458d951b76e560ba5e5d..706a20c046fb4a536bc2e7ffaece6ea2068dec9c 100644
--- a/src/main/java/net/minecraft/world/inventory/FurnaceMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/FurnaceMenu.java
@@ -1,7 +1,6 @@
 package net.minecraft.world.inventory;
 
 import net.minecraft.world.Container;
-import net.minecraft.world.item.crafting.AbstractCookingRecipe;
 import net.minecraft.world.item.crafting.RecipeType;
 import net.minecraft.world.entity.player.Inventory;
 
diff --git a/src/main/java/net/minecraft/world/inventory/HorseInventoryMenu.java b/src/main/java/net/minecraft/world/inventory/HorseInventoryMenu.java
index 8ed1dde44896d7422fe1447511a90a8c13528940..c9664eba34c7d73d2996a259cf6e28d65307be4c 100644
--- a/src/main/java/net/minecraft/world/inventory/HorseInventoryMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/HorseInventoryMenu.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.inventory;
 
-import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.animal.horse.AbstractChestedHorse;
 import net.minecraft.world.item.Items;
diff --git a/src/main/java/net/minecraft/world/inventory/LoomMenu.java b/src/main/java/net/minecraft/world/inventory/LoomMenu.java
index 85bccc42b1c49c43491abc3999954030aa10e75e..6d743efcc1df319bea88264ee1ecfb08d895f9cd 100644
--- a/src/main/java/net/minecraft/world/inventory/LoomMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/LoomMenu.java
@@ -88,9 +88,8 @@ public class LoomMenu extends AbstractContainerMenu
                 if (!LoomMenu.this.bannerSlot.hasItem() || !LoomMenu.this.dyeSlot.hasItem()) {
                     LoomMenu.this.selectedBannerPatternIndex.set(0);
                 }
-                final long l;
                 containerLevelAccess.execute((level, blockPos) -> {
-                    l = level.getGameTime();
+                    long l = level.getGameTime(); // MagmaCube - decompile error
                     if (LoomMenu.this.lastSoundTime != l) {
                         level.playSound(null, blockPos, SoundEvents.UI_LOOM_TAKE_RESULT, SoundSource.BLOCKS, 1.0f, 1.0f);
                         LoomMenu.this.lastSoundTime = l;
@@ -232,7 +231,7 @@ public class LoomMenu extends AbstractContainerMenu
                 final CompoundTag compoundTag = itemStack3.getOrCreateTagElement("BlockEntityTag");
                 final ListTag listTag2;
                 if (compoundTag.contains("Patterns", 9)) {
-                    final ListTag listTag = compoundTag.getList("Patterns", 10);
+                    listTag2 = compoundTag.getList("Patterns", 10); // MagmaCube - decompile error
                 }
                 else {
                     listTag2 = new ListTag();
@@ -241,7 +240,7 @@ public class LoomMenu extends AbstractContainerMenu
                 final CompoundTag compoundTag2 = new CompoundTag();
                 compoundTag2.putString("Pattern", bannerPattern.getHashname());
                 compoundTag2.putInt("Color", dyeColor.getId());
-                ((AbstractList<CompoundTag>)listTag2).add(compoundTag2);
+                listTag2.add(compoundTag2); // MagmaCube - decompile error
             }
             if (!ItemStack.matches(itemStack3, this.resultSlot.getItem())) {
                 this.resultSlot.set(itemStack3);
diff --git a/src/main/java/net/minecraft/world/inventory/MerchantContainer.java b/src/main/java/net/minecraft/world/inventory/MerchantContainer.java
index 12c4788e0fe9c0647c62befa8f2b81cd88996903..21cf33e1e69b2886251c206ab86df17c9ca38ffe 100644
--- a/src/main/java/net/minecraft/world/inventory/MerchantContainer.java
+++ b/src/main/java/net/minecraft/world/inventory/MerchantContainer.java
@@ -2,9 +2,8 @@ package net.minecraft.world.inventory;
 
 import net.minecraft.world.item.trading.MerchantOffers;
 import net.minecraft.world.entity.player.Player;
-import java.util.List;
 import net.minecraft.world.ContainerHelper;
-import java.util.Iterator;
+
 import javax.annotation.Nullable;
 import net.minecraft.world.item.trading.MerchantOffer;
 import net.minecraft.world.item.ItemStack;
diff --git a/src/main/java/net/minecraft/world/inventory/MerchantMenu.java b/src/main/java/net/minecraft/world/inventory/MerchantMenu.java
index afd346bbf450b0057b9f43959822f74b063fd290..52a94b4d456584e796c8bda73e802976bbdf7c16 100644
--- a/src/main/java/net/minecraft/world/inventory/MerchantMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/MerchantMenu.java
@@ -1,7 +1,6 @@
 package net.minecraft.world.inventory;
 
 import net.minecraft.world.item.trading.MerchantOffers;
-import net.minecraft.world.item.trading.MerchantOffer;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.world.entity.Entity;
diff --git a/src/main/java/net/minecraft/world/inventory/MerchantResultSlot.java b/src/main/java/net/minecraft/world/inventory/MerchantResultSlot.java
index a240e19f77e22c14f6c4959aea3b1fcc41cc8dff..86388c6c620a534b05a50b1db1dbca1541ac93e3 100644
--- a/src/main/java/net/minecraft/world/inventory/MerchantResultSlot.java
+++ b/src/main/java/net/minecraft/world/inventory/MerchantResultSlot.java
@@ -3,7 +3,6 @@ package net.minecraft.world.inventory;
 import net.minecraft.world.item.trading.MerchantOffer;
 import net.minecraft.stats.Stats;
 import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.Container;
 import net.minecraft.world.item.trading.Merchant;
 import net.minecraft.world.entity.player.Player;
 
diff --git a/src/main/java/net/minecraft/world/inventory/PlayerEnderChestContainer.java b/src/main/java/net/minecraft/world/inventory/PlayerEnderChestContainer.java
index 8818445fec4b7391e57bbe08793414bf554cc63c..08c212ab12882246fbd259eb119c4168601a6757 100644
--- a/src/main/java/net/minecraft/world/inventory/PlayerEnderChestContainer.java
+++ b/src/main/java/net/minecraft/world/inventory/PlayerEnderChestContainer.java
@@ -43,7 +43,7 @@ public class PlayerEnderChestContainer extends SimpleContainer
                 final CompoundTag compoundTag = new CompoundTag();
                 compoundTag.putByte("Slot", (byte)i);
                 itemStack.save(compoundTag);
-                ((AbstractList<CompoundTag>)listTag).add(compoundTag);
+                listTag.add(compoundTag); // MagmaCube - decompile error
             }
         }
         return listTag;
diff --git a/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java b/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
index 6f622e8cac66896ee2cf5ce741a67636f8695615..0b36ad489d900de91ae72894bf133c1df83e0d28 100644
--- a/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
@@ -13,7 +13,7 @@ public abstract class RecipeBookMenu<C extends Container> extends AbstractContai
     }
     
     public void handlePlacement(final boolean flag, final Recipe<?> recipe, final ServerPlayer serverPlayer) {
-        new ServerPlaceRecipe<Object>(this).recipeClicked(serverPlayer, recipe, flag);
+        new ServerPlaceRecipe<>(this).recipeClicked(serverPlayer, (Recipe<C>) recipe, flag); // MagmaCube - decompile error
     }
     
     public abstract void fillCraftSlotsStackedContents(final StackedContents p0);
diff --git a/src/main/java/net/minecraft/world/inventory/RecipeHolder.java b/src/main/java/net/minecraft/world/inventory/RecipeHolder.java
index 5c7905da6d55a5fd8fd970f8966f4ba5e3abe164..a3fd21426f2f0dd4700fc8194c469f51b2f33ae1 100644
--- a/src/main/java/net/minecraft/world/inventory/RecipeHolder.java
+++ b/src/main/java/net/minecraft/world/inventory/RecipeHolder.java
@@ -3,7 +3,7 @@ package net.minecraft.world.inventory;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.level.Level;
-import java.util.Collection;
+
 import java.util.Collections;
 import net.minecraft.world.entity.player.Player;
 import javax.annotation.Nullable;
diff --git a/src/main/java/net/minecraft/world/inventory/ResultContainer.java b/src/main/java/net/minecraft/world/inventory/ResultContainer.java
index 030e0397a77f339108514bece147a3a0e415bb36..fd1edac03aa28ef87897b986946f60ba658fa2bd 100644
--- a/src/main/java/net/minecraft/world/inventory/ResultContainer.java
+++ b/src/main/java/net/minecraft/world/inventory/ResultContainer.java
@@ -1,9 +1,8 @@
 package net.minecraft.world.inventory;
 
 import net.minecraft.world.entity.player.Player;
-import java.util.List;
 import net.minecraft.world.ContainerHelper;
-import java.util.Iterator;
+
 import javax.annotation.Nullable;
 import net.minecraft.world.item.crafting.Recipe;
 import net.minecraft.world.item.ItemStack;
diff --git a/src/main/java/net/minecraft/world/inventory/SmokerMenu.java b/src/main/java/net/minecraft/world/inventory/SmokerMenu.java
index 460c849b5672b71b32e358e9dc423721af80f8f7..b56e4340fd472d056c6a1ffc531178266a23e9f6 100644
--- a/src/main/java/net/minecraft/world/inventory/SmokerMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/SmokerMenu.java
@@ -1,7 +1,6 @@
 package net.minecraft.world.inventory;
 
 import net.minecraft.world.Container;
-import net.minecraft.world.item.crafting.AbstractCookingRecipe;
 import net.minecraft.world.item.crafting.RecipeType;
 import net.minecraft.world.entity.player.Inventory;
 
diff --git a/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java b/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
index fbd8b7b5dbda709ce80449dab745f741cceed853..714b5d8c118e3b5f9368f23416a36ac6f25c801d 100644
--- a/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
@@ -38,7 +38,7 @@ public class StonecutterMenu extends AbstractContainerMenu
     public StonecutterMenu(final int i, final Inventory inventory, final ContainerLevelAccess containerLevelAccess) {
         super(MenuType.STONECUTTER, i);
         this.selectedRecipeIndex = DataSlot.standalone();
-        this.recipes = (List<StonecutterRecipe>)Lists.newArrayList();
+        this.recipes = Lists.newArrayList(); // MagmaCube - decompile error
         this.input = ItemStack.EMPTY;
         this.slotUpdateListener = (() -> {});
         this.container = new SimpleContainer(1) {
@@ -67,9 +67,8 @@ public class StonecutterMenu extends AbstractContainerMenu
                 if (!itemStack2.isEmpty()) {
                     StonecutterMenu.this.setupResultSlot();
                 }
-                final long l;
                 containerLevelAccess.execute((level, blockPos) -> {
-                    l = level.getGameTime();
+                    long l = level.getGameTime(); // MagmaCube - decompile error
                     if (StonecutterMenu.this.lastSoundTime != l) {
                         level.playSound(null, blockPos, SoundEvents.UI_STONECUTTER_TAKE_RESULT, SoundSource.BLOCKS, 1.0f, 1.0f);
                         StonecutterMenu.this.lastSoundTime = l;
diff --git a/src/main/java/net/minecraft/world/item/AirItem.java b/src/main/java/net/minecraft/world/item/AirItem.java
index 04eca6faea6c3ea6abdd5430d8c29ec85afc855d..f3aae9eb2cddb29e7893fd227db2c9bffe91e16c 100644
--- a/src/main/java/net/minecraft/world/item/AirItem.java
+++ b/src/main/java/net/minecraft/world/item/AirItem.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.item;
 
-import net.minecraft.world.level.BlockGetter;
 import net.minecraft.network.chat.Component;
 import java.util.List;
 import javax.annotation.Nullable;
diff --git a/src/main/java/net/minecraft/world/item/ArmorItem.java b/src/main/java/net/minecraft/world/item/ArmorItem.java
index 489f7c28cab40ca4b17f8cd897342a3f13e62c2d..1d0f6ab868e4588b8bc2b4b8e2a5d49c31ed1ee7 100644
--- a/src/main/java/net/minecraft/world/item/ArmorItem.java
+++ b/src/main/java/net/minecraft/world/item/ArmorItem.java
@@ -63,7 +63,7 @@ public class ArmorItem extends Item implements Wearable
         this.toughness = armorMaterial.getToughness();
         this.knockbackResistance = armorMaterial.getKnockbackResistance();
         DispenserBlock.registerBehavior(this, ArmorItem.DISPENSE_ITEM_BEHAVIOR);
-        final ImmutableMultimap.Builder<Attribute, AttributeModifier> builder = (ImmutableMultimap.Builder<Attribute, AttributeModifier>)ImmutableMultimap.builder();
+        final ImmutableMultimap.Builder<Attribute, AttributeModifier> builder = ImmutableMultimap.builder(); // MagmaCube - decompile error
         final UUID uuid = ArmorItem.ARMOR_MODIFIER_UUID_PER_SLOT[equipmentSlot.getIndex()];
         builder.put(Attributes.ARMOR, new AttributeModifier(uuid, "Armor modifier", this.defense, AttributeModifier.Operation.ADDITION));
         builder.put(Attributes.ARMOR_TOUGHNESS, new AttributeModifier(uuid, "Armor toughness", this.toughness, AttributeModifier.Operation.ADDITION));
diff --git a/src/main/java/net/minecraft/world/item/AxeItem.java b/src/main/java/net/minecraft/world/item/AxeItem.java
index 45a31270394fd9133e47bf4bedc645fc605e0ff7..b2b26a9edfe66542b8e967ed1e6429ee6e28c33a 100644
--- a/src/main/java/net/minecraft/world/item/AxeItem.java
+++ b/src/main/java/net/minecraft/world/item/AxeItem.java
@@ -49,7 +49,7 @@ public class AxeItem extends DiggerItem
             final Player player2 = useOnContext.getPlayer();
             level.playSound(player2, blockPos, SoundEvents.AXE_STRIP, SoundSource.BLOCKS, 1.0f, 1.0f);
             if (!level.isClientSide) {
-                level.setBlock(blockPos, ((StateHolder<O, BlockState>)block.defaultBlockState()).setValue(RotatedPillarBlock.AXIS, (Comparable)blockState.getValue((Property<V>)RotatedPillarBlock.AXIS)), 11);
+                level.setBlock(blockPos, block.defaultBlockState().setValue(RotatedPillarBlock.AXIS, (Comparable)blockState.getValue(RotatedPillarBlock.AXIS)), 11); // MagmaCube - decompile error
                 if (player2 != null) {
                     useOnContext.getItemInHand().hurtAndBreak(1, player2, player -> player.broadcastBreakEvent(useOnContext.getHand()));
                 }
@@ -60,8 +60,8 @@ public class AxeItem extends DiggerItem
     }
     
     static {
-        DIGGABLE_MATERIALS = Sets.newHashSet((Object[])new Material[] { Material.WOOD, Material.NETHER_WOOD, Material.PLANT, Material.REPLACEABLE_PLANT, Material.BAMBOO, Material.VEGETABLE });
-        OTHER_DIGGABLE_BLOCKS = Sets.newHashSet((Object[])new Block[] { Blocks.LADDER, Blocks.SCAFFOLDING, Blocks.OAK_BUTTON, Blocks.SPRUCE_BUTTON, Blocks.BIRCH_BUTTON, Blocks.JUNGLE_BUTTON, Blocks.DARK_OAK_BUTTON, Blocks.ACACIA_BUTTON, Blocks.CRIMSON_BUTTON, Blocks.WARPED_BUTTON });
+        DIGGABLE_MATERIALS = Sets.newHashSet(new Material[] { Material.WOOD, Material.NETHER_WOOD, Material.PLANT, Material.REPLACEABLE_PLANT, Material.BAMBOO, Material.VEGETABLE }); // MagmaCube - decompile error
+        OTHER_DIGGABLE_BLOCKS = Sets.newHashSet(new Block[] { Blocks.LADDER, Blocks.SCAFFOLDING, Blocks.OAK_BUTTON, Blocks.SPRUCE_BUTTON, Blocks.BIRCH_BUTTON, Blocks.JUNGLE_BUTTON, Blocks.DARK_OAK_BUTTON, Blocks.ACACIA_BUTTON, Blocks.CRIMSON_BUTTON, Blocks.WARPED_BUTTON }); // MagmaCube - decompile error
         STRIPABLES = (Map)new ImmutableMap.Builder().put(Blocks.OAK_WOOD, Blocks.STRIPPED_OAK_WOOD).put(Blocks.OAK_LOG, Blocks.STRIPPED_OAK_LOG).put(Blocks.DARK_OAK_WOOD, Blocks.STRIPPED_DARK_OAK_WOOD).put(Blocks.DARK_OAK_LOG, Blocks.STRIPPED_DARK_OAK_LOG).put(Blocks.ACACIA_WOOD, Blocks.STRIPPED_ACACIA_WOOD).put(Blocks.ACACIA_LOG, Blocks.STRIPPED_ACACIA_LOG).put(Blocks.BIRCH_WOOD, Blocks.STRIPPED_BIRCH_WOOD).put(Blocks.BIRCH_LOG, Blocks.STRIPPED_BIRCH_LOG).put(Blocks.JUNGLE_WOOD, Blocks.STRIPPED_JUNGLE_WOOD).put(Blocks.JUNGLE_LOG, Blocks.STRIPPED_JUNGLE_LOG).put(Blocks.SPRUCE_WOOD, Blocks.STRIPPED_SPRUCE_WOOD).put(Blocks.SPRUCE_LOG, Blocks.STRIPPED_SPRUCE_LOG).put(Blocks.WARPED_STEM, Blocks.STRIPPED_WARPED_STEM).put(Blocks.WARPED_HYPHAE, Blocks.STRIPPED_WARPED_HYPHAE).put(Blocks.CRIMSON_STEM, Blocks.STRIPPED_CRIMSON_STEM).put(Blocks.CRIMSON_HYPHAE, Blocks.STRIPPED_CRIMSON_HYPHAE).build();
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/item/BottleItem.java b/src/main/java/net/minecraft/world/item/BottleItem.java
index 3bcb3c7047e7c4ca16fd838edbc650d1c560e58d..fa6d3639fece25fc5f1571f6ebeb819427fe573d 100644
--- a/src/main/java/net/minecraft/world/item/BottleItem.java
+++ b/src/main/java/net/minecraft/world/item/BottleItem.java
@@ -1,18 +1,14 @@
 package net.minecraft.world.item;
 
-import net.minecraft.stats.Stat;
 import net.minecraft.stats.Stats;
 import net.minecraft.core.BlockPos;
 import java.util.List;
 import net.minecraft.world.item.alchemy.PotionUtils;
 import net.minecraft.world.item.alchemy.Potions;
-import net.minecraft.world.level.material.Fluid;
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.level.ClipContext;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
diff --git a/src/main/java/net/minecraft/world/item/BowlFoodItem.java b/src/main/java/net/minecraft/world/item/BowlFoodItem.java
index c51f1d6875d4fc7a580c42b311c9efad49e0e44f..0f18f58f7923e2e532fed76fad2e6b3ac110f04a 100644
--- a/src/main/java/net/minecraft/world/item/BowlFoodItem.java
+++ b/src/main/java/net/minecraft/world/item/BowlFoodItem.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.item;
 
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.level.Level;
diff --git a/src/main/java/net/minecraft/world/item/CreativeModeTab.java b/src/main/java/net/minecraft/world/item/CreativeModeTab.java
index 4aa1a4482af33698ef5c99a5e7c7ebaa2f420b2b..557b0ae24c227449f84260dc833684695a1b3d44 100644
--- a/src/main/java/net/minecraft/world/item/CreativeModeTab.java
+++ b/src/main/java/net/minecraft/world/item/CreativeModeTab.java
@@ -2,9 +2,7 @@ package net.minecraft.world.item;
 
 import net.minecraft.world.item.alchemy.PotionUtils;
 import net.minecraft.world.item.alchemy.Potions;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.block.Blocks;
-import java.util.Iterator;
 import net.minecraft.core.Registry;
 import net.minecraft.core.NonNullList;
 import javax.annotation.Nullable;
diff --git a/src/main/java/net/minecraft/world/item/DyeableLeatherItem.java b/src/main/java/net/minecraft/world/item/DyeableLeatherItem.java
index c98cd7a7c2ca261131e8f7c0f9cc076f979122e7..97894507bc810366979e2442890ebf40db880936 100644
--- a/src/main/java/net/minecraft/world/item/DyeableLeatherItem.java
+++ b/src/main/java/net/minecraft/world/item/DyeableLeatherItem.java
@@ -30,7 +30,7 @@ public interface DyeableLeatherItem
         itemStack.getOrCreateTagElement("display").putInt("color", i);
     }
     
-    default ItemStack dyeArmor(final ItemStack itemStack, final List<DyeItem> list) {
+    static ItemStack dyeArmor(final ItemStack itemStack, final List<DyeItem> list) { // MagmaCube - default -> static
         ItemStack itemStack2 = ItemStack.EMPTY;
         final int[] ints = new int[3];
         int i = 0;
@@ -82,7 +82,7 @@ public interface DyeableLeatherItem
         int i7 = ints[0] / i2;
         int i8 = ints[1] / i2;
         int i9 = ints[2] / i2;
-        final float f4 = i / i2;
+        final float f4 = (float) i / i2; // MagmaCube - math
         final float f5 = Math.max(i7, Math.max(i8, i9));
         i7 = (int)(i7 * f4 / f5);
         i8 = (int)(i8 * f4 / f5);
diff --git a/src/main/java/net/minecraft/world/item/EggItem.java b/src/main/java/net/minecraft/world/item/EggItem.java
index 006c491032518d06a5a169fba135f5b05bbf881f..7fed07eb3f7c632b76bca55bbba77747c35f01c4 100644
--- a/src/main/java/net/minecraft/world/item/EggItem.java
+++ b/src/main/java/net/minecraft/world/item/EggItem.java
@@ -1,9 +1,6 @@
 package net.minecraft.world.item;
 
-import net.minecraft.stats.Stat;
 import net.minecraft.stats.Stats;
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.projectile.ThrownEgg;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.sounds.SoundEvents;
diff --git a/src/main/java/net/minecraft/world/item/ElytraItem.java b/src/main/java/net/minecraft/world/item/ElytraItem.java
index ad356220271022bf7d0262e3ac473ba817fd4ccc..244aaa197a9b413e5abe989a8cd766e326639655 100644
--- a/src/main/java/net/minecraft/world/item/ElytraItem.java
+++ b/src/main/java/net/minecraft/world/item/ElytraItem.java
@@ -6,7 +6,6 @@ import net.minecraft.world.InteractionResultHolder;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.block.DispenserBlock;
 
 public class ElytraItem extends Item implements Wearable
diff --git a/src/main/java/net/minecraft/world/item/EmptyMapItem.java b/src/main/java/net/minecraft/world/item/EmptyMapItem.java
index c9d343f8244e44dc857ac5bfa5918b1f6366da0e..25f9eb262b5a7baa4a3d6a71440e503aee17aa75 100644
--- a/src/main/java/net/minecraft/world/item/EmptyMapItem.java
+++ b/src/main/java/net/minecraft/world/item/EmptyMapItem.java
@@ -1,7 +1,6 @@
 package net.minecraft.world.item;
 
 import net.minecraft.sounds.SoundEvents;
-import net.minecraft.stats.Stat;
 import net.minecraft.stats.Stats;
 import net.minecraft.util.Mth;
 import net.minecraft.world.InteractionResultHolder;
diff --git a/src/main/java/net/minecraft/world/item/EnderpearlItem.java b/src/main/java/net/minecraft/world/item/EnderpearlItem.java
index 12971243cb9be6e5eaef24a813ed5c5e320edccc..9b675dcfa27f751e712e40a9bf2340547dcff565 100644
--- a/src/main/java/net/minecraft/world/item/EnderpearlItem.java
+++ b/src/main/java/net/minecraft/world/item/EnderpearlItem.java
@@ -1,9 +1,6 @@
 package net.minecraft.world.item;
 
-import net.minecraft.stats.Stat;
 import net.minecraft.stats.Stats;
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.projectile.ThrownEnderpearl;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.sounds.SoundEvents;
diff --git a/src/main/java/net/minecraft/world/item/ExperienceBottleItem.java b/src/main/java/net/minecraft/world/item/ExperienceBottleItem.java
index d7492dabacba5f38871f70584eb4d368c1e314db..0152213c1b88f455cb282c18c7b57c2ee648f48b 100644
--- a/src/main/java/net/minecraft/world/item/ExperienceBottleItem.java
+++ b/src/main/java/net/minecraft/world/item/ExperienceBottleItem.java
@@ -1,9 +1,6 @@
 package net.minecraft.world.item;
 
-import net.minecraft.stats.Stat;
 import net.minecraft.stats.Stats;
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.projectile.ThrownExperienceBottle;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.sounds.SoundEvents;
diff --git a/src/main/java/net/minecraft/world/item/FireworkRocketItem.java b/src/main/java/net/minecraft/world/item/FireworkRocketItem.java
index a406f6419c52479b0ccca70b6a1437258d2d7d7c..313524639bbece7050f73a40abc94eb346714dbe 100644
--- a/src/main/java/net/minecraft/world/item/FireworkRocketItem.java
+++ b/src/main/java/net/minecraft/world/item/FireworkRocketItem.java
@@ -72,7 +72,7 @@ public class FireworkRocketItem extends Item
         if (!listTag.isEmpty()) {
             for (int i = 0; i < listTag.size(); ++i) {
                 final CompoundTag compoundTag2 = listTag.getCompound(i);
-                final List<Component> list2 = (List<Component>)Lists.newArrayList();
+                final List<Component> list2 = Lists.newArrayList(); // MagmaCube - decompile error
                 FireworkStarItem.appendHoverText(compoundTag2, list2);
                 if (!list2.isEmpty()) {
                     for (int i2 = 1; i2 < list2.size(); ++i2) {
diff --git a/src/main/java/net/minecraft/world/item/FoodOnAStickItem.java b/src/main/java/net/minecraft/world/item/FoodOnAStickItem.java
index 23d58fe8b6577b044a34f1b635733f83f5bea0c5..cf92d0a05ddb6c17e18e8fd8e8080de0a7a38a0a 100644
--- a/src/main/java/net/minecraft/world/item/FoodOnAStickItem.java
+++ b/src/main/java/net/minecraft/world/item/FoodOnAStickItem.java
@@ -2,6 +2,7 @@ package net.minecraft.world.item;
 
 import net.minecraft.stats.Stat;
 import net.minecraft.stats.Stats;
+import net.minecraft.world.entity.Entity; // MagmaCube
 import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.entity.ItemSteerable;
 import net.minecraft.world.InteractionResultHolder;
@@ -31,7 +32,7 @@ public class FoodOnAStickItem<T extends Entity> extends Item
         if (player.isPassenger() && entity instanceof ItemSteerable && entity.getType() == this.canInteractWith) {
             final ItemSteerable itemSteerable = (ItemSteerable)entity;
             if (itemSteerable.boost()) {
-                itemStack.hurtAndBreak(this.consumeItemDamage, player, player -> player.broadcastBreakEvent(interactionHand));
+                itemStack.hurtAndBreak(this.consumeItemDamage, player, player1 -> player1.broadcastBreakEvent(interactionHand)); // MagmaCube - decompile error
                 if (itemStack.isEmpty()) {
                     final ItemStack itemStack2 = new ItemStack(Items.FISHING_ROD);
                     itemStack2.setTag(itemStack.getTag());
diff --git a/src/main/java/net/minecraft/world/item/HangingEntityItem.java b/src/main/java/net/minecraft/world/item/HangingEntityItem.java
index 96de169a57d69d8f4227038f2d9adb7319dce73b..0929c3bf43b0a379892b2b5ccc71f2801a886bb5 100644
--- a/src/main/java/net/minecraft/world/item/HangingEntityItem.java
+++ b/src/main/java/net/minecraft/world/item/HangingEntityItem.java
@@ -5,7 +5,6 @@ import net.minecraft.world.level.Level;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.core.Direction;
 import net.minecraft.core.BlockPos;
-import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.decoration.ItemFrame;
 import net.minecraft.world.entity.decoration.Painting;
 import net.minecraft.world.InteractionResult;
diff --git a/src/main/java/net/minecraft/world/item/HoneyBottleItem.java b/src/main/java/net/minecraft/world/item/HoneyBottleItem.java
index f8ac47525df58e6885cad3fbc55a2e0190ba5772..e1134fd5859ec85bca6128bf84511452dc745416 100644
--- a/src/main/java/net/minecraft/world/item/HoneyBottleItem.java
+++ b/src/main/java/net/minecraft/world/item/HoneyBottleItem.java
@@ -5,9 +5,7 @@ import net.minecraft.world.InteractionHand;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.effect.MobEffects;
-import net.minecraft.stats.Stat;
 import net.minecraft.stats.Stats;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.server.level.ServerPlayer;
diff --git a/src/main/java/net/minecraft/world/item/Item.java b/src/main/java/net/minecraft/world/item/Item.java
index 0e5fa360ad111aa7526aa406bef32b1ccd98e33c..925e126b38234754f8ff9ff0940eee6ea5ebf915 100644
--- a/src/main/java/net/minecraft/world/item/Item.java
+++ b/src/main/java/net/minecraft/world/item/Item.java
@@ -285,7 +285,7 @@ public class Item implements ItemLike
     }
     
     public Multimap<Attribute, AttributeModifier> getDefaultAttributeModifiers(final EquipmentSlot equipmentSlot) {
-        return (Multimap<Attribute, AttributeModifier>)ImmutableMultimap.of();
+        return ImmutableMultimap.of(); // MagmaCube - decompile error
     }
     
     public boolean useOnRelease(final ItemStack itemStack) {
diff --git a/src/main/java/net/minecraft/world/item/ItemCooldowns.java b/src/main/java/net/minecraft/world/item/ItemCooldowns.java
index 4b246b97cf22fba6d6f95185d2bbdbc62cf40f48..eacff3ebef626ac89a82331e51dfe355b5b182a1 100644
--- a/src/main/java/net/minecraft/world/item/ItemCooldowns.java
+++ b/src/main/java/net/minecraft/world/item/ItemCooldowns.java
@@ -11,7 +11,7 @@ public class ItemCooldowns
     private int tickCount;
     
     public ItemCooldowns() {
-        this.cooldowns = (Map<Item, CooldownInstance>)Maps.newHashMap();
+        this.cooldowns = Maps.newHashMap(); // MagmaCube - decompile error
     }
     
     public boolean isOnCooldown(final Item item) {
diff --git a/src/main/java/net/minecraft/world/item/ItemFrameItem.java b/src/main/java/net/minecraft/world/item/ItemFrameItem.java
index 9bf8a5a01b46fbec466dad7544f00f4489100157..83c2ed9d3f86bca7d01306fc9ebfd4c69ec3af4f 100644
--- a/src/main/java/net/minecraft/world/item/ItemFrameItem.java
+++ b/src/main/java/net/minecraft/world/item/ItemFrameItem.java
@@ -4,7 +4,6 @@ import net.minecraft.world.level.Level;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.entity.decoration.HangingEntity;
 import net.minecraft.world.entity.EntityType;
 
 public class ItemFrameItem extends HangingEntityItem
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index 7ed967f11fbf9ac0c639562155642fe4cdc820be..a0f48422b06314fbb9929f487acaaad00c870617 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -79,7 +79,8 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public final class ItemStack {
-    public static final Codec<ItemStack> CODEC = RecordCodecBuilder.create(instance -> instance.group((App)Registry.ITEM.fieldOf("id").forGetter(itemStack -> itemStack.item), (App)Codec.INT.fieldOf("Count").forGetter(itemStack -> itemStack.count), (App)CompoundTag.CODEC.optionalFieldOf("tag").forGetter(itemStack -> Optional.ofNullable(itemStack.tag))).apply((Applicative)instance, ItemStack::new));
+    // MagmaCube - decompile error
+    public static final Codec<ItemStack> CODEC = RecordCodecBuilder.create(instance -> instance.group(Registry.ITEM.fieldOf("id").forGetter(itemStack -> itemStack.item), Codec.INT.fieldOf("Count").forGetter(itemStack -> itemStack.count), CompoundTag.CODEC.optionalFieldOf("tag").forGetter(itemStack -> Optional.ofNullable(itemStack.tag))).apply(instance, ItemStack::new));
     private static final Logger LOGGER = LogManager.getLogger();
     public static final ItemStack EMPTY = new ItemStack((ItemLike)null);
     public static final DecimalFormat ATTRIBUTE_MODIFIER_FORMAT = Util.make(new DecimalFormat("#.##"), decimalFormat -> decimalFormat.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ROOT)));
@@ -580,9 +581,9 @@ public final class ItemStack {
                         }
                     }
                     if (attributeModifier.getOperation() == AttributeModifier.Operation.MULTIPLY_BASE || attributeModifier.getOperation() == AttributeModifier.Operation.MULTIPLY_TOTAL) {
-                        double d2 = d * 100.0;
+                        d4 = d * 100.0; // MagmaCube - decompile error
                     } else if (((Attribute)entry.getKey()).equals(Attributes.KNOCKBACK_RESISTANCE)) {
-                        double d3 = d * 10.0;
+                        d4 = d * 10.0; // MagmaCube - decompile error
                     } else {
                         d4 = d;
                     }
@@ -666,7 +667,7 @@ public final class ItemStack {
             if (flag || flag2) {
                 List<Block> collection;
                 if (flag) {
-                    return Lists.newArrayList((Object[])new Component[]{blockState.getBlock().getName().withStyle(ChatFormatting.DARK_GRAY)});
+                    return Lists.newArrayList(new Component[]{blockState.getBlock().getName().withStyle(ChatFormatting.DARK_GRAY)}); // MagmaCube - decompile error
                 }
                 Tag<Block> tag = BlockTags.getAllTags().getTag(resourceLocation);
                 if (tag != null && !(collection = tag.getValues()).isEmpty()) {
@@ -677,7 +678,7 @@ public final class ItemStack {
         catch (CommandSyntaxException commandSyntaxException) {
             // empty catch block
         }
-        return Lists.newArrayList((Object[])new Component[]{new TextComponent("missingno").withStyle(ChatFormatting.DARK_GRAY)});
+        return Lists.newArrayList(new Component[]{new TextComponent("missingno").withStyle(ChatFormatting.DARK_GRAY)}); // MagmaCube - decompile error
     }
 
     public boolean hasFoil() {
@@ -750,14 +751,14 @@ public final class ItemStack {
     public Multimap<Attribute, AttributeModifier> getAttributeModifiers(EquipmentSlot equipmentSlot) {
         Multimap<Attribute, AttributeModifier> multimap2;
         if (this.hasTag() && this.tag.contains("AttributeModifiers", 9)) {
-            HashMultimap multimap = HashMultimap.create();
+            multimap2 = HashMultimap.create(); // MagmaCube - decompile error
             ListTag listTag = this.tag.getList("AttributeModifiers", 10);
             for (int i = 0; i < listTag.size(); ++i) {
                 AttributeModifier attributeModifier;
                 Optional<Attribute> optional;
                 CompoundTag compoundTag = listTag.getCompound(i);
                 if (compoundTag.contains("Slot", 8) && !compoundTag.getString("Slot").equals(equipmentSlot.getName()) || !(optional = Registry.ATTRIBUTE.getOptional(ResourceLocation.tryParse(compoundTag.getString("AttributeName")))).isPresent() || (attributeModifier = AttributeModifier.load(compoundTag)) == null || attributeModifier.getId().getLeastSignificantBits() == 0L || attributeModifier.getId().getMostSignificantBits() == 0L) continue;
-                multimap.put(optional.get(), attributeModifier);
+                multimap2.put(optional.get(), attributeModifier); // MagmaCube - decompile error
             }
         } else {
             multimap2 = this.getItem().getDefaultAttributeModifiers(equipmentSlot);
diff --git a/src/main/java/net/minecraft/world/item/Items.java b/src/main/java/net/minecraft/world/item/Items.java
index 8e0be6e3098608d57d34e185ad79360e8c9c5b89..49f9acc3c9c14b5e47786166713e949288db3eba 100644
--- a/src/main/java/net/minecraft/world/item/Items.java
+++ b/src/main/java/net/minecraft/world/item/Items.java
@@ -4,9 +4,7 @@ import net.minecraft.world.level.block.entity.BannerPattern;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.world.entity.vehicle.Boat;
 import net.minecraft.world.entity.vehicle.AbstractMinecart;
-import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.material.Fluids;
-import net.minecraft.world.entity.decoration.HangingEntity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.food.Foods;
 import net.minecraft.world.entity.EquipmentSlot;
@@ -1864,8 +1862,8 @@ public class Items
         ZOMBIE_HEAD = registerBlock(new StandingAndWallBlockItem(Blocks.ZOMBIE_HEAD, Blocks.ZOMBIE_WALL_HEAD, new Item.Properties().tab(CreativeModeTab.TAB_DECORATIONS).rarity(Rarity.UNCOMMON)));
         CREEPER_HEAD = registerBlock(new StandingAndWallBlockItem(Blocks.CREEPER_HEAD, Blocks.CREEPER_WALL_HEAD, new Item.Properties().tab(CreativeModeTab.TAB_DECORATIONS).rarity(Rarity.UNCOMMON)));
         DRAGON_HEAD = registerBlock(new StandingAndWallBlockItem(Blocks.DRAGON_HEAD, Blocks.DRAGON_WALL_HEAD, new Item.Properties().tab(CreativeModeTab.TAB_DECORATIONS).rarity(Rarity.UNCOMMON)));
-        CARROT_ON_A_STICK = registerItem("carrot_on_a_stick", new FoodOnAStickItem<Object>(new Item.Properties().durability(25).tab(CreativeModeTab.TAB_TRANSPORTATION), EntityType.PIG, 7));
-        WARPED_FUNGUS_ON_A_STICK = registerItem("warped_fungus_on_a_stick", new FoodOnAStickItem<Object>(new Item.Properties().durability(100).tab(CreativeModeTab.TAB_TRANSPORTATION), EntityType.STRIDER, 1));
+        CARROT_ON_A_STICK = registerItem("carrot_on_a_stick", new FoodOnAStickItem<>(new Item.Properties().durability(25).tab(CreativeModeTab.TAB_TRANSPORTATION), EntityType.PIG, 7)); // MagmaCube - decompile fix
+        WARPED_FUNGUS_ON_A_STICK = registerItem("warped_fungus_on_a_stick", new FoodOnAStickItem<>(new Item.Properties().durability(100).tab(CreativeModeTab.TAB_TRANSPORTATION), EntityType.STRIDER, 1)); // MagmaCube - decompile fix
         NETHER_STAR = registerItem("nether_star", new SimpleFoiledItem(new Item.Properties().tab(CreativeModeTab.TAB_MATERIALS).rarity(Rarity.UNCOMMON)));
         PUMPKIN_PIE = registerItem("pumpkin_pie", new Item(new Item.Properties().tab(CreativeModeTab.TAB_FOOD).food(Foods.PUMPKIN_PIE)));
         FIREWORK_ROCKET = registerItem("firework_rocket", new FireworkRocketItem(new Item.Properties().tab(CreativeModeTab.TAB_MISC)));
diff --git a/src/main/java/net/minecraft/world/item/MilkBucketItem.java b/src/main/java/net/minecraft/world/item/MilkBucketItem.java
index 86d1a118d4d3292aaa5f19825fba0dfe5c4eef82..1e122772245a6ca05eb21a7466709308eef0a9a0 100644
--- a/src/main/java/net/minecraft/world/item/MilkBucketItem.java
+++ b/src/main/java/net/minecraft/world/item/MilkBucketItem.java
@@ -2,9 +2,7 @@ package net.minecraft.world.item;
 
 import net.minecraft.world.InteractionResultHolder;
 import net.minecraft.world.InteractionHand;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.stats.Stat;
 import net.minecraft.stats.Stats;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.server.level.ServerPlayer;
diff --git a/src/main/java/net/minecraft/world/item/PlayerHeadItem.java b/src/main/java/net/minecraft/world/item/PlayerHeadItem.java
index bd9d92128f147d09f85e979133e018979be3b4b9..0154f61774794528f522c170d6c3b0fcbdf3fb9a 100644
--- a/src/main/java/net/minecraft/world/item/PlayerHeadItem.java
+++ b/src/main/java/net/minecraft/world/item/PlayerHeadItem.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.item;
 
-import net.minecraft.nbt.Tag;
 import net.minecraft.nbt.NbtUtils;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
 import java.util.UUID;
diff --git a/src/main/java/net/minecraft/world/item/PotionItem.java b/src/main/java/net/minecraft/world/item/PotionItem.java
index 1743b6d2f91f2c5bfbd8298e25135e166d48fb02..04cd877e9fc26b68e0b6437a596d50b58f39c880 100644
--- a/src/main/java/net/minecraft/world/item/PotionItem.java
+++ b/src/main/java/net/minecraft/world/item/PotionItem.java
@@ -7,12 +7,10 @@ import net.minecraft.network.chat.Component;
 import javax.annotation.Nullable;
 import net.minecraft.world.InteractionResultHolder;
 import net.minecraft.world.InteractionHand;
-import java.util.Iterator;
+
 import java.util.List;
-import net.minecraft.world.level.ItemLike;
-import net.minecraft.stats.Stat;
+
 import net.minecraft.stats.Stats;
-import net.minecraft.world.entity.Entity;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.server.level.ServerPlayer;
diff --git a/src/main/java/net/minecraft/world/item/ProjectileWeaponItem.java b/src/main/java/net/minecraft/world/item/ProjectileWeaponItem.java
index 82fc8bedcb18d8ddcfac1fcde4e9a193e0759f6b..70e56d881aed3dde507bcca97bad071609830c4c 100644
--- a/src/main/java/net/minecraft/world/item/ProjectileWeaponItem.java
+++ b/src/main/java/net/minecraft/world/item/ProjectileWeaponItem.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.item;
 
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.ItemTags;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.entity.LivingEntity;
diff --git a/src/main/java/net/minecraft/world/item/RecordItem.java b/src/main/java/net/minecraft/world/item/RecordItem.java
index 44395149871f72e14308e5d74d07afac3940b7ca..48255bfa0af5d166c82fcaf1b56a964849255f01 100644
--- a/src/main/java/net/minecraft/world/item/RecordItem.java
+++ b/src/main/java/net/minecraft/world/item/RecordItem.java
@@ -12,7 +12,6 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.Level;
 import net.minecraft.stats.Stats;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.state.properties.Property;
 import net.minecraft.world.level.block.JukeboxBlock;
 import net.minecraft.world.level.block.Blocks;
diff --git a/src/main/java/net/minecraft/world/item/ScaffoldingBlockItem.java b/src/main/java/net/minecraft/world/item/ScaffoldingBlockItem.java
index f1869a0bdc9d50a74a8d528f0d14c8331986f91d..dc20c7489ee12436c6807c8b36298f7c9bdcbf47 100644
--- a/src/main/java/net/minecraft/world/item/ScaffoldingBlockItem.java
+++ b/src/main/java/net/minecraft/world/item/ScaffoldingBlockItem.java
@@ -3,10 +3,7 @@ package net.minecraft.world.item;
 import javax.annotation.Nullable;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.ScaffoldingBlock;
-import net.minecraft.network.protocol.Packet;
-import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.game.ClientboundChatPacket;
 import net.minecraft.Util;
 import net.minecraft.network.chat.ChatType;
diff --git a/src/main/java/net/minecraft/world/item/ServerItemCooldowns.java b/src/main/java/net/minecraft/world/item/ServerItemCooldowns.java
index 63d7bdaa53168893209e8e2fecb39cc87703df4d..f8122b6ee5247c534f0383b9c92d81c03038c7dd 100644
--- a/src/main/java/net/minecraft/world/item/ServerItemCooldowns.java
+++ b/src/main/java/net/minecraft/world/item/ServerItemCooldowns.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.item;
 
-import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientboundCooldownPacket;
 import net.minecraft.server.level.ServerPlayer;
 
diff --git a/src/main/java/net/minecraft/world/item/ShearsItem.java b/src/main/java/net/minecraft/world/item/ShearsItem.java
index f37941dbcb290ab371f3246a53e7c8764ccdb786..f3e080f762cfeb77a0a6ceca8dda7084b33a5e82 100644
--- a/src/main/java/net/minecraft/world/item/ShearsItem.java
+++ b/src/main/java/net/minecraft/world/item/ShearsItem.java
@@ -2,8 +2,6 @@ package net.minecraft.world.item;
 
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.entity.EquipmentSlot;
-import net.minecraft.world.level.block.Block;
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.core.BlockPos;
diff --git a/src/main/java/net/minecraft/world/item/ShieldItem.java b/src/main/java/net/minecraft/world/item/ShieldItem.java
index 4bbe9fa37dc49b0357c9ca00fa13473627f06b4a..ec159ec7ea005803d8243a437daacac22f73e912 100644
--- a/src/main/java/net/minecraft/world/item/ShieldItem.java
+++ b/src/main/java/net/minecraft/world/item/ShieldItem.java
@@ -8,7 +8,6 @@ import net.minecraft.network.chat.Component;
 import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.block.DispenserBlock;
 
 public class ShieldItem extends Item
diff --git a/src/main/java/net/minecraft/world/item/SnowballItem.java b/src/main/java/net/minecraft/world/item/SnowballItem.java
index 221ac0b121ce7c3bc53349b96893f8539223cca5..00a6fffde5b2dd77e4b38b0f649c8fbdb38f6a1a 100644
--- a/src/main/java/net/minecraft/world/item/SnowballItem.java
+++ b/src/main/java/net/minecraft/world/item/SnowballItem.java
@@ -1,9 +1,6 @@
 package net.minecraft.world.item;
 
-import net.minecraft.stats.Stat;
 import net.minecraft.stats.Stats;
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.projectile.Snowball;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.sounds.SoundEvents;
diff --git a/src/main/java/net/minecraft/world/item/SpawnEggItem.java b/src/main/java/net/minecraft/world/item/SpawnEggItem.java
index 794e00b609b370bc9451b430165875a585ca4712..7e6a822a634e3e87c3040709ddce031e0fa7bba0 100644
--- a/src/main/java/net/minecraft/world/item/SpawnEggItem.java
+++ b/src/main/java/net/minecraft/world/item/SpawnEggItem.java
@@ -1,7 +1,6 @@
 package net.minecraft.world.item;
 
 import com.google.common.collect.Maps;
-import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.AgableMob;
 import java.util.Optional;
 import net.minecraft.world.phys.Vec3;
@@ -9,7 +8,6 @@ import net.minecraft.world.entity.Mob;
 import com.google.common.collect.Iterables;
 import javax.annotation.Nullable;
 import net.minecraft.nbt.CompoundTag;
-import net.minecraft.stats.Stat;
 import net.minecraft.stats.Stats;
 import net.minecraft.world.level.block.LiquidBlock;
 import net.minecraft.world.phys.BlockHitResult;
@@ -26,7 +24,6 @@ import net.minecraft.world.level.Level;
 import net.minecraft.core.Direction;
 import java.util.Objects;
 import net.minecraft.world.entity.MobSpawnType;
-import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.entity.SpawnerBlockEntity;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.server.level.ServerLevel;
diff --git a/src/main/java/net/minecraft/world/item/ThrowablePotionItem.java b/src/main/java/net/minecraft/world/item/ThrowablePotionItem.java
index ae750476b6c930b132ed8a70f18b76878dce95f8..e63ace4e87da3187ce57de1b935264a0a71ae852 100644
--- a/src/main/java/net/minecraft/world/item/ThrowablePotionItem.java
+++ b/src/main/java/net/minecraft/world/item/ThrowablePotionItem.java
@@ -1,9 +1,6 @@
 package net.minecraft.world.item;
 
-import net.minecraft.stats.Stat;
 import net.minecraft.stats.Stats;
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.projectile.ThrownPotion;
 import net.minecraft.world.InteractionResultHolder;
 import net.minecraft.world.InteractionHand;
diff --git a/src/main/java/net/minecraft/world/item/TippedArrowItem.java b/src/main/java/net/minecraft/world/item/TippedArrowItem.java
index c98723241b83129ac63a92e7da14e19fe86ce80f..4fcd80d63cc8d75df55ac62a2abf7d5d6e90dd9d 100644
--- a/src/main/java/net/minecraft/world/item/TippedArrowItem.java
+++ b/src/main/java/net/minecraft/world/item/TippedArrowItem.java
@@ -4,8 +4,6 @@ import net.minecraft.network.chat.Component;
 import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.world.level.Level;
-import java.util.Iterator;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.item.alchemy.Potion;
 import net.minecraft.core.Registry;
 import net.minecraft.core.NonNullList;
diff --git a/src/main/java/net/minecraft/world/item/WritableBookItem.java b/src/main/java/net/minecraft/world/item/WritableBookItem.java
index 61bae920c5938344c3a37eae8567344390ade791..da89abf2056ce98c83c330a76f718a68aa06f000 100644
--- a/src/main/java/net/minecraft/world/item/WritableBookItem.java
+++ b/src/main/java/net/minecraft/world/item/WritableBookItem.java
@@ -3,7 +3,6 @@ package net.minecraft.world.item;
 import net.minecraft.nbt.ListTag;
 import javax.annotation.Nullable;
 import net.minecraft.nbt.CompoundTag;
-import net.minecraft.stats.Stat;
 import net.minecraft.stats.Stats;
 import net.minecraft.world.InteractionResultHolder;
 import net.minecraft.world.InteractionHand;
diff --git a/src/main/java/net/minecraft/world/item/WrittenBookItem.java b/src/main/java/net/minecraft/world/item/WrittenBookItem.java
index d6097af72fdaf4f0769c1cc4fde3ace1179b5aa0..4944ad4f8132f1b9e7e6477a0bf39adc6c2b32bb 100644
--- a/src/main/java/net/minecraft/world/item/WrittenBookItem.java
+++ b/src/main/java/net/minecraft/world/item/WrittenBookItem.java
@@ -1,12 +1,9 @@
 package net.minecraft.world.item;
 
 import net.minecraft.nbt.ListTag;
-import net.minecraft.nbt.Tag;
 import net.minecraft.nbt.StringTag;
-import net.minecraft.world.entity.Entity;
 import net.minecraft.network.chat.ComponentUtils;
 import net.minecraft.commands.CommandSourceStack;
-import net.minecraft.stats.Stat;
 import net.minecraft.stats.Stats;
 import net.minecraft.world.InteractionResultHolder;
 import net.minecraft.world.InteractionHand;
diff --git a/src/main/java/net/minecraft/world/item/context/DirectionalPlaceContext.java b/src/main/java/net/minecraft/world/item/context/DirectionalPlaceContext.java
index af91460c0d80dad5f2b029c7f8ff4d7fc0148d1e..11ad6c776f89120ebf79fd110d404662f66b3c36 100644
--- a/src/main/java/net/minecraft/world/item/context/DirectionalPlaceContext.java
+++ b/src/main/java/net/minecraft/world/item/context/DirectionalPlaceContext.java
@@ -1,8 +1,6 @@
 package net.minecraft.world.item.context;
 
-import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.phys.BlockHitResult;
-import net.minecraft.core.Vec3i;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.item.ItemStack;
@@ -75,6 +73,6 @@ public class DirectionalPlaceContext extends BlockPlaceContext
     
     @Override
     public float getRotation() {
-        return this.direction.get2DDataValue() * 90;
+        return (float) (this.direction.get2DDataValue() * 90);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/item/crafting/ArmorDyeRecipe.java b/src/main/java/net/minecraft/world/item/crafting/ArmorDyeRecipe.java
index 09881228b287bea79910d1b614ba2db0304356a8..61bb65ab90e5a3464fe1a2d148e4945a70766372 100644
--- a/src/main/java/net/minecraft/world/item/crafting/ArmorDyeRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/ArmorDyeRecipe.java
@@ -20,7 +20,7 @@ public class ArmorDyeRecipe extends CustomRecipe
     @Override
     public boolean matches(final CraftingContainer craftingContainer, final Level level) {
         ItemStack itemStack = ItemStack.EMPTY;
-        final List<ItemStack> list = (List<ItemStack>)Lists.newArrayList();
+        final List<ItemStack> list = Lists.newArrayList(); // MagmaCube - decompile error
         for (int i = 0; i < craftingContainer.getContainerSize(); ++i) {
             final ItemStack itemStack2 = craftingContainer.getItem(i);
             if (!itemStack2.isEmpty()) {
@@ -43,7 +43,7 @@ public class ArmorDyeRecipe extends CustomRecipe
     
     @Override
     public ItemStack assemble(final CraftingContainer craftingContainer) {
-        final List<DyeItem> list = (List<DyeItem>)Lists.newArrayList();
+        final List<DyeItem> list = Lists.newArrayList(); // MagmaCube - decompile error
         ItemStack itemStack = ItemStack.EMPTY;
         for (int i = 0; i < craftingContainer.getContainerSize(); ++i) {
             final ItemStack itemStack2 = craftingContainer.getItem(i);
diff --git a/src/main/java/net/minecraft/world/item/crafting/BannerDuplicateRecipe.java b/src/main/java/net/minecraft/world/item/crafting/BannerDuplicateRecipe.java
index 550b6680b7643098179a70e7980ef8a8fc77f726..3948226e91718e1aa65ee4d7ebc862ddfa7da3e2 100644
--- a/src/main/java/net/minecraft/world/item/crafting/BannerDuplicateRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/BannerDuplicateRecipe.java
@@ -1,7 +1,5 @@
 package net.minecraft.world.item.crafting;
 
-import net.minecraft.world.Container;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.core.NonNullList;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
diff --git a/src/main/java/net/minecraft/world/item/crafting/BlastingRecipe.java b/src/main/java/net/minecraft/world/item/crafting/BlastingRecipe.java
index e556fd986f7c62fdbf745ffe205c8bd3737eb75b..5032ba6790fcbabb1a057e3aebff211e264f8cb1 100644
--- a/src/main/java/net/minecraft/world/item/crafting/BlastingRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/BlastingRecipe.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.item.crafting;
 
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.resources.ResourceLocation;
diff --git a/src/main/java/net/minecraft/world/item/crafting/BookCloningRecipe.java b/src/main/java/net/minecraft/world/item/crafting/BookCloningRecipe.java
index 320820b3fd6de628f3347cb36ee600fac237b13a..de63409d8e3d3b7201ba11640bc1c4ba81791ace 100644
--- a/src/main/java/net/minecraft/world/item/crafting/BookCloningRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/BookCloningRecipe.java
@@ -1,9 +1,7 @@
 package net.minecraft.world.item.crafting;
 
-import net.minecraft.world.Container;
 import net.minecraft.core.NonNullList;
 import net.minecraft.nbt.CompoundTag;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.item.WrittenBookItem;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.ItemStack;
diff --git a/src/main/java/net/minecraft/world/item/crafting/CampfireCookingRecipe.java b/src/main/java/net/minecraft/world/item/crafting/CampfireCookingRecipe.java
index 9b81177d8df1b351e284c8f78345f13d85b5c46e..3d956cdd5f66bcd17e91e90004530105374c1182 100644
--- a/src/main/java/net/minecraft/world/item/crafting/CampfireCookingRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/CampfireCookingRecipe.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.item.crafting;
 
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.resources.ResourceLocation;
diff --git a/src/main/java/net/minecraft/world/item/crafting/MapCloningRecipe.java b/src/main/java/net/minecraft/world/item/crafting/MapCloningRecipe.java
index fef607c2391fac0fd7fce5a3ede4810803f7e087..89fd8883f587da70225d7a1e68e7797224530794 100644
--- a/src/main/java/net/minecraft/world/item/crafting/MapCloningRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/MapCloningRecipe.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.item.crafting;
 
-import net.minecraft.world.Container;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
diff --git a/src/main/java/net/minecraft/world/item/crafting/Recipe.java b/src/main/java/net/minecraft/world/item/crafting/Recipe.java
index ee30ad2e8924117c6ba5cde97ca8d88191523ace..f2fdac0290fbaeda06ca5512106af01082ae61bc 100644
--- a/src/main/java/net/minecraft/world/item/crafting/Recipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/Recipe.java
@@ -3,7 +3,6 @@ package net.minecraft.world.item.crafting;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.item.Item;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.core.NonNullList;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
index f39ef770fa64790ead33919bae4d3bcf45e15a86..6194c647e663f96a5adcd782577eec5aeeed1265 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
@@ -48,7 +48,7 @@ extends SimpleJsonResourceReloadListener {
     @Override
     protected void apply(Map<ResourceLocation, JsonElement> map, ResourceManager resourceManager, ProfilerFiller profilerFiller) {
         this.hasErrors = false;
-        HashMap map2 = Maps.newHashMap();
+        HashMap<RecipeType<?>, ImmutableMap.Builder<ResourceLocation, Recipe<?>>> map2 = Maps.newHashMap(); // MagmaCube - type
         for (Map.Entry<ResourceLocation, JsonElement> entry2 : map.entrySet()) {
             ResourceLocation resourceLocation = entry2.getKey();
             try {
@@ -68,7 +68,7 @@ extends SimpleJsonResourceReloadListener {
     }
 
     public <C extends Container, T extends Recipe<C>> List<T> getAllRecipesFor(RecipeType<T> recipeType) {
-        return this.byType(recipeType).values().stream().map(recipe -> recipe).collect(Collectors.toList());
+        return this.byType(recipeType).values().stream().map(recipe -> (T) recipe).collect(Collectors.toList()); // MagmaCube - decompile error
     }
 
     public <C extends Container, T extends Recipe<C>> List<T> getRecipesFor(RecipeType<T> recipeType, C container, Level level) {
@@ -76,7 +76,7 @@ extends SimpleJsonResourceReloadListener {
     }
 
     private <C extends Container, T extends Recipe<C>> Map<ResourceLocation, Recipe<C>> byType(RecipeType<T> recipeType) {
-        return this.recipes.getOrDefault(recipeType, Collections.emptyMap());
+        return (Map) this.recipes.getOrDefault(recipeType, Collections.emptyMap()); // MagmaCube - decompile error
     }
 
     public <C extends Container, T extends Recipe<C>> NonNullList<ItemStack> getRemainingItemsFor(RecipeType<T> recipeType, C container, Level level) {
@@ -92,7 +92,7 @@ extends SimpleJsonResourceReloadListener {
     }
 
     public Optional<? extends Recipe<?>> byKey(ResourceLocation resourceLocation) {
-        return this.recipes.values().stream().map(map -> (Recipe)map.get(resourceLocation)).filter(Objects::nonNull).findFirst();
+        return this.recipes.values().stream().map(map -> map.get(resourceLocation)).filter(Objects::nonNull).findFirst(); // MagmaCube - decompile error
     }
 
     public Collection<Recipe<?>> getRecipes() {
@@ -110,9 +110,9 @@ extends SimpleJsonResourceReloadListener {
 
     public void replaceRecipes(Iterable<Recipe<?>> iterable) {
         this.hasErrors = false;
-        HashMap map = Maps.newHashMap();
+        HashMap<RecipeType<?>, Map<ResourceLocation, Recipe<?>>> map = Maps.newHashMap(); // MagmaCube - type
         iterable.forEach(recipe -> {
-            Map map2 = map.computeIfAbsent(recipe.getType(), recipeType -> Maps.newHashMap());
+            Map<ResourceLocation, Recipe<?>> map2 = map.computeIfAbsent(recipe.getType(), recipeType -> Maps.newHashMap()); // MagmaCube - type
             Recipe recipe2 = map2.put(recipe.getId(), recipe);
             if (recipe2 != null) {
                 throw new IllegalStateException("Duplicate recipe ignored with ID " + recipe.getId());
diff --git a/src/main/java/net/minecraft/world/item/crafting/ShapelessRecipe.java b/src/main/java/net/minecraft/world/item/crafting/ShapelessRecipe.java
index d65eecb7bbe37bee2e520bb10e7f7becb1f365b3..afe84b1f3928c59f6249dd6021789cc6cb88cc45 100644
--- a/src/main/java/net/minecraft/world/item/crafting/ShapelessRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/ShapelessRecipe.java
@@ -1,13 +1,10 @@
 package net.minecraft.world.item.crafting;
 
-import java.util.Iterator;
 import net.minecraft.network.FriendlyByteBuf;
 import com.google.gson.JsonArray;
 import com.google.gson.JsonParseException;
 import net.minecraft.util.GsonHelper;
 import com.google.gson.JsonObject;
-import net.minecraft.world.Container;
-import it.unimi.dsi.fastutil.ints.IntList;
 import net.minecraft.world.entity.player.StackedContents;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.inventory.CraftingContainer;
diff --git a/src/main/java/net/minecraft/world/item/crafting/ShieldDecorationRecipe.java b/src/main/java/net/minecraft/world/item/crafting/ShieldDecorationRecipe.java
index 536b7a0b833846ad66125663c4147c1a9ead1add..0ddff0c14a1533a27c3de46f126eb6657de9b2d5 100644
--- a/src/main/java/net/minecraft/world/item/crafting/ShieldDecorationRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/ShieldDecorationRecipe.java
@@ -1,7 +1,5 @@
 package net.minecraft.world.item.crafting;
 
-import net.minecraft.world.Container;
-import net.minecraft.nbt.Tag;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.BannerItem;
diff --git a/src/main/java/net/minecraft/world/item/crafting/ShulkerBoxColoring.java b/src/main/java/net/minecraft/world/item/crafting/ShulkerBoxColoring.java
index 1a9100e9e70cec3260a815425777d221de8c7bde..95b126569fee04bb9f35b504f7f5faa0267c3371 100644
--- a/src/main/java/net/minecraft/world/item/crafting/ShulkerBoxColoring.java
+++ b/src/main/java/net/minecraft/world/item/crafting/ShulkerBoxColoring.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.item.crafting;
 
-import net.minecraft.world.Container;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.ItemStack;
diff --git a/src/main/java/net/minecraft/world/item/crafting/SingleItemRecipe.java b/src/main/java/net/minecraft/world/item/crafting/SingleItemRecipe.java
index aa39bb88404698bf23a7d6128c060b3d5f9a7382..d90ed8d97b6eb6063562148638c83c22190b1be7 100644
--- a/src/main/java/net/minecraft/world/item/crafting/SingleItemRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/SingleItemRecipe.java
@@ -1,9 +1,7 @@
 package net.minecraft.world.item.crafting;
 
 import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.core.Registry;
-import net.minecraft.world.item.Item;
 import com.google.gson.JsonElement;
 import net.minecraft.util.GsonHelper;
 import com.google.gson.JsonObject;
diff --git a/src/main/java/net/minecraft/world/item/crafting/SmeltingRecipe.java b/src/main/java/net/minecraft/world/item/crafting/SmeltingRecipe.java
index fd878622d881a76551af9f1b6612f59ffecf297f..77ff0a7f56d167d85d67e031a1b26f2cbcb85ac1 100644
--- a/src/main/java/net/minecraft/world/item/crafting/SmeltingRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/SmeltingRecipe.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.item.crafting;
 
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.resources.ResourceLocation;
diff --git a/src/main/java/net/minecraft/world/item/crafting/SmokingRecipe.java b/src/main/java/net/minecraft/world/item/crafting/SmokingRecipe.java
index 91130269c9c7bd6e092861439dcf1390681370a0..a044f599e6576f3aad5625556fc4cc031515d0b6 100644
--- a/src/main/java/net/minecraft/world/item/crafting/SmokingRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/SmokingRecipe.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.item.crafting;
 
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.resources.ResourceLocation;
diff --git a/src/main/java/net/minecraft/world/item/crafting/StonecutterRecipe.java b/src/main/java/net/minecraft/world/item/crafting/StonecutterRecipe.java
index 26357646dae83c3a419d26228eca591745f0a29f..18c4303cc88eb8757dc18cb83442cead5594edbe 100644
--- a/src/main/java/net/minecraft/world/item/crafting/StonecutterRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/StonecutterRecipe.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.item.crafting;
 
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.Container;
diff --git a/src/main/java/net/minecraft/world/item/crafting/SuspiciousStewRecipe.java b/src/main/java/net/minecraft/world/item/crafting/SuspiciousStewRecipe.java
index 6ff247df6583c57cef0cbb7e5876754acd198415..ba3683ef12264be635107c2f82ab5aafe4f7f405 100644
--- a/src/main/java/net/minecraft/world/item/crafting/SuspiciousStewRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/SuspiciousStewRecipe.java
@@ -1,15 +1,11 @@
 package net.minecraft.world.item.crafting;
 
-import net.minecraft.world.Container;
 import net.minecraft.world.effect.MobEffect;
 import net.minecraft.world.item.SuspiciousStewItem;
 import net.minecraft.world.level.block.FlowerBlock;
 import net.minecraft.world.item.BlockItem;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
-import net.minecraft.world.item.Item;
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.ItemTags;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.Level;
diff --git a/src/main/java/net/minecraft/world/item/crafting/TippedArrowRecipe.java b/src/main/java/net/minecraft/world/item/crafting/TippedArrowRecipe.java
index 64a0ff404a1bfbe7e1545f87aad9db7b48b5c68a..67b2e8edd85199e3a3b1e8d6dc8c635d39637c0a 100644
--- a/src/main/java/net/minecraft/world/item/crafting/TippedArrowRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/TippedArrowRecipe.java
@@ -1,10 +1,6 @@
 package net.minecraft.world.item.crafting;
 
-import net.minecraft.world.Container;
-import net.minecraft.world.effect.MobEffectInstance;
-import java.util.Collection;
 import net.minecraft.world.item.alchemy.PotionUtils;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
diff --git a/src/main/java/net/minecraft/world/item/crafting/UpgradeRecipe.java b/src/main/java/net/minecraft/world/item/crafting/UpgradeRecipe.java
index c7e9a67d41ba141edfe7712eae7242ca25514523..27beff6097891260048bd1dab777d8539ee4daba 100644
--- a/src/main/java/net/minecraft/world/item/crafting/UpgradeRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/UpgradeRecipe.java
@@ -4,7 +4,6 @@ import net.minecraft.network.FriendlyByteBuf;
 import com.google.gson.JsonElement;
 import net.minecraft.util.GsonHelper;
 import com.google.gson.JsonObject;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.world.level.Level;
diff --git a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentCategory.java b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentCategory.java
index d242ad6927eaa5c36056ee0e0993b2712a78fc4d..8edf49440af632044c0d5fafd58649ee8d9446bf 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentCategory.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentCategory.java
@@ -96,7 +96,7 @@ public enum EnchantmentCategory
     VANISHABLE {
         @Override
         public boolean canEnchant(final Item item) {
-            return item instanceof Vanishable || Block.byItem(item) instanceof Vanishable || EnchantmentCategory$14.BREAKABLE.canEnchant(item);
+            return item instanceof Vanishable || Block.byItem(item) instanceof Vanishable || EnchantmentCategory.BREAKABLE.canEnchant(item); // MagmaCube - decompile error
         }
     };
     
diff --git a/src/main/java/net/minecraft/world/item/trading/MerchantOffers.java b/src/main/java/net/minecraft/world/item/trading/MerchantOffers.java
index b969db7d861a1a6ec81c96757e14dcb629ac27d2..96856685dcbdd2a044effd7d9874a000d4ffe47b 100644
--- a/src/main/java/net/minecraft/world/item/trading/MerchantOffers.java
+++ b/src/main/java/net/minecraft/world/item/trading/MerchantOffers.java
@@ -91,7 +91,7 @@ public class MerchantOffers extends ArrayList<MerchantOffer>
         final ListTag listTag = new ListTag();
         for (int i = 0; i < this.size(); ++i) {
             final MerchantOffer merchantOffer = this.get(i);
-            ((AbstractList<CompoundTag>)listTag).add(merchantOffer.createTag());
+            listTag.add(merchantOffer.createTag()); // MagmaCube - decompile error
         }
         compoundTag.put("Recipes", listTag);
         return compoundTag;
diff --git a/src/main/java/net/minecraft/world/level/BlockAndTintGetter.java b/src/main/java/net/minecraft/world/level/BlockAndTintGetter.java
index c849ba59c004fec915a4cc2e33fe1dfcbf812e69..efcf7340267c42a27cbbe4e27a40298fd3d22ae1 100644
--- a/src/main/java/net/minecraft/world/level/BlockAndTintGetter.java
+++ b/src/main/java/net/minecraft/world/level/BlockAndTintGetter.java
@@ -21,6 +21,6 @@ public interface BlockAndTintGetter extends BlockGetter
     }
     
     default boolean canSeeSky(final BlockPos blockPos) {
-        return this.getBrightness(LightLayer.SKY, blockPos) >= super.getMaxLightLevel();
+        return this.getBrightness(LightLayer.SKY, blockPos) >= BlockGetter.super.getMaxLightLevel(); // MagmaCube - decompile error
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/BlockGetter.java b/src/main/java/net/minecraft/world/level/BlockGetter.java
index 34be08d84982ec7e339300e9ef92729819ead057..a8f0f6efa6a2fca65141bee2b7f6b3afa3a9ad30 100644
--- a/src/main/java/net/minecraft/world/level/BlockGetter.java
+++ b/src/main/java/net/minecraft/world/level/BlockGetter.java
@@ -42,33 +42,24 @@ public interface BlockGetter
     }
     
     default BlockHitResult clip(final ClipContext clipContext) {
-        final BlockState blockState;
-        final FluidState fluidState;
-        final Vec3 vec3;
-        final Vec3 vec4;
-        final VoxelShape voxelShape;
-        final BlockHitResult blockHitResult;
-        final VoxelShape voxelShape2;
-        final BlockHitResult blockHitResult2;
-        final double d;
-        final double d2;
-        final Vec3 vec5;
-        return traverseBlocks(clipContext, (clipContext, blockPos) -> {
-            blockState = this.getBlockState(blockPos);
-            fluidState = this.getFluidState(blockPos);
-            vec3 = clipContext.getFrom();
-            vec4 = clipContext.getTo();
-            voxelShape = clipContext.getBlockShape(blockState, this, blockPos);
-            blockHitResult = this.clipWithInteractionOverride(vec3, vec4, blockPos, voxelShape, blockState);
-            voxelShape2 = clipContext.getFluidShape(fluidState, this, blockPos);
-            blockHitResult2 = voxelShape2.clip(vec3, vec4, blockPos);
-            d = ((blockHitResult == null) ? Double.MAX_VALUE : clipContext.getFrom().distanceToSqr(blockHitResult.getLocation()));
-            d2 = ((blockHitResult2 == null) ? Double.MAX_VALUE : clipContext.getFrom().distanceToSqr(blockHitResult2.getLocation()));
+        // MagmaCube start - decompile error
+        return traverseBlocks(clipContext, (context, blockPos) -> {
+            BlockState blockState = this.getBlockState(blockPos);
+            FluidState fluidState = this.getFluidState(blockPos);
+            Vec3 vec3 = context.getFrom();
+            Vec3 vec4 = context.getTo();
+            VoxelShape voxelShape = context.getBlockShape(blockState, this, blockPos);
+            BlockHitResult blockHitResult = this.clipWithInteractionOverride(vec3, vec4, blockPos, voxelShape, blockState);
+            VoxelShape voxelShape2 = context.getFluidShape(fluidState, this, blockPos);
+            BlockHitResult blockHitResult2 = voxelShape2.clip(vec3, vec4, blockPos);
+            double d = ((blockHitResult == null) ? Double.MAX_VALUE : context.getFrom().distanceToSqr(blockHitResult.getLocation()));
+            double d2 = ((blockHitResult2 == null) ? Double.MAX_VALUE : context.getFrom().distanceToSqr(blockHitResult2.getLocation()));
             return (d <= d2) ? blockHitResult : blockHitResult2;
-        }, clipContext -> {
-            vec5 = clipContext.getFrom().subtract(clipContext.getTo());
-            return BlockHitResult.miss(clipContext.getTo(), Direction.getNearest(vec5.x, vec5.y, vec5.z), new BlockPos(clipContext.getTo()));
+        }, context -> {
+            Vec3 vec5 = context.getFrom().subtract(context.getTo());
+            return BlockHitResult.miss(context.getTo(), Direction.getNearest(vec5.x, vec5.y, vec5.z), new BlockPos(context.getTo()));
         });
+        // MagmaCube end - decompile error
     }
     
     @Nullable
@@ -95,9 +86,8 @@ public interface BlockGetter
     }
     
     default double getBlockFloorHeight(final BlockPos blockPos) {
-        final BlockPos blockPos2;
         return this.getBlockFloorHeight(this.getBlockState(blockPos).getCollisionShape(this, blockPos), () -> {
-            blockPos2 = blockPos.below();
+            BlockPos blockPos2 = blockPos.below(); // MagmaCube - decompile error
             return this.getBlockState(blockPos2).getCollisionShape(this, blockPos2);
         });
     }
diff --git a/src/main/java/net/minecraft/world/level/DataPackConfig.java b/src/main/java/net/minecraft/world/level/DataPackConfig.java
index e8af1622f8d10ccf8e6baa4d593f3abe3d6b457f..fb74e04b78a6c6f3da1beb0f0262d1b124c5f0a5 100644
--- a/src/main/java/net/minecraft/world/level/DataPackConfig.java
+++ b/src/main/java/net/minecraft/world/level/DataPackConfig.java
@@ -30,7 +30,9 @@ public class DataPackConfig
     }
     
     static {
-        DEFAULT = new DataPackConfig((List<String>)ImmutableList.of("vanilla"), (List<String>)ImmutableList.of());
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)Codec.STRING.listOf().fieldOf("Enabled").forGetter(dataPackConfig -> dataPackConfig.enabled), (App)Codec.STRING.listOf().fieldOf("Disabled").forGetter(dataPackConfig -> dataPackConfig.disabled)).apply(instance, (BiFunction)DataPackConfig::new));
+        // MagmaCube start - decompile error
+        DEFAULT = new DataPackConfig((List<String>)ImmutableList.of("vanilla"), ImmutableList.of());
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(Codec.STRING.listOf().fieldOf("Enabled").forGetter(dataPackConfig -> dataPackConfig.enabled), Codec.STRING.listOf().fieldOf("Disabled").forGetter(dataPackConfig -> dataPackConfig.disabled)).apply(instance, DataPackConfig::new));
+        // MagmaCube end - decompile error
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/EmptyTickList.java b/src/main/java/net/minecraft/world/level/EmptyTickList.java
index 1b03a4348322a917b50a1682472b8c17c4586d3e..d877d395fb1005af87dc921e52932d772deedbeb 100644
--- a/src/main/java/net/minecraft/world/level/EmptyTickList.java
+++ b/src/main/java/net/minecraft/world/level/EmptyTickList.java
@@ -29,6 +29,6 @@ public class EmptyTickList<T> implements TickList<T>
     }
     
     static {
-        INSTANCE = new EmptyTickList<Object>();
+        INSTANCE = new EmptyTickList<>();
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/EntityGetter.java b/src/main/java/net/minecraft/world/level/EntityGetter.java
index cc5d25c2a60d838ab6ce2314170b28954078ebc5..aed956b231f4c70091e956e21766691e50d2da4e 100644
--- a/src/main/java/net/minecraft/world/level/EntityGetter.java
+++ b/src/main/java/net/minecraft/world/level/EntityGetter.java
@@ -63,11 +63,11 @@ public interface EntityGetter
         return this.getEntities(entity, aabb2, predicate.and(entity2 -> {
             if (entity2.getBoundingBox().intersects(aabb2)) {
                 if ((entity != null) ? entity.canCollideWith(entity2) : entity2.canBeCollidedWith()) {
-                    return b;
+                    return true; // MagmaCube - decompile error
                 }
             }
-            return b;
-        })).stream().map((Function<? super Object, ?>)Entity::getBoundingBox).map((Function<? super Object, ? extends VoxelShape>)Shapes::create);
+            return false; // MagmaCube - decompile error
+        })).stream().map(Entity::getBoundingBox).map(Shapes::create); // MagmaCube - decompile error
     }
     
     @Nullable
@@ -159,7 +159,7 @@ public interface EntityGetter
     }
     
     default List<Player> getNearbyPlayers(final TargetingConditions targetingConditions, final LivingEntity livingEntity, final AABB aabb) {
-        final List<Player> list = (List<Player>)Lists.newArrayList();
+        final List<Player> list = Lists.newArrayList(); // MagmaCube - decompile error
         for (final Player player : this.players()) {
             if (aabb.contains(player.getX(), player.getY(), player.getZ()) && targetingConditions.test(livingEntity, player)) {
                 list.add(player);
@@ -170,7 +170,7 @@ public interface EntityGetter
     
     default <T extends LivingEntity> List<T> getNearbyEntities(final Class<? extends T> clazz, final TargetingConditions targetingConditions, final LivingEntity livingEntity, final AABB aabb) {
         final List<T> list = this.getEntitiesOfClass(clazz, aabb, (Predicate<? super T>)null);
-        final List<T> list2 = (List<T>)Lists.newArrayList();
+        final List<T> list2 = Lists.newArrayList(); // MagmaCube - decompile error
         for (final T livingEntity2 : list) {
             if (targetingConditions.test(livingEntity, livingEntity2)) {
                 list2.add(livingEntity2);
diff --git a/src/main/java/net/minecraft/world/level/Explosion.java b/src/main/java/net/minecraft/world/level/Explosion.java
index 425aa3b1fe0cf2a053487c0e2c7a89bda71a7117..c28f145dd6f693c06b0aad3d62b8403a8bdd0ab9 100644
--- a/src/main/java/net/minecraft/world/level/Explosion.java
+++ b/src/main/java/net/minecraft/world/level/Explosion.java
@@ -77,8 +77,10 @@ public class Explosion
     
     public Explosion(final Level level, @Nullable final Entity entity, @Nullable final DamageSource damageSource, @Nullable final ExplosionDamageCalculator explosionDamageCalculator, final double d, final double d2, final double d3, final float f, final boolean flag, final BlockInteraction blockInteraction) {
         this.random = new Random();
-        this.toBlow = (List<BlockPos>)Lists.newArrayList();
-        this.hitPlayers = (Map<Player, Vec3>)Maps.newHashMap();
+        // MagmaCube start - decompile error
+        this.toBlow = Lists.newArrayList();
+        this.hitPlayers = Maps.newHashMap();
+        // MagmaCube end - decompile error
         this.level = level;
         this.source = entity;
         this.radius = f;
@@ -121,11 +123,11 @@ public class Explosion
                 }
             }
         }
-        return i / i2;
+        return (float) i / i2; // MagmaCube - math
     }
     
     public void explode() {
-        final Set<BlockPos> set = (Set<BlockPos>)Sets.newHashSet();
+        final Set<BlockPos> set = Sets.newHashSet(); // MagmaCube - decompile error
         final int i = 16;
         for (int i2 = 0; i2 < 16; ++i2) {
             for (int i3 = 0; i3 < 16; ++i3) {
diff --git a/src/main/java/net/minecraft/world/level/GameRules.java b/src/main/java/net/minecraft/world/level/GameRules.java
index efbe308ee91b3d5d3f4bb59a5adbd0b8e040d4e5..be3663682991808f8402ea85b7a13b1d927ac602 100644
--- a/src/main/java/net/minecraft/world/level/GameRules.java
+++ b/src/main/java/net/minecraft/world/level/GameRules.java
@@ -26,54 +26,54 @@ import org.apache.logging.log4j.Logger;
 
 public class GameRules {
     private static final Logger LOGGER = LogManager.getLogger();
-    private static final Map<Key<?>, Type<?>> GAME_RULE_TYPES = Maps.newTreeMap(Comparator.comparing(key -> Key.access$600(key)));
-    public static final Key<BooleanValue> RULE_DOFIRETICK = GameRules.register("doFireTick", Category.UPDATES, BooleanValue.access$000(true));
-    public static final Key<BooleanValue> RULE_MOBGRIEFING = GameRules.register("mobGriefing", Category.MOBS, BooleanValue.access$000(true));
-    public static final Key<BooleanValue> RULE_KEEPINVENTORY = GameRules.register("keepInventory", Category.PLAYER, BooleanValue.access$000(false));
-    public static final Key<BooleanValue> RULE_DOMOBSPAWNING = GameRules.register("doMobSpawning", Category.SPAWNING, BooleanValue.access$000(true));
-    public static final Key<BooleanValue> RULE_DOMOBLOOT = GameRules.register("doMobLoot", Category.DROPS, BooleanValue.access$000(true));
-    public static final Key<BooleanValue> RULE_DOBLOCKDROPS = GameRules.register("doTileDrops", Category.DROPS, BooleanValue.access$000(true));
-    public static final Key<BooleanValue> RULE_DOENTITYDROPS = GameRules.register("doEntityDrops", Category.DROPS, BooleanValue.access$000(true));
-    public static final Key<BooleanValue> RULE_COMMANDBLOCKOUTPUT = GameRules.register("commandBlockOutput", Category.CHAT, BooleanValue.access$000(true));
-    public static final Key<BooleanValue> RULE_NATURAL_REGENERATION = GameRules.register("naturalRegeneration", Category.PLAYER, BooleanValue.access$000(true));
-    public static final Key<BooleanValue> RULE_DAYLIGHT = GameRules.register("doDaylightCycle", Category.UPDATES, BooleanValue.access$000(true));
-    public static final Key<BooleanValue> RULE_LOGADMINCOMMANDS = GameRules.register("logAdminCommands", Category.CHAT, BooleanValue.access$000(true));
-    public static final Key<BooleanValue> RULE_SHOWDEATHMESSAGES = GameRules.register("showDeathMessages", Category.CHAT, BooleanValue.access$000(true));
+    private static final Map<Key<?>, Type<?>> GAME_RULE_TYPES = Maps.newTreeMap(Comparator.comparing(key -> key.getId())); // MagmaCube - decompile error
+    public static final Key<BooleanValue> RULE_DOFIRETICK = GameRules.register("doFireTick", Category.UPDATES, BooleanValue._access$000(true));
+    public static final Key<BooleanValue> RULE_MOBGRIEFING = GameRules.register("mobGriefing", Category.MOBS, BooleanValue._access$000(true));
+    public static final Key<BooleanValue> RULE_KEEPINVENTORY = GameRules.register("keepInventory", Category.PLAYER, BooleanValue._access$000(false));
+    public static final Key<BooleanValue> RULE_DOMOBSPAWNING = GameRules.register("doMobSpawning", Category.SPAWNING, BooleanValue._access$000(true));
+    public static final Key<BooleanValue> RULE_DOMOBLOOT = GameRules.register("doMobLoot", Category.DROPS, BooleanValue._access$000(true));
+    public static final Key<BooleanValue> RULE_DOBLOCKDROPS = GameRules.register("doTileDrops", Category.DROPS, BooleanValue._access$000(true));
+    public static final Key<BooleanValue> RULE_DOENTITYDROPS = GameRules.register("doEntityDrops", Category.DROPS, BooleanValue._access$000(true));
+    public static final Key<BooleanValue> RULE_COMMANDBLOCKOUTPUT = GameRules.register("commandBlockOutput", Category.CHAT, BooleanValue._access$000(true));
+    public static final Key<BooleanValue> RULE_NATURAL_REGENERATION = GameRules.register("naturalRegeneration", Category.PLAYER, BooleanValue._access$000(true));
+    public static final Key<BooleanValue> RULE_DAYLIGHT = GameRules.register("doDaylightCycle", Category.UPDATES, BooleanValue._access$000(true));
+    public static final Key<BooleanValue> RULE_LOGADMINCOMMANDS = GameRules.register("logAdminCommands", Category.CHAT, BooleanValue._access$000(true));
+    public static final Key<BooleanValue> RULE_SHOWDEATHMESSAGES = GameRules.register("showDeathMessages", Category.CHAT, BooleanValue._access$000(true));
     public static final Key<IntegerValue> RULE_RANDOMTICKING = GameRules.register("randomTickSpeed", Category.UPDATES, IntegerValue.access$100(3));
-    public static final Key<BooleanValue> RULE_SENDCOMMANDFEEDBACK = GameRules.register("sendCommandFeedback", Category.CHAT, BooleanValue.access$000(true));
-    public static final Key<BooleanValue> RULE_REDUCEDDEBUGINFO = GameRules.register("reducedDebugInfo", Category.MISC, BooleanValue.access$200(false, (minecraftServer, booleanValue) -> {
+    public static final Key<BooleanValue> RULE_SENDCOMMANDFEEDBACK = GameRules.register("sendCommandFeedback", Category.CHAT, BooleanValue._access$000(true));
+    public static final Key<BooleanValue> RULE_REDUCEDDEBUGINFO = GameRules.register("reducedDebugInfo", Category.MISC, BooleanValue._access$200(false, (minecraftServer, booleanValue) -> {
         byte b = booleanValue.get() ? (byte)22 : (byte)23;
         for (ServerPlayer serverPlayer : minecraftServer.getPlayerList().getPlayers()) {
             serverPlayer.connection.send(new ClientboundEntityEventPacket(serverPlayer, b));
         }
     }));
-    public static final Key<BooleanValue> RULE_SPECTATORSGENERATECHUNKS = GameRules.register("spectatorsGenerateChunks", Category.PLAYER, BooleanValue.access$000(true));
+    public static final Key<BooleanValue> RULE_SPECTATORSGENERATECHUNKS = GameRules.register("spectatorsGenerateChunks", Category.PLAYER, BooleanValue._access$000(true));
     public static final Key<IntegerValue> RULE_SPAWN_RADIUS = GameRules.register("spawnRadius", Category.PLAYER, IntegerValue.access$100(10));
-    public static final Key<BooleanValue> RULE_DISABLE_ELYTRA_MOVEMENT_CHECK = GameRules.register("disableElytraMovementCheck", Category.PLAYER, BooleanValue.access$000(false));
+    public static final Key<BooleanValue> RULE_DISABLE_ELYTRA_MOVEMENT_CHECK = GameRules.register("disableElytraMovementCheck", Category.PLAYER, BooleanValue._access$000(false));
     public static final Key<IntegerValue> RULE_MAX_ENTITY_CRAMMING = GameRules.register("maxEntityCramming", Category.MOBS, IntegerValue.access$100(24));
-    public static final Key<BooleanValue> RULE_WEATHER_CYCLE = GameRules.register("doWeatherCycle", Category.UPDATES, BooleanValue.access$000(true));
-    public static final Key<BooleanValue> RULE_LIMITED_CRAFTING = GameRules.register("doLimitedCrafting", Category.PLAYER, BooleanValue.access$000(false));
+    public static final Key<BooleanValue> RULE_WEATHER_CYCLE = GameRules.register("doWeatherCycle", Category.UPDATES, BooleanValue._access$000(true));
+    public static final Key<BooleanValue> RULE_LIMITED_CRAFTING = GameRules.register("doLimitedCrafting", Category.PLAYER, BooleanValue._access$000(false));
     public static final Key<IntegerValue> RULE_MAX_COMMAND_CHAIN_LENGTH = GameRules.register("maxCommandChainLength", Category.MISC, IntegerValue.access$100(65536));
-    public static final Key<BooleanValue> RULE_ANNOUNCE_ADVANCEMENTS = GameRules.register("announceAdvancements", Category.CHAT, BooleanValue.access$000(true));
-    public static final Key<BooleanValue> RULE_DISABLE_RAIDS = GameRules.register("disableRaids", Category.MOBS, BooleanValue.access$000(false));
-    public static final Key<BooleanValue> RULE_DOINSOMNIA = GameRules.register("doInsomnia", Category.SPAWNING, BooleanValue.access$000(true));
-    public static final Key<BooleanValue> RULE_DO_IMMEDIATE_RESPAWN = GameRules.register("doImmediateRespawn", Category.PLAYER, BooleanValue.access$200(false, (minecraftServer, booleanValue) -> {
+    public static final Key<BooleanValue> RULE_ANNOUNCE_ADVANCEMENTS = GameRules.register("announceAdvancements", Category.CHAT, BooleanValue._access$000(true));
+    public static final Key<BooleanValue> RULE_DISABLE_RAIDS = GameRules.register("disableRaids", Category.MOBS, BooleanValue._access$000(false));
+    public static final Key<BooleanValue> RULE_DOINSOMNIA = GameRules.register("doInsomnia", Category.SPAWNING, BooleanValue._access$000(true));
+    public static final Key<BooleanValue> RULE_DO_IMMEDIATE_RESPAWN = GameRules.register("doImmediateRespawn", Category.PLAYER, BooleanValue._access$200(false, (minecraftServer, booleanValue) -> {
         for (ServerPlayer serverPlayer : minecraftServer.getPlayerList().getPlayers()) {
             serverPlayer.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.IMMEDIATE_RESPAWN, booleanValue.get() ? 1.0f : 0.0f));
         }
     }));
-    public static final Key<BooleanValue> RULE_DROWNING_DAMAGE = GameRules.register("drowningDamage", Category.PLAYER, BooleanValue.access$000(true));
-    public static final Key<BooleanValue> RULE_FALL_DAMAGE = GameRules.register("fallDamage", Category.PLAYER, BooleanValue.access$000(true));
-    public static final Key<BooleanValue> RULE_FIRE_DAMAGE = GameRules.register("fireDamage", Category.PLAYER, BooleanValue.access$000(true));
-    public static final Key<BooleanValue> RULE_DO_PATROL_SPAWNING = GameRules.register("doPatrolSpawning", Category.SPAWNING, BooleanValue.access$000(true));
-    public static final Key<BooleanValue> RULE_DO_TRADER_SPAWNING = GameRules.register("doTraderSpawning", Category.SPAWNING, BooleanValue.access$000(true));
-    public static final Key<BooleanValue> RULE_FORGIVE_DEAD_PLAYERS = GameRules.register("forgiveDeadPlayers", Category.MOBS, BooleanValue.access$000(true));
-    public static final Key<BooleanValue> RULE_UNIVERSAL_ANGER = GameRules.register("universalAnger", Category.MOBS, BooleanValue.access$000(false));
+    public static final Key<BooleanValue> RULE_DROWNING_DAMAGE = GameRules.register("drowningDamage", Category.PLAYER, BooleanValue._access$000(true));
+    public static final Key<BooleanValue> RULE_FALL_DAMAGE = GameRules.register("fallDamage", Category.PLAYER, BooleanValue._access$000(true));
+    public static final Key<BooleanValue> RULE_FIRE_DAMAGE = GameRules.register("fireDamage", Category.PLAYER, BooleanValue._access$000(true));
+    public static final Key<BooleanValue> RULE_DO_PATROL_SPAWNING = GameRules.register("doPatrolSpawning", Category.SPAWNING, BooleanValue._access$000(true));
+    public static final Key<BooleanValue> RULE_DO_TRADER_SPAWNING = GameRules.register("doTraderSpawning", Category.SPAWNING, BooleanValue._access$000(true));
+    public static final Key<BooleanValue> RULE_FORGIVE_DEAD_PLAYERS = GameRules.register("forgiveDeadPlayers", Category.MOBS, BooleanValue._access$000(true));
+    public static final Key<BooleanValue> RULE_UNIVERSAL_ANGER = GameRules.register("universalAnger", Category.MOBS, BooleanValue._access$000(false));
     private final Map<Key<?>, Value<?>> rules;
 
     private static <T extends Value<T>> Key<T> register(String s, Category category, Type<T> type) {
         Key key = new Key(s, category);
-        Type<T> type2 = GAME_RULE_TYPES.put(key, type);
+        Type<T> type2 = (Type<T>) GAME_RULE_TYPES.put(key, type); // MagmaCube - decompile error
         if (type2 != null) {
             throw new IllegalStateException("Duplicate game rule registration for " + s);
         }
@@ -116,7 +116,7 @@ public class GameRules {
     }
 
     private static <T extends Value<T>> void callVisitorCap(GameRuleTypeVisitor gameRuleTypeVisitor, Key<?> key, Type<?> type) {
-        Key<?> key2 = key;
+        Key key2 = key; // MagmaCube - untype
         Type<?> type2 = type;
         gameRuleTypeVisitor.visit(key2, type2);
         type2.callVisitor(gameRuleTypeVisitor, key2);
@@ -201,21 +201,11 @@ public class GameRules {
             this.onChanged(minecraftServer);
         }
 
-        @Override
-        protected /* synthetic */ Value copy() {
-            return this.copy();
-        }
-
-        @Override
-        protected /* synthetic */ Value getSelf() {
-            return this.getSelf();
-        }
-
-        static /* synthetic */ Type access$000(boolean flag) {
+        static /* synthetic */ Type _access$000(boolean flag) { // MagmaCube - decompile error
             return BooleanValue.create(flag);
         }
 
-        static /* synthetic */ Type access$200(boolean flag, BiConsumer biConsumer) {
+        static /* synthetic */ Type _access$200(boolean flag, BiConsumer<MinecraftServer, BooleanValue> biConsumer) { // MagmaCube - decompile error
             return BooleanValue.create(flag, biConsumer);
         }
     }
@@ -299,16 +289,6 @@ public class GameRules {
             this.onChanged(minecraftServer);
         }
 
-        @Override
-        protected /* synthetic */ Value copy() {
-            return this.copy();
-        }
-
-        @Override
-        protected /* synthetic */ Value getSelf() {
-            return this.getSelf();
-        }
-
         static /* synthetic */ Type access$100(int i) {
             return IntegerValue.create(i);
         }
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index a87478a7aeebd713bb17c88d073079e99032ceb8..2f32068ed6375f5babd6f545668cf3bb7e31320d 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -305,7 +305,7 @@ AutoCloseable {
                 try {
                     return String.format("ID #%s (%s // %s)", Registry.BLOCK.getKey(block), block.getDescriptionId(), block.getClass().getCanonicalName());
                 }
-                catch (Throwable throwable) {
+                catch (Throwable throwable1) { // MagmaCube - decompile error
                     return "ID #" + Registry.BLOCK.getKey(block);
                 }
             });
@@ -316,13 +316,13 @@ AutoCloseable {
 
     @Override
     public int getHeight(Heightmap.Types types, int i, int i2) {
-        boolean i5;
+        int i5; // MagmaCube - decompile error
         if (i < -30000000 || i2 < -30000000 || i >= 30000000 || i2 >= 30000000) {
-            int i3 = this.getSeaLevel() + 1;
+            i5 = this.getSeaLevel() + 1; // MagmaCube - decompile error
         } else if (this.hasChunk(i >> 4, i2 >> 4)) {
-            int i4 = this.getChunk(i >> 4, i2 >> 4).getHeight(types, i & 0xF, i2 & 0xF) + 1;
+            i5 = this.getChunk(i >> 4, i2 >> 4).getHeight(types, i & 0xF, i2 & 0xF) + 1; // MagmaCube - decompile error
         } else {
-            i5 = false;
+            i5 = 0; // MagmaCube - decompile error
         }
         return (int)i5;
     }
@@ -653,7 +653,7 @@ AutoCloseable {
         int i2 = Mth.ceil((aabb.maxX + 2.0) / 16.0);
         int i3 = Mth.floor((aabb.minZ - 2.0) / 16.0);
         int i4 = Mth.ceil((aabb.maxZ + 2.0) / 16.0);
-        ArrayList list = Lists.newArrayList();
+        ArrayList<T> list = Lists.newArrayList(); // MagmaCube - type
         for (int i5 = i; i5 < i2; ++i5) {
             for (int i6 = i3; i6 < i4; ++i6) {
                 LevelChunk levelChunk = this.getChunkSource().getChunk(i5, i6, false);
@@ -985,9 +985,4 @@ AutoCloseable {
     public final boolean isDebug() {
         return this.isDebug;
     }
-
-    @Override
-    public /* synthetic */ ChunkAccess getChunk(int n, int n2) {
-        return this.getChunk(n, n2);
-    }
 }
diff --git a/src/main/java/net/minecraft/world/level/LevelAccessor.java b/src/main/java/net/minecraft/world/level/LevelAccessor.java
index 5d0b3149e9653c128ea832dee7ef539f8c62e064..3d6eeb66496a4f8907c4bcbbaeb0969aff2a0152 100644
--- a/src/main/java/net/minecraft/world/level/LevelAccessor.java
+++ b/src/main/java/net/minecraft/world/level/LevelAccessor.java
@@ -53,7 +53,7 @@ LevelTimeAccess {
 
     public void addParticle(ParticleOptions var1, double var2, double var4, double var6, double var8, double var10, double var12);
 
-    public void levelEvent(@Nullable Player var1, int var2, BlockPos var3, int var4);
+    public void levelEvent(@Nullable Player player, int action, BlockPos blockPos, int id);
 
     default public int getHeight() {
         return this.dimensionType().logicalHeight();
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index 60e3e164e2511720e93c85705567a25901819bfb..4163a91962fc34bcc6e0e15a805568dba0e0bdd1 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -181,13 +181,13 @@ public final class NaturalSpawner {
      */
     @Nullable
     private static Mob getMobForSpawn(ServerLevel serverLevel, EntityType<?> entityType) {
-        void mob2;
+        Mob mob2; // MagmaCube - decompile error
         try {
             Object entity = entityType.create(serverLevel);
             if (!(entity instanceof Mob)) {
                 throw new IllegalStateException("Trying to spawn a non-mob: " + Registry.ENTITY_TYPE.getKey(entityType));
             }
-            Mob mob = (Mob)entity;
+            mob2 = (Mob)entity; // MagmaCube - decompile error
         }
         catch (Exception exception) {
             LOGGER.warn("Failed to create mob", (Throwable)exception);
@@ -303,13 +303,13 @@ public final class NaturalSpawner {
                     BlockPos blockPos = NaturalSpawner.getTopNonCollidingPos(serverLevelAccessor, spawnerData.type, i6, i7);
                     if (spawnerData.type.canSummon() && NaturalSpawner.isSpawnPositionOk(SpawnPlacements.getPlacementType(spawnerData.type), serverLevelAccessor, blockPos, spawnerData.type)) {
                         Mob mob;
-                        void entity2;
+                        Entity entity2; // MagmaCube - decompile error
                         float f = spawnerData.type.getWidth();
                         double d = Mth.clamp((double)i6, (double)i3 + (double)f, (double)i3 + 16.0 - (double)f);
                         double d2 = Mth.clamp((double)i7, (double)i4 + (double)f, (double)i4 + 16.0 - (double)f);
                         if (!serverLevelAccessor.noCollision(spawnerData.type.getAABB(d, blockPos.getY(), d2)) || !SpawnPlacements.checkSpawnRules(spawnerData.type, serverLevelAccessor, MobSpawnType.CHUNK_GENERATION, new BlockPos(d, (double)blockPos.getY(), d2), serverLevelAccessor.getRandom())) continue;
                         try {
-                            Object entity = spawnerData.type.create(serverLevelAccessor.getLevel());
+                            entity2 = spawnerData.type.create(serverLevelAccessor.getLevel()); // MagmaCube - decompile error
                         }
                         catch (Exception exception) {
                             LOGGER.warn("Failed to create mob", (Throwable)exception);
@@ -334,7 +334,7 @@ public final class NaturalSpawner {
     }
 
     private static BlockPos getTopNonCollidingPos(LevelReader levelReader, EntityType<?> entityType, int i, int i2) {
-        Vec3i blockPos;
+        BlockPos blockPos; // MagmaCube - decompile error
         int i3 = levelReader.getHeight(SpawnPlacements.getHeightmapType(entityType), i, i2);
         BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos(i, i3, i2);
         if (levelReader.dimensionType().hasCeiling()) {
@@ -403,11 +403,11 @@ public final class NaturalSpawner {
             EntityType<?> entityType = mob.getType();
             BlockPos blockPos = mob.blockPosition();
             if (blockPos.equals(this.lastCheckedPos) && entityType == this.lastCheckedType) {
-                double d = this.lastCharge;
+                d3 = this.lastCharge; // MagmaCube - decompile error
             } else {
                 MobSpawnSettings.MobSpawnCost mobSpawnCost = NaturalSpawner.getRoughBiome(blockPos, chunkAccess).getMobSettings().getMobSpawnCost(entityType);
                 if (mobSpawnCost != null) {
-                    double d2 = mobSpawnCost.getCharge();
+                    d3 = mobSpawnCost.getCharge(); // MagmaCube - decompile error
                 } else {
                     d3 = 0.0;
                 }
diff --git a/src/main/java/net/minecraft/world/level/PotentialCalculator.java b/src/main/java/net/minecraft/world/level/PotentialCalculator.java
index 72961dd53269c136fd50ec6fa40640e908d9043e..c1d04669a441d66983ce4945caa6a9716234369d 100644
--- a/src/main/java/net/minecraft/world/level/PotentialCalculator.java
+++ b/src/main/java/net/minecraft/world/level/PotentialCalculator.java
@@ -1,7 +1,5 @@
 package net.minecraft.world.level;
 
-import net.minecraft.core.Vec3i;
-import java.util.Iterator;
 import net.minecraft.core.BlockPos;
 import com.google.common.collect.Lists;
 import java.util.List;
@@ -11,7 +9,7 @@ public class PotentialCalculator
     private final List<PointCharge> charges;
     
     public PotentialCalculator() {
-        this.charges = (List<PointCharge>)Lists.newArrayList();
+        this.charges = Lists.newArrayList(); // MagmaCube - decompile fix
     }
     
     public void addCharge(final BlockPos blockPos, final double d) {
diff --git a/src/main/java/net/minecraft/world/level/ServerLevelAccessor.java b/src/main/java/net/minecraft/world/level/ServerLevelAccessor.java
index 13fee123b82c7640f718a1da94561ab48a9afdb8..ad8170af690d450bde1257ee7045ede3846e8962 100644
--- a/src/main/java/net/minecraft/world/level/ServerLevelAccessor.java
+++ b/src/main/java/net/minecraft/world/level/ServerLevelAccessor.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level;
 
-import java.util.function.Consumer;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.server.level.ServerLevel;
 
diff --git a/src/main/java/net/minecraft/world/level/SpawnData.java b/src/main/java/net/minecraft/world/level/SpawnData.java
index ed9ed5dd40eba8eb7f2023be86230b8a3d187e97..7a88754d919c5d19d8a05630de74611178a96932 100644
--- a/src/main/java/net/minecraft/world/level/SpawnData.java
+++ b/src/main/java/net/minecraft/world/level/SpawnData.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level;
 
-import net.minecraft.nbt.Tag;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.util.WeighedRandom;
diff --git a/src/main/java/net/minecraft/world/level/biome/AmbientAdditionsSettings.java b/src/main/java/net/minecraft/world/level/biome/AmbientAdditionsSettings.java
index 0a96cbb06d85bebb750d93400df300dc650f1576..74128116e7c08ab602908856d7d17fe456495046 100644
--- a/src/main/java/net/minecraft/world/level/biome/AmbientAdditionsSettings.java
+++ b/src/main/java/net/minecraft/world/level/biome/AmbientAdditionsSettings.java
@@ -27,6 +27,6 @@ public class AmbientAdditionsSettings
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)SoundEvent.CODEC.fieldOf("sound").forGetter(ambientAdditionsSettings -> ambientAdditionsSettings.soundEvent), (App)Codec.DOUBLE.fieldOf("tick_chance").forGetter(ambientAdditionsSettings -> ambientAdditionsSettings.tickChance)).apply(instance, (BiFunction)AmbientAdditionsSettings::new));
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(SoundEvent.CODEC.fieldOf("sound").forGetter(ambientAdditionsSettings -> ambientAdditionsSettings.soundEvent), Codec.DOUBLE.fieldOf("tick_chance").forGetter(ambientAdditionsSettings -> ambientAdditionsSettings.tickChance)).apply(instance, AmbientAdditionsSettings::new)); // MagmaCube - decompile error
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/biome/AmbientMoodSettings.java b/src/main/java/net/minecraft/world/level/biome/AmbientMoodSettings.java
index a585b16db11ab2e901d7f45654019e21f3efe984..52ff70b1cb52a712ff6495765458f86a3fa3f329 100644
--- a/src/main/java/net/minecraft/world/level/biome/AmbientMoodSettings.java
+++ b/src/main/java/net/minecraft/world/level/biome/AmbientMoodSettings.java
@@ -40,7 +40,8 @@ public class AmbientMoodSettings
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)SoundEvent.CODEC.fieldOf("sound").forGetter(ambientMoodSettings -> ambientMoodSettings.soundEvent), (App)Codec.INT.fieldOf("tick_delay").forGetter(ambientMoodSettings -> ambientMoodSettings.tickDelay), (App)Codec.INT.fieldOf("block_search_extent").forGetter(ambientMoodSettings -> ambientMoodSettings.blockSearchExtent), (App)Codec.DOUBLE.fieldOf("offset").forGetter(ambientMoodSettings -> ambientMoodSettings.soundPositionOffset)).apply(instance, AmbientMoodSettings::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(SoundEvent.CODEC.fieldOf("sound").forGetter(ambientMoodSettings -> ambientMoodSettings.soundEvent), Codec.INT.fieldOf("tick_delay").forGetter(ambientMoodSettings -> ambientMoodSettings.tickDelay), Codec.INT.fieldOf("block_search_extent").forGetter(ambientMoodSettings -> ambientMoodSettings.blockSearchExtent), Codec.DOUBLE.fieldOf("offset").forGetter(ambientMoodSettings -> ambientMoodSettings.soundPositionOffset)).apply(instance, AmbientMoodSettings::new));
         LEGACY_CAVE_SETTINGS = new AmbientMoodSettings(SoundEvents.AMBIENT_CAVE, 6000, 8, 2.0);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/biome/AmbientParticleSettings.java b/src/main/java/net/minecraft/world/level/biome/AmbientParticleSettings.java
index 4d4d03c8791692b82bcfd06d63aeeb90ff608634..371209899b5a591db34eae78a6ee20a09293425a 100644
--- a/src/main/java/net/minecraft/world/level/biome/AmbientParticleSettings.java
+++ b/src/main/java/net/minecraft/world/level/biome/AmbientParticleSettings.java
@@ -29,6 +29,7 @@ public class AmbientParticleSettings
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)ParticleTypes.CODEC.fieldOf("options").forGetter(ambientParticleSettings -> ambientParticleSettings.options), (App)Codec.FLOAT.fieldOf("probability").forGetter(ambientParticleSettings -> ambientParticleSettings.probability)).apply(instance, (BiFunction)AmbientParticleSettings::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(ParticleTypes.CODEC.fieldOf("options").forGetter(ambientParticleSettings -> ambientParticleSettings.options), Codec.FLOAT.fieldOf("probability").forGetter(ambientParticleSettings -> ambientParticleSettings.probability)).apply(instance, AmbientParticleSettings::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/biome/Biome.java b/src/main/java/net/minecraft/world/level/biome/Biome.java
index 1705f8d79d3be66d35494d54fb727f1bf5da5276..f0b505afb121980348f3ceddff36b0e1d0c59517 100644
--- a/src/main/java/net/minecraft/world/level/biome/Biome.java
+++ b/src/main/java/net/minecraft/world/level/biome/Biome.java
@@ -62,8 +62,10 @@ import org.apache.logging.log4j.Logger;
 
 public final class Biome {
     public static final Logger LOGGER = LogManager.getLogger();
-    public static final Codec<Biome> DIRECT_CODEC = RecordCodecBuilder.create(instance -> instance.group((App)ClimateSettings.CODEC.forGetter(biome -> biome.climateSettings), (App)BiomeCategory.CODEC.fieldOf("category").forGetter(biome -> biome.biomeCategory), (App)Codec.FLOAT.fieldOf("depth").forGetter(biome -> Float.valueOf(biome.depth)), (App)Codec.FLOAT.fieldOf("scale").forGetter(biome -> Float.valueOf(biome.scale)), (App)BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter(biome -> biome.specialEffects), (App)BiomeGenerationSettings.CODEC.forGetter(biome -> biome.generationSettings), (App)MobSpawnSettings.CODEC.forGetter(biome -> biome.mobSettings)).apply((Applicative)instance, Biome::new));
-    public static final Codec<Biome> NETWORK_CODEC = RecordCodecBuilder.create(instance -> instance.group((App)ClimateSettings.CODEC.forGetter(biome -> biome.climateSettings), (App)BiomeCategory.CODEC.fieldOf("category").forGetter(biome -> biome.biomeCategory), (App)Codec.FLOAT.fieldOf("depth").forGetter(biome -> Float.valueOf(biome.depth)), (App)Codec.FLOAT.fieldOf("scale").forGetter(biome -> Float.valueOf(biome.scale)), (App)BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter(biome -> biome.specialEffects)).apply((Applicative)instance, (climateSettings, biomeCategory, f, f2, biomeSpecialEffects) -> new Biome((ClimateSettings)climateSettings, (BiomeCategory)biomeCategory, f.floatValue(), f2.floatValue(), (BiomeSpecialEffects)biomeSpecialEffects, BiomeGenerationSettings.EMPTY, MobSpawnSettings.EMPTY)));
+    // MagmaCube - decompile error
+    public static final Codec<Biome> DIRECT_CODEC = RecordCodecBuilder.create(instance -> instance.group(ClimateSettings.CODEC.forGetter(biome -> biome.climateSettings), BiomeCategory.CODEC.fieldOf("category").forGetter(biome -> biome.biomeCategory), Codec.FLOAT.fieldOf("depth").forGetter(biome -> Float.valueOf(biome.depth)), Codec.FLOAT.fieldOf("scale").forGetter(biome -> Float.valueOf(biome.scale)), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter(biome -> biome.specialEffects), BiomeGenerationSettings.CODEC.forGetter(biome -> biome.generationSettings), MobSpawnSettings.CODEC.forGetter(biome -> biome.mobSettings)).apply((Applicative)instance, Biome::new));
+    // MagmaCube - decompile error
+    public static final Codec<Biome> NETWORK_CODEC = RecordCodecBuilder.create(instance -> instance.group(ClimateSettings.CODEC.forGetter(biome -> biome.climateSettings), BiomeCategory.CODEC.fieldOf("category").forGetter(biome -> biome.biomeCategory), Codec.FLOAT.fieldOf("depth").forGetter(biome -> Float.valueOf(biome.depth)), Codec.FLOAT.fieldOf("scale").forGetter(biome -> Float.valueOf(biome.scale)), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter(biome -> biome.specialEffects)).apply((Applicative)instance, (climateSettings, biomeCategory, f, f2, biomeSpecialEffects) -> new Biome((ClimateSettings)climateSettings, (BiomeCategory)biomeCategory, f.floatValue(), f2.floatValue(), (BiomeSpecialEffects)biomeSpecialEffects, BiomeGenerationSettings.EMPTY, MobSpawnSettings.EMPTY)));
     public static final Codec<Supplier<Biome>> CODEC = RegistryFileCodec.create(Registry.BIOME_REGISTRY, DIRECT_CODEC);
     public static final Codec<List<Supplier<Biome>>> LIST_CODEC = RegistryFileCodec.homogeneousList(Registry.BIOME_REGISTRY, DIRECT_CODEC);
     private final Map<Integer, List<StructureFeature<?>>> structuresByStep = Registry.STRUCTURE_FEATURE.stream().collect(Collectors.groupingBy(structureFeature -> structureFeature.step().ordinal()));
@@ -180,7 +182,7 @@ public final class Biome {
         for (int i2 = 0; i2 < i; ++i2) {
             int i3 = 0;
             if (structureFeatureManager.shouldGenerateFeatures()) {
-                List list2 = this.structuresByStep.getOrDefault(i2, Collections.emptyList());
+                List<StructureFeature<?>> list2 = this.structuresByStep.getOrDefault(i2, Collections.emptyList()); // MagmaCube - type
                 for (StructureFeature structureFeature : list2) {
                     worldgenRandom.setFeatureSeed(l, i3, i2);
                     int i4 = blockPos.getX() >> 4;
@@ -304,7 +306,7 @@ public final class Biome {
     }
 
     static class ClimateSettings {
-        public static final MapCodec<ClimateSettings> CODEC = RecordCodecBuilder.mapCodec(instance -> instance.group((App)Precipitation.CODEC.fieldOf("precipitation").forGetter(climateSettings -> climateSettings.precipitation), (App)Codec.FLOAT.fieldOf("temperature").forGetter(climateSettings -> Float.valueOf(climateSettings.temperature)), (App)TemperatureModifier.CODEC.optionalFieldOf("temperature_modifier", TemperatureModifier.NONE).forGetter(climateSettings -> climateSettings.temperatureModifier), (App)Codec.FLOAT.fieldOf("downfall").forGetter(climateSettings -> Float.valueOf(climateSettings.downfall))).apply((Applicative)instance, ClimateSettings::new));
+        public static final MapCodec<ClimateSettings> CODEC = RecordCodecBuilder.mapCodec(instance -> instance.group(Precipitation.CODEC.fieldOf("precipitation").forGetter(climateSettings -> climateSettings.precipitation), Codec.FLOAT.fieldOf("temperature").forGetter(climateSettings -> Float.valueOf(climateSettings.temperature)), TemperatureModifier.CODEC.optionalFieldOf("temperature_modifier", TemperatureModifier.NONE).forGetter(climateSettings -> climateSettings.temperatureModifier), Codec.FLOAT.fieldOf("downfall").forGetter(climateSettings -> Float.valueOf(climateSettings.downfall))).apply((Applicative)instance, ClimateSettings::new));
         private final Precipitation precipitation;
         private final float temperature;
         private final TemperatureModifier temperatureModifier;
@@ -319,7 +321,7 @@ public final class Biome {
     }
 
     public static class ClimateParameters {
-        public static final Codec<ClimateParameters> CODEC = RecordCodecBuilder.create(instance -> instance.group((App)Codec.floatRange((float)-2.0f, (float)2.0f).fieldOf("temperature").forGetter(climateParameters -> Float.valueOf(climateParameters.temperature)), (App)Codec.floatRange((float)-2.0f, (float)2.0f).fieldOf("humidity").forGetter(climateParameters -> Float.valueOf(climateParameters.humidity)), (App)Codec.floatRange((float)-2.0f, (float)2.0f).fieldOf("altitude").forGetter(climateParameters -> Float.valueOf(climateParameters.altitude)), (App)Codec.floatRange((float)-2.0f, (float)2.0f).fieldOf("weirdness").forGetter(climateParameters -> Float.valueOf(climateParameters.weirdness)), (App)Codec.floatRange((float)0.0f, (float)1.0f).fieldOf("offset").forGetter(climateParameters -> Float.valueOf(climateParameters.offset))).apply((Applicative)instance, ClimateParameters::new));
+        public static final Codec<ClimateParameters> CODEC = RecordCodecBuilder.create(instance -> instance.group(Codec.floatRange((float)-2.0f, (float)2.0f).fieldOf("temperature").forGetter(climateParameters -> Float.valueOf(climateParameters.temperature)), Codec.floatRange((float)-2.0f, (float)2.0f).fieldOf("humidity").forGetter(climateParameters -> Float.valueOf(climateParameters.humidity)), Codec.floatRange((float)-2.0f, (float)2.0f).fieldOf("altitude").forGetter(climateParameters -> Float.valueOf(climateParameters.altitude)), Codec.floatRange((float)-2.0f, (float)2.0f).fieldOf("weirdness").forGetter(climateParameters -> Float.valueOf(climateParameters.weirdness)), Codec.floatRange((float)0.0f, (float)1.0f).fieldOf("offset").forGetter(climateParameters -> Float.valueOf(climateParameters.offset))).apply((Applicative)instance, ClimateParameters::new));
         private final float temperature;
         private final float humidity;
         private final float altitude;
diff --git a/src/main/java/net/minecraft/world/level/block/AbstractBannerBlock.java b/src/main/java/net/minecraft/world/level/block/AbstractBannerBlock.java
index 45f15aba47761e3a77d1dfa2c859bd47bcfab338..39ac89abbc94a9832851db739b228a345e4c2653 100644
--- a/src/main/java/net/minecraft/world/level/block/AbstractBannerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AbstractBannerBlock.java
@@ -9,7 +9,6 @@ import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.entity.BannerBlockEntity;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.BlockGetter;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.item.DyeColor;
 
 public abstract class AbstractBannerBlock extends BaseEntityBlock
diff --git a/src/main/java/net/minecraft/world/level/block/AbstractChestBlock.java b/src/main/java/net/minecraft/world/level/block/AbstractChestBlock.java
index 81ebcc754edeba1c3cf46c5848b8126200148f53..58197753539147e2f416f8ca60b69db2b876bb7b 100644
--- a/src/main/java/net/minecraft/world/level/block/AbstractChestBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AbstractChestBlock.java
@@ -4,7 +4,6 @@ import net.minecraft.world.level.block.entity.ChestBlockEntity;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.entity.BlockEntityType;
 import java.util.function.Supplier;
 import net.minecraft.world.level.block.entity.BlockEntity;
diff --git a/src/main/java/net/minecraft/world/level/block/AbstractFurnaceBlock.java b/src/main/java/net/minecraft/world/level/block/AbstractFurnaceBlock.java
index 14c6a1de406e1ea4f51da7d65b6cdd3004522b04..949203f003768c231eb3f783baf79b72eeedad17 100644
--- a/src/main/java/net/minecraft/world/level/block/AbstractFurnaceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AbstractFurnaceBlock.java
@@ -33,7 +33,7 @@ public abstract class AbstractFurnaceBlock extends BaseEntityBlock
     
     protected AbstractFurnaceBlock(final Properties properties) {
         super(properties);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)AbstractFurnaceBlock.FACING, Direction.NORTH)).setValue((Property<Comparable>)AbstractFurnaceBlock.LIT, false));
+        this.registerDefaultState(((this.stateDefinition.any()).setValue(AbstractFurnaceBlock.FACING, Direction.NORTH)).setValue(AbstractFurnaceBlock.LIT, false)); // MagmaCube - decompile error
     }
     
     @Override
@@ -49,7 +49,7 @@ public abstract class AbstractFurnaceBlock extends BaseEntityBlock
     
     @Override
     public BlockState getStateForPlacement(final BlockPlaceContext blockPlaceContext) {
-        return ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)AbstractFurnaceBlock.FACING, blockPlaceContext.getHorizontalDirection().getOpposite());
+        return (this.defaultBlockState()).setValue(AbstractFurnaceBlock.FACING, blockPlaceContext.getHorizontalDirection().getOpposite()); // MagmaCube - decompile error
     }
     
     @Override
@@ -93,7 +93,7 @@ public abstract class AbstractFurnaceBlock extends BaseEntityBlock
     
     @Override
     public BlockState rotate(final BlockState blockState, final Rotation rotation) {
-        return ((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)AbstractFurnaceBlock.FACING, rotation.rotate(blockState.getValue((Property<Direction>)AbstractFurnaceBlock.FACING)));
+        return (blockState).setValue(AbstractFurnaceBlock.FACING, rotation.rotate(blockState.getValue((Property<Direction>)AbstractFurnaceBlock.FACING)));
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/AbstractGlassBlock.java b/src/main/java/net/minecraft/world/level/block/AbstractGlassBlock.java
index f245d5689f726a0ece0e251b6e430d061f3a29be..91325bb092aea3600a2af9eaa040d879efd015c2 100644
--- a/src/main/java/net/minecraft/world/level/block/AbstractGlassBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AbstractGlassBlock.java
@@ -6,7 +6,6 @@ import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public abstract class AbstractGlassBlock extends HalfTransparentBlock
 {
diff --git a/src/main/java/net/minecraft/world/level/block/AbstractSkullBlock.java b/src/main/java/net/minecraft/world/level/block/AbstractSkullBlock.java
index eaf1b11a9cdd6776f4bb0db4b82156b141e8ea77..0ba27c396c7f93e2831615f66908d313fb0ef15a 100644
--- a/src/main/java/net/minecraft/world/level/block/AbstractSkullBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AbstractSkullBlock.java
@@ -6,7 +6,6 @@ import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.BlockGetter;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.item.Wearable;
 
 public abstract class AbstractSkullBlock extends BaseEntityBlock implements Wearable
diff --git a/src/main/java/net/minecraft/world/level/block/AirBlock.java b/src/main/java/net/minecraft/world/level/block/AirBlock.java
index aed342a95605e854baec8d87a0d9d2ce087be5b4..66c9ec775f3e504f445afc6520b4a51274c3ee29 100644
--- a/src/main/java/net/minecraft/world/level/block/AirBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AirBlock.java
@@ -6,7 +6,6 @@ import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class AirBlock extends Block
 {
diff --git a/src/main/java/net/minecraft/world/level/block/AnvilBlock.java b/src/main/java/net/minecraft/world/level/block/AnvilBlock.java
index 0a86b9cbd9d5c50ec1c1f8a01f85baacf6ee83e7..d840761e5ad634c1d5f21c314c83d5bc71d4d4b8 100644
--- a/src/main/java/net/minecraft/world/level/block/AnvilBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AnvilBlock.java
@@ -47,12 +47,12 @@ public class AnvilBlock extends FallingBlock
     
     public AnvilBlock(final Properties properties) {
         super(properties);
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)AnvilBlock.FACING, Direction.NORTH));
+        this.registerDefaultState(this.stateDefinition.any().setValue(AnvilBlock.FACING, Direction.NORTH)); // MagmaCube - decompile error
     }
     
     @Override
     public BlockState getStateForPlacement(final BlockPlaceContext blockPlaceContext) {
-        return ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)AnvilBlock.FACING, blockPlaceContext.getHorizontalDirection().getClockWise());
+        return this.defaultBlockState().setValue(AnvilBlock.FACING, blockPlaceContext.getHorizontalDirection().getClockWise()); // MagmaCube - decompile error
     }
     
     @Override
@@ -102,17 +102,17 @@ public class AnvilBlock extends FallingBlock
     @Nullable
     public static BlockState damage(final BlockState blockState) {
         if (blockState.is(Blocks.ANVIL)) {
-            return ((StateHolder<O, BlockState>)Blocks.CHIPPED_ANVIL.defaultBlockState()).setValue((Property<Comparable>)AnvilBlock.FACING, (Comparable)blockState.getValue((Property<V>)AnvilBlock.FACING));
+            return Blocks.CHIPPED_ANVIL.defaultBlockState().setValue(AnvilBlock.FACING, (Comparable)blockState.getValue(AnvilBlock.FACING)); // MagmaCube - decompile error
         }
         if (blockState.is(Blocks.CHIPPED_ANVIL)) {
-            return ((StateHolder<O, BlockState>)Blocks.DAMAGED_ANVIL.defaultBlockState()).setValue((Property<Comparable>)AnvilBlock.FACING, (Comparable)blockState.getValue((Property<V>)AnvilBlock.FACING));
+            return Blocks.DAMAGED_ANVIL.defaultBlockState().setValue(AnvilBlock.FACING, (Comparable)blockState.getValue(AnvilBlock.FACING)); // MagmaCube - decompile error
         }
         return null;
     }
     
     @Override
     public BlockState rotate(final BlockState blockState, final Rotation rotation) {
-        return ((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)AnvilBlock.FACING, rotation.rotate(blockState.getValue((Property<Direction>)AnvilBlock.FACING)));
+        return blockState.setValue(AnvilBlock.FACING, rotation.rotate(blockState.getValue((Property<Direction>)AnvilBlock.FACING))); // MagmaCube - decompile error
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/AttachedStemBlock.java b/src/main/java/net/minecraft/world/level/block/AttachedStemBlock.java
index b51755d8ecfa64e334e780cb8187741026adee1b..f1b2aeb3406e5c3ab1ad0e48c5ebc0dd5da153cd 100644
--- a/src/main/java/net/minecraft/world/level/block/AttachedStemBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AttachedStemBlock.java
@@ -28,19 +28,19 @@ public class AttachedStemBlock extends BushBlock
     
     protected AttachedStemBlock(final StemGrownBlock stemGrownBlock, final Properties properties) {
         super(properties);
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)AttachedStemBlock.FACING, Direction.NORTH));
+        this.registerDefaultState((this.stateDefinition.any()).setValue(AttachedStemBlock.FACING, Direction.NORTH)); // MagmaCube - decompile error
         this.fruit = stemGrownBlock;
     }
     
     @Override
     public VoxelShape getShape(final BlockState blockState, final BlockGetter blockGetter, final BlockPos blockPos, final CollisionContext collisionContext) {
-        return AttachedStemBlock.AABBS.get(blockState.getValue((Property<Object>)AttachedStemBlock.FACING));
+        return AttachedStemBlock.AABBS.get(blockState.getValue(AttachedStemBlock.FACING)); // MagmaCube - decompile error
     }
     
     @Override
     public BlockState updateShape(final BlockState blockState, final Direction direction, final BlockState blockState2, final LevelAccessor levelAccessor, final BlockPos blockPos, final BlockPos blockPos2) {
         if (!blockState2.is(this.fruit) && direction == blockState.getValue((Property<Direction>)AttachedStemBlock.FACING)) {
-            return ((StateHolder<O, BlockState>)this.fruit.getStem().defaultBlockState()).setValue((Property<Comparable>)StemBlock.AGE, 7);
+            return (this.fruit.getStem().defaultBlockState()).setValue(StemBlock.AGE, 7); // MagmaCube - decompile error
         }
         return super.updateShape(blockState, direction, blockState2, levelAccessor, blockPos, blockPos2);
     }
@@ -67,7 +67,7 @@ public class AttachedStemBlock extends BushBlock
     
     @Override
     public BlockState rotate(final BlockState blockState, final Rotation rotation) {
-        return ((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)AttachedStemBlock.FACING, rotation.rotate(blockState.getValue((Property<Direction>)AttachedStemBlock.FACING)));
+        return (blockState).setValue(AttachedStemBlock.FACING, rotation.rotate(blockState.getValue((Property<Direction>)AttachedStemBlock.FACING)));
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BambooBlock.java b/src/main/java/net/minecraft/world/level/block/BambooBlock.java
index 95e8482a3fef27ffb33069edfc00610e4721af4d..e628125c18b221216b7366626297606bbab2de0e 100644
--- a/src/main/java/net/minecraft/world/level/block/BambooBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BambooBlock.java
@@ -40,7 +40,7 @@ public class BambooBlock extends Block implements BonemealableBlock
     
     public BambooBlock(final Properties properties) {
         super(properties);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)BambooBlock.AGE, 0)).setValue(BambooBlock.LEAVES, BambooLeaves.NONE)).setValue((Property<Comparable>)BambooBlock.STAGE, 0));
+        this.registerDefaultState((((this.stateDefinition.any()).setValue(BambooBlock.AGE, 0)).setValue(BambooBlock.LEAVES, BambooLeaves.NONE)).setValue(BambooBlock.STAGE, 0)); // MagmaCube - decompile error
     }
     
     @Override
@@ -88,15 +88,15 @@ public class BambooBlock extends Block implements BonemealableBlock
             return null;
         }
         if (blockState.is(Blocks.BAMBOO_SAPLING)) {
-            return ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)BambooBlock.AGE, 0);
+            return (this.defaultBlockState()).setValue(BambooBlock.AGE, 0); // MagmaCube - decompile error
         }
         if (blockState.is(Blocks.BAMBOO)) {
             final int i = (blockState.getValue((Property<Integer>)BambooBlock.AGE) > 0) ? 1 : 0;
-            return ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)BambooBlock.AGE, i);
+            return (this.defaultBlockState()).setValue(BambooBlock.AGE, i); // MagmaCube - decompile error
         }
         final BlockState blockState2 = blockPlaceContext.getLevel().getBlockState(blockPlaceContext.getClickedPos().above());
         if (blockState2.is(Blocks.BAMBOO) || blockState2.is(Blocks.BAMBOO_SAPLING)) {
-            return ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)BambooBlock.AGE, (Comparable)blockState2.getValue((Property<V>)BambooBlock.AGE));
+            return this.defaultBlockState().setValue(BambooBlock.AGE, blockState2.getValue(BambooBlock.AGE)); // MagmaCube - decompile error
         }
         return Blocks.BAMBOO_SAPLING.defaultBlockState();
     }
@@ -137,7 +137,7 @@ public class BambooBlock extends Block implements BonemealableBlock
             levelAccessor.getBlockTicks().scheduleTick(blockPos, this, 1);
         }
         if (direction == Direction.UP && blockState2.is(Blocks.BAMBOO) && blockState2.getValue((Property<Integer>)BambooBlock.AGE) > blockState.getValue((Property<Integer>)BambooBlock.AGE)) {
-            levelAccessor.setBlock(blockPos, ((StateHolder<O, BlockState>)blockState).cycle((Property<Comparable>)BambooBlock.AGE), 2);
+            levelAccessor.setBlock(blockPos, (blockState).cycle(BambooBlock.AGE), 2); // MagmaCube - decompile error
         }
         return super.updateShape(blockState, direction, blockState2, levelAccessor, blockPos, blockPos2);
     }
@@ -191,14 +191,14 @@ public class BambooBlock extends Block implements BonemealableBlock
             else if (blockState2.is(Blocks.BAMBOO) && blockState2.getValue(BambooBlock.LEAVES) != BambooLeaves.NONE) {
                 bambooLeaves = BambooLeaves.LARGE;
                 if (blockState3.is(Blocks.BAMBOO)) {
-                    level.setBlock(blockPos.below(), ((StateHolder<O, BlockState>)blockState2).setValue(BambooBlock.LEAVES, BambooLeaves.SMALL), 3);
-                    level.setBlock(blockPos2, ((StateHolder<O, BlockState>)blockState3).setValue(BambooBlock.LEAVES, BambooLeaves.NONE), 3);
+                    level.setBlock(blockPos.below(), (blockState2).setValue(BambooBlock.LEAVES, BambooLeaves.SMALL), 3); // MagmaCube - decompile error
+                    level.setBlock(blockPos2, (blockState3).setValue(BambooBlock.LEAVES, BambooLeaves.NONE), 3); // MagmaCube - decompile error
                 }
             }
         }
         final int i2 = (blockState.getValue((Property<Integer>)BambooBlock.AGE) == 1 || blockState3.is(Blocks.BAMBOO)) ? 1 : 0;
         final int i3 = ((i >= 11 && random.nextFloat() < 0.25f) || i == 15) ? 1 : 0;
-        level.setBlock(blockPos.above(), ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)BambooBlock.AGE, i2)).setValue(BambooBlock.LEAVES, bambooLeaves)).setValue((Property<Comparable>)BambooBlock.STAGE, i3), 3);
+        level.setBlock(blockPos.above(), (((this.defaultBlockState()).setValue(BambooBlock.AGE, i2)).setValue(BambooBlock.LEAVES, bambooLeaves)).setValue(BambooBlock.STAGE, i3), 3); // MagmaCube - decompile error
     }
     
     protected int getHeightAboveUpToMax(final BlockGetter blockGetter, final BlockPos blockPos) {
diff --git a/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java b/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
index 2df5b3c405c1a48910c1b8c23f7c110645e76e96..0d3ec34fc67b7ff0f3886b9d73a4d5700f7e634c 100644
--- a/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
@@ -95,7 +95,7 @@ public class BambooSaplingBlock extends Block implements BonemealableBlock
     }
     
     protected void growBamboo(final Level level, final BlockPos blockPos) {
-        level.setBlock(blockPos.above(), ((StateHolder<O, BlockState>)Blocks.BAMBOO.defaultBlockState()).setValue(BambooBlock.LEAVES, BambooLeaves.SMALL), 3);
+        level.setBlock(blockPos.above(), Blocks.BAMBOO.defaultBlockState().setValue(BambooBlock.LEAVES, BambooLeaves.SMALL), 3); // MagmaCube - decompile error
     }
     
     static {
diff --git a/src/main/java/net/minecraft/world/level/block/BannerBlock.java b/src/main/java/net/minecraft/world/level/block/BannerBlock.java
index 40adaf8cbedaf32ab787c11948ce3d1f4897830a..41f4814c113e58ce4f2cc20ba79cdaf56a16a94c 100644
--- a/src/main/java/net/minecraft/world/level/block/BannerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BannerBlock.java
@@ -28,7 +28,7 @@ public class BannerBlock extends AbstractBannerBlock
     
     public BannerBlock(final DyeColor dyeColor, final Properties properties) {
         super(dyeColor, properties);
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)BannerBlock.ROTATION, 0));
+        this.registerDefaultState((this.stateDefinition.any()).setValue(BannerBlock.ROTATION, 0)); // MagmaCube - decompile error
         BannerBlock.BY_COLOR.put(dyeColor, this);
     }
     
@@ -44,7 +44,7 @@ public class BannerBlock extends AbstractBannerBlock
     
     @Override
     public BlockState getStateForPlacement(final BlockPlaceContext blockPlaceContext) {
-        return ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)BannerBlock.ROTATION, Mth.floor((180.0f + blockPlaceContext.getRotation()) * 16.0f / 360.0f + 0.5) & 0xF);
+        return (this.defaultBlockState()).setValue(BannerBlock.ROTATION, Mth.floor((180.0f + blockPlaceContext.getRotation()) * 16.0f / 360.0f + 0.5) & 0xF); // MagmaCube - decompile error
     }
     
     @Override
@@ -57,12 +57,12 @@ public class BannerBlock extends AbstractBannerBlock
     
     @Override
     public BlockState rotate(final BlockState blockState, final Rotation rotation) {
-        return ((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)BannerBlock.ROTATION, rotation.rotate(blockState.getValue((Property<Integer>)BannerBlock.ROTATION), 16));
+        return (blockState).setValue(BannerBlock.ROTATION, rotation.rotate(blockState.getValue((Property<Integer>)BannerBlock.ROTATION), 16)); // MagmaCube - decompile error
     }
     
     @Override
     public BlockState mirror(final BlockState blockState, final Mirror mirror) {
-        return ((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)BannerBlock.ROTATION, mirror.mirror(blockState.getValue((Property<Integer>)BannerBlock.ROTATION), 16));
+        return (blockState).setValue(BannerBlock.ROTATION, mirror.mirror(blockState.getValue((Property<Integer>)BannerBlock.ROTATION), 16)); // MagmaCube - decompile error
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BarrelBlock.java b/src/main/java/net/minecraft/world/level/block/BarrelBlock.java
index 4da0c4535478fb871f329aa3ac82f42cdb950526..7e24dd3a24bb2e68a3f7b156c606da8f15675ef8 100644
--- a/src/main/java/net/minecraft/world/level/block/BarrelBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BarrelBlock.java
@@ -38,7 +38,7 @@ public class BarrelBlock extends BaseEntityBlock
     
     public BarrelBlock(final Properties properties) {
         super(properties);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)BarrelBlock.FACING, Direction.NORTH)).setValue((Property<Comparable>)BarrelBlock.OPEN, false));
+        this.registerDefaultState(((this.stateDefinition.any()).setValue(BarrelBlock.FACING, Direction.NORTH)).setValue(BarrelBlock.OPEN, false)); // MagmaCube - decompile error
     }
     
     @Override
@@ -109,7 +109,7 @@ public class BarrelBlock extends BaseEntityBlock
     
     @Override
     public BlockState rotate(final BlockState blockState, final Rotation rotation) {
-        return ((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)BarrelBlock.FACING, rotation.rotate(blockState.getValue((Property<Direction>)BarrelBlock.FACING)));
+        return (blockState).setValue(BarrelBlock.FACING, rotation.rotate(blockState.getValue((Property<Direction>)BarrelBlock.FACING))); // MagmaCube - decompile error
     }
     
     @Override
@@ -124,7 +124,7 @@ public class BarrelBlock extends BaseEntityBlock
     
     @Override
     public BlockState getStateForPlacement(final BlockPlaceContext blockPlaceContext) {
-        return ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)BarrelBlock.FACING, blockPlaceContext.getNearestLookingDirection().getOpposite());
+        return (this.defaultBlockState()).setValue(BarrelBlock.FACING, blockPlaceContext.getNearestLookingDirection().getOpposite()); // MagmaCube - decompile error
     }
     
     static {
diff --git a/src/main/java/net/minecraft/world/level/block/BarrierBlock.java b/src/main/java/net/minecraft/world/level/block/BarrierBlock.java
index f5c06986d533a075ef0d691ca9fe13173815d6ee..340e31aa792b9ecf917aa4768b1d6c1cfee57468 100644
--- a/src/main/java/net/minecraft/world/level/block/BarrierBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BarrierBlock.java
@@ -3,7 +3,6 @@ package net.minecraft.world.level.block;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class BarrierBlock extends Block
 {
diff --git a/src/main/java/net/minecraft/world/level/block/BaseCoralFanBlock.java b/src/main/java/net/minecraft/world/level/block/BaseCoralFanBlock.java
index 7badd14840544352aaf10926482af8888cbdf565..c37851ccd9ad4310901ebac5913b33acbc7b1e13 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseCoralFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseCoralFanBlock.java
@@ -4,7 +4,6 @@ import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class BaseCoralFanBlock extends BaseCoralPlantTypeBlock
diff --git a/src/main/java/net/minecraft/world/level/block/BaseCoralPlantBlock.java b/src/main/java/net/minecraft/world/level/block/BaseCoralPlantBlock.java
index 199bea968f7d9a0cf633d6ce3ceb383f4cdc3671..1c9c73ad2d41e74983f481155ec3d558076f65d8 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseCoralPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseCoralPlantBlock.java
@@ -4,7 +4,6 @@ import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class BaseCoralPlantBlock extends BaseCoralPlantTypeBlock
diff --git a/src/main/java/net/minecraft/world/level/block/BaseCoralWallFanBlock.java b/src/main/java/net/minecraft/world/level/block/BaseCoralWallFanBlock.java
index e321efd25c630cceea943540c85d2921a757425b..d78cee7df3416c2a9da4487fd76b23e8bd62fef1 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseCoralWallFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseCoralWallFanBlock.java
@@ -27,17 +27,17 @@ public class BaseCoralWallFanBlock extends BaseCoralFanBlock
     
     protected BaseCoralWallFanBlock(final Properties properties) {
         super(properties);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)BaseCoralWallFanBlock.FACING, Direction.NORTH)).setValue((Property<Comparable>)BaseCoralWallFanBlock.WATERLOGGED, true));
+        this.registerDefaultState(((this.stateDefinition.any()).setValue(BaseCoralWallFanBlock.FACING, Direction.NORTH)).setValue(BaseCoralWallFanBlock.WATERLOGGED, true)); // MagmaCube - decompile error
     }
     
     @Override
     public VoxelShape getShape(final BlockState blockState, final BlockGetter blockGetter, final BlockPos blockPos, final CollisionContext collisionContext) {
-        return BaseCoralWallFanBlock.SHAPES.get(blockState.getValue((Property<Object>)BaseCoralWallFanBlock.FACING));
+        return BaseCoralWallFanBlock.SHAPES.get(blockState.getValue(BaseCoralWallFanBlock.FACING)); // MagmaCube - decompile error
     }
     
     @Override
     public BlockState rotate(final BlockState blockState, final Rotation rotation) {
-        return ((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)BaseCoralWallFanBlock.FACING, rotation.rotate(blockState.getValue((Property<Direction>)BaseCoralWallFanBlock.FACING)));
+        return (blockState).setValue(BaseCoralWallFanBlock.FACING, rotation.rotate(blockState.getValue((Property<Direction>)BaseCoralWallFanBlock.FACING))); // MagmaCube - decompile error
     }
     
     @Override
@@ -79,7 +79,7 @@ public class BaseCoralWallFanBlock extends BaseCoralFanBlock
         final Direction[] directions = nearestLookingDirections = blockPlaceContext.getNearestLookingDirections();
         for (final Direction direction : nearestLookingDirections) {
             if (direction.getAxis().isHorizontal()) {
-                blockState = ((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)BaseCoralWallFanBlock.FACING, direction.getOpposite());
+                blockState = (blockState).setValue(BaseCoralWallFanBlock.FACING, direction.getOpposite());
                 if (blockState.canSurvive(levelReader, blockPos)) {
                     return blockState;
                 }
diff --git a/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java b/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java
index 8275a7a56f255497fdebe761523fc0581ec6113c..6ab4b6e94a97e606992368156f3ba1e2d0e9185f 100644
--- a/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java
@@ -1,7 +1,6 @@
 package net.minecraft.world.level.block;
 
 import net.minecraft.world.level.material.PushReaction;
-import net.minecraft.core.Vec3i;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.Level;
 import java.util.Random;
@@ -13,7 +12,6 @@ import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
diff --git a/src/main/java/net/minecraft/world/level/block/BeaconBlock.java b/src/main/java/net/minecraft/world/level/block/BeaconBlock.java
index ac28a7696fc7c22f6114e5beaeb929e0b0e9f6c2..7a41ada5c053162797cf09013c0f50ba5fd90aa7 100644
--- a/src/main/java/net/minecraft/world/level/block/BeaconBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BeaconBlock.java
@@ -15,7 +15,6 @@ import net.minecraft.world.level.block.entity.BeaconBlockEntity;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.item.DyeColor;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class BeaconBlock extends BaseEntityBlock implements BeaconBeamBlock
 {
diff --git a/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java b/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java
index ebe9a28478434a8074ff8328f56cea7960af4242..778aeff079a962616fb57e0e5cc891f1b4939998 100644
--- a/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java
@@ -12,7 +12,6 @@ import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.ItemLike;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.phys.shapes.VoxelShape;
 import net.minecraft.world.level.block.state.properties.IntegerProperty;
 
diff --git a/src/main/java/net/minecraft/world/level/block/BellBlock.java b/src/main/java/net/minecraft/world/level/block/BellBlock.java
index 31e81b8b7f76c7049de9f8bf7664a80adde70472..a5cb3dcd154863e68dc1ec1deae22e186296c7d5 100644
--- a/src/main/java/net/minecraft/world/level/block/BellBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BellBlock.java
@@ -55,7 +55,7 @@ public class BellBlock extends BaseEntityBlock
     
     public BellBlock(final Properties properties) {
         super(properties);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)BellBlock.FACING, Direction.NORTH)).setValue(BellBlock.ATTACHMENT, BellAttachType.FLOOR)).setValue((Property<Comparable>)BellBlock.POWERED, false));
+        this.registerDefaultState((((this.stateDefinition.any()).setValue(BellBlock.FACING, Direction.NORTH)).setValue(BellBlock.ATTACHMENT, BellAttachType.FLOOR)).setValue(BellBlock.POWERED, false)); // MagmaCube - decompile error
     }
     
     @Override
@@ -65,7 +65,7 @@ public class BellBlock extends BaseEntityBlock
             if (flag2) {
                 this.attemptToRing(level, blockPos, null);
             }
-            level.setBlock(blockPos, ((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)BellBlock.POWERED, flag2), 3);
+            level.setBlock(blockPos, (blockState).setValue(BellBlock.POWERED, flag2), 3); // MagmaCube - decompile error
         }
     }
     
@@ -188,19 +188,19 @@ public class BellBlock extends BaseEntityBlock
         final Level level = blockPlaceContext.getLevel();
         final Direction.Axis axis = direction.getAxis();
         if (axis == Direction.Axis.Y) {
-            final BlockState blockState = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue(BellBlock.ATTACHMENT, (direction == Direction.DOWN) ? BellAttachType.CEILING : BellAttachType.FLOOR)).setValue((Property<Comparable>)BellBlock.FACING, blockPlaceContext.getHorizontalDirection());
+            final BlockState blockState = ((this.defaultBlockState()).setValue(BellBlock.ATTACHMENT, (direction == Direction.DOWN) ? BellAttachType.CEILING : BellAttachType.FLOOR)).setValue(BellBlock.FACING, blockPlaceContext.getHorizontalDirection()); // MagmaCube - decompile error
             if (blockState.canSurvive(blockPlaceContext.getLevel(), blockPos)) {
                 return blockState;
             }
         }
         else {
             final boolean flag = (axis == Direction.Axis.X && level.getBlockState(blockPos.west()).isFaceSturdy(level, blockPos.west(), Direction.EAST) && level.getBlockState(blockPos.east()).isFaceSturdy(level, blockPos.east(), Direction.WEST)) || (axis == Direction.Axis.Z && level.getBlockState(blockPos.north()).isFaceSturdy(level, blockPos.north(), Direction.SOUTH) && level.getBlockState(blockPos.south()).isFaceSturdy(level, blockPos.south(), Direction.NORTH));
-            BlockState blockState2 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)BellBlock.FACING, direction.getOpposite())).setValue(BellBlock.ATTACHMENT, flag ? BellAttachType.DOUBLE_WALL : BellAttachType.SINGLE_WALL);
+            BlockState blockState2 = ((this.defaultBlockState()).setValue(BellBlock.FACING, direction.getOpposite())).setValue(BellBlock.ATTACHMENT, flag ? BellAttachType.DOUBLE_WALL : BellAttachType.SINGLE_WALL); // MagmaCube - decompile error
             if (blockState2.canSurvive(blockPlaceContext.getLevel(), blockPlaceContext.getClickedPos())) {
                 return blockState2;
             }
             final boolean flag2 = level.getBlockState(blockPos.below()).isFaceSturdy(level, blockPos.below(), Direction.UP);
-            blockState2 = ((StateHolder<O, BlockState>)blockState2).setValue(BellBlock.ATTACHMENT, flag2 ? BellAttachType.FLOOR : BellAttachType.CEILING);
+            blockState2 = (blockState2).setValue(BellBlock.ATTACHMENT, flag2 ? BellAttachType.FLOOR : BellAttachType.CEILING); // MagmaCube - decompile error
             if (blockState2.canSurvive(blockPlaceContext.getLevel(), blockPlaceContext.getClickedPos())) {
                 return blockState2;
             }
@@ -217,10 +217,10 @@ public class BellBlock extends BaseEntityBlock
         }
         if (direction.getAxis() == blockState.getValue((Property<Direction>)BellBlock.FACING).getAxis()) {
             if (bellAttachType == BellAttachType.DOUBLE_WALL && !blockState2.isFaceSturdy(levelAccessor, blockPos2, direction)) {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)blockState).setValue(BellBlock.ATTACHMENT, BellAttachType.SINGLE_WALL)).setValue((Property<Comparable>)BellBlock.FACING, direction.getOpposite());
+                return ((blockState).setValue(BellBlock.ATTACHMENT, BellAttachType.SINGLE_WALL)).setValue(BellBlock.FACING, direction.getOpposite()); // MagmaCube - decompile error
             }
             if (bellAttachType == BellAttachType.SINGLE_WALL && direction2.getOpposite() == direction && blockState2.isFaceSturdy(levelAccessor, blockPos2, blockState.getValue((Property<Direction>)BellBlock.FACING))) {
-                return ((StateHolder<O, BlockState>)blockState).setValue(BellBlock.ATTACHMENT, BellAttachType.DOUBLE_WALL);
+                return (blockState).setValue(BellBlock.ATTACHMENT, BellAttachType.DOUBLE_WALL); // MagmaCube - decompile error
             }
         }
         return super.updateShape(blockState, direction, blockState2, levelAccessor, blockPos, blockPos2);
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index 8e43cf404cbb80103bbed7ffb7772daa5d70ee3f..b90a73b56e853d8cc26cc466f775f895535f8644 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -233,7 +233,7 @@ public class Block extends BlockBehaviour implements ItemLike
     
     public static void dropResources(final BlockState blockState, final Level level, final BlockPos blockPos, @Nullable final BlockEntity blockEntity, final Entity entity, final ItemStack itemStack) {
         if (level instanceof ServerLevel) {
-            getDrops(blockState, (ServerLevel)level, blockPos, blockEntity, entity, itemStack).forEach(itemStack -> popResource(level, blockPos, itemStack));
+            getDrops(blockState, (ServerLevel)level, blockPos, blockEntity, entity, itemStack).forEach(itemStack1 -> popResource(level, blockPos, itemStack1)); // MagmaCube - decompile error
             blockState.spawnAfterBreak((ServerLevel)level, blockPos, itemStack);
         }
     }
@@ -394,9 +394,8 @@ public class Block extends BlockBehaviour implements ItemLike
                 return !Shapes.joinIsNotEmpty(Shapes.block(), voxelShape, BooleanOp.NOT_SAME);
             }
         });
-        final Object2ByteLinkedOpenHashMap<BlockStatePairKey> object2ByteLinkedOpenHashMap;
         OCCLUSION_CACHE = ThreadLocal.withInitial(() -> {
-            object2ByteLinkedOpenHashMap = new Object2ByteLinkedOpenHashMap<BlockStatePairKey>(2048, 0.25f) {
+            Object2ByteLinkedOpenHashMap<BlockStatePairKey> object2ByteLinkedOpenHashMap = new Object2ByteLinkedOpenHashMap<BlockStatePairKey>(2048, 0.25f) { // MagmaCube - decompile error
                 protected void rehash(final int i) {
                 }
             };
diff --git a/src/main/java/net/minecraft/world/level/block/BushBlock.java b/src/main/java/net/minecraft/world/level/block/BushBlock.java
index 53984e675bb19db2acb6a0d306d574d6249dc7cf..2aeb166b85dba1104f7c7818677967960cd2db2a 100644
--- a/src/main/java/net/minecraft/world/level/block/BushBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BushBlock.java
@@ -7,7 +7,6 @@ import net.minecraft.core.Direction;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class BushBlock extends Block
 {
diff --git a/src/main/java/net/minecraft/world/level/block/CarrotBlock.java b/src/main/java/net/minecraft/world/level/block/CarrotBlock.java
index bd525a335831dc8a3e1019b7a4303aa4a1edb0fc..b5f0ab550dd6b2f806b39a02fae6a0100ecb45c1 100644
--- a/src/main/java/net/minecraft/world/level/block/CarrotBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CarrotBlock.java
@@ -7,7 +7,6 @@ import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.ItemLike;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class CarrotBlock extends CropBlock
diff --git a/src/main/java/net/minecraft/world/level/block/ConcretePowderBlock.java b/src/main/java/net/minecraft/world/level/block/ConcretePowderBlock.java
index 56b1a70c595bd5df5294db0009ccf190e6057b40..347ffa7db9cfa002e34a7c8af835e1f1fde23fae 100644
--- a/src/main/java/net/minecraft/world/level/block/ConcretePowderBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ConcretePowderBlock.java
@@ -1,17 +1,13 @@
 package net.minecraft.world.level.block;
 
 import net.minecraft.world.level.LevelAccessor;
-import net.minecraft.world.level.material.Fluid;
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.FluidTags;
-import net.minecraft.core.Vec3i;
 import net.minecraft.core.Direction;
 import net.minecraft.world.item.context.BlockPlaceContext;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.entity.item.FallingBlockEntity;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 
 public class ConcretePowderBlock extends FallingBlock
diff --git a/src/main/java/net/minecraft/world/level/block/CoralBlock.java b/src/main/java/net/minecraft/world/level/block/CoralBlock.java
index 4dd0570a6d7b061259035a2168343ee08ea8970b..8c86997dd0c81eccdaa204c184e5a243e504a43c 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralBlock.java
@@ -3,8 +3,6 @@ package net.minecraft.world.level.block;
 import javax.annotation.Nullable;
 import net.minecraft.world.item.context.BlockPlaceContext;
 import net.minecraft.world.level.material.FluidState;
-import net.minecraft.world.level.material.Fluid;
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.core.Direction;
@@ -13,7 +11,6 @@ import java.util.Random;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class CoralBlock extends Block
 {
diff --git a/src/main/java/net/minecraft/world/level/block/DeadBushBlock.java b/src/main/java/net/minecraft/world/level/block/DeadBushBlock.java
index d7a1d343d884757d13ae3a1fcbc8650726e2f7cb..5f0647289ca1ee654e192f2fa0d793a163a1beff 100644
--- a/src/main/java/net/minecraft/world/level/block/DeadBushBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DeadBushBlock.java
@@ -4,7 +4,6 @@ import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class DeadBushBlock extends BushBlock
diff --git a/src/main/java/net/minecraft/world/level/block/DirectionalBlock.java b/src/main/java/net/minecraft/world/level/block/DirectionalBlock.java
index 2fe020a5ee0627b7b831b1e5c7518ffa517ed940..0d7669771e20ad457fa7f41189d5b13a9c3d3c86 100644
--- a/src/main/java/net/minecraft/world/level/block/DirectionalBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DirectionalBlock.java
@@ -1,7 +1,6 @@
 package net.minecraft.world.level.block;
 
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.properties.DirectionProperty;
 
 public abstract class DirectionalBlock extends Block
diff --git a/src/main/java/net/minecraft/world/level/block/DropperBlock.java b/src/main/java/net/minecraft/world/level/block/DropperBlock.java
index a156a946b3036f3994e5dff471ba4ed2d4558bf9..1785d9b866628b5871d3cc93362b52aa37a55a7b 100644
--- a/src/main/java/net/minecraft/world/level/block/DropperBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DropperBlock.java
@@ -2,8 +2,6 @@ package net.minecraft.world.level.block;
 
 import net.minecraft.core.dispenser.DefaultDispenseItemBehavior;
 import net.minecraft.world.Container;
-import net.minecraft.core.BlockSource;
-import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.entity.HopperBlockEntity;
 import net.minecraft.world.level.block.state.properties.Property;
 import net.minecraft.core.Direction;
@@ -15,7 +13,6 @@ import net.minecraft.world.level.block.entity.DropperBlockEntity;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.core.dispenser.DispenseItemBehavior;
 
 public class DropperBlock extends DispenserBlock
diff --git a/src/main/java/net/minecraft/world/level/block/FenceBlock.java b/src/main/java/net/minecraft/world/level/block/FenceBlock.java
index 4e0e50279cabff100d7b8b3583df8641523bd370..49e41c57a4cfdc721e45a8c0d2692f56275a8ed6 100644
--- a/src/main/java/net/minecraft/world/level/block/FenceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FenceBlock.java
@@ -34,7 +34,7 @@ public class FenceBlock extends CrossCollisionBlock
     
     public FenceBlock(final Properties properties) {
         super(2.0f, 2.0f, 16.0f, 16.0f, 24.0f, properties);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)FenceBlock.NORTH, false)).setValue((Property<Comparable>)FenceBlock.EAST, false)).setValue((Property<Comparable>)FenceBlock.SOUTH, false)).setValue((Property<Comparable>)FenceBlock.WEST, false)).setValue((Property<Comparable>)FenceBlock.WATERLOGGED, false));
+        this.registerDefaultState((((((this.stateDefinition.any()).setValue(FenceBlock.NORTH, false)).setValue(FenceBlock.EAST, false)).setValue(FenceBlock.SOUTH, false)).setValue(FenceBlock.WEST, false)).setValue(FenceBlock.WATERLOGGED, false)); // MagmaCube - decompile error
         this.occlusionByIndex = this.makeShapes(2.0f, 1.0f, 16.0f, 6.0f, 15.0f);
     }
     
@@ -89,7 +89,7 @@ public class FenceBlock extends CrossCollisionBlock
         final BlockState blockState2 = blockGetter.getBlockState(blockPos3);
         final BlockState blockState3 = blockGetter.getBlockState(blockPos4);
         final BlockState blockState4 = blockGetter.getBlockState(blockPos5);
-        return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)super.getStateForPlacement(blockPlaceContext)).setValue((Property<Comparable>)FenceBlock.NORTH, this.connectsTo(blockState, blockState.isFaceSturdy(blockGetter, blockPos2, Direction.SOUTH), Direction.SOUTH))).setValue((Property<Comparable>)FenceBlock.EAST, this.connectsTo(blockState2, blockState2.isFaceSturdy(blockGetter, blockPos3, Direction.WEST), Direction.WEST))).setValue((Property<Comparable>)FenceBlock.SOUTH, this.connectsTo(blockState3, blockState3.isFaceSturdy(blockGetter, blockPos4, Direction.NORTH), Direction.NORTH))).setValue((Property<Comparable>)FenceBlock.WEST, this.connectsTo(blockState4, blockState4.isFaceSturdy(blockGetter, blockPos5, Direction.EAST), Direction.EAST))).setValue((Property<Comparable>)FenceBlock.WATERLOGGED, fluidState.getType() == Fluids.WATER);
+        return (((((super.getStateForPlacement(blockPlaceContext)).setValue(FenceBlock.NORTH, this.connectsTo(blockState, blockState.isFaceSturdy(blockGetter, blockPos2, Direction.SOUTH), Direction.SOUTH))).setValue(FenceBlock.EAST, this.connectsTo(blockState2, blockState2.isFaceSturdy(blockGetter, blockPos3, Direction.WEST), Direction.WEST))).setValue(FenceBlock.SOUTH, this.connectsTo(blockState3, blockState3.isFaceSturdy(blockGetter, blockPos4, Direction.NORTH), Direction.NORTH))).setValue(FenceBlock.WEST, this.connectsTo(blockState4, blockState4.isFaceSturdy(blockGetter, blockPos5, Direction.EAST), Direction.EAST))).setValue(FenceBlock.WATERLOGGED, fluidState.getType() == Fluids.WATER); // MagmaCube - decompile error
     }
     
     @Override
@@ -98,7 +98,7 @@ public class FenceBlock extends CrossCollisionBlock
             levelAccessor.getLiquidTicks().scheduleTick(blockPos, Fluids.WATER, Fluids.WATER.getTickDelay(levelAccessor));
         }
         if (direction.getAxis().getPlane() == Direction.Plane.HORIZONTAL) {
-            return ((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)FenceBlock.PROPERTY_BY_DIRECTION.get(direction), this.connectsTo(blockState2, blockState2.isFaceSturdy(levelAccessor, blockPos2, direction.getOpposite()), direction.getOpposite()));
+            return (blockState).setValue(FenceBlock.PROPERTY_BY_DIRECTION.get(direction), this.connectsTo(blockState2, blockState2.isFaceSturdy(levelAccessor, blockPos2, direction.getOpposite()), direction.getOpposite())); // MagmaCube - decompile error
         }
         return super.updateShape(blockState, direction, blockState2, levelAccessor, blockPos, blockPos2);
     }
diff --git a/src/main/java/net/minecraft/world/level/block/FletchingTableBlock.java b/src/main/java/net/minecraft/world/level/block/FletchingTableBlock.java
index 1f6eb4e2fd49143673d4ae3522583c0b7b3f7dda..08aa44ff2436a8fa417cdab36a11fd2e6651593a 100644
--- a/src/main/java/net/minecraft/world/level/block/FletchingTableBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FletchingTableBlock.java
@@ -7,7 +7,6 @@ import net.minecraft.world.entity.player.Player;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class FletchingTableBlock extends CraftingTableBlock
 {
diff --git a/src/main/java/net/minecraft/world/level/block/FlowerBlock.java b/src/main/java/net/minecraft/world/level/block/FlowerBlock.java
index 4a47229557bf2d57c71d8582e48d308824915582..f44f6c43f4702ff147d7597d04c8cddde787912f 100644
--- a/src/main/java/net/minecraft/world/level/block/FlowerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FlowerBlock.java
@@ -5,7 +5,6 @@ import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.effect.MobEffect;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
diff --git a/src/main/java/net/minecraft/world/level/block/FlowerPotBlock.java b/src/main/java/net/minecraft/world/level/block/FlowerPotBlock.java
index 100a7410bf9fb1872a14e0ce3ad5095d0630cf41..3a80c52812b0385fa39c4150939edacb72182d8d 100644
--- a/src/main/java/net/minecraft/world/level/block/FlowerPotBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FlowerPotBlock.java
@@ -2,11 +2,9 @@ package net.minecraft.world.level.block;
 
 import com.google.common.collect.Maps;
 import net.minecraft.world.level.pathfinder.PathComputationType;
-import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.core.Direction;
 import net.minecraft.world.item.Item;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.stats.Stats;
 import net.minecraft.world.item.BlockItem;
@@ -19,7 +17,6 @@ import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.phys.shapes.VoxelShape;
 import java.util.Map;
 
diff --git a/src/main/java/net/minecraft/world/level/block/GlassBlock.java b/src/main/java/net/minecraft/world/level/block/GlassBlock.java
index 028d387c5016d3a25bd9297c4052476c0355e709..5a4e96ad5fc7fd19172939f97797161f03e6955d 100644
--- a/src/main/java/net/minecraft/world/level/block/GlassBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GlassBlock.java
@@ -1,7 +1,5 @@
 package net.minecraft.world.level.block;
 
-import net.minecraft.world.level.block.state.BlockBehaviour;
-
 public class GlassBlock extends AbstractGlassBlock
 {
     public GlassBlock(final Properties properties) {
diff --git a/src/main/java/net/minecraft/world/level/block/GrassBlock.java b/src/main/java/net/minecraft/world/level/block/GrassBlock.java
index 8a149d92313f2b369129437adb3fbf40268fdbd2..71297feee3daa180ae367d05b5f421a00fa53a8f 100644
--- a/src/main/java/net/minecraft/world/level/block/GrassBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrassBlock.java
@@ -1,7 +1,7 @@
 package net.minecraft.world.level.block;
 
 import java.util.List;
-import net.minecraft.world.level.LevelReader;
+
 import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.AbstractFlowerFeature;
 import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
@@ -11,7 +11,6 @@ import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.BlockGetter;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class GrassBlock extends SpreadingSnowyDirtBlock implements BonemealableBlock
 {
diff --git a/src/main/java/net/minecraft/world/level/block/GrassPathBlock.java b/src/main/java/net/minecraft/world/level/block/GrassPathBlock.java
index d5fd6b88a4cd585a9195b883add07547104b7ada..39cddee121e38a1220b92602cdacd1479481b02f 100644
--- a/src/main/java/net/minecraft/world/level/block/GrassPathBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrassPathBlock.java
@@ -3,7 +3,7 @@ package net.minecraft.world.level.block;
 import net.minecraft.world.level.pathfinder.PathComputationType;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.level.BlockGetter;
-import net.minecraft.world.level.Level;
+
 import java.util.Random;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.core.BlockPos;
@@ -12,7 +12,6 @@ import net.minecraft.core.Direction;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.item.context.BlockPlaceContext;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class GrassPathBlock extends Block
diff --git a/src/main/java/net/minecraft/world/level/block/GravelBlock.java b/src/main/java/net/minecraft/world/level/block/GravelBlock.java
index a8ae149390e1e112856de58536fad917a5eec8ab..ffb310b7f785c32186408c9f3d1ecc9657742a18 100644
--- a/src/main/java/net/minecraft/world/level/block/GravelBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GravelBlock.java
@@ -3,7 +3,6 @@ package net.minecraft.world.level.block;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class GravelBlock extends FallingBlock
 {
diff --git a/src/main/java/net/minecraft/world/level/block/GrowingPlantBlock.java b/src/main/java/net/minecraft/world/level/block/GrowingPlantBlock.java
index 9764c530166f92e36aaff8a85ffbbbdf590c00c6..bc5176d47fad2dad9eb2496c8658b07b1c30af48 100644
--- a/src/main/java/net/minecraft/world/level/block/GrowingPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrowingPlantBlock.java
@@ -10,7 +10,6 @@ import javax.annotation.Nullable;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.item.context.BlockPlaceContext;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.phys.shapes.VoxelShape;
 import net.minecraft.core.Direction;
 
diff --git a/src/main/java/net/minecraft/world/level/block/GrowingPlantBodyBlock.java b/src/main/java/net/minecraft/world/level/block/GrowingPlantBodyBlock.java
index e856e2a52dcad8b9ba7615fbfdfde4dfde8c68a2..c630ebdb449ee360f2a64fd09edf464166ca8ef7 100644
--- a/src/main/java/net/minecraft/world/level/block/GrowingPlantBodyBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrowingPlantBodyBlock.java
@@ -5,17 +5,15 @@ import net.minecraft.server.level.ServerLevel;
 import java.util.Random;
 import net.minecraft.world.level.Level;
 import java.util.Optional;
-import net.minecraft.world.level.ItemLike;
+
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.material.Fluids;
-import net.minecraft.world.level.LevelReader;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.shapes.VoxelShape;
 import net.minecraft.core.Direction;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public abstract class GrowingPlantBodyBlock extends GrowingPlantBlock implements BonemealableBlock
 {
diff --git a/src/main/java/net/minecraft/world/level/block/HalfTransparentBlock.java b/src/main/java/net/minecraft/world/level/block/HalfTransparentBlock.java
index 3dc0f35abfc8b8d2fb373ac0443779c379cb1887..2f5a467c0525fcd2501189b5b0b004c8bf56d051 100644
--- a/src/main/java/net/minecraft/world/level/block/HalfTransparentBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/HalfTransparentBlock.java
@@ -2,7 +2,6 @@ package net.minecraft.world.level.block;
 
 import net.minecraft.core.Direction;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class HalfTransparentBlock extends Block
 {
diff --git a/src/main/java/net/minecraft/world/level/block/HugeMushroomBlock.java b/src/main/java/net/minecraft/world/level/block/HugeMushroomBlock.java
index 51ccd0aa4066d98305c9b1c615d1125c2ee58ef3..08a182ffb6c9f9817c6bac9cd2265a039ffd599c 100644
--- a/src/main/java/net/minecraft/world/level/block/HugeMushroomBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/HugeMushroomBlock.java
@@ -25,32 +25,32 @@ public class HugeMushroomBlock extends Block
     
     public HugeMushroomBlock(final Properties properties) {
         super(properties);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)HugeMushroomBlock.NORTH, true)).setValue((Property<Comparable>)HugeMushroomBlock.EAST, true)).setValue((Property<Comparable>)HugeMushroomBlock.SOUTH, true)).setValue((Property<Comparable>)HugeMushroomBlock.WEST, true)).setValue((Property<Comparable>)HugeMushroomBlock.UP, true)).setValue((Property<Comparable>)HugeMushroomBlock.DOWN, true));
+        this.registerDefaultState(((((((this.stateDefinition.any()).setValue(HugeMushroomBlock.NORTH, true)).setValue(HugeMushroomBlock.EAST, true)).setValue(HugeMushroomBlock.SOUTH, true)).setValue(HugeMushroomBlock.WEST, true)).setValue(HugeMushroomBlock.UP, true)).setValue(HugeMushroomBlock.DOWN, true)); // MagmaCube - decompile error
     }
     
     @Override
     public BlockState getStateForPlacement(final BlockPlaceContext blockPlaceContext) {
         final BlockGetter blockGetter = blockPlaceContext.getLevel();
         final BlockPos blockPos = blockPlaceContext.getClickedPos();
-        return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)HugeMushroomBlock.DOWN, this != blockGetter.getBlockState(blockPos.below()).getBlock())).setValue((Property<Comparable>)HugeMushroomBlock.UP, this != blockGetter.getBlockState(blockPos.above()).getBlock())).setValue((Property<Comparable>)HugeMushroomBlock.NORTH, this != blockGetter.getBlockState(blockPos.north()).getBlock())).setValue((Property<Comparable>)HugeMushroomBlock.EAST, this != blockGetter.getBlockState(blockPos.east()).getBlock())).setValue((Property<Comparable>)HugeMushroomBlock.SOUTH, this != blockGetter.getBlockState(blockPos.south()).getBlock())).setValue((Property<Comparable>)HugeMushroomBlock.WEST, this != blockGetter.getBlockState(blockPos.west()).getBlock());
+        return ((((((this.defaultBlockState()).setValue(HugeMushroomBlock.DOWN, this != blockGetter.getBlockState(blockPos.below()).getBlock())).setValue(HugeMushroomBlock.UP, this != blockGetter.getBlockState(blockPos.above()).getBlock())).setValue(HugeMushroomBlock.NORTH, this != blockGetter.getBlockState(blockPos.north()).getBlock())).setValue(HugeMushroomBlock.EAST, this != blockGetter.getBlockState(blockPos.east()).getBlock())).setValue(HugeMushroomBlock.SOUTH, this != blockGetter.getBlockState(blockPos.south()).getBlock())).setValue(HugeMushroomBlock.WEST, this != blockGetter.getBlockState(blockPos.west()).getBlock()); // MagmaCube - decompile error
     }
     
     @Override
     public BlockState updateShape(final BlockState blockState, final Direction direction, final BlockState blockState2, final LevelAccessor levelAccessor, final BlockPos blockPos, final BlockPos blockPos2) {
         if (blockState2.is(this)) {
-            return ((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(direction), false);
+            return (blockState).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(direction), false); // MagmaCube - decompile error
         }
         return super.updateShape(blockState, direction, blockState2, levelAccessor, blockPos, blockPos2);
     }
     
     @Override
     public BlockState rotate(final BlockState blockState, final Rotation rotation) {
-        return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(rotation.rotate(Direction.NORTH)), (Comparable)blockState.getValue((Property<V>)HugeMushroomBlock.NORTH))).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(rotation.rotate(Direction.SOUTH)), (Comparable)blockState.getValue((Property<V>)HugeMushroomBlock.SOUTH))).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(rotation.rotate(Direction.EAST)), (Comparable)blockState.getValue((Property<V>)HugeMushroomBlock.EAST))).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(rotation.rotate(Direction.WEST)), (Comparable)blockState.getValue((Property<V>)HugeMushroomBlock.WEST))).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(rotation.rotate(Direction.UP)), (Comparable)blockState.getValue((Property<V>)HugeMushroomBlock.UP))).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(rotation.rotate(Direction.DOWN)), (Comparable)blockState.getValue((Property<V>)HugeMushroomBlock.DOWN));
+        return ((((((blockState).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(rotation.rotate(Direction.NORTH)), (Comparable)blockState.getValue(HugeMushroomBlock.NORTH))).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(rotation.rotate(Direction.SOUTH)), (Comparable)blockState.getValue(HugeMushroomBlock.SOUTH))).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(rotation.rotate(Direction.EAST)), (Comparable)blockState.getValue(HugeMushroomBlock.EAST))).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(rotation.rotate(Direction.WEST)), (Comparable)blockState.getValue(HugeMushroomBlock.WEST))).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(rotation.rotate(Direction.UP)), (Comparable)blockState.getValue(HugeMushroomBlock.UP))).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(rotation.rotate(Direction.DOWN)), (Comparable)blockState.getValue(HugeMushroomBlock.DOWN)); // MagmaCube - decompile error
     }
     
     @Override
     public BlockState mirror(final BlockState blockState, final Mirror mirror) {
-        return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(mirror.mirror(Direction.NORTH)), (Comparable)blockState.getValue((Property<V>)HugeMushroomBlock.NORTH))).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(mirror.mirror(Direction.SOUTH)), (Comparable)blockState.getValue((Property<V>)HugeMushroomBlock.SOUTH))).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(mirror.mirror(Direction.EAST)), (Comparable)blockState.getValue((Property<V>)HugeMushroomBlock.EAST))).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(mirror.mirror(Direction.WEST)), (Comparable)blockState.getValue((Property<V>)HugeMushroomBlock.WEST))).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(mirror.mirror(Direction.UP)), (Comparable)blockState.getValue((Property<V>)HugeMushroomBlock.UP))).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(mirror.mirror(Direction.DOWN)), (Comparable)blockState.getValue((Property<V>)HugeMushroomBlock.DOWN));
+        return ((((((blockState).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(mirror.mirror(Direction.NORTH)), (Comparable)blockState.getValue(HugeMushroomBlock.NORTH))).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(mirror.mirror(Direction.SOUTH)), (Comparable)blockState.getValue(HugeMushroomBlock.SOUTH))).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(mirror.mirror(Direction.EAST)), (Comparable)blockState.getValue(HugeMushroomBlock.EAST))).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(mirror.mirror(Direction.WEST)), (Comparable)blockState.getValue(HugeMushroomBlock.WEST))).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(mirror.mirror(Direction.UP)), (Comparable)blockState.getValue(HugeMushroomBlock.UP))).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(mirror.mirror(Direction.DOWN)), (Comparable)blockState.getValue(HugeMushroomBlock.DOWN)); // MagmaCube - decompile error
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java b/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
index cceb540e7b89de13a707dd26206d49562fbd8c36..752e704b2b0616a1d7bff6acbcf6f2a221aca91a 100644
--- a/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
@@ -24,7 +24,7 @@ public class IronBarsBlock extends CrossCollisionBlock
 {
     protected IronBarsBlock(final Properties properties) {
         super(1.0f, 1.0f, 16.0f, 16.0f, 16.0f, properties);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)IronBarsBlock.NORTH, false)).setValue((Property<Comparable>)IronBarsBlock.EAST, false)).setValue((Property<Comparable>)IronBarsBlock.SOUTH, false)).setValue((Property<Comparable>)IronBarsBlock.WEST, false)).setValue((Property<Comparable>)IronBarsBlock.WATERLOGGED, false));
+        this.registerDefaultState((((((this.stateDefinition.any()).setValue(IronBarsBlock.NORTH, false)).setValue(IronBarsBlock.EAST, false)).setValue(IronBarsBlock.SOUTH, false)).setValue(IronBarsBlock.WEST, false)).setValue(IronBarsBlock.WATERLOGGED, false)); // MagmaCube - decompile error
     }
     
     @Override
@@ -40,7 +40,7 @@ public class IronBarsBlock extends CrossCollisionBlock
         final BlockState blockState2 = blockGetter.getBlockState(blockPos3);
         final BlockState blockState3 = blockGetter.getBlockState(blockPos4);
         final BlockState blockState4 = blockGetter.getBlockState(blockPos5);
-        return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.NORTH, this.attachsTo(blockState, blockState.isFaceSturdy(blockGetter, blockPos2, Direction.SOUTH)))).setValue((Property<Comparable>)IronBarsBlock.SOUTH, this.attachsTo(blockState2, blockState2.isFaceSturdy(blockGetter, blockPos3, Direction.NORTH)))).setValue((Property<Comparable>)IronBarsBlock.WEST, this.attachsTo(blockState3, blockState3.isFaceSturdy(blockGetter, blockPos4, Direction.EAST)))).setValue((Property<Comparable>)IronBarsBlock.EAST, this.attachsTo(blockState4, blockState4.isFaceSturdy(blockGetter, blockPos5, Direction.WEST)))).setValue((Property<Comparable>)IronBarsBlock.WATERLOGGED, fluidState.getType() == Fluids.WATER);
+        return (((((this.defaultBlockState()).setValue(IronBarsBlock.NORTH, this.attachsTo(blockState, blockState.isFaceSturdy(blockGetter, blockPos2, Direction.SOUTH)))).setValue(IronBarsBlock.SOUTH, this.attachsTo(blockState2, blockState2.isFaceSturdy(blockGetter, blockPos3, Direction.NORTH)))).setValue(IronBarsBlock.WEST, this.attachsTo(blockState3, blockState3.isFaceSturdy(blockGetter, blockPos4, Direction.EAST)))).setValue(IronBarsBlock.EAST, this.attachsTo(blockState4, blockState4.isFaceSturdy(blockGetter, blockPos5, Direction.WEST)))).setValue(IronBarsBlock.WATERLOGGED, fluidState.getType() == Fluids.WATER); // MagmaCube - decompile error
     }
     
     @Override
@@ -49,7 +49,7 @@ public class IronBarsBlock extends CrossCollisionBlock
             levelAccessor.getLiquidTicks().scheduleTick(blockPos, Fluids.WATER, Fluids.WATER.getTickDelay(levelAccessor));
         }
         if (direction.getAxis().isHorizontal()) {
-            return ((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)IronBarsBlock.PROPERTY_BY_DIRECTION.get(direction), this.attachsTo(blockState2, blockState2.isFaceSturdy(levelAccessor, blockPos2, direction.getOpposite())));
+            return (blockState).setValue(IronBarsBlock.PROPERTY_BY_DIRECTION.get(direction), this.attachsTo(blockState2, blockState2.isFaceSturdy(levelAccessor, blockPos2, direction.getOpposite()))); // MagmaCube - decompile error
         }
         return super.updateShape(blockState, direction, blockState2, levelAccessor, blockPos, blockPos2);
     }
diff --git a/src/main/java/net/minecraft/world/level/block/KelpBlock.java b/src/main/java/net/minecraft/world/level/block/KelpBlock.java
index 78a243bf4ac61f54921613e9b6d88d37100f9f6f..07ec553235bbf028eebcf0e00271f467d7c4b2e1 100644
--- a/src/main/java/net/minecraft/world/level/block/KelpBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/KelpBlock.java
@@ -2,7 +2,7 @@ package net.minecraft.world.level.block;
 
 import net.minecraft.world.level.material.Fluids;
 import javax.annotation.Nullable;
-import net.minecraft.tags.Tag;
+
 import net.minecraft.tags.FluidTags;
 import net.minecraft.world.item.context.BlockPlaceContext;
 import java.util.Random;
@@ -13,7 +13,6 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.core.Direction;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class KelpBlock extends GrowingPlantHeadBlock implements LiquidBlockContainer
diff --git a/src/main/java/net/minecraft/world/level/block/KelpPlantBlock.java b/src/main/java/net/minecraft/world/level/block/KelpPlantBlock.java
index f29ff1dc58d06144132e99418bc634c911ba6be6..093a0337651dd38f333bbaed4701ba1512c7f299 100644
--- a/src/main/java/net/minecraft/world/level/block/KelpPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/KelpPlantBlock.java
@@ -9,7 +9,6 @@ import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.core.Direction;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class KelpPlantBlock extends GrowingPlantBodyBlock implements LiquidBlockContainer
 {
diff --git a/src/main/java/net/minecraft/world/level/block/MelonBlock.java b/src/main/java/net/minecraft/world/level/block/MelonBlock.java
index 5c9b3c5f62184ca21a7d6c913728efbc042c7f4a..a582bdf7d1f6fe53d46e40079d5d11ca4d1abaa3 100644
--- a/src/main/java/net/minecraft/world/level/block/MelonBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MelonBlock.java
@@ -1,7 +1,5 @@
 package net.minecraft.world.level.block;
 
-import net.minecraft.world.level.block.state.BlockBehaviour;
-
 public class MelonBlock extends StemGrownBlock
 {
     protected MelonBlock(final Properties properties) {
diff --git a/src/main/java/net/minecraft/world/level/block/NetherSproutsBlock.java b/src/main/java/net/minecraft/world/level/block/NetherSproutsBlock.java
index 1e7ac998ad5b765bf999c914335e12e2b7e826f2..cf818e58361f8fa96577f3fca3fb93b43ec076bf 100644
--- a/src/main/java/net/minecraft/world/level/block/NetherSproutsBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NetherSproutsBlock.java
@@ -1,12 +1,10 @@
 package net.minecraft.world.level.block;
 
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class NetherSproutsBlock extends BushBlock
diff --git a/src/main/java/net/minecraft/world/level/block/NetherrackBlock.java b/src/main/java/net/minecraft/world/level/block/NetherrackBlock.java
index 2c9434832c628bf74b706c410091aa98505ba8e8..966b0db367e25c93f9da14fb955782ad6709489a 100644
--- a/src/main/java/net/minecraft/world/level/block/NetherrackBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NetherrackBlock.java
@@ -3,13 +3,10 @@ package net.minecraft.world.level.block;
 import net.minecraft.server.level.ServerLevel;
 import java.util.Random;
 import net.minecraft.world.level.Level;
-import java.util.Iterator;
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.BlockGetter;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class NetherrackBlock extends Block implements BonemealableBlock
 {
diff --git a/src/main/java/net/minecraft/world/level/block/NyliumBlock.java b/src/main/java/net/minecraft/world/level/block/NyliumBlock.java
index 70a50a9a96672d41902f128fccbc3d67b5dfab6d..0adfa57bdbe73a48e976d1a1bb6b3fdc41fecfb4 100644
--- a/src/main/java/net/minecraft/world/level/block/NyliumBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NyliumBlock.java
@@ -1,7 +1,6 @@
 package net.minecraft.world.level.block;
 
 import net.minecraft.world.level.levelgen.feature.TwistingVinesFeature;
-import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.levelgen.feature.NetherForestVegetationFeature;
 import net.minecraft.data.worldgen.Features;
 import net.minecraft.world.level.Level;
@@ -13,7 +12,6 @@ import net.minecraft.core.Direction;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class NyliumBlock extends Block implements BonemealableBlock
 {
diff --git a/src/main/java/net/minecraft/world/level/block/OreBlock.java b/src/main/java/net/minecraft/world/level/block/OreBlock.java
index de01b89ab31f86c1b7e39d59fa5224575bd7f534..091c512c7e5bbf3c8cf81730ae8613bfc543aada 100644
--- a/src/main/java/net/minecraft/world/level/block/OreBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/OreBlock.java
@@ -8,7 +8,6 @@ import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.util.Mth;
 import java.util.Random;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class OreBlock extends Block
 {
diff --git a/src/main/java/net/minecraft/world/level/block/PlayerHeadBlock.java b/src/main/java/net/minecraft/world/level/block/PlayerHeadBlock.java
index 0557aca8d3fd8174fea242197f3e4100fb31474d..6469d40cc5168017dbfa78a49788959bbea4775c 100644
--- a/src/main/java/net/minecraft/world/level/block/PlayerHeadBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PlayerHeadBlock.java
@@ -13,7 +13,6 @@ import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class PlayerHeadBlock extends SkullBlock
 {
diff --git a/src/main/java/net/minecraft/world/level/block/PlayerWallHeadBlock.java b/src/main/java/net/minecraft/world/level/block/PlayerWallHeadBlock.java
index c6d1ab41bdf82ce913589e71cfad0b61d1fbeb5e..1b1759af3d6603ee3435721de30ec840ded35355 100644
--- a/src/main/java/net/minecraft/world/level/block/PlayerWallHeadBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PlayerWallHeadBlock.java
@@ -8,7 +8,6 @@ import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class PlayerWallHeadBlock extends WallSkullBlock
 {
diff --git a/src/main/java/net/minecraft/world/level/block/PotatoBlock.java b/src/main/java/net/minecraft/world/level/block/PotatoBlock.java
index daf64f9cd4df13d028ab32debc8c7bfe823e35f3..4cf18d4d7d02fd8476ff1b3d3687f8f88430fd2e 100644
--- a/src/main/java/net/minecraft/world/level/block/PotatoBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PotatoBlock.java
@@ -7,7 +7,6 @@ import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.ItemLike;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class PotatoBlock extends CropBlock
diff --git a/src/main/java/net/minecraft/world/level/block/PoweredBlock.java b/src/main/java/net/minecraft/world/level/block/PoweredBlock.java
index e86512737380fa70cbe4b0feee256157a84d2497..f90f41f4fc5ab8301d217d01a6c9184981cb3710 100644
--- a/src/main/java/net/minecraft/world/level/block/PoweredBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PoweredBlock.java
@@ -4,7 +4,6 @@ import net.minecraft.core.Direction;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class PoweredBlock extends Block
 {
diff --git a/src/main/java/net/minecraft/world/level/block/PoweredRailBlock.java b/src/main/java/net/minecraft/world/level/block/PoweredRailBlock.java
index 3f5987e03e76ffbca7a9814f7689752948d20b16..486a123652609acd81b7fc7ff792b0d2a95ac3b7 100644
--- a/src/main/java/net/minecraft/world/level/block/PoweredRailBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PoweredRailBlock.java
@@ -19,7 +19,7 @@ public class PoweredRailBlock extends BaseRailBlock
     
     protected PoweredRailBlock(final Properties properties) {
         super(true, properties);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH)).setValue((Property<Comparable>)PoweredRailBlock.POWERED, false));
+        this.registerDefaultState(((this.stateDefinition.any()).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH)).setValue(PoweredRailBlock.POWERED, false)); // MagmaCube - decompile error
     }
     
     protected boolean findPoweredRailSignal(final Level level, final BlockPos blockPos, final BlockState blockState, final boolean flag, final int i) {
@@ -114,7 +114,7 @@ public class PoweredRailBlock extends BaseRailBlock
         final boolean flag = blockState.getValue((Property<Boolean>)PoweredRailBlock.POWERED);
         final boolean flag2 = level.hasNeighborSignal(blockPos) || this.findPoweredRailSignal(level, blockPos, blockState, true, 0) || this.findPoweredRailSignal(level, blockPos, blockState, false, 0);
         if (flag2 != flag) {
-            level.setBlock(blockPos, ((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)PoweredRailBlock.POWERED, flag2), 3);
+            level.setBlock(blockPos, (blockState).setValue(PoweredRailBlock.POWERED, flag2), 3); // MagmaCube - decompile error
             level.updateNeighborsAt(blockPos.below(), this);
             if (blockState.getValue(PoweredRailBlock.SHAPE).isAscending()) {
                 level.updateNeighborsAt(blockPos.above(), this);
@@ -134,110 +134,107 @@ public class PoweredRailBlock extends BaseRailBlock
                 case CLOCKWISE_180: {
                     switch (blockState.getValue(PoweredRailBlock.SHAPE)) {
                         case ASCENDING_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST); // MagmaCube - decompile error
                         }
                         case ASCENDING_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST); // MagmaCube - decompile error
                         }
                         case ASCENDING_NORTH: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH); // MagmaCube - decompile error
                         }
                         case ASCENDING_SOUTH: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH); // MagmaCube - decompile error
                         }
                         case SOUTH_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST); // MagmaCube - decompile error
                         }
                         case SOUTH_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST); // MagmaCube - decompile error
                         }
                         case NORTH_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST); // MagmaCube - decompile error
                         }
                         case NORTH_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST); // MagmaCube - decompile error
                         }
                         default: {
                             break Label_0424;
                         }
                     }
-                    break;
                 }
                 case COUNTERCLOCKWISE_90: {
                     switch (blockState.getValue(PoweredRailBlock.SHAPE)) {
                         case NORTH_SOUTH: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.EAST_WEST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.EAST_WEST); // MagmaCube - decompile error
                         }
                         case EAST_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH); // MagmaCube - decompile error
                         }
                         case ASCENDING_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH); // MagmaCube - decompile error
                         }
                         case ASCENDING_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH); // MagmaCube - decompile error
                         }
                         case ASCENDING_NORTH: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST); // MagmaCube - decompile error
                         }
                         case ASCENDING_SOUTH: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST); // MagmaCube - decompile error
                         }
                         case SOUTH_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST); // MagmaCube - decompile error
                         }
                         case SOUTH_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST); // MagmaCube - decompile error
                         }
                         case NORTH_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST); // MagmaCube - decompile error
                         }
                         case NORTH_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST); // MagmaCube - decompile error
                         }
                         default: {
                             break Label_0424;
                         }
                     }
-                    break;
                 }
                 case CLOCKWISE_90: {
                     switch (blockState.getValue(PoweredRailBlock.SHAPE)) {
                         case NORTH_SOUTH: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.EAST_WEST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.EAST_WEST); // MagmaCube - decompile error
                         }
                         case EAST_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH); // MagmaCube - decompile error
                         }
                         case ASCENDING_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH); // MagmaCube - decompile error
                         }
                         case ASCENDING_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH); // MagmaCube - decompile error
                         }
                         case ASCENDING_NORTH: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST); // MagmaCube - decompile error
                         }
                         case ASCENDING_SOUTH: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST); // MagmaCube - decompile error
                         }
                         case SOUTH_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST); // MagmaCube - decompile error
                         }
                         case SOUTH_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST); // MagmaCube - decompile error
                         }
                         case NORTH_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST); // MagmaCube - decompile error
                         }
                         case NORTH_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST); // MagmaCube - decompile error
                         }
                         default: {
                             break Label_0424;
                         }
                     }
-                    break;
                 }
             }
         }
@@ -252,54 +249,52 @@ public class PoweredRailBlock extends BaseRailBlock
                 case LEFT_RIGHT: {
                     switch (railShape) {
                         case ASCENDING_NORTH: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH); // MagmaCube - decompile error
                         }
                         case ASCENDING_SOUTH: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH); // MagmaCube - decompile error
                         }
                         case SOUTH_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST); // MagmaCube - decompile error
                         }
                         case SOUTH_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST); // MagmaCube - decompile error
                         }
                         case NORTH_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST); // MagmaCube - decompile error
                         }
                         case NORTH_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST); // MagmaCube - decompile error
                         }
                         default: {
                             break Label_0319;
                         }
                     }
-                    break;
                 }
                 case FRONT_BACK: {
                     switch (railShape) {
                         case ASCENDING_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST); // MagmaCube - decompile error
                         }
                         case ASCENDING_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST); // MagmaCube - decompile error
                         }
                         case SOUTH_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST); // MagmaCube - decompile error
                         }
                         case SOUTH_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST); // MagmaCube - decompile error
                         }
                         case NORTH_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST); // MagmaCube - decompile error
                         }
                         case NORTH_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
+                            return (blockState).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST); // MagmaCube - decompile error
                         }
                         default: {
                             break Label_0319;
                         }
                     }
-                    break;
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/block/RailBlock.java b/src/main/java/net/minecraft/world/level/block/RailBlock.java
index f27932280d714450a88a033657bc342bf075cad1..147e77c28754dbe458d01faa462e9cfcb8f380bb 100644
--- a/src/main/java/net/minecraft/world/level/block/RailBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RailBlock.java
@@ -17,7 +17,7 @@ public class RailBlock extends BaseRailBlock
     
     protected RailBlock(final Properties properties) {
         super(false, properties);
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue(RailBlock.SHAPE, RailShape.NORTH_SOUTH));
+        this.registerDefaultState((this.stateDefinition.any()).setValue(RailBlock.SHAPE, RailShape.NORTH_SOUTH)); // MagmaCube - decompile error
     }
     
     @Override
@@ -39,110 +39,107 @@ public class RailBlock extends BaseRailBlock
                 case CLOCKWISE_180: {
                     switch (blockState.getValue(RailBlock.SHAPE)) {
                         case ASCENDING_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_WEST); // MagmaCube - decompile error
                         }
                         case ASCENDING_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_EAST); // MagmaCube - decompile error
                         }
                         case ASCENDING_NORTH: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_SOUTH); // MagmaCube - decompile error
                         }
                         case ASCENDING_SOUTH: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_NORTH); // MagmaCube - decompile error
                         }
                         case SOUTH_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.NORTH_WEST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.NORTH_WEST); // MagmaCube - decompile error
                         }
                         case SOUTH_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.NORTH_EAST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.NORTH_EAST); // MagmaCube - decompile error
                         }
                         case NORTH_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.SOUTH_EAST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.SOUTH_EAST); // MagmaCube - decompile error
                         }
                         case NORTH_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.SOUTH_WEST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.SOUTH_WEST); // MagmaCube - decompile error
                         }
                         default: {
                             break Label_0424;
                         }
                     }
-                    break;
                 }
                 case COUNTERCLOCKWISE_90: {
                     switch (blockState.getValue(RailBlock.SHAPE)) {
                         case NORTH_SOUTH: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.EAST_WEST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.EAST_WEST); // MagmaCube - decompile error
                         }
                         case EAST_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.NORTH_SOUTH);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.NORTH_SOUTH); // MagmaCube - decompile error
                         }
                         case ASCENDING_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_NORTH); // MagmaCube - decompile error
                         }
                         case ASCENDING_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_SOUTH); // MagmaCube - decompile error
                         }
                         case ASCENDING_NORTH: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_WEST); // MagmaCube - decompile error
                         }
                         case ASCENDING_SOUTH: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_EAST); // MagmaCube - decompile error
                         }
                         case SOUTH_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.NORTH_EAST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.NORTH_EAST); // MagmaCube - decompile error
                         }
                         case SOUTH_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.SOUTH_EAST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.SOUTH_EAST); // MagmaCube - decompile error
                         }
                         case NORTH_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.SOUTH_WEST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.SOUTH_WEST); // MagmaCube - decompile error
                         }
                         case NORTH_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.NORTH_WEST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.NORTH_WEST); // MagmaCube - decompile error
                         }
                         default: {
                             break Label_0424;
                         }
                     }
-                    break;
                 }
                 case CLOCKWISE_90: {
                     switch (blockState.getValue(RailBlock.SHAPE)) {
                         case NORTH_SOUTH: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.EAST_WEST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.EAST_WEST); // MagmaCube - decompile error
                         }
                         case EAST_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.NORTH_SOUTH);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.NORTH_SOUTH); // MagmaCube - decompile error
                         }
                         case ASCENDING_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_SOUTH); // MagmaCube - decompile error
                         }
                         case ASCENDING_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_NORTH); // MagmaCube - decompile error
                         }
                         case ASCENDING_NORTH: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_EAST); // MagmaCube - decompile error
                         }
                         case ASCENDING_SOUTH: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_WEST); // MagmaCube - decompile error
                         }
                         case SOUTH_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.SOUTH_WEST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.SOUTH_WEST); // MagmaCube - decompile error
                         }
                         case SOUTH_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.NORTH_WEST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.NORTH_WEST); // MagmaCube - decompile error
                         }
                         case NORTH_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.NORTH_EAST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.NORTH_EAST); // MagmaCube - decompile error
                         }
                         case NORTH_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.SOUTH_EAST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.SOUTH_EAST); // MagmaCube - decompile error
                         }
                         default: {
                             break Label_0424;
                         }
                     }
-                    break;
                 }
             }
         }
@@ -157,54 +154,52 @@ public class RailBlock extends BaseRailBlock
                 case LEFT_RIGHT: {
                     switch (railShape) {
                         case ASCENDING_NORTH: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_SOUTH); // MagmaCube - decompile error
                         }
                         case ASCENDING_SOUTH: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_NORTH); // MagmaCube - decompile error
                         }
                         case SOUTH_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.NORTH_EAST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.NORTH_EAST); // MagmaCube - decompile error
                         }
                         case SOUTH_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.NORTH_WEST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.NORTH_WEST); // MagmaCube - decompile error
                         }
                         case NORTH_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.SOUTH_WEST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.SOUTH_WEST); // MagmaCube - decompile error
                         }
                         case NORTH_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.SOUTH_EAST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.SOUTH_EAST); // MagmaCube - decompile error
                         }
                         default: {
                             break Label_0319;
                         }
                     }
-                    break;
                 }
                 case FRONT_BACK: {
                     switch (railShape) {
                         case ASCENDING_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_WEST); // MagmaCube - decompile error
                         }
                         case ASCENDING_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.ASCENDING_EAST); // MagmaCube - decompile error
                         }
                         case SOUTH_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.SOUTH_WEST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.SOUTH_WEST); // MagmaCube - decompile error
                         }
                         case SOUTH_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.SOUTH_EAST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.SOUTH_EAST); // MagmaCube - decompile error
                         }
                         case NORTH_WEST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.NORTH_EAST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.NORTH_EAST); // MagmaCube - decompile error
                         }
                         case NORTH_EAST: {
-                            return ((StateHolder<O, BlockState>)blockState).setValue(RailBlock.SHAPE, RailShape.NORTH_WEST);
+                            return (blockState).setValue(RailBlock.SHAPE, RailShape.NORTH_WEST); // MagmaCube - decompile error
                         }
                         default: {
                             break Label_0319;
                         }
                     }
-                    break;
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/block/RootsBlock.java b/src/main/java/net/minecraft/world/level/block/RootsBlock.java
index ce77500d73aa7f9304a1e952ae9c05572149f129..2f8da75655a2075744ed932f728e893b04dc7996 100644
--- a/src/main/java/net/minecraft/world/level/block/RootsBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RootsBlock.java
@@ -1,12 +1,10 @@
 package net.minecraft.world.level.block;
 
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class RootsBlock extends BushBlock
diff --git a/src/main/java/net/minecraft/world/level/block/Rotation.java b/src/main/java/net/minecraft/world/level/block/Rotation.java
index 24713f354f780ed56103c05cbfd2fb7031ce509b..73d33b0bc07375dc22485476fbe9b49ea92f743a 100644
--- a/src/main/java/net/minecraft/world/level/block/Rotation.java
+++ b/src/main/java/net/minecraft/world/level/block/Rotation.java
@@ -42,7 +42,6 @@ public enum Rotation
                             break Label_0148;
                         }
                     }
-                    break;
                 }
                 case COUNTERCLOCKWISE_90: {
                     switch (this) {
@@ -62,7 +61,6 @@ public enum Rotation
                             break Label_0148;
                         }
                     }
-                    break;
                 }
                 case CLOCKWISE_90: {
                     switch (this) {
@@ -79,10 +77,8 @@ public enum Rotation
                             return Rotation.NONE;
                         }
                         default: {
-                            break Label_0148;
                         }
                     }
-                    break;
                 }
             }
         }
@@ -135,7 +131,7 @@ public enum Rotation
     }
     
     public static List<Rotation> getShuffled(final Random random) {
-        final List<Rotation> list = (List<Rotation>)Lists.newArrayList((Object[])values());
+        final List<Rotation> list = (List<Rotation>)Lists.newArrayList(values()); // MagmaCube - decompile error
         Collections.shuffle(list, random);
         return list;
     }
diff --git a/src/main/java/net/minecraft/world/level/block/SandBlock.java b/src/main/java/net/minecraft/world/level/block/SandBlock.java
index d06a063f5de06ee665fb6e27c5cdc186fc423972..f95e2708a49bf338b80cc3c101bab8c09960def5 100644
--- a/src/main/java/net/minecraft/world/level/block/SandBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SandBlock.java
@@ -3,7 +3,6 @@ package net.minecraft.world.level.block;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class SandBlock extends FallingBlock
 {
diff --git a/src/main/java/net/minecraft/world/level/block/SignBlock.java b/src/main/java/net/minecraft/world/level/block/SignBlock.java
index e87ad9b96a49e85460509ddf55e48794f19ed41f..fe4e95e4fb6e65337d6f9eae4f1b64f341523793 100644
--- a/src/main/java/net/minecraft/world/level/block/SignBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SignBlock.java
@@ -13,14 +13,12 @@ import net.minecraft.world.level.block.entity.SignBlockEntity;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.level.BlockGetter;
-import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.material.Fluids;
 import net.minecraft.world.level.block.state.properties.Property;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.core.Direction;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.properties.WoodType;
 import net.minecraft.world.phys.shapes.VoxelShape;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
diff --git a/src/main/java/net/minecraft/world/level/block/SlimeBlock.java b/src/main/java/net/minecraft/world/level/block/SlimeBlock.java
index 19edb05633e3c451b8d4394510f19ce0b4b8abe1..22d9a74948eab903e8552d33faea7324af79edae 100644
--- a/src/main/java/net/minecraft/world/level/block/SlimeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SlimeBlock.java
@@ -6,7 +6,6 @@ import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class SlimeBlock extends HalfTransparentBlock
 {
diff --git a/src/main/java/net/minecraft/world/level/block/SoulFireBlock.java b/src/main/java/net/minecraft/world/level/block/SoulFireBlock.java
index 772ad32d1f5b170781d74e586c753480644f4e9b..88b7ad929de8156a0a6b3d50bc94293e3844e846 100644
--- a/src/main/java/net/minecraft/world/level/block/SoulFireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SoulFireBlock.java
@@ -1,13 +1,11 @@
 package net.minecraft.world.level.block;
 
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.core.Direction;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class SoulFireBlock extends BaseFireBlock
 {
diff --git a/src/main/java/net/minecraft/world/level/block/SoulSandBlock.java b/src/main/java/net/minecraft/world/level/block/SoulSandBlock.java
index 0fbb0ecbd2a6c0c545c71f77b2b622f3d8fd0069..9a326ce895824e4ece6881d09a5baa2a45ceb402 100644
--- a/src/main/java/net/minecraft/world/level/block/SoulSandBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SoulSandBlock.java
@@ -11,7 +11,6 @@ import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class SoulSandBlock extends Block
diff --git a/src/main/java/net/minecraft/world/level/block/SpawnerBlock.java b/src/main/java/net/minecraft/world/level/block/SpawnerBlock.java
index 14053acd6c559d05c139512217defa50783a93d9..b261c9310a633c331a74d3acb6584ca299e6a4a8 100644
--- a/src/main/java/net/minecraft/world/level/block/SpawnerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SpawnerBlock.java
@@ -7,7 +7,6 @@ import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.entity.SpawnerBlockEntity;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.BlockGetter;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class SpawnerBlock extends BaseEntityBlock
 {
diff --git a/src/main/java/net/minecraft/world/level/block/StainedGlassBlock.java b/src/main/java/net/minecraft/world/level/block/StainedGlassBlock.java
index c21e1ef9c38f6e007bb94743acbb034b4b0a8510..22d9bb9fd1f3adb325ec7b6fc7d68adf05e99ca2 100644
--- a/src/main/java/net/minecraft/world/level/block/StainedGlassBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StainedGlassBlock.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.block;
 
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.item.DyeColor;
 
 public class StainedGlassBlock extends AbstractGlassBlock implements BeaconBeamBlock
diff --git a/src/main/java/net/minecraft/world/level/block/StemGrownBlock.java b/src/main/java/net/minecraft/world/level/block/StemGrownBlock.java
index 822ed864cf42a02365164afe784bd2449ffd24fa..c6631db6d92d15eb09dc0fb78ebd782971fe5593 100644
--- a/src/main/java/net/minecraft/world/level/block/StemGrownBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StemGrownBlock.java
@@ -1,7 +1,5 @@
 package net.minecraft.world.level.block;
 
-import net.minecraft.world.level.block.state.BlockBehaviour;
-
 public abstract class StemGrownBlock extends Block
 {
     public StemGrownBlock(final Properties properties) {
diff --git a/src/main/java/net/minecraft/world/level/block/StoneButtonBlock.java b/src/main/java/net/minecraft/world/level/block/StoneButtonBlock.java
index fa4d8a90bd34f5b3b0328239b3a1a8c55ade8ca9..a217bbcaacd7b51f0f8c6f9362394761e1a7cdc6 100644
--- a/src/main/java/net/minecraft/world/level/block/StoneButtonBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StoneButtonBlock.java
@@ -2,7 +2,6 @@ package net.minecraft.world.level.block;
 
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundEvent;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class StoneButtonBlock extends ButtonBlock
 {
diff --git a/src/main/java/net/minecraft/world/level/block/StructureVoidBlock.java b/src/main/java/net/minecraft/world/level/block/StructureVoidBlock.java
index 56cefcaae4e14dd4faad900e7769569ebf3a8c15..9d2e5468a33e13a2ac2afafe168279b1cba280d0 100644
--- a/src/main/java/net/minecraft/world/level/block/StructureVoidBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StructureVoidBlock.java
@@ -5,7 +5,6 @@ import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class StructureVoidBlock extends Block
diff --git a/src/main/java/net/minecraft/world/level/block/SupportType.java b/src/main/java/net/minecraft/world/level/block/SupportType.java
index 3dc815820fef1989281e134e068dc0aa9f8616eb..8f6ec0d6917fc08a8b3dac9c3077b0df235bb277 100644
--- a/src/main/java/net/minecraft/world/level/block/SupportType.java
+++ b/src/main/java/net/minecraft/world/level/block/SupportType.java
@@ -21,7 +21,6 @@ public enum SupportType
         private final VoxelShape CENTER_SUPPORT_SHAPE;
         
         {
-            this.CENTER_SUPPORT_WIDTH = 1;
             this.CENTER_SUPPORT_SHAPE = Block.box(7.0, 0.0, 7.0, 9.0, 10.0, 9.0);
         }
         
@@ -35,7 +34,6 @@ public enum SupportType
         private final VoxelShape RIGID_SUPPORT_SHAPE;
         
         {
-            this.RIGID_SUPPORT_WIDTH = 2;
             this.RIGID_SUPPORT_SHAPE = Shapes.join(Shapes.block(), Block.box(2.0, 0.0, 2.0, 14.0, 16.0, 14.0), BooleanOp.ONLY_FIRST);
         }
         
diff --git a/src/main/java/net/minecraft/world/level/block/TallFlowerBlock.java b/src/main/java/net/minecraft/world/level/block/TallFlowerBlock.java
index 37155d9b2a9c1e73523491629eac49a27e6e3051..7f313fa515142074be210ebb5badef6da5c30023 100644
--- a/src/main/java/net/minecraft/world/level/block/TallFlowerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TallFlowerBlock.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.block;
 
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.server.level.ServerLevel;
 import java.util.Random;
@@ -9,7 +8,6 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.item.context.BlockPlaceContext;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class TallFlowerBlock extends DoublePlantBlock implements BonemealableBlock
 {
diff --git a/src/main/java/net/minecraft/world/level/block/TallGrassBlock.java b/src/main/java/net/minecraft/world/level/block/TallGrassBlock.java
index ea3fc0ae7c4a80542ca303ff4b5d84bd0b8a6bfa..41b7fbfa868c6e7ca475697434db1f6114695f46 100644
--- a/src/main/java/net/minecraft/world/level/block/TallGrassBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TallGrassBlock.java
@@ -1,7 +1,5 @@
 package net.minecraft.world.level.block;
 
-import net.minecraft.world.level.LevelAccessor;
-import net.minecraft.world.level.LevelReader;
 import net.minecraft.server.level.ServerLevel;
 import java.util.Random;
 import net.minecraft.world.level.Level;
@@ -9,7 +7,6 @@ import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class TallGrassBlock extends BushBlock implements BonemealableBlock
diff --git a/src/main/java/net/minecraft/world/level/block/TallSeagrass.java b/src/main/java/net/minecraft/world/level/block/TallSeagrass.java
index 754a09c780cbeaa623867a1df17ca7ff83359e29..de413a4f07a7a7255d90eaa51ec5638125b39d16 100644
--- a/src/main/java/net/minecraft/world/level/block/TallSeagrass.java
+++ b/src/main/java/net/minecraft/world/level/block/TallSeagrass.java
@@ -2,22 +2,18 @@ package net.minecraft.world.level.block;
 
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.material.Fluids;
-import net.minecraft.world.level.block.state.properties.Property;
 import net.minecraft.world.level.LevelReader;
 import javax.annotation.Nullable;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.level.material.Fluid;
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.world.item.context.BlockPlaceContext;
-import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.core.Direction;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.phys.shapes.VoxelShape;
 import net.minecraft.world.level.block.state.properties.DoubleBlockHalf;
 import net.minecraft.world.level.block.state.properties.EnumProperty;
diff --git a/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java b/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java
index 29e9cfeea21d969b1514e6bd7609674eb5b14bbd..9a8dbabe254246ccdbc1ec8fd80dd24578aaa77e 100644
--- a/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java
@@ -43,7 +43,7 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
     
     protected TrapDoorBlock(final Properties properties) {
         super(properties);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)TrapDoorBlock.FACING, Direction.NORTH)).setValue((Property<Comparable>)TrapDoorBlock.OPEN, false)).setValue(TrapDoorBlock.HALF, Half.BOTTOM)).setValue((Property<Comparable>)TrapDoorBlock.POWERED, false)).setValue((Property<Comparable>)TrapDoorBlock.WATERLOGGED, false));
+        this.registerDefaultState((((((this.stateDefinition.any()).setValue(TrapDoorBlock.FACING, Direction.NORTH)).setValue(TrapDoorBlock.OPEN, false)).setValue(TrapDoorBlock.HALF, Half.BOTTOM)).setValue(TrapDoorBlock.POWERED, false)).setValue(TrapDoorBlock.WATERLOGGED, false)); // MagmaCube - decompile error
     }
     
     @Override
@@ -90,7 +90,7 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
         if (this.material == Material.METAL) {
             return InteractionResult.PASS;
         }
-        blockState = ((StateHolder<O, BlockState>)blockState).cycle((Property<Comparable>)TrapDoorBlock.OPEN);
+        blockState = (blockState).cycle(TrapDoorBlock.OPEN); // MagmaCube - decompile error
         level.setBlock(blockPos, blockState, 2);
         if (blockState.getValue((Property<Boolean>)TrapDoorBlock.WATERLOGGED)) {
             level.getLiquidTicks().scheduleTick(blockPos, Fluids.WATER, Fluids.WATER.getTickDelay(level));
@@ -118,10 +118,10 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
         final boolean flag2 = level.hasNeighborSignal(blockPos);
         if (flag2 != blockState.getValue((Property<Boolean>)TrapDoorBlock.POWERED)) {
             if (blockState.getValue((Property<Boolean>)TrapDoorBlock.OPEN) != flag2) {
-                blockState = ((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)TrapDoorBlock.OPEN, flag2);
+                blockState = (blockState).setValue(TrapDoorBlock.OPEN, flag2); // MagmaCube - decompile error
                 this.playSound(null, level, blockPos, flag2);
             }
-            level.setBlock(blockPos, ((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)TrapDoorBlock.POWERED, flag2), 2);
+            level.setBlock(blockPos, (blockState).setValue(TrapDoorBlock.POWERED, flag2), 2); // MagmaCube - decompile error
             if (blockState.getValue((Property<Boolean>)TrapDoorBlock.WATERLOGGED)) {
                 level.getLiquidTicks().scheduleTick(blockPos, Fluids.WATER, Fluids.WATER.getTickDelay(level));
             }
@@ -134,15 +134,15 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
         final FluidState fluidState = blockPlaceContext.getLevel().getFluidState(blockPlaceContext.getClickedPos());
         final Direction direction = blockPlaceContext.getClickedFace();
         if (blockPlaceContext.replacingClickedOnBlock() || !direction.getAxis().isHorizontal()) {
-            blockState = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)TrapDoorBlock.FACING, blockPlaceContext.getHorizontalDirection().getOpposite())).setValue(TrapDoorBlock.HALF, (direction == Direction.UP) ? Half.BOTTOM : Half.TOP);
+            blockState = ((blockState).setValue(TrapDoorBlock.FACING, blockPlaceContext.getHorizontalDirection().getOpposite())).setValue(TrapDoorBlock.HALF, (direction == Direction.UP) ? Half.BOTTOM : Half.TOP); // MagmaCube - decompile error
         }
         else {
-            blockState = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)TrapDoorBlock.FACING, direction)).setValue(TrapDoorBlock.HALF, (blockPlaceContext.getClickLocation().y - blockPlaceContext.getClickedPos().getY() > 0.5) ? Half.TOP : Half.BOTTOM);
+            blockState = ((blockState).setValue(TrapDoorBlock.FACING, direction)).setValue(TrapDoorBlock.HALF, (blockPlaceContext.getClickLocation().y - blockPlaceContext.getClickedPos().getY() > 0.5) ? Half.TOP : Half.BOTTOM); // MagmaCube - decompile error
         }
         if (blockPlaceContext.getLevel().hasNeighborSignal(blockPlaceContext.getClickedPos())) {
-            blockState = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)TrapDoorBlock.OPEN, true)).setValue((Property<Comparable>)TrapDoorBlock.POWERED, true);
+            blockState = ((blockState).setValue(TrapDoorBlock.OPEN, true)).setValue(TrapDoorBlock.POWERED, true); // MagmaCube - decompile error
         }
-        return ((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)TrapDoorBlock.WATERLOGGED, fluidState.getType() == Fluids.WATER);
+        return (blockState).setValue(TrapDoorBlock.WATERLOGGED, fluidState.getType() == Fluids.WATER); // MagmaCube - decompile error
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/TrappedChestBlock.java b/src/main/java/net/minecraft/world/level/block/TrappedChestBlock.java
index f1c7dddc98c3f7a2c23374e44900dc4f9990bbb5..0db5a3a1df56e35a143f59ad2bd9a899356698da 100644
--- a/src/main/java/net/minecraft/world/level/block/TrappedChestBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TrappedChestBlock.java
@@ -12,7 +12,6 @@ import net.minecraft.world.level.block.entity.TrappedChestBlockEntity;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.entity.BlockEntityType;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class TrappedChestBlock extends ChestBlock
 {
diff --git a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
index 651815b2a9dc5324b997883f043135afa4d9783e..c61f463563da69ebc06a7f31aef440cb1f62faea 100644
--- a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
@@ -41,7 +41,7 @@ public class TripWireBlock extends Block
     
     public TripWireBlock(final TripWireHookBlock tripWireHookBlock, final Properties properties) {
         super(properties);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)TripWireBlock.POWERED, false)).setValue((Property<Comparable>)TripWireBlock.ATTACHED, false)).setValue((Property<Comparable>)TripWireBlock.DISARMED, false)).setValue((Property<Comparable>)TripWireBlock.NORTH, false)).setValue((Property<Comparable>)TripWireBlock.EAST, false)).setValue((Property<Comparable>)TripWireBlock.SOUTH, false)).setValue((Property<Comparable>)TripWireBlock.WEST, false));
+        this.registerDefaultState((((((((this.stateDefinition.any()).setValue(TripWireBlock.POWERED, false)).setValue(TripWireBlock.ATTACHED, false)).setValue(TripWireBlock.DISARMED, false)).setValue(TripWireBlock.NORTH, false)).setValue(TripWireBlock.EAST, false)).setValue(TripWireBlock.SOUTH, false)).setValue(TripWireBlock.WEST, false)); // MagmaCube - decompile error
         this.hook = tripWireHookBlock;
     }
     
@@ -54,13 +54,13 @@ public class TripWireBlock extends Block
     public BlockState getStateForPlacement(final BlockPlaceContext blockPlaceContext) {
         final BlockGetter blockGetter = blockPlaceContext.getLevel();
         final BlockPos blockPos = blockPlaceContext.getClickedPos();
-        return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)TripWireBlock.NORTH, this.shouldConnectTo(blockGetter.getBlockState(blockPos.north()), Direction.NORTH))).setValue((Property<Comparable>)TripWireBlock.EAST, this.shouldConnectTo(blockGetter.getBlockState(blockPos.east()), Direction.EAST))).setValue((Property<Comparable>)TripWireBlock.SOUTH, this.shouldConnectTo(blockGetter.getBlockState(blockPos.south()), Direction.SOUTH))).setValue((Property<Comparable>)TripWireBlock.WEST, this.shouldConnectTo(blockGetter.getBlockState(blockPos.west()), Direction.WEST));
+        return ((((this.defaultBlockState()).setValue(TripWireBlock.NORTH, this.shouldConnectTo(blockGetter.getBlockState(blockPos.north()), Direction.NORTH))).setValue(TripWireBlock.EAST, this.shouldConnectTo(blockGetter.getBlockState(blockPos.east()), Direction.EAST))).setValue(TripWireBlock.SOUTH, this.shouldConnectTo(blockGetter.getBlockState(blockPos.south()), Direction.SOUTH))).setValue(TripWireBlock.WEST, this.shouldConnectTo(blockGetter.getBlockState(blockPos.west()), Direction.WEST)); // MagmaCube - decompile error
     }
     
     @Override
     public BlockState updateShape(final BlockState blockState, final Direction direction, final BlockState blockState2, final LevelAccessor levelAccessor, final BlockPos blockPos, final BlockPos blockPos2) {
         if (direction.getAxis().isHorizontal()) {
-            return ((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)TripWireBlock.PROPERTY_BY_DIRECTION.get(direction), this.shouldConnectTo(blockState2, direction));
+            return (blockState).setValue(TripWireBlock.PROPERTY_BY_DIRECTION.get(direction), this.shouldConnectTo(blockState2, direction)); // MagmaCube - decompile error
         }
         return super.updateShape(blockState, direction, blockState2, levelAccessor, blockPos, blockPos2);
     }
@@ -78,13 +78,13 @@ public class TripWireBlock extends Block
         if (flag || blockState.is(blockState2.getBlock())) {
             return;
         }
-        this.updateSource(level, blockPos, ((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)TripWireBlock.POWERED, true));
+        this.updateSource(level, blockPos, (blockState).setValue(TripWireBlock.POWERED, true)); // MagmaCube - decompile error
     }
     
     @Override
     public void playerWillDestroy(final Level level, final BlockPos blockPos, final BlockState blockState, final Player player) {
         if (!level.isClientSide && !player.getMainHandItem().isEmpty() && player.getMainHandItem().getItem() == Items.SHEARS) {
-            level.setBlock(blockPos, ((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)TripWireBlock.DISARMED, true), 4);
+            level.setBlock(blockPos, (blockState).setValue(TripWireBlock.DISARMED, true), 4); // MagmaCube - decompile error
         }
         super.playerWillDestroy(level, blockPos, blockState, player);
     }
@@ -96,7 +96,7 @@ public class TripWireBlock extends Block
                 final BlockPos blockPos2 = blockPos.relative(direction, i);
                 final BlockState blockState2 = level.getBlockState(blockPos2);
                 if (blockState2.is(this.hook)) {
-                    if (blockState2.getValue((Property<Comparable>)TripWireHookBlock.FACING) == direction.getOpposite()) {
+                    if (blockState2.getValue(TripWireHookBlock.FACING) == direction.getOpposite()) { // MagmaCube - decompile error
                         this.hook.calculateState(level, blockPos2, blockState2, false, true, i, blockState);
                         break;
                     }
@@ -145,7 +145,7 @@ public class TripWireBlock extends Block
             }
         }
         if (flag2 != flag) {
-            blockState = ((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)TripWireBlock.POWERED, flag2);
+            blockState = (blockState).setValue(TripWireBlock.POWERED, flag2); // MagmaCube - decompile error
             level.setBlock(blockPos, blockState, 3);
             this.updateSource(level, blockPos, blockState);
         }
@@ -157,7 +157,7 @@ public class TripWireBlock extends Block
     public boolean shouldConnectTo(final BlockState blockState, final Direction direction) {
         final Block block = blockState.getBlock();
         if (block == this.hook) {
-            return blockState.getValue((Property<Comparable>)TripWireHookBlock.FACING) == direction.getOpposite();
+            return blockState.getValue(TripWireHookBlock.FACING) == direction.getOpposite(); // MagmaCube - decompile error
         }
         return block == this;
     }
@@ -166,13 +166,13 @@ public class TripWireBlock extends Block
     public BlockState rotate(final BlockState blockState, final Rotation rotation) {
         switch (rotation) {
             case CLOCKWISE_180: {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)TripWireBlock.NORTH, (Comparable)blockState.getValue((Property<V>)TripWireBlock.SOUTH))).setValue((Property<Comparable>)TripWireBlock.EAST, (Comparable)blockState.getValue((Property<V>)TripWireBlock.WEST))).setValue((Property<Comparable>)TripWireBlock.SOUTH, (Comparable)blockState.getValue((Property<V>)TripWireBlock.NORTH))).setValue((Property<Comparable>)TripWireBlock.WEST, (Comparable)blockState.getValue((Property<V>)TripWireBlock.EAST));
+                return ((((blockState).setValue(TripWireBlock.NORTH, (Comparable)blockState.getValue(TripWireBlock.SOUTH))).setValue(TripWireBlock.EAST, (Comparable)blockState.getValue(TripWireBlock.WEST))).setValue(TripWireBlock.SOUTH, (Comparable)blockState.getValue(TripWireBlock.NORTH))).setValue(TripWireBlock.WEST, (Comparable)blockState.getValue(TripWireBlock.EAST)); // MagmaCube - decompile error
             }
             case COUNTERCLOCKWISE_90: {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)TripWireBlock.NORTH, (Comparable)blockState.getValue((Property<V>)TripWireBlock.EAST))).setValue((Property<Comparable>)TripWireBlock.EAST, (Comparable)blockState.getValue((Property<V>)TripWireBlock.SOUTH))).setValue((Property<Comparable>)TripWireBlock.SOUTH, (Comparable)blockState.getValue((Property<V>)TripWireBlock.WEST))).setValue((Property<Comparable>)TripWireBlock.WEST, (Comparable)blockState.getValue((Property<V>)TripWireBlock.NORTH));
+                return ((((blockState).setValue(TripWireBlock.NORTH, (Comparable)blockState.getValue(TripWireBlock.EAST))).setValue(TripWireBlock.EAST, (Comparable)blockState.getValue(TripWireBlock.SOUTH))).setValue(TripWireBlock.SOUTH, (Comparable)blockState.getValue(TripWireBlock.WEST))).setValue(TripWireBlock.WEST, (Comparable)blockState.getValue(TripWireBlock.NORTH)); // MagmaCube - decompile error
             }
             case CLOCKWISE_90: {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)TripWireBlock.NORTH, (Comparable)blockState.getValue((Property<V>)TripWireBlock.WEST))).setValue((Property<Comparable>)TripWireBlock.EAST, (Comparable)blockState.getValue((Property<V>)TripWireBlock.NORTH))).setValue((Property<Comparable>)TripWireBlock.SOUTH, (Comparable)blockState.getValue((Property<V>)TripWireBlock.EAST))).setValue((Property<Comparable>)TripWireBlock.WEST, (Comparable)blockState.getValue((Property<V>)TripWireBlock.SOUTH));
+                return ((((blockState).setValue(TripWireBlock.NORTH, (Comparable)blockState.getValue(TripWireBlock.WEST))).setValue(TripWireBlock.EAST, (Comparable)blockState.getValue(TripWireBlock.NORTH))).setValue(TripWireBlock.SOUTH, (Comparable)blockState.getValue(TripWireBlock.EAST))).setValue(TripWireBlock.WEST, (Comparable)blockState.getValue(TripWireBlock.SOUTH)); // MagmaCube - decompile error
             }
             default: {
                 return blockState;
@@ -184,10 +184,10 @@ public class TripWireBlock extends Block
     public BlockState mirror(final BlockState blockState, final Mirror mirror) {
         switch (mirror) {
             case LEFT_RIGHT: {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)TripWireBlock.NORTH, (Comparable)blockState.getValue((Property<V>)TripWireBlock.SOUTH))).setValue((Property<Comparable>)TripWireBlock.SOUTH, (Comparable)blockState.getValue((Property<V>)TripWireBlock.NORTH));
+                return ((blockState).setValue(TripWireBlock.NORTH, (Comparable)blockState.getValue(TripWireBlock.SOUTH))).setValue(TripWireBlock.SOUTH, (Comparable)blockState.getValue(TripWireBlock.NORTH)); // MagmaCube - decompile error
             }
             case FRONT_BACK: {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)TripWireBlock.EAST, (Comparable)blockState.getValue((Property<V>)TripWireBlock.WEST))).setValue((Property<Comparable>)TripWireBlock.WEST, (Comparable)blockState.getValue((Property<V>)TripWireBlock.EAST));
+                return ((blockState).setValue(TripWireBlock.EAST, (Comparable)blockState.getValue(TripWireBlock.WEST))).setValue(TripWireBlock.WEST, (Comparable)blockState.getValue(TripWireBlock.EAST)); // MagmaCube - decompile error
             }
             default: {
                 return super.mirror(blockState, mirror);
diff --git a/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java b/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
index e5eda6bf3caf3911e8a98bfde845255666436458..a27ebb9f1be52b9abf2269df1ead9e2cef50663c 100644
--- a/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
@@ -39,7 +39,7 @@ public class TripWireHookBlock extends Block
     
     public TripWireHookBlock(final Properties properties) {
         super(properties);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)TripWireHookBlock.FACING, Direction.NORTH)).setValue((Property<Comparable>)TripWireHookBlock.POWERED, false)).setValue((Property<Comparable>)TripWireHookBlock.ATTACHED, false));
+        this.registerDefaultState((((this.stateDefinition.any()).setValue(TripWireHookBlock.FACING, Direction.NORTH)).setValue(TripWireHookBlock.POWERED, false)).setValue(TripWireHookBlock.ATTACHED, false)); // MagmaCube - decompile error
     }
     
     @Override
@@ -79,7 +79,7 @@ public class TripWireHookBlock extends Block
     @Nullable
     @Override
     public BlockState getStateForPlacement(final BlockPlaceContext blockPlaceContext) {
-        BlockState blockState = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)TripWireHookBlock.POWERED, false)).setValue((Property<Comparable>)TripWireHookBlock.ATTACHED, false);
+        BlockState blockState = ((this.defaultBlockState()).setValue(TripWireHookBlock.POWERED, false)).setValue(TripWireHookBlock.ATTACHED, false); // MagmaCube - decompile error
         final LevelReader levelReader = blockPlaceContext.getLevel();
         final BlockPos blockPos = blockPlaceContext.getClickedPos();
         final Direction[] nearestLookingDirections;
@@ -87,7 +87,7 @@ public class TripWireHookBlock extends Block
         for (final Direction direction : nearestLookingDirections) {
             if (direction.getAxis().isHorizontal()) {
                 final Direction direction2 = direction.getOpposite();
-                blockState = ((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)TripWireHookBlock.FACING, direction2);
+                blockState = (blockState).setValue(TripWireHookBlock.FACING, direction2); // MagmaCube - decompile error
                 if (blockState.canSurvive(levelReader, blockPos)) {
                     return blockState;
                 }
@@ -114,7 +114,7 @@ public class TripWireHookBlock extends Block
             final BlockPos blockPos2 = blockPos.relative(direction, i3);
             BlockState blockState3 = level.getBlockState(blockPos2);
             if (blockState3.is(Blocks.TRIPWIRE_HOOK)) {
-                if (blockState3.getValue((Property<Comparable>)TripWireHookBlock.FACING) == direction.getOpposite()) {
+                if (blockState3.getValue(TripWireHookBlock.FACING) == direction.getOpposite()) { // MagmaCube - decompile error
                     i2 = i3;
                     break;
                 }
@@ -143,17 +143,17 @@ public class TripWireHookBlock extends Block
         }
         flag5 &= (i2 > 1);
         flag6 &= flag5;
-        final BlockState blockState4 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)TripWireHookBlock.ATTACHED, flag5)).setValue((Property<Comparable>)TripWireHookBlock.POWERED, flag6);
+        final BlockState blockState4 = ((this.defaultBlockState()).setValue(TripWireHookBlock.ATTACHED, flag5)).setValue(TripWireHookBlock.POWERED, flag6); // MagmaCube - decompile error
         if (i2 > 0) {
             final BlockPos blockPos3 = blockPos.relative(direction, i2);
             final Direction direction2 = direction.getOpposite();
-            level.setBlock(blockPos3, ((StateHolder<O, BlockState>)blockState4).setValue((Property<Comparable>)TripWireHookBlock.FACING, direction2), 3);
+            level.setBlock(blockPos3, (blockState4).setValue(TripWireHookBlock.FACING, direction2), 3); // MagmaCube - decompile error
             this.notifyNeighbors(level, blockPos3, direction2);
             this.playSound(level, blockPos3, flag5, flag6, flag3, flag4);
         }
         this.playSound(level, blockPos, flag5, flag6, flag3, flag4);
         if (!flag) {
-            level.setBlock(blockPos, ((StateHolder<O, BlockState>)blockState4).setValue((Property<Comparable>)TripWireHookBlock.FACING, direction), 3);
+            level.setBlock(blockPos, (blockState4).setValue(TripWireHookBlock.FACING, direction), 3); // MagmaCube - decompile error
             if (flag2) {
                 this.notifyNeighbors(level, blockPos, direction);
             }
@@ -163,7 +163,7 @@ public class TripWireHookBlock extends Block
                 final BlockPos blockPos4 = blockPos.relative(direction, i4);
                 final BlockState blockState5 = blockStates[i4];
                 if (blockState5 != null) {
-                    level.setBlock(blockPos4, ((StateHolder<O, BlockState>)blockState5).setValue((Property<Comparable>)TripWireHookBlock.ATTACHED, flag5), 3);
+                    level.setBlock(blockPos4, (blockState5).setValue(TripWireHookBlock.ATTACHED, flag5), 3); // MagmaCube - decompile error
                     if (!level.getBlockState(blockPos4).isAir()) {}
                 }
             }
@@ -222,7 +222,7 @@ public class TripWireHookBlock extends Block
         if (!blockState.getValue((Property<Boolean>)TripWireHookBlock.POWERED)) {
             return 0;
         }
-        if (blockState.getValue((Property<Comparable>)TripWireHookBlock.FACING) == direction) {
+        if (blockState.getValue(TripWireHookBlock.FACING) == direction) { // MagmaCube - decompile error
             return 15;
         }
         return 0;
@@ -235,7 +235,7 @@ public class TripWireHookBlock extends Block
     
     @Override
     public BlockState rotate(final BlockState blockState, final Rotation rotation) {
-        return ((StateHolder<O, BlockState>)blockState).setValue((Property<Comparable>)TripWireHookBlock.FACING, rotation.rotate(blockState.getValue((Property<Direction>)TripWireHookBlock.FACING)));
+        return (blockState).setValue(TripWireHookBlock.FACING, rotation.rotate(blockState.getValue((Property<Direction>)TripWireHookBlock.FACING))); // MagmaCube - decompile error
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/TwistingVines.java b/src/main/java/net/minecraft/world/level/block/TwistingVines.java
index cec37b21d85cc1cfbfea962787c1b414311a9fbc..c13ddfe67dd2680a65449f5f11de39c498604a24 100644
--- a/src/main/java/net/minecraft/world/level/block/TwistingVines.java
+++ b/src/main/java/net/minecraft/world/level/block/TwistingVines.java
@@ -3,7 +3,6 @@ package net.minecraft.world.level.block;
 import net.minecraft.world.level.block.state.BlockState;
 import java.util.Random;
 import net.minecraft.core.Direction;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class TwistingVines extends GrowingPlantHeadBlock
diff --git a/src/main/java/net/minecraft/world/level/block/TwistingVinesPlant.java b/src/main/java/net/minecraft/world/level/block/TwistingVinesPlant.java
index c365533e9ae86d673d3c5e5a17dfc719bde84fcf..733d4b5014bc9a331519edd9b0f2e29d926ae852 100644
--- a/src/main/java/net/minecraft/world/level/block/TwistingVinesPlant.java
+++ b/src/main/java/net/minecraft/world/level/block/TwistingVinesPlant.java
@@ -1,7 +1,6 @@
 package net.minecraft.world.level.block;
 
 import net.minecraft.core.Direction;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class TwistingVinesPlant extends GrowingPlantBodyBlock
diff --git a/src/main/java/net/minecraft/world/level/block/WallBlock.java b/src/main/java/net/minecraft/world/level/block/WallBlock.java
index 55cfc7afa40e5526354fddf80a0e01e80152d009..35f2c570a0c41b513077f13b5bcc973947687430 100644
--- a/src/main/java/net/minecraft/world/level/block/WallBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WallBlock.java
@@ -46,7 +46,7 @@ public class WallBlock extends Block implements SimpleWaterloggedBlock
     
     public WallBlock(final Properties properties) {
         super(properties);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)WallBlock.UP, true)).setValue(WallBlock.NORTH_WALL, WallSide.NONE)).setValue(WallBlock.EAST_WALL, WallSide.NONE)).setValue(WallBlock.SOUTH_WALL, WallSide.NONE)).setValue(WallBlock.WEST_WALL, WallSide.NONE)).setValue((Property<Comparable>)WallBlock.WATERLOGGED, false));
+        this.registerDefaultState(((((((this.stateDefinition.any()).setValue(WallBlock.UP, true)).setValue(WallBlock.NORTH_WALL, WallSide.NONE)).setValue(WallBlock.EAST_WALL, WallSide.NONE)).setValue(WallBlock.SOUTH_WALL, WallSide.NONE)).setValue(WallBlock.WEST_WALL, WallSide.NONE)).setValue(WallBlock.WATERLOGGED, false)); // MagmaCube - decompile error
         this.shapeByIndex = this.makeShapes(4.0f, 3.0f, 16.0f, 0.0f, 14.0f, 16.0f);
         this.collisionShapeByIndex = this.makeShapes(4.0f, 3.0f, 24.0f, 0.0f, 24.0f, 24.0f);
     }
@@ -75,7 +75,7 @@ public class WallBlock extends Block implements SimpleWaterloggedBlock
         final VoxelShape voxelShape7 = Block.box(f9, f4, f9, f10, f6, 16.0);
         final VoxelShape voxelShape8 = Block.box(0.0, f4, f9, f10, f6, f10);
         final VoxelShape voxelShape9 = Block.box(f9, f4, f9, 16.0, f6, f10);
-        final ImmutableMap.Builder<BlockState, VoxelShape> builder = (ImmutableMap.Builder<BlockState, VoxelShape>)ImmutableMap.builder();
+        final ImmutableMap.Builder<BlockState, VoxelShape> builder = ImmutableMap.builder(); // MagmaCube - decompile error
         for (final Boolean flag : WallBlock.UP.getPossibleValues()) {
             for (final WallSide wallSide : WallBlock.EAST_WALL.getPossibleValues()) {
                 for (final WallSide wallSide2 : WallBlock.NORTH_WALL.getPossibleValues()) {
@@ -89,9 +89,9 @@ public class WallBlock extends Block implements SimpleWaterloggedBlock
                             if (flag) {
                                 voxelShape10 = Shapes.or(voxelShape10, voxelShape);
                             }
-                            final BlockState blockState = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)WallBlock.UP, flag)).setValue(WallBlock.EAST_WALL, wallSide)).setValue(WallBlock.WEST_WALL, wallSide3)).setValue(WallBlock.NORTH_WALL, wallSide2)).setValue(WallBlock.SOUTH_WALL, wallSide4);
-                            builder.put(((StateHolder<O, Object>)blockState).setValue((Property<Comparable>)WallBlock.WATERLOGGED, false), voxelShape10);
-                            builder.put(((StateHolder<O, Object>)blockState).setValue((Property<Comparable>)WallBlock.WATERLOGGED, true), voxelShape10);
+                            final BlockState blockState = (((((this.defaultBlockState()).setValue(WallBlock.UP, flag)).setValue(WallBlock.EAST_WALL, wallSide)).setValue(WallBlock.WEST_WALL, wallSide3)).setValue(WallBlock.NORTH_WALL, wallSide2)).setValue(WallBlock.SOUTH_WALL, wallSide4); // MagmaCube - decompile error
+                            builder.put((blockState).setValue(WallBlock.WATERLOGGED, false), voxelShape10); // MagmaCube - decompile error
+                            builder.put((blockState).setValue(WallBlock.WATERLOGGED, true), voxelShape10); // MagmaCube - decompile error
                         }
                     }
                 }
@@ -140,7 +140,7 @@ public class WallBlock extends Block implements SimpleWaterloggedBlock
         final boolean flag2 = this.connectsTo(blockState2, blockState2.isFaceSturdy(levelReader, blockPos3, Direction.WEST), Direction.WEST);
         final boolean flag3 = this.connectsTo(blockState3, blockState3.isFaceSturdy(levelReader, blockPos4, Direction.NORTH), Direction.NORTH);
         final boolean flag4 = this.connectsTo(blockState4, blockState4.isFaceSturdy(levelReader, blockPos5, Direction.EAST), Direction.EAST);
-        final BlockState blockState6 = ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)WallBlock.WATERLOGGED, fluidState.getType() == Fluids.WATER);
+        final BlockState blockState6 = (this.defaultBlockState()).setValue(WallBlock.WATERLOGGED, fluidState.getType() == Fluids.WATER); // MagmaCube - decompile error
         return this.updateShape(levelReader, blockState6, blockPos6, blockState5, flag, flag2, flag3, flag4);
     }
     
@@ -188,7 +188,7 @@ public class WallBlock extends Block implements SimpleWaterloggedBlock
     private BlockState updateShape(final LevelReader levelReader, final BlockState blockState, final BlockPos blockPos, final BlockState blockState2, final boolean flag, final boolean flag2, final boolean flag3, final boolean flag4) {
         final VoxelShape voxelShape = blockState2.getCollisionShape(levelReader, blockPos).getFaceShape(Direction.DOWN);
         final BlockState blockState3 = this.updateSides(blockState, flag, flag2, flag3, flag4, voxelShape);
-        return ((StateHolder<O, BlockState>)blockState3).setValue((Property<Comparable>)WallBlock.UP, this.shouldRaisePost(blockState3, blockState2, voxelShape));
+        return (blockState3).setValue(WallBlock.UP, this.shouldRaisePost(blockState3, blockState2, voxelShape)); // MagmaCube - decompile error
     }
     
     private boolean shouldRaisePost(final BlockState blockState, final BlockState blockState2, final VoxelShape voxelShape) {
@@ -213,7 +213,7 @@ public class WallBlock extends Block implements SimpleWaterloggedBlock
     }
     
     private BlockState updateSides(final BlockState blockState, final boolean flag, final boolean flag2, final boolean flag3, final boolean flag4, final VoxelShape voxelShape) {
-        return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)blockState).setValue(WallBlock.NORTH_WALL, this.makeWallState(flag, voxelShape, WallBlock.NORTH_TEST))).setValue(WallBlock.EAST_WALL, this.makeWallState(flag2, voxelShape, WallBlock.EAST_TEST))).setValue(WallBlock.SOUTH_WALL, this.makeWallState(flag3, voxelShape, WallBlock.SOUTH_TEST))).setValue(WallBlock.WEST_WALL, this.makeWallState(flag4, voxelShape, WallBlock.WEST_TEST));
+        return ((((blockState).setValue(WallBlock.NORTH_WALL, this.makeWallState(flag, voxelShape, WallBlock.NORTH_TEST))).setValue(WallBlock.EAST_WALL, this.makeWallState(flag2, voxelShape, WallBlock.EAST_TEST))).setValue(WallBlock.SOUTH_WALL, this.makeWallState(flag3, voxelShape, WallBlock.SOUTH_TEST))).setValue(WallBlock.WEST_WALL, this.makeWallState(flag4, voxelShape, WallBlock.WEST_TEST)); // MagmaCube - decompile error
     }
     
     private WallSide makeWallState(final boolean flag, final VoxelShape voxelShape, final VoxelShape voxelShape2) {
@@ -248,13 +248,13 @@ public class WallBlock extends Block implements SimpleWaterloggedBlock
     public BlockState rotate(final BlockState blockState, final Rotation rotation) {
         switch (rotation) {
             case CLOCKWISE_180: {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)blockState).setValue(WallBlock.NORTH_WALL, (Comparable)blockState.getValue((Property<V>)WallBlock.SOUTH_WALL))).setValue(WallBlock.EAST_WALL, (Comparable)blockState.getValue((Property<V>)WallBlock.WEST_WALL))).setValue(WallBlock.SOUTH_WALL, (Comparable)blockState.getValue((Property<V>)WallBlock.NORTH_WALL))).setValue(WallBlock.WEST_WALL, (Comparable)blockState.getValue((Property<V>)WallBlock.EAST_WALL));
+                return ((((blockState).setValue(WallBlock.NORTH_WALL, (Comparable)blockState.getValue(WallBlock.SOUTH_WALL))).setValue(WallBlock.EAST_WALL, (Comparable)blockState.getValue(WallBlock.WEST_WALL))).setValue(WallBlock.SOUTH_WALL, (Comparable)blockState.getValue(WallBlock.NORTH_WALL))).setValue(WallBlock.WEST_WALL, (Comparable)blockState.getValue(WallBlock.EAST_WALL)); // MagmaCube - decompile error
             }
             case COUNTERCLOCKWISE_90: {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)blockState).setValue(WallBlock.NORTH_WALL, (Comparable)blockState.getValue((Property<V>)WallBlock.EAST_WALL))).setValue(WallBlock.EAST_WALL, (Comparable)blockState.getValue((Property<V>)WallBlock.SOUTH_WALL))).setValue(WallBlock.SOUTH_WALL, (Comparable)blockState.getValue((Property<V>)WallBlock.WEST_WALL))).setValue(WallBlock.WEST_WALL, (Comparable)blockState.getValue((Property<V>)WallBlock.NORTH_WALL));
+                return ((((blockState).setValue(WallBlock.NORTH_WALL, (Comparable)blockState.getValue(WallBlock.EAST_WALL))).setValue(WallBlock.EAST_WALL, (Comparable)blockState.getValue(WallBlock.SOUTH_WALL))).setValue(WallBlock.SOUTH_WALL, (Comparable)blockState.getValue(WallBlock.WEST_WALL))).setValue(WallBlock.WEST_WALL, (Comparable)blockState.getValue(WallBlock.NORTH_WALL)); // MagmaCube - decompile error
             }
             case CLOCKWISE_90: {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)blockState).setValue(WallBlock.NORTH_WALL, (Comparable)blockState.getValue((Property<V>)WallBlock.WEST_WALL))).setValue(WallBlock.EAST_WALL, (Comparable)blockState.getValue((Property<V>)WallBlock.NORTH_WALL))).setValue(WallBlock.SOUTH_WALL, (Comparable)blockState.getValue((Property<V>)WallBlock.EAST_WALL))).setValue(WallBlock.WEST_WALL, (Comparable)blockState.getValue((Property<V>)WallBlock.SOUTH_WALL));
+                return ((((blockState).setValue(WallBlock.NORTH_WALL, (Comparable)blockState.getValue(WallBlock.WEST_WALL))).setValue(WallBlock.EAST_WALL, (Comparable)blockState.getValue(WallBlock.NORTH_WALL))).setValue(WallBlock.SOUTH_WALL, (Comparable)blockState.getValue(WallBlock.EAST_WALL))).setValue(WallBlock.WEST_WALL, (Comparable)blockState.getValue(WallBlock.SOUTH_WALL)); // MagmaCube - decompile error
             }
             default: {
                 return blockState;
@@ -266,10 +266,10 @@ public class WallBlock extends Block implements SimpleWaterloggedBlock
     public BlockState mirror(final BlockState blockState, final Mirror mirror) {
         switch (mirror) {
             case LEFT_RIGHT: {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)blockState).setValue(WallBlock.NORTH_WALL, (Comparable)blockState.getValue((Property<V>)WallBlock.SOUTH_WALL))).setValue(WallBlock.SOUTH_WALL, (Comparable)blockState.getValue((Property<V>)WallBlock.NORTH_WALL));
+                return ((blockState).setValue(WallBlock.NORTH_WALL, (Comparable)blockState.getValue(WallBlock.SOUTH_WALL))).setValue(WallBlock.SOUTH_WALL, (Comparable)blockState.getValue(WallBlock.NORTH_WALL)); // MagmaCube - decompile error
             }
             case FRONT_BACK: {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)blockState).setValue(WallBlock.EAST_WALL, (Comparable)blockState.getValue((Property<V>)WallBlock.WEST_WALL))).setValue(WallBlock.WEST_WALL, (Comparable)blockState.getValue((Property<V>)WallBlock.EAST_WALL));
+                return ((blockState).setValue(WallBlock.EAST_WALL, (Comparable)blockState.getValue(WallBlock.WEST_WALL))).setValue(WallBlock.WEST_WALL, (Comparable)blockState.getValue(WallBlock.EAST_WALL)); // MagmaCube - decompile error
             }
             default: {
                 return super.mirror(blockState, mirror);
diff --git a/src/main/java/net/minecraft/world/level/block/WaterlilyBlock.java b/src/main/java/net/minecraft/world/level/block/WaterlilyBlock.java
index 915dedaf599f7530ff9cb33cacd99e27f0c8b5e1..86e6b618d1bc72e867a1c5a5b10616ce0ba5524a 100644
--- a/src/main/java/net/minecraft/world/level/block/WaterlilyBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WaterlilyBlock.java
@@ -5,14 +5,12 @@ import net.minecraft.world.level.material.Material;
 import net.minecraft.world.level.material.Fluids;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.level.BlockGetter;
-import net.minecraft.core.Vec3i;
 import net.minecraft.world.entity.vehicle.Boat;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class WaterlilyBlock extends BushBlock
diff --git a/src/main/java/net/minecraft/world/level/block/WebBlock.java b/src/main/java/net/minecraft/world/level/block/WebBlock.java
index 89c6b3b4fea23d00472670c1c6e1b25162a89338..c62f9dd363c94977e5e8b30d9f974b81c18f2b32 100644
--- a/src/main/java/net/minecraft/world/level/block/WebBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WebBlock.java
@@ -5,7 +5,6 @@ import net.minecraft.world.entity.Entity;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class WebBlock extends Block
 {
diff --git a/src/main/java/net/minecraft/world/level/block/WeepingVines.java b/src/main/java/net/minecraft/world/level/block/WeepingVines.java
index e31342b35e4ff30c31dcdb5b0d660375e03931c4..d406a34e4c0f4b66164c38a8215d41da39c6b797 100644
--- a/src/main/java/net/minecraft/world/level/block/WeepingVines.java
+++ b/src/main/java/net/minecraft/world/level/block/WeepingVines.java
@@ -3,7 +3,6 @@ package net.minecraft.world.level.block;
 import net.minecraft.world.level.block.state.BlockState;
 import java.util.Random;
 import net.minecraft.core.Direction;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class WeepingVines extends GrowingPlantHeadBlock
diff --git a/src/main/java/net/minecraft/world/level/block/WeepingVinesPlant.java b/src/main/java/net/minecraft/world/level/block/WeepingVinesPlant.java
index 2b3b30c6a100fd36c4b67b4812cd8e45d1be15c3..97d8b2be282d7486c53c19b3d78610f85716a288 100644
--- a/src/main/java/net/minecraft/world/level/block/WeepingVinesPlant.java
+++ b/src/main/java/net/minecraft/world/level/block/WeepingVinesPlant.java
@@ -1,7 +1,6 @@
 package net.minecraft.world.level.block;
 
 import net.minecraft.core.Direction;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class WeepingVinesPlant extends GrowingPlantBodyBlock
diff --git a/src/main/java/net/minecraft/world/level/block/WitherWallSkullBlock.java b/src/main/java/net/minecraft/world/level/block/WitherWallSkullBlock.java
index f1e958cbabd8641112a76ba9bbfe04136c434fef..f15c5a60736ebe78c80674ac90b14a9fef712a46 100644
--- a/src/main/java/net/minecraft/world/level/block/WitherWallSkullBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WitherWallSkullBlock.java
@@ -6,7 +6,6 @@ import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class WitherWallSkullBlock extends WallSkullBlock
 {
diff --git a/src/main/java/net/minecraft/world/level/block/WoodButtonBlock.java b/src/main/java/net/minecraft/world/level/block/WoodButtonBlock.java
index 9054356bcb0e0c524a23c7936f4cf9f6a01999ba..c922b7059512cf31b42acf1ae78a535452dd4b6d 100644
--- a/src/main/java/net/minecraft/world/level/block/WoodButtonBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WoodButtonBlock.java
@@ -2,7 +2,6 @@ package net.minecraft.world.level.block;
 
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundEvent;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 
 public class WoodButtonBlock extends ButtonBlock
 {
diff --git a/src/main/java/net/minecraft/world/level/block/WoolCarpetBlock.java b/src/main/java/net/minecraft/world/level/block/WoolCarpetBlock.java
index 3e2b6538042f8443ae65ec25fab6f8265a689991..6f102a63ee888de18aceebad1f20ca2e34114e3f 100644
--- a/src/main/java/net/minecraft/world/level/block/WoolCarpetBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WoolCarpetBlock.java
@@ -7,7 +7,6 @@ import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.item.DyeColor;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
diff --git a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
index 74c94b886e382471369c58afc01747a1fc6add8d..9c48476e6237e247a623dffb66e53a8c51e0954f 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -115,7 +115,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
     }
     
     public static Map<Item, Integer> getFuel() {
-        final Map<Item, Integer> map = (Map<Item, Integer>)Maps.newLinkedHashMap();
+        final Map<Item, Integer> map = Maps.newLinkedHashMap(); // MagmaCube - decompile error
         add(map, Items.LAVA_BUCKET, 20000);
         add(map, Blocks.COAL_BLOCK, 16000);
         add(map, Items.BLAZE_ROD, 2400);
@@ -243,7 +243,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         if (!this.level.isClientSide) {
             final ItemStack itemStack = this.items.get(1);
             if (this.isLit() || (!itemStack.isEmpty() && !this.items.get(0).isEmpty())) {
-                final Recipe<?> recipe = (Recipe<?>)this.level.getRecipeManager().getRecipeFor(this.recipeType, this, this.level).orElse((AbstractCookingRecipe)null);
+                final Recipe<?> recipe = (Recipe<?>)this.level.getRecipeManager().getRecipeFor(this.recipeType, this, this.level).orElse(null); // MagmaCube - decompile error
                 if (!this.isLit() && this.canBurn(recipe)) {
                     this.litTime = this.getBurnDuration(itemStack);
                     this.litDuration = this.litTime;
@@ -277,7 +277,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
             }
             if (flag != this.isLit()) {
                 flag2 = true;
-                this.level.setBlock(this.worldPosition, ((StateHolder<O, BlockState>)this.level.getBlockState(this.worldPosition)).setValue((Property<Comparable>)AbstractFurnaceBlock.LIT, this.isLit()), 3);
+                this.level.setBlock(this.worldPosition, (this.level.getBlockState(this.worldPosition)).setValue(AbstractFurnaceBlock.LIT, this.isLit()), 3); // MagmaCube - decompile error
             }
         }
         if (flag2) {
@@ -328,7 +328,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
     }
     
     protected int getTotalCookTime() {
-        return this.level.getRecipeManager().getRecipeFor(this.recipeType, this, this.level).map((Function<? super AbstractCookingRecipe, ? extends Integer>)AbstractCookingRecipe::getCookingTime).orElse(200);
+        return this.level.getRecipeManager().getRecipeFor(this.recipeType, this, this.level).map(AbstractCookingRecipe::getCookingTime).orElse(200); // MagmaCube - decompile error
     }
     
     public static boolean isFuel(final ItemStack itemStack) {
@@ -454,13 +454,13 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
     }
     
     public List<Recipe<?>> getRecipesToAwardAndPopExperience(final Level level, final Vec3 vec3) {
-        final List<Recipe<?>> list = (List<Recipe<?>>)Lists.newArrayList();
+        final List<Recipe<?>> list = Lists.newArrayList(); // MagmaCube - decompile error
         for (final Object2IntMap.Entry<ResourceLocation> entry : this.recipesUsed.object2IntEntrySet()) {
-            final List<AbstractCookingRecipe> list2;
-            final Object2IntMap.Entry entry2;
             level.getRecipeManager().byKey((ResourceLocation)entry.getKey()).ifPresent(recipe -> {
-                list2.add(recipe);
-                createExperience(level, vec3, entry2.getIntValue(), recipe.getExperience());
+                // MagmaCube start - decompile error
+                list.add(recipe);
+                createExperience(level, vec3, entry.getIntValue(), ((AbstractCookingRecipe) recipe).getExperience());
+                // MagmaCube end - decompile error
                 return;
             });
         }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BannerBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BannerBlockEntity.java
index f38bc3aacfae87966b5f995a9658a8a225d3fc8a..09a5690f69a829801cdd312623cc053f9281b67d 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BannerBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BannerBlockEntity.java
@@ -133,7 +133,7 @@ public class BannerBlockEntity extends BlockEntity implements Nameable
     }
     
     public static List<Pair<BannerPattern, DyeColor>> createPatterns(final DyeColor dyeColor, @Nullable final ListTag listTag) {
-        final List<Pair<BannerPattern, DyeColor>> list = (List<Pair<BannerPattern, DyeColor>>)Lists.newArrayList();
+        final List<Pair<BannerPattern, DyeColor>> list = Lists.newArrayList(); // MagmaCube - decompile error
         list.add((Pair<BannerPattern, DyeColor>)Pair.of(BannerPattern.BASE, dyeColor));
         if (listTag != null) {
             for (int i = 0; i < listTag.size(); ++i) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BannerPattern.java b/src/main/java/net/minecraft/world/level/block/entity/BannerPattern.java
index 47556a936c59f83020eb8fe70a69f296e3dee2c9..495f7ce19cd96ffdbc6aa20600389ebbae27a1c2 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BannerPattern.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BannerPattern.java
@@ -109,7 +109,7 @@ public enum BannerPattern
         private final List<Pair<BannerPattern, DyeColor>> patterns;
         
         public Builder() {
-            this.patterns = (List<Pair<BannerPattern, DyeColor>>)Lists.newArrayList();
+            this.patterns = Lists.newArrayList(); // MagmaCube - decompile error
         }
         
         public Builder addPattern(final BannerPattern bannerPattern, final DyeColor dyeColor) {
@@ -123,7 +123,7 @@ public enum BannerPattern
                 final CompoundTag compoundTag = new CompoundTag();
                 compoundTag.putString("Pattern", ((BannerPattern)pair.getLeft()).hashname);
                 compoundTag.putInt("Color", ((DyeColor)pair.getRight()).getId());
-                ((AbstractList<CompoundTag>)listTag).add(compoundTag);
+                listTag.add(compoundTag); // MagmaCube - decompile error
             }
             return listTag;
         }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BlastFurnaceBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BlastFurnaceBlockEntity.java
index 4d53045907dc3abb993993e338fab1b6a8ba1e81..f855d5f907d6fa4f944fcabdb093a00e9bfefc9e 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BlastFurnaceBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BlastFurnaceBlockEntity.java
@@ -1,13 +1,11 @@
 package net.minecraft.world.level.block.entity;
 
-import net.minecraft.world.Container;
 import net.minecraft.world.inventory.BlastFurnaceMenu;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.network.chat.Component;
-import net.minecraft.world.item.crafting.AbstractCookingRecipe;
 import net.minecraft.world.item.crafting.RecipeType;
 
 public class BlastFurnaceBlockEntity extends AbstractFurnaceBlockEntity
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BlockEntityType.java b/src/main/java/net/minecraft/world/level/block/entity/BlockEntityType.java
index 853dbf378a0433ee8d26f3d71fe9d42411f13781..e085ad1864982facdbd59f2a5707c29ab19354aa 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BlockEntityType.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BlockEntityType.java
@@ -142,7 +142,7 @@ public class BlockEntityType<T extends BlockEntity>
         }
         
         public static <T extends BlockEntity> Builder<T> of(final Supplier<? extends T> supplier, final Block... blocks) {
-            return new Builder<T>(supplier, (Set<Block>)ImmutableSet.copyOf((Object[])blocks));
+            return new Builder<T>(supplier, (Set<Block>)ImmutableSet.copyOf(blocks)); // MagmaCube - decompile error
         }
         
         public BlockEntityType<T> build(final Type<?> type) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/CommandBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/CommandBlockEntity.java
index 5b322650973f4d9921e429217311e48add56079e..42dcd77cbf021c573d1fb77b369752b118d62524 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/CommandBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/CommandBlockEntity.java
@@ -183,7 +183,7 @@ extends BlockEntity {
     public static enum Mode {
         SEQUENCE,
         AUTO,
-        REDSTONE;
+        REDSTONE
 
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/DispenserBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/DispenserBlockEntity.java
index ae6c828968eaabc4755071137f94c5057487f432..5e20d40ea543cf11db024c6e7c6956a30e610d5b 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/DispenserBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/DispenserBlockEntity.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.block.entity;
 
-import net.minecraft.world.Container;
 import net.minecraft.world.inventory.DispenserMenu;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.entity.player.Inventory;
@@ -9,7 +8,6 @@ import net.minecraft.nbt.CompoundTag;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.network.chat.Component;
-import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.core.NonNullList;
 import java.util.Random;
diff --git a/src/main/java/net/minecraft/world/level/block/entity/FurnaceBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/FurnaceBlockEntity.java
index 4d11cb975139b25eb31cde4f3fc7d5d0d756c539..a331afa75b489b30a7d5d9241ff7de646bf3c094 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/FurnaceBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/FurnaceBlockEntity.java
@@ -1,12 +1,10 @@
 package net.minecraft.world.level.block.entity;
 
-import net.minecraft.world.Container;
 import net.minecraft.world.inventory.FurnaceMenu;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.network.chat.Component;
-import net.minecraft.world.item.crafting.AbstractCookingRecipe;
 import net.minecraft.world.item.crafting.RecipeType;
 
 public class FurnaceBlockEntity extends AbstractFurnaceBlockEntity
diff --git a/src/main/java/net/minecraft/world/level/block/entity/JigsawBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/JigsawBlockEntity.java
index f068b9d29cd334bdf8d393e72dd674e236802b11..88c4749076d238710a3b526708f86dba2dbd8eba 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/JigsawBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/JigsawBlockEntity.java
@@ -120,7 +120,7 @@ extends BlockEntity {
         StructureFeatureManager structureFeatureManager = serverLevel.structureFeatureManager();
         Random random = serverLevel.getRandom();
         BlockPos blockPos = this.getBlockPos();
-        ArrayList list = Lists.newArrayList();
+        ArrayList<PoolElementStructurePiece> list = Lists.newArrayList(); // MagmaCube - type
         StructureTemplate structureTemplate = new StructureTemplate();
         structureTemplate.fillFromWorld(serverLevel, blockPos, new BlockPos(1, 1, 1), false, null);
         SinglePoolElement structurePoolElement = new SinglePoolElement(structureTemplate);
diff --git a/src/main/java/net/minecraft/world/level/block/entity/JukeboxBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/JukeboxBlockEntity.java
index 487224f975be7c4d83c5d924d996913f35aa0c64..0c457b258d5ba7cc059041a3788ad223ea8e601c 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/JukeboxBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/JukeboxBlockEntity.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.block.entity;
 
-import net.minecraft.nbt.Tag;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.item.ItemStack;
diff --git a/src/main/java/net/minecraft/world/level/block/entity/SmokerBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/SmokerBlockEntity.java
index a177c2a56a11cd1909b255de54a0c4612ee94284..fc3a5790ab264546db325c966120c0164693746c 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/SmokerBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/SmokerBlockEntity.java
@@ -1,13 +1,11 @@
 package net.minecraft.world.level.block.entity;
 
-import net.minecraft.world.Container;
 import net.minecraft.world.inventory.SmokerMenu;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.network.chat.Component;
-import net.minecraft.world.item.crafting.AbstractCookingRecipe;
 import net.minecraft.world.item.crafting.RecipeType;
 
 public class SmokerBlockEntity extends AbstractFurnaceBlockEntity
diff --git a/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java
index ba6017708fee1263f5ba423f2223d6a47becb74a..e187d15f97446375a4cc3332d0cfc9dc57c3d1f4 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java
@@ -321,7 +321,7 @@ extends BlockEntity {
         BoundingBox boundingBox2;
         if (list.size() > 1) {
             BlockPos blockPos2 = list.get(0).getBlockPos();
-            BoundingBox boundingBox = new BoundingBox(blockPos2, blockPos2);
+            boundingBox2 = new BoundingBox(blockPos2, blockPos2); // MagmaCube - decompile error
         } else {
             boundingBox2 = new BoundingBox(blockPos, blockPos);
         }
@@ -355,7 +355,7 @@ extends BlockEntity {
      * WARNING - void declaration
      */
     public boolean saveStructure(boolean flag) {
-        void structureTemplate2;
+        StructureTemplate structureTemplate2; // MagmaCube - decompile error
         if (this.mode != StructureMode.SAVE || this.level.isClientSide || this.structureName == null) {
             return false;
         }
@@ -363,7 +363,7 @@ extends BlockEntity {
         ServerLevel serverLevel = (ServerLevel)this.level;
         StructureManager structureManager = serverLevel.getStructureManager();
         try {
-            StructureTemplate structureTemplate = structureManager.getOrCreate(this.structureName);
+            structureTemplate2 = structureManager.getOrCreate(this.structureName); // MagmaCube - decompile error
         }
         catch (ResourceLocationException resourceLocationException) {
             return false;
@@ -396,13 +396,13 @@ extends BlockEntity {
      * WARNING - void declaration
      */
     public boolean loadStructure(ServerLevel serverLevel, boolean flag) {
-        void structureTemplate2;
+        StructureTemplate structureTemplate2; // MagmaCube - decompile error
         if (this.mode != StructureMode.LOAD || this.structureName == null) {
             return false;
         }
         StructureManager structureManager = serverLevel.getStructureManager();
         try {
-            StructureTemplate structureTemplate = structureManager.get(this.structureName);
+            structureTemplate2 = structureManager.get(this.structureName); // MagmaCube - decompile error
         }
         catch (ResourceLocationException resourceLocationException) {
             return false;
@@ -489,7 +489,7 @@ extends BlockEntity {
         UPDATE_DATA,
         SAVE_AREA,
         LOAD_AREA,
-        SCAN_AREA;
+        SCAN_AREA
 
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/grower/AbstractMegaTreeGrower.java b/src/main/java/net/minecraft/world/level/block/grower/AbstractMegaTreeGrower.java
index d3e2221237fed135717d78e3ac4f6112b645a96b..e7efd344449ac71b50fe0ac4ab5d9e8f17c4ca4a 100644
--- a/src/main/java/net/minecraft/world/level/block/grower/AbstractMegaTreeGrower.java
+++ b/src/main/java/net/minecraft/world/level/block/grower/AbstractMegaTreeGrower.java
@@ -1,7 +1,6 @@
 package net.minecraft.world.level.block.grower;
 
 import net.minecraft.world.level.block.Block;
-import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Blocks;
 import javax.annotation.Nullable;
 import net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration;
diff --git a/src/main/java/net/minecraft/world/level/block/grower/AbstractTreeGrower.java b/src/main/java/net/minecraft/world/level/block/grower/AbstractTreeGrower.java
index 7a1abacf4c2f75a0a8f4fbc600c4e5f5e02269c2..d21bd33c1edc35b10b7e25a324b9e97e32bf6151 100644
--- a/src/main/java/net/minecraft/world/level/block/grower/AbstractTreeGrower.java
+++ b/src/main/java/net/minecraft/world/level/block/grower/AbstractTreeGrower.java
@@ -1,10 +1,6 @@
 package net.minecraft.world.level.block.grower;
 
-import java.util.Iterator;
-import net.minecraft.world.level.block.Block;
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.BlockTags;
-import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.state.BlockState;
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockState.java b/src/main/java/net/minecraft/world/level/block/state/BlockState.java
index 2963558fdfae91137e9537565907bd88e437b1f0..4f8c34d1860f1caa0a64a1c7fd67ed0a09f20a5e 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockState.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockState.java
@@ -21,6 +21,6 @@ public class BlockState extends BlockBehaviour.BlockStateBase
     }
     
     static {
-        CODEC = StateHolder.codec((com.mojang.serialization.Codec<Object>)Registry.BLOCK, Block::defaultBlockState).stable();
+        CODEC = StateHolder.codec(Registry.BLOCK, Block::defaultBlockState).stable(); // MagmaCube - decompile fix
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java b/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
index 130d4cc0b253da44992f1ce5b52b00f54c1cb924..30dc4e06b4de69d83afc4e3394773a2060ddc3c1 100644
--- a/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
+++ b/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
@@ -37,36 +37,40 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
     protected StateDefinition(Function<O, S> function, O object, Factory<O, S> factory, Map<String, Property<?>> map) {
         this.owner = object;
         this.propertiesByName = ImmutableSortedMap.copyOf(map);
-        Supplier<StateHolder> supplier = () -> (StateHolder)function.apply(object);
-        MapCodec<StateHolder> mapCodec = MapCodec.of((MapEncoder)Encoder.empty(), (MapDecoder)Decoder.unit(supplier));
-        for (Map.Entry entry : this.propertiesByName.entrySet()) {
-            mapCodec = StateDefinition.appendPropertyCodec(mapCodec, supplier, (String)entry.getKey(), (Property)entry.getValue());
+        // MagmaCube start - type
+        Supplier<S> supplier = () -> function.apply(object);
+        MapCodec<S> mapCodec = MapCodec.of(Encoder.empty(), Decoder.unit(supplier));
+        for (Map.Entry<String, Property<?>> entry : this.propertiesByName.entrySet()) {
+            mapCodec = StateDefinition.appendPropertyCodec(mapCodec, supplier, entry.getKey(), entry.getValue());
         }
-        MapCodec<StateHolder> mapCodec2 = mapCodec;
-        LinkedHashMap map2 = Maps.newLinkedHashMap();
-        ArrayList list3 = Lists.newArrayList();
-        Stream<List<List<Object>>> stream = Stream.of(Collections.emptyList());
-        for (Property property : this.propertiesByName.values()) {
+        MapCodec<S> mapCodec2 = mapCodec;
+        LinkedHashMap<Map<Property<?>, Comparable<?>>, S> map2 = Maps.newLinkedHashMap();
+        ArrayList<S> list3 = Lists.newArrayList();
+        Stream<List<Pair<Property<?>, Comparable<?>>>> stream = Stream.of(Collections.emptyList());
+        for (Property<?> property : this.propertiesByName.values()) {
             stream = stream.flatMap(list -> property.getPossibleValues().stream().map(comparable -> {
-                ArrayList list2 = Lists.newArrayList((Iterable)list);
+                ArrayList<Pair<Property<?>, Comparable<?>>> list2 = Lists.newArrayList(list);
+        // MagmaCube end - type
                 list2.add(Pair.of(property, comparable));
                 return list2;
             }));
         }
         stream.forEach(list2 -> {
-            ImmutableMap immutableMap = (ImmutableMap)list2.stream().collect(ImmutableMap.toImmutableMap(Pair::getFirst, Pair::getSecond));
-            StateHolder stateHolder = (StateHolder)factory.create(object, immutableMap, mapCodec2);
+            // MagmaCube start - type
+            ImmutableMap<Property<?>, Comparable<?>> immutableMap = list2.stream().collect(ImmutableMap.toImmutableMap(Pair::getFirst, Pair::getSecond));
+            S stateHolder = factory.create(object, immutableMap, mapCodec2);
+            // MagmaCube end - type
             map2.put(immutableMap, stateHolder);
             list3.add(stateHolder);
         });
-        for (StateHolder stateHolder : list3) {
+        for (StateHolder<O, S> stateHolder : list3) { // MagmaCube - type
             stateHolder.populateNeighbours(map2);
         }
-        this.states = ImmutableList.copyOf((Collection)list3);
+        this.states = ImmutableList.copyOf(list3); // MagmaCube - type
     }
 
     private static <S extends StateHolder<?, S>, T extends Comparable<T>> MapCodec<S> appendPropertyCodec(MapCodec<S> mapCodec, Supplier<S> supplier, String s, Property<T> property) {
-        return Codec.mapPair(mapCodec, (MapCodec)property.valueCodec().fieldOf(s).setPartial(() -> property.value((StateHolder)supplier.get()))).xmap(pair -> (StateHolder)((StateHolder)pair.getFirst()).setValue(property, ((Property.Value)pair.getSecond()).value()), stateHolder -> Pair.of(stateHolder, property.value((StateHolder<?, ?>)stateHolder)));
+        return Codec.mapPair(mapCodec, property.valueCodec().fieldOf(s).setPartial(() -> property.value(supplier.get()))).xmap(pair -> pair.getFirst().setValue(property, pair.getSecond().value()), stateHolder -> Pair.of(stateHolder, property.value(stateHolder))); // MagmaCube - type
     }
 
     public ImmutableList<S> getPossibleStates() {
@@ -119,7 +123,7 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
             if (collection.size() <= 1) {
                 throw new IllegalArgumentException(this.owner + " attempted use property " + s + " with <= 1 possible values");
             }
-            for (Comparable comparable : collection) {
+            for (T comparable : collection) { // MagmaCube - type
                 String s2 = property.getName(comparable);
                 if (NAME_PATTERN.matcher(s2).matches()) continue;
                 throw new IllegalArgumentException(this.owner + " has property: " + s + " with invalidly named value: " + s2);
diff --git a/src/main/java/net/minecraft/world/level/block/state/StateHolder.java b/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
index c6b6d8cc8ce28344e2e206c9b659353a251bbbc4..de7f3f3632814f598b08fc3d3f42aabe6c9caac9 100644
--- a/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
+++ b/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
@@ -31,12 +31,7 @@ public abstract class StateHolder<O, S> {
         }
 
         private <T extends Comparable<T>> String getName(Property<T> property, Comparable<?> comparable) {
-            return property.getName(comparable);
-        }
-
-        @Override
-        public /* synthetic */ Object apply(@Nullable Object object) {
-            return this.apply((Map.Entry)object);
+            return property.getName((T) comparable); // MagmaCube - decompile error
         }
     };
     protected final O owner;
@@ -51,7 +46,7 @@ public abstract class StateHolder<O, S> {
     }
 
     public <T extends Comparable<T>> S cycle(Property<T> property) {
-        return this.setValue(property, (Comparable)StateHolder.findNextInCollection(property.getPossibleValues(), this.getValue(property)));
+        return this.setValue(property, StateHolder.findNextInCollection(property.getPossibleValues(), this.getValue(property))); // MagmaCube - decompile error
     }
 
     protected static <T> T findNextInCollection(Collection<T> collection, T object) {
@@ -122,7 +117,7 @@ public abstract class StateHolder<O, S> {
         }
         HashBasedTable table = HashBasedTable.create();
         for (Map.Entry entry : this.values.entrySet()) {
-            Property property = (Property)entry.getKey();
+            Property<?> property = (Property)entry.getKey(); // MagmaCube - type
             for (Comparable comparable : property.getPossibleValues()) {
                 if (comparable == entry.getValue()) continue;
                 table.put(property, comparable, map.get(this.makeNeighbourValues(property, comparable)));
@@ -143,7 +138,7 @@ public abstract class StateHolder<O, S> {
 
     protected static <O, S extends StateHolder<O, S>> Codec<S> codec(Codec<O> codec, Function<O, S> function) {
         return codec.dispatch("Name", stateHolder -> stateHolder.owner, object -> {
-            StateHolder stateHolder = (StateHolder)function.apply(object);
+            S stateHolder = function.apply(object); // MagmaCube - type
             if (stateHolder.getValues().isEmpty()) {
                 return Codec.unit(stateHolder);
             }
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/BlockStateProperties.java b/src/main/java/net/minecraft/world/level/block/state/properties/BlockStateProperties.java
index 7d3c3a013b0ee8f65267c1c7b1b7fcdfe27e84fb..2bc3edb327e5be8027c872cb2a9f43e00b69ff37 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/BlockStateProperties.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/BlockStateProperties.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.block.state.properties;
 
-import java.util.function.Predicate;
 import net.minecraft.core.FrontAndTop;
 import net.minecraft.core.Direction;
 
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/NoteBlockInstrument.java b/src/main/java/net/minecraft/world/level/block/state/properties/NoteBlockInstrument.java
index 86cccd1b228614a28c87bb6086fdf17fec775721..b5a242ea636353066ff01c96b8d68261e34a504e 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/NoteBlockInstrument.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/NoteBlockInstrument.java
@@ -2,8 +2,6 @@ package net.minecraft.world.level.block.state.properties;
 
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.world.level.material.Material;
-import net.minecraft.world.level.block.Block;
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/Property.java b/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
index dea05d3d7f1aa36f53c82aab54ac65e259d65c91..9d0d75e899e32134853a29a0b75311969f5dcca2 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
@@ -18,18 +18,18 @@ public abstract class Property<T extends Comparable<T>>
     private final Codec<Value<T>> valueCodec;
     
     protected Property(final String s, final Class<T> clazz) {
-        this.codec = (Codec<T>)Codec.STRING.comapFlatMap(s -> this.getValue(s).map((Function<? super T, ?>)DataResult::success).orElseGet(() -> DataResult.error("Unable to read property: " + this + " with value: " + s)), (Function)this::getName);
-        this.valueCodec = (Codec<Value<T>>)this.codec.xmap((Function)this::value, (Function)Value::value);
+        this.codec = (Codec<T>)Codec.STRING.comapFlatMap(s1 -> this.getValue(s1).map(DataResult::success).orElseGet(() -> DataResult.error("Unable to read property: " + this + " with value: " + s1)), this::getName); // MagmaCube - decompile error
+        this.valueCodec = (Codec<Value<T>>)this.codec.xmap(this::value, Value::value); // MagmaCube - decompile error
         this.clazz = clazz;
         this.name = s;
     }
     
     public Value<T> value(final T comparable) {
-        return new Value<T>(this, (Comparable)comparable);
+        return new Value<T>(this, comparable); // MagmaCube - decompile error
     }
     
     public Value<T> value(final StateHolder<?, ?> stateHolder) {
-        return new Value<T>(this, (Comparable)stateHolder.getValue((Property<Comparable>)this));
+        return new Value<T>(this, stateHolder.getValue(this)); // MagmaCube - decompile error
     }
     
     public Stream<Value<T>> getAllValues() {
diff --git a/src/main/java/net/minecraft/world/level/border/WorldBorder.java b/src/main/java/net/minecraft/world/level/border/WorldBorder.java
index 45c65e0ac28bea7b2111c194a42f464910cbeb42..ce1936e3e629dc5716d26e6eefded468b2ae1028 100644
--- a/src/main/java/net/minecraft/world/level/border/WorldBorder.java
+++ b/src/main/java/net/minecraft/world/level/border/WorldBorder.java
@@ -29,7 +29,7 @@ public class WorldBorder
     public static final Settings DEFAULT_SETTINGS;
     
     public WorldBorder() {
-        this.listeners = (List<BorderChangeListener>)Lists.newArrayList();
+        this.listeners = Lists.newArrayList(); // MagmaCube - decompile error
         this.damagePerBlock = 0.2;
         this.damageSafeZone = 5.0;
         this.warningTime = 15;
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 5fcc4f4aa5b6599d4ef06284c61aad8dc69d131f..525f488a8274fe04e7988809c09e05a45e95fc46 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -453,8 +453,8 @@ implements ChunkAccess {
             for (Entity entity : this.entitySections[i3].find(Entity.class)) {
                 if (entityType != null && entity.getType() != entityType) continue;
                 Entity entity2 = entity;
-                if (!entity.getBoundingBox().intersects(aabb) || !predicate.test(entity2)) continue;
-                list.add(entity2);
+                if (!entity.getBoundingBox().intersects(aabb) || !predicate.test((T) entity2)) continue; // MagmaCube - decompile error
+                list.add((T) entity2); // MagmaCube - decompile error
             }
         }
     }
@@ -466,8 +466,8 @@ implements ChunkAccess {
         i2 = Mth.clamp(i2, 0, this.entitySections.length - 1);
         for (int i3 = i; i3 <= i2; ++i3) {
             for (Entity entity : this.entitySections[i3].find(clazz)) {
-                if (!entity.getBoundingBox().intersects(aabb) || predicate != null && !predicate.test(entity)) continue;
-                list.add(entity);
+                if (!entity.getBoundingBox().intersects(aabb) || predicate != null && !predicate.test((T) entity)) continue; // MagmaCube - decompile error
+                list.add((T) entity); // MagmaCube - decompile error
             }
         }
     }
@@ -655,9 +655,9 @@ implements ChunkAccess {
         if ("DUMMY".equals(compoundTag.getString("id"))) {
             Block block = blockState.getBlock();
             if (block instanceof EntityBlock) {
-                BlockEntity blockEntity = ((EntityBlock)(block)).newBlockEntity(this.level);
+                blockEntity3 = ((EntityBlock)(block)).newBlockEntity(this.level); // MagmaCube - decompile error
             } else {
-                Object blockEntity2 = null;
+                blockEntity3 = null; // MagmaCube - decompile error
                 LOGGER.warn("Tried to load a DUMMY block entity @ {} but found not block entity block {} at location", blockPos, blockState);
             }
         } else {
@@ -700,11 +700,11 @@ implements ChunkAccess {
     }
 
     public void packTicks(ServerLevel serverLevel) {
-        if (this.blockTicks == EmptyTickList.empty()) {
+        if (this.blockTicks.equals(EmptyTickList.empty())) { // MagmaCube - decompile error
             this.blockTicks = new ChunkTickList<Block>(Registry.BLOCK::getKey, ((ServerTickList)serverLevel.getBlockTicks()).fetchTicksInChunk(this.chunkPos, true, false), serverLevel.getGameTime());
             this.setUnsaved(true);
         }
-        if (this.liquidTicks == EmptyTickList.empty()) {
+        if (this.liquidTicks.equals(EmptyTickList.empty())) { // MagmaCube - decompile error
             this.liquidTicks = new ChunkTickList<Fluid>(Registry.FLUID::getKey, ((ServerTickList)serverLevel.getLiquidTicks()).fetchTicksInChunk(this.chunkPos, true, false), serverLevel.getGameTime());
             this.setUnsaved(true);
         }
diff --git a/src/main/java/net/minecraft/world/level/chunk/ProtoTickList.java b/src/main/java/net/minecraft/world/level/chunk/ProtoTickList.java
index 38db1995710da6df0c5fe8f02d50844fe6446b11..d13dfccc38cef0a7199ca2b241a1f12c3c3b6d8a 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ProtoTickList.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ProtoTickList.java
@@ -1,7 +1,6 @@
 package net.minecraft.world.level.chunk;
 
 import net.minecraft.world.level.TickPriority;
-import it.unimi.dsi.fastutil.shorts.ShortListIterator;
 import net.minecraft.core.BlockPos;
 import java.util.function.Function;
 import net.minecraft.world.level.chunk.storage.ChunkSerializer;
diff --git a/src/main/java/net/minecraft/world/level/dimension/DimensionType.java b/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
index f26154540f5c41d08b4ed0452d7b40814443705c..f1c5b3ab751f48f99f20750e3347c8845736c37e 100644
--- a/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
+++ b/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
@@ -38,7 +38,8 @@ public class DimensionType {
     public static final ResourceLocation OVERWORLD_EFFECTS = new ResourceLocation("overworld");
     public static final ResourceLocation NETHER_EFFECTS = new ResourceLocation("the_nether");
     public static final ResourceLocation END_EFFECTS = new ResourceLocation("the_end");
-    public static final Codec<DimensionType> DIRECT_CODEC = RecordCodecBuilder.create(instance -> instance.group((App)Codec.LONG.optionalFieldOf("fixed_time").xmap(optional -> optional.map(OptionalLong::of).orElseGet(OptionalLong::empty), optionalLong -> optionalLong.isPresent() ? Optional.of(optionalLong.getAsLong()) : Optional.empty()).forGetter(dimensionType -> dimensionType.fixedTime), (App)Codec.BOOL.fieldOf("has_skylight").forGetter(DimensionType::hasSkyLight), (App)Codec.BOOL.fieldOf("has_ceiling").forGetter(DimensionType::hasCeiling), (App)Codec.BOOL.fieldOf("ultrawarm").forGetter(DimensionType::ultraWarm), (App)Codec.BOOL.fieldOf("natural").forGetter(DimensionType::natural), (App)Codec.doubleRange((double)1.0E-5f, (double)3.0E7).fieldOf("coordinate_scale").forGetter(DimensionType::coordinateScale), (App)Codec.BOOL.fieldOf("piglin_safe").forGetter(DimensionType::piglinSafe), (App)Codec.BOOL.fieldOf("bed_works").forGetter(DimensionType::bedWorks), (App)Codec.BOOL.fieldOf("respawn_anchor_works").forGetter(DimensionType::respawnAnchorWorks), (App)Codec.BOOL.fieldOf("has_raids").forGetter(DimensionType::hasRaids), (App)Codec.intRange((int)0, (int)256).fieldOf("logical_height").forGetter(DimensionType::logicalHeight), (App)ResourceLocation.CODEC.fieldOf("infiniburn").forGetter(dimensionType -> dimensionType.infiniburn), (App)ResourceLocation.CODEC.fieldOf("effects").orElse(OVERWORLD_EFFECTS).forGetter(dimensionType -> dimensionType.effectsLocation), (App)Codec.FLOAT.fieldOf("ambient_light").forGetter(dimensionType -> Float.valueOf(dimensionType.ambientLight))).apply((Applicative)instance, DimensionType::new));
+    // MagmaCube - decompile error
+    public static final Codec<DimensionType> DIRECT_CODEC = RecordCodecBuilder.create(instance -> instance.group(Codec.LONG.optionalFieldOf("fixed_time").xmap(optional -> optional.map(OptionalLong::of).orElseGet(OptionalLong::empty), optionalLong -> optionalLong.isPresent() ? Optional.of(optionalLong.getAsLong()) : Optional.empty()).forGetter(dimensionType -> dimensionType.fixedTime), Codec.BOOL.fieldOf("has_skylight").forGetter(DimensionType::hasSkyLight), Codec.BOOL.fieldOf("has_ceiling").forGetter(DimensionType::hasCeiling), Codec.BOOL.fieldOf("ultrawarm").forGetter(DimensionType::ultraWarm), Codec.BOOL.fieldOf("natural").forGetter(DimensionType::natural), Codec.doubleRange((double)1.0E-5f, (double)3.0E7).fieldOf("coordinate_scale").forGetter(DimensionType::coordinateScale), Codec.BOOL.fieldOf("piglin_safe").forGetter(DimensionType::piglinSafe), Codec.BOOL.fieldOf("bed_works").forGetter(DimensionType::bedWorks), Codec.BOOL.fieldOf("respawn_anchor_works").forGetter(DimensionType::respawnAnchorWorks), Codec.BOOL.fieldOf("has_raids").forGetter(DimensionType::hasRaids), Codec.intRange((int)0, (int)256).fieldOf("logical_height").forGetter(DimensionType::logicalHeight), ResourceLocation.CODEC.fieldOf("infiniburn").forGetter(dimensionType -> dimensionType.infiniburn), ResourceLocation.CODEC.fieldOf("effects").orElse(OVERWORLD_EFFECTS).forGetter(dimensionType -> dimensionType.effectsLocation), Codec.FLOAT.fieldOf("ambient_light").forGetter(dimensionType -> Float.valueOf(dimensionType.ambientLight))).apply((Applicative)instance, DimensionType::new));
     public static final float[] MOON_BRIGHTNESS_PER_PHASE = new float[]{1.0f, 0.75f, 0.5f, 0.25f, 0.0f, 0.25f, 0.5f, 0.75f};
     public static final ResourceKey<DimensionType> OVERWORLD_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("overworld"));
     public static final ResourceKey<DimensionType> NETHER_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("the_nether"));
diff --git a/src/main/java/net/minecraft/world/level/dimension/LevelStem.java b/src/main/java/net/minecraft/world/level/dimension/LevelStem.java
index d530866ab6da1e86e77df1701329c054f4b6bf98..10ea3920dab8ff2cc38bc75956bad3f915666dda 100644
--- a/src/main/java/net/minecraft/world/level/dimension/LevelStem.java
+++ b/src/main/java/net/minecraft/world/level/dimension/LevelStem.java
@@ -24,7 +24,8 @@ import net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator;
 import net.minecraft.world.level.levelgen.NoiseGeneratorSettings;
 
 public final class LevelStem {
-    public static final Codec<LevelStem> CODEC = RecordCodecBuilder.create(instance -> instance.group((App)DimensionType.CODEC.fieldOf("type").forGetter(LevelStem::typeSupplier), (App)ChunkGenerator.CODEC.fieldOf("generator").forGetter(LevelStem::generator)).apply((Applicative)instance, instance.stable(LevelStem::new)));
+    // MagmaCube - decompile error
+    public static final Codec<LevelStem> CODEC = RecordCodecBuilder.create(instance -> instance.group(DimensionType.CODEC.fieldOf("type").forGetter(LevelStem::typeSupplier), ChunkGenerator.CODEC.fieldOf("generator").forGetter(LevelStem::generator)).apply(instance, instance.stable(LevelStem::new)));
     public static final ResourceKey<LevelStem> OVERWORLD = ResourceKey.create(Registry.LEVEL_STEM_REGISTRY, new ResourceLocation("overworld"));
     public static final ResourceKey<LevelStem> NETHER = ResourceKey.create(Registry.LEVEL_STEM_REGISTRY, new ResourceLocation("the_nether"));
     public static final ResourceKey<LevelStem> END = ResourceKey.create(Registry.LEVEL_STEM_REGISTRY, new ResourceLocation("the_end"));
@@ -56,7 +57,7 @@ public final class LevelStem {
             if (levelStem == null) continue;
             mappedRegistry2.register(resourceKey, levelStem, mappedRegistry.lifecycle(levelStem));
         }
-        for (Map.Entry entry : mappedRegistry.entrySet()) {
+        for (Map.Entry<ResourceKey<LevelStem>, LevelStem> entry : mappedRegistry.entrySet()) { // MagmaCube - type
             ResourceKey resourceKey2 = (ResourceKey)entry.getKey();
             if (BUILTIN_ORDER.contains(resourceKey2)) continue;
             mappedRegistry2.register(resourceKey2, entry.getValue(), mappedRegistry.lifecycle((LevelStem)entry.getValue()));
diff --git a/src/main/java/net/minecraft/world/level/levelgen/GenerationStep.java b/src/main/java/net/minecraft/world/level/levelgen/GenerationStep.java
index 3fe550fdccd486d2ea836e84d91bfbb85cf9acf3..29f937ee5884d7c206fe55c2dcfb5e25866be73e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/GenerationStep.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/GenerationStep.java
@@ -52,7 +52,7 @@ public class GenerationStep {
         UNDERGROUND_ORES,
         UNDERGROUND_DECORATION,
         VEGETAL_DECORATION,
-        TOP_LAYER_MODIFICATION;
+        TOP_LAYER_MODIFICATION
 
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/Heightmap.java b/src/main/java/net/minecraft/world/level/levelgen/Heightmap.java
index a52ea3a8c0014fca27cf00efaa182ac475929123..9c2b7239a31b47cdf73b9a8e40339567df9a21b6 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/Heightmap.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/Heightmap.java
@@ -178,14 +178,13 @@ public class Heightmap
         
         static {
             CODEC = StringRepresentable.fromEnum(Types::values, Types::getFromKey);
-            final Types[] array;
-            int length;
-            int i;
-            Types types;
-            REVERSE_LOOKUP = Util.make((Map<String, Types>)Maps.newHashMap(), hashMap -> {
-                values();
-                for (length = array.length; i < length; ++i) {
-                    types = array[i];
+            // MagmaCube start - decompile error
+            REVERSE_LOOKUP = Util.make(Maps.newHashMap(), hashMap -> { // MagmaCube - decompile error
+                Types[] array = values();
+                int i = 0;
+                for (int length = array.length; i < length; ++i) {
+                    Types types = array[i];
+                    // MagmaCube end - decompile error
                     hashMap.put(types.serializationKey, types);
                 }
             });
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
index 363405e6fd5974cb97be5fc5b905abd7ab250343..b70c57222c1abd6ae45241109962fd1e5be120ee 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
@@ -166,12 +166,12 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator
         final double d6;
         final double d7;
         if (this.islandNoise != null) {
-            final double d = TheEndBiomeSource.getHeightValue(this.islandNoise, i, i2) - 8.0f;
-            if (d > 0.0) {
-                final double d2 = 0.25;
+            d6 = TheEndBiomeSource.getHeightValue(this.islandNoise, i, i2) - 8.0f; // MagmaCube - decompile error
+            if (d6 > 0.0) {
+                d7 = 0.25; // MagmaCube - decompile error
             }
             else {
-                final double d3 = 1.0;
+                d7 = 1.0; // MagmaCube - decompile error
             }
         }
         else {
@@ -189,8 +189,10 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator
                     final float f9;
                     final float f10;
                     if (noiseSettings.isAmplified() && f5 > 0.0f) {
-                        final float f7 = 1.0f + f5 * 2.0f;
-                        final float f8 = 1.0f + f6 * 4.0f;
+                        // MagmaCube start - decompile error
+                        f9 = 1.0f + f5 * 2.0f;
+                        f10 = 1.0f + f6 * 4.0f;
+                        // MagmaCube end - decompile error
                     }
                     else {
                         f9 = f5;
@@ -250,7 +252,7 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator
         final double d = this.depthNoise.getValue(i * 200, 10.0, i2 * 200, 1.0, 0.0, true);
         final double d3;
         if (d < 0.0) {
-            final double d2 = -d * 0.3;
+            d3 = -d * 0.3; // MagmaCube - decompile error
         }
         else {
             d3 = d;
@@ -279,8 +281,8 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator
         final int i4 = Math.floorDiv(i2, this.chunkWidth);
         final int i5 = Math.floorMod(i, this.chunkWidth);
         final int i6 = Math.floorMod(i2, this.chunkWidth);
-        final double d = i5 / this.chunkWidth;
-        final double d2 = i6 / this.chunkWidth;
+        final double d = (double) i5 / this.chunkWidth; // MagmaCube - math
+        final double d2 = (double) i6 / this.chunkWidth; // MagmaCube - math
         final double[][] d3 = { this.makeAndFillNoiseColumn(i3, i4), this.makeAndFillNoiseColumn(i3, i4 + 1), this.makeAndFillNoiseColumn(i3 + 1, i4), this.makeAndFillNoiseColumn(i3 + 1, i4 + 1) };
         for (int i7 = this.chunkCountY - 1; i7 >= 0; --i7) {
             final double d4 = d3[0][i7];
@@ -292,7 +294,7 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator
             final double d10 = d3[2][i7 + 1];
             final double d11 = d3[3][i7 + 1];
             for (int i8 = this.chunkHeight - 1; i8 >= 0; --i8) {
-                final double d12 = i8 / this.chunkHeight;
+                final double d12 = (double) i8 / this.chunkHeight; // MagmaCube - math
                 final double d13 = Mth.lerp3(d12, d, d2, d4, d8, d6, d10, d5, d9, d7, d11);
                 final int i9 = i7 * this.chunkHeight + i8;
                 final BlockState blockState = this.generateBaseState(d13, i9);
@@ -310,10 +312,10 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator
     protected BlockState generateBaseState(final double d, final int i) {
         final BlockState blockState3;
         if (d > 0.0) {
-            final BlockState blockState = this.defaultBlock;
+            blockState3 = this.defaultBlock; // MagmaCube - decompile error
         }
         else if (i < this.getSeaLevel()) {
-            final BlockState blockState2 = this.defaultFluid;
+            blockState3 = this.defaultFluid; // MagmaCube - decompile error
         }
         else {
             blockState3 = NoiseBasedChunkGenerator.AIR;
@@ -386,49 +388,40 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator
         final int i3 = i << 4;
         final int i4 = i2 << 4;
         for (final StructureFeature<?> structureFeature : StructureFeature.NOISE_AFFECTING_FEATURES) {
-            final Iterator<StructurePiece> iterator2;
-            StructurePiece structurePiece;
-            final ChunkPos chunkPos2;
-            PoolElementStructurePiece poolElementStructurePiece;
-            StructureTemplatePool.Projection projection;
-            final ObjectList list;
-            final Iterator<JigsawJunction> iterator3;
-            JigsawJunction jigsawJunction;
-            int i5;
-            int i6;
-            final int n;
-            final int n2;
-            final ObjectList list2;
             structureFeatureManager.startsForFeature(SectionPos.of(chunkPos, 0), structureFeature).forEach(structureStart -> {
-                structureStart.getPieces().iterator();
+                // MagmaCube start - decompile error
+                Iterator<StructurePiece> iterator2 = structureStart.getPieces().iterator();
                 while (iterator2.hasNext()) {
-                    structurePiece = iterator2.next();
-                    if (!structurePiece.isCloseToChunk(chunkPos2, 12)) {
+                    StructurePiece structurePiece = iterator2.next();
+                    if (!structurePiece.isCloseToChunk(chunkPos, 12)) {
                         continue;
                     }
                     else if (structurePiece instanceof PoolElementStructurePiece) {
-                        poolElementStructurePiece = (PoolElementStructurePiece)structurePiece;
-                        projection = poolElementStructurePiece.getElement().getProjection();
+                        PoolElementStructurePiece poolElementStructurePiece = (PoolElementStructurePiece)structurePiece;
+                        StructureTemplatePool.Projection projection = poolElementStructurePiece.getElement().getProjection();
                         if (projection == StructureTemplatePool.Projection.RIGID) {
-                            list.add(poolElementStructurePiece);
+                            objectList.add(poolElementStructurePiece);
                         }
-                        poolElementStructurePiece.getJunctions().iterator();
+                        Iterator<JigsawJunction> iterator3 = poolElementStructurePiece.getJunctions().iterator();
                         while (iterator3.hasNext()) {
-                            jigsawJunction = iterator3.next();
-                            i5 = jigsawJunction.getSourceX();
-                            i6 = jigsawJunction.getSourceZ();
+                            JigsawJunction jigsawJunction = iterator3.next();
+                            int i5 = jigsawJunction.getSourceX();
+                            int i6 = jigsawJunction.getSourceZ();
+                            int n = 0;
+                            int n2 = 0;
+                            // MagmaCube end - decompile error
                             if (i5 > n - 12 && i6 > n2 - 12 && i5 < n + 15 + 12) {
                                 if (i6 >= n2 + 15 + 12) {
                                     continue;
                                 }
                                 else {
-                                    list2.add(jigsawJunction);
+                                    objectList2.add(jigsawJunction); // MagmaCube - decompile error
                                 }
                             }
                         }
                     }
                     else {
-                        list.add(structurePiece);
+                        objectList.add(structurePiece); // MagmaCube - decompile error
                     }
                 }
                 return;
@@ -470,7 +463,7 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator
                             levelChunkSection = protoChunk.getOrCreateSection(i15);
                             levelChunkSection.acquire();
                         }
-                        final double d10 = i12 / this.chunkHeight;
+                        final double d10 = (double) i12 / this.chunkHeight; // MagmaCube - decompile error
                         final double d11 = Mth.lerp(d10, d2, d6);
                         final double d12 = Mth.lerp(d10, d4, d8);
                         final double d13 = Mth.lerp(d10, d3, d7);
@@ -478,13 +471,13 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator
                         for (int i16 = 0; i16 < this.chunkWidth; ++i16) {
                             final int i17 = i3 + i8 * this.chunkWidth + i16;
                             final int i18 = i17 & 0xF;
-                            final double d15 = i16 / this.chunkWidth;
+                            final double d15 = (double) i16 / this.chunkWidth; // MagmaCube - decompile error
                             final double d16 = Mth.lerp(d15, d11, d12);
                             final double d17 = Mth.lerp(d15, d13, d14);
                             for (int i19 = 0; i19 < this.chunkWidth; ++i19) {
                                 final int i20 = i4 + i10 * this.chunkWidth + i19;
                                 final int i21 = i20 & 0xF;
-                                final double d18 = i19 / this.chunkWidth;
+                                final double d18 = (double) i19 / this.chunkWidth; // MagmaCube - decompile error
                                 final double d19 = Mth.lerp(d18, d16, d17);
                                 double d20 = Mth.clamp(d19 / 200.0, -1.0, 1.0);
                                 d20 = d20 / 2.0 - d20 * d20 * d20 / 24.0;
@@ -600,27 +593,25 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)BiomeSource.CODEC.fieldOf("biome_source").forGetter(noiseBasedChunkGenerator -> noiseBasedChunkGenerator.biomeSource), (App)Codec.LONG.fieldOf("seed").stable().forGetter(noiseBasedChunkGenerator -> noiseBasedChunkGenerator.seed), (App)NoiseGeneratorSettings.CODEC.fieldOf("settings").forGetter(noiseBasedChunkGenerator -> noiseBasedChunkGenerator.settings)).apply(instance, ((RecordCodecBuilder.Instance)instance).stable(NoiseBasedChunkGenerator::new)));
-        int i;
-        int i2;
-        int i3;
+        // MagmaCube start - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(BiomeSource.CODEC.fieldOf("biome_source").forGetter(noiseBasedChunkGenerator -> noiseBasedChunkGenerator.biomeSource), Codec.LONG.fieldOf("seed").stable().forGetter(noiseBasedChunkGenerator -> noiseBasedChunkGenerator.seed), NoiseGeneratorSettings.CODEC.fieldOf("settings").forGetter(noiseBasedChunkGenerator -> noiseBasedChunkGenerator.settings)).apply(instance, instance.stable(NoiseBasedChunkGenerator::new)));
         BEARD_KERNEL = Util.make(new float[13824], floats -> {
-            for (i = 0; i < 24; ++i) {
-                for (i2 = 0; i2 < 24; ++i2) {
-                    for (i3 = 0; i3 < 24; ++i3) {
+            for (int i = 0; i < 24; ++i) {
+                for (int i2 = 0; i2 < 24; ++i2) {
+                    for (int i3 = 0; i3 < 24; ++i3) {
+                        // MagmaCube end - decompile error
                         floats[i * 24 * 24 + i2 * 24 + i3] = (float)computeContribution(i2 - 12, i3 - 12, i - 12);
                     }
                 }
             }
             return;
         });
-        int j;
-        int i4;
-        float f;
         BIOME_WEIGHTS = Util.make(new float[25], floats -> {
-            for (j = -2; j <= 2; ++j) {
-                for (i4 = -2; i4 <= 2; ++i4) {
-                    f = 10.0f / Mth.sqrt(j * j + i4 * i4 + 0.2f);
+            // MagmaCube start - decompile error
+            for (int j = -2; j <= 2; ++j) {
+                for (int i4 = -2; i4 <= 2; ++i4) {
+                    float f = 10.0f / Mth.sqrt(j * j + i4 * i4 + 0.2f);
+                    // MagmaCube end - decompile error
                     floats[j + 2 + (i4 + 2) * 5] = f;
                 }
             }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
index 4f59e764b2c77545b9161ecde83fcbd5d750bd6a..2bc6c68b704de3711a9a0347a0f222546949f50c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
@@ -113,7 +113,8 @@ public final class NoiseGeneratorSettings
     }
     
     static {
-        DIRECT_CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)StructureSettings.CODEC.fieldOf("structures").forGetter((Function)NoiseGeneratorSettings::structureSettings), (App)NoiseSettings.CODEC.fieldOf("noise").forGetter((Function)NoiseGeneratorSettings::noiseSettings), (App)BlockState.CODEC.fieldOf("default_block").forGetter((Function)NoiseGeneratorSettings::getDefaultBlock), (App)BlockState.CODEC.fieldOf("default_fluid").forGetter((Function)NoiseGeneratorSettings::getDefaultFluid), (App)Codec.intRange(-20, 276).fieldOf("bedrock_roof_position").forGetter((Function)NoiseGeneratorSettings::getBedrockRoofPosition), (App)Codec.intRange(-20, 276).fieldOf("bedrock_floor_position").forGetter((Function)NoiseGeneratorSettings::getBedrockFloorPosition), (App)Codec.intRange(0, 255).fieldOf("sea_level").forGetter((Function)NoiseGeneratorSettings::seaLevel), (App)Codec.BOOL.fieldOf("disable_mob_generation").forGetter((Function)NoiseGeneratorSettings::disableMobGeneration)).apply(instance, NoiseGeneratorSettings::new));
+        // MagmaCube - decompile error
+        DIRECT_CODEC = RecordCodecBuilder.create(instance -> instance.group(StructureSettings.CODEC.fieldOf("structures").forGetter(NoiseGeneratorSettings::structureSettings), NoiseSettings.CODEC.fieldOf("noise").forGetter(NoiseGeneratorSettings::noiseSettings), BlockState.CODEC.fieldOf("default_block").forGetter(NoiseGeneratorSettings::getDefaultBlock), BlockState.CODEC.fieldOf("default_fluid").forGetter(NoiseGeneratorSettings::getDefaultFluid), Codec.intRange(-20, 276).fieldOf("bedrock_roof_position").forGetter(NoiseGeneratorSettings::getBedrockRoofPosition), Codec.intRange(-20, 276).fieldOf("bedrock_floor_position").forGetter(NoiseGeneratorSettings::getBedrockFloorPosition), Codec.intRange(0, 255).fieldOf("sea_level").forGetter(NoiseGeneratorSettings::seaLevel), Codec.BOOL.fieldOf("disable_mob_generation").forGetter(NoiseGeneratorSettings::disableMobGeneration)).apply(instance, NoiseGeneratorSettings::new));
         CODEC = (Codec)RegistryFileCodec.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, NoiseGeneratorSettings.DIRECT_CODEC);
         OVERWORLD = ResourceKey.create((ResourceKey<? extends Registry<NoiseGeneratorSettings>>)Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, new ResourceLocation("overworld"));
         AMPLIFIED = ResourceKey.create((ResourceKey<? extends Registry<NoiseGeneratorSettings>>)Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, new ResourceLocation("amplified"));
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseSamplingSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseSamplingSettings.java
index bcc6112a2854ea8193faf86543f613924556925b..231cebc90ad23ecb11890c3bd98a107db883eeb9 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseSamplingSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseSamplingSettings.java
@@ -40,6 +40,7 @@ public class NoiseSamplingSettings
     
     static {
         SCALE_RANGE = Codec.doubleRange(0.001, 1000.0);
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)NoiseSamplingSettings.SCALE_RANGE.fieldOf("xz_scale").forGetter((Function)NoiseSamplingSettings::xzScale), (App)NoiseSamplingSettings.SCALE_RANGE.fieldOf("y_scale").forGetter((Function)NoiseSamplingSettings::yScale), (App)NoiseSamplingSettings.SCALE_RANGE.fieldOf("xz_factor").forGetter((Function)NoiseSamplingSettings::xzFactor), (App)NoiseSamplingSettings.SCALE_RANGE.fieldOf("y_factor").forGetter((Function)NoiseSamplingSettings::yFactor)).apply(instance, NoiseSamplingSettings::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(NoiseSamplingSettings.SCALE_RANGE.fieldOf("xz_scale").forGetter(NoiseSamplingSettings::xzScale), NoiseSamplingSettings.SCALE_RANGE.fieldOf("y_scale").forGetter(NoiseSamplingSettings::yScale), NoiseSamplingSettings.SCALE_RANGE.fieldOf("xz_factor").forGetter(NoiseSamplingSettings::xzFactor), NoiseSamplingSettings.SCALE_RANGE.fieldOf("y_factor").forGetter(NoiseSamplingSettings::yFactor)).apply(instance, NoiseSamplingSettings::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseSlideSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseSlideSettings.java
index f6a5dd2f1201809e8ebbc0cc41412bf8eb41ffc6..3b904f189aee6b25321a3d02f3c7632d613865e7 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseSlideSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseSlideSettings.java
@@ -32,6 +32,7 @@ public class NoiseSlideSettings
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)Codec.INT.fieldOf("target").forGetter((Function)NoiseSlideSettings::target), (App)Codec.intRange(0, 256).fieldOf("size").forGetter((Function)NoiseSlideSettings::size), (App)Codec.INT.fieldOf("offset").forGetter((Function)NoiseSlideSettings::offset)).apply(instance, NoiseSlideSettings::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(Codec.INT.fieldOf("target").forGetter(NoiseSlideSettings::target), Codec.intRange(0, 256).fieldOf("size").forGetter(NoiseSlideSettings::size), Codec.INT.fieldOf("offset").forGetter(NoiseSlideSettings::offset)).apply(instance, NoiseSlideSettings::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java b/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
index 8993440b9d2b158fadb7ead7a535012f1c9e448a..2c4068d7a34361822add48c7c069437340b83759 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
@@ -43,7 +43,8 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class WorldGenSettings {
-    public static final Codec<WorldGenSettings> CODEC = RecordCodecBuilder.create(instance -> instance.group((App)Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::seed), (App)Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldGenSettings::generateFeatures), (App)Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldGenSettings::generateBonusChest), (App)MappedRegistry.dataPackCodec(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), LevelStem.CODEC).xmap(LevelStem::sortMap, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::dimensions), (App)Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter(worldGenSettings -> worldGenSettings.legacyCustomOptions)).apply((Applicative)instance, instance.stable(((Function5)WorldGenSettings::new)))).comapFlatMap(WorldGenSettings::guardExperimental, Function.identity());
+    // MagmaCube - decompile error
+    public static final Codec<WorldGenSettings> CODEC = RecordCodecBuilder.<WorldGenSettings>create(instance -> instance.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::seed), Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldGenSettings::generateFeatures), Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldGenSettings::generateBonusChest), MappedRegistry.dataPackCodec(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), LevelStem.CODEC).xmap(LevelStem::sortMap, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::dimensions), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter(worldGenSettings -> worldGenSettings.legacyCustomOptions)).apply(instance, instance.stable((WorldGenSettings::new)))).comapFlatMap(WorldGenSettings::guardExperimental, Function.identity());
     private static final Logger LOGGER = LogManager.getLogger();
     private final long seed;
     private final boolean generateFeatures;
@@ -198,7 +199,7 @@ public class WorldGenSettings {
         switch (s5) {
             case "flat": {
                 JsonObject jsonObject = !s2.isEmpty() ? GsonHelper.parse(s2) : new JsonObject();
-                Dynamic dynamic = new Dynamic((DynamicOps)JsonOps.INSTANCE, jsonObject);
+                Dynamic<?> dynamic = new Dynamic((DynamicOps)JsonOps.INSTANCE, jsonObject); // MagmaCube - type
                 return new WorldGenSettings(l, flag, false, WorldGenSettings.withOverworld(registry, mappedRegistry, (ChunkGenerator)new FlatLevelSource(FlatLevelGeneratorSettings.CODEC.parse(dynamic).resultOrPartial(((Logger)LOGGER)::error).orElseGet(() -> FlatLevelGeneratorSettings.getDefault(registry2)))));
             }
             case "debug_all_block_states": {
@@ -219,17 +220,17 @@ public class WorldGenSettings {
         MappedRegistry<LevelStem> mappedRegistry2;
         long l = optionalLong.orElse(this.seed);
         if (optionalLong.isPresent()) {
-            MappedRegistry<LevelStem> mappedRegistry = new MappedRegistry<LevelStem>(Registry.LEVEL_STEM_REGISTRY, Lifecycle.experimental());
+            mappedRegistry2 = new MappedRegistry<LevelStem>(Registry.LEVEL_STEM_REGISTRY, Lifecycle.experimental()); // MagmaCube - decompile error
             long l2 = optionalLong.getAsLong();
             for (Map.Entry<ResourceKey<LevelStem>, LevelStem> entry : this.dimensions.entrySet()) {
                 ResourceKey<LevelStem> resourceKey = entry.getKey();
-                mappedRegistry.register(resourceKey, new LevelStem(entry.getValue().typeSupplier(), entry.getValue().generator().withSeed(l2)), this.dimensions.lifecycle(entry.getValue()));
+                mappedRegistry2.register(resourceKey, new LevelStem(entry.getValue().typeSupplier(), entry.getValue().generator().withSeed(l2)), this.dimensions.lifecycle(entry.getValue())); // MagmaCube - decompile error
             }
         } else {
             mappedRegistry2 = this.dimensions;
         }
         if (this.isDebug()) {
-            WorldGenSettings worldGenSettings = new WorldGenSettings(l, false, false, mappedRegistry2);
+            worldGenSettings2 = new WorldGenSettings(l, false, false, mappedRegistry2); // MagmaCube - decompile error
         } else {
             worldGenSettings2 = new WorldGenSettings(l, this.generateFeatures(), this.generateBonusChest() && !flag, mappedRegistry2);
         }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/AbstractFlowerFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/AbstractFlowerFeature.java
index 2fb0ad63b0a0f2affc3924ccb0bd86c6b0691792..e68db22814b0ddf7a493ec5f1b5f4d8d1b608651 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/AbstractFlowerFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/AbstractFlowerFeature.java
@@ -2,7 +2,6 @@ package net.minecraft.world.level.levelgen.feature;
 
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.LevelAccessor;
-import net.minecraft.world.level.LevelReader;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
 import net.minecraft.world.level.chunk.ChunkGenerator;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/AbstractHugeMushroomFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/AbstractHugeMushroomFeature.java
index 48a2abd64edae5d6c4b53a9aa9e8f27053bf7a84..6409e4b1b205b431d715700e5d054179352a8724 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/AbstractHugeMushroomFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/AbstractHugeMushroomFeature.java
@@ -1,16 +1,11 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.Block;
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.BlockTags;
-import net.minecraft.world.level.LevelWriter;
-import net.minecraft.world.level.BlockGetter;
 import net.minecraft.core.Direction;
-import net.minecraft.core.Vec3i;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
 import net.minecraft.world.level.LevelAccessor;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/BambooFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/BambooFeature.java
index 05c8886e427ee77ab9dd7ce5992212b0e9e4887e..54349b8d8f71dc6bbbd08b1c12616b3a5b354f5b 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/BambooFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/BambooFeature.java
@@ -1,13 +1,9 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import net.minecraft.world.level.block.state.StateHolder;
 import net.minecraft.world.level.block.state.properties.BambooLeaves;
-import net.minecraft.world.level.block.state.properties.Property;
 import net.minecraft.world.level.block.BambooBlock;
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import net.minecraft.core.Direction;
 import net.minecraft.world.level.levelgen.Heightmap;
-import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
@@ -66,9 +62,9 @@ public class BambooFeature extends Feature<ProbabilityFeatureConfiguration>
     }
     
     static {
-        BAMBOO_TRUNK = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.BAMBOO.defaultBlockState()).setValue((Property<Comparable>)BambooBlock.AGE, 1)).setValue(BambooBlock.LEAVES, BambooLeaves.NONE)).setValue((Property<Comparable>)BambooBlock.STAGE, 0);
-        BAMBOO_FINAL_LARGE = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)BambooFeature.BAMBOO_TRUNK).setValue(BambooBlock.LEAVES, BambooLeaves.LARGE)).setValue((Property<Comparable>)BambooBlock.STAGE, 1);
-        BAMBOO_TOP_LARGE = ((StateHolder<O, BlockState>)BambooFeature.BAMBOO_TRUNK).setValue(BambooBlock.LEAVES, BambooLeaves.LARGE);
-        BAMBOO_TOP_SMALL = ((StateHolder<O, BlockState>)BambooFeature.BAMBOO_TRUNK).setValue(BambooBlock.LEAVES, BambooLeaves.SMALL);
+        BAMBOO_TRUNK = (((Blocks.BAMBOO.defaultBlockState()).setValue(BambooBlock.AGE, 1)).setValue(BambooBlock.LEAVES, BambooLeaves.NONE)).setValue(BambooBlock.STAGE, 0); // MagmaCube - decompile fix
+        BAMBOO_FINAL_LARGE = ((BambooFeature.BAMBOO_TRUNK).setValue(BambooBlock.LEAVES, BambooLeaves.LARGE)).setValue(BambooBlock.STAGE, 1); // MagmaCube - decompile fix
+        BAMBOO_TOP_LARGE = (BambooFeature.BAMBOO_TRUNK).setValue(BambooBlock.LEAVES, BambooLeaves.LARGE); // MagmaCube - decompile fix
+        BAMBOO_TOP_SMALL = (BambooFeature.BAMBOO_TRUNK).setValue(BambooBlock.LEAVES, BambooLeaves.SMALL); // MagmaCube - decompile fix
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/BasaltPillarFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/BasaltPillarFeature.java
index 7983db83918819dff5e39bf142ecd0a2472fc9ac..2345d469a9a9210c2117bb81fd546c3c4b0f325b 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/BasaltPillarFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/BasaltPillarFeature.java
@@ -1,9 +1,7 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import net.minecraft.util.Mth;
 import net.minecraft.world.level.LevelAccessor;
-import net.minecraft.core.Vec3i;
 import net.minecraft.core.Direction;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.Level;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/BaseDiskFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/BaseDiskFeature.java
index 1158b4dadd4601cdd2683efe36d93a83368fde5f..1aa641bb3091970a3044b9838cc89dd3cd5f665f 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/BaseDiskFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/BaseDiskFeature.java
@@ -1,7 +1,5 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
-import java.util.Iterator;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.core.BlockPos;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/BastionFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/BastionFeature.java
index 9099a87deaf163bd588190e19a9d9fd6e3803b7f..dec1273d8a409f48ba7fb11eaeb69136f7046605 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/BastionFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/BastionFeature.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.levelgen.WorldgenRandom;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/BlueIceFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/BlueIceFeature.java
index 2a7332723e0f8612b2c81d517ae010c62a17a483..1b854cf8c5f4d7f88463fcf3f0314cdb15052ff3 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/BlueIceFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/BlueIceFeature.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.material.Material;
 import net.minecraft.core.Direction;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/BonusChestFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/BonusChestFeature.java
index b2423878305d87bf1407dcb1750987aabdd3477f..abff4b5dbbbcd7d14bf7417d7eec0478da164bad 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/BonusChestFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/BonusChestFeature.java
@@ -28,9 +28,9 @@ extends Feature<NoneFeatureConfiguration> {
     @Override
     public boolean place(WorldGenLevel worldGenLevel, ChunkGenerator chunkGenerator, Random random, BlockPos blockPos, NoneFeatureConfiguration noneFeatureConfiguration) {
         ChunkPos chunkPos = new ChunkPos(blockPos);
-        List list = IntStream.rangeClosed(chunkPos.getMinBlockX(), chunkPos.getMaxBlockX()).boxed().collect(Collectors.toList());
+        List<Integer> list = IntStream.rangeClosed(chunkPos.getMinBlockX(), chunkPos.getMaxBlockX()).boxed().collect(Collectors.toList()); // MagmaCube - type
         Collections.shuffle(list, random);
-        List list2 = IntStream.rangeClosed(chunkPos.getMinBlockZ(), chunkPos.getMaxBlockZ()).boxed().collect(Collectors.toList());
+        List<Integer> list2 = IntStream.rangeClosed(chunkPos.getMinBlockZ(), chunkPos.getMaxBlockZ()).boxed().collect(Collectors.toList()); // MagmaCube - type
         Collections.shuffle(list2, random);
         BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
         for (Integer integer : list) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/ChorusPlantFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/ChorusPlantFeature.java
index ce7d93e1aed34feab70baabc13a6e6372ad4b44d..635c13f27bf72f6e1e2c0bf9379fa9510e907f6e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/ChorusPlantFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/ChorusPlantFeature.java
@@ -1,7 +1,5 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
-import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.ChorusFlowerBlock;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.core.BlockPos;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/CoralTreeFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/CoralTreeFeature.java
index 60cb2e8e8ef156578847dc839dcb7f988c71429d..156c3b48ebe05c04cf0fbc9a61986f73bd90f8c1 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/CoralTreeFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/CoralTreeFeature.java
@@ -1,7 +1,5 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import java.util.Iterator;
-import net.minecraft.core.Vec3i;
 import java.util.List;
 import java.util.Collections;
 import com.google.common.collect.Lists;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/DefaultFlowerFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/DefaultFlowerFeature.java
index 94f5984588f97ed74a8baa1799adcb866b0ddc7a..471a59256c3ef86613689aa38f92ee4b468b0997 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/DefaultFlowerFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/DefaultFlowerFeature.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import net.minecraft.world.level.block.state.BlockState;
 import java.util.Random;
 import net.minecraft.core.BlockPos;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/DiskReplaceFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/DiskReplaceFeature.java
index b372fd0b4f534e3fcafdb15363a453c0bd36e43b..d2dc7f5bf48a2c255290166351826bba58bdcadd 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/DiskReplaceFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/DiskReplaceFeature.java
@@ -1,8 +1,5 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
-import net.minecraft.world.level.material.Fluid;
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/FillLayerFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/FillLayerFeature.java
index 2b6d22070da4f6c2113489fa9e60d32cf04a868a..f5ed325566546711d9f56d90166b31e145b85fd5 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/FillLayerFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/FillLayerFeature.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
 import net.minecraft.world.level.chunk.ChunkGenerator;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/GlowstoneFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/GlowstoneFeature.java
index c1273c63812d8246f61dc72207e8c5e8ec4d0f63..5a458937eef52a8c888282d319aca92d9f85709d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/GlowstoneFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/GlowstoneFeature.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.core.Direction;
 import net.minecraft.world.level.block.Blocks;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/HugeFungusConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/HugeFungusConfiguration.java
index d5f17079dd189544d19f6be02c5f05f6ae22cd8f..ef8e76f3015e5fcb2769661850e078c79e678cad 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/HugeFungusConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/HugeFungusConfiguration.java
@@ -30,7 +30,8 @@ public class HugeFungusConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)BlockState.CODEC.fieldOf("valid_base_block").forGetter(hugeFungusConfiguration -> hugeFungusConfiguration.validBaseState), (App)BlockState.CODEC.fieldOf("stem_state").forGetter(hugeFungusConfiguration -> hugeFungusConfiguration.stemState), (App)BlockState.CODEC.fieldOf("hat_state").forGetter(hugeFungusConfiguration -> hugeFungusConfiguration.hatState), (App)BlockState.CODEC.fieldOf("decor_state").forGetter(hugeFungusConfiguration -> hugeFungusConfiguration.decorState), (App)Codec.BOOL.fieldOf("planted").orElse(false).forGetter(hugeFungusConfiguration -> hugeFungusConfiguration.planted)).apply(instance, HugeFungusConfiguration::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(BlockState.CODEC.fieldOf("valid_base_block").forGetter(hugeFungusConfiguration -> hugeFungusConfiguration.validBaseState), BlockState.CODEC.fieldOf("stem_state").forGetter(hugeFungusConfiguration -> hugeFungusConfiguration.stemState), BlockState.CODEC.fieldOf("hat_state").forGetter(hugeFungusConfiguration -> hugeFungusConfiguration.hatState), BlockState.CODEC.fieldOf("decor_state").forGetter(hugeFungusConfiguration -> hugeFungusConfiguration.decorState), Codec.BOOL.fieldOf("planted").orElse(false).forGetter(hugeFungusConfiguration -> hugeFungusConfiguration.planted)).apply(instance, HugeFungusConfiguration::new));
         HUGE_CRIMSON_FUNGI_PLANTED_CONFIG = new HugeFungusConfiguration(Blocks.CRIMSON_NYLIUM.defaultBlockState(), Blocks.CRIMSON_STEM.defaultBlockState(), Blocks.NETHER_WART_BLOCK.defaultBlockState(), Blocks.SHROOMLIGHT.defaultBlockState(), true);
         HUGE_CRIMSON_FUNGI_NOT_PLANTED_CONFIG = new HugeFungusConfiguration(HugeFungusConfiguration.HUGE_CRIMSON_FUNGI_PLANTED_CONFIG.validBaseState, HugeFungusConfiguration.HUGE_CRIMSON_FUNGI_PLANTED_CONFIG.stemState, HugeFungusConfiguration.HUGE_CRIMSON_FUNGI_PLANTED_CONFIG.hatState, HugeFungusConfiguration.HUGE_CRIMSON_FUNGI_PLANTED_CONFIG.decorState, false);
         HUGE_WARPED_FUNGI_PLANTED_CONFIG = new HugeFungusConfiguration(Blocks.WARPED_NYLIUM.defaultBlockState(), Blocks.WARPED_STEM.defaultBlockState(), Blocks.WARPED_WART_BLOCK.defaultBlockState(), Blocks.SHROOMLIGHT.defaultBlockState(), true);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/IcePatchFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/IcePatchFeature.java
index 91a73f0355ca4fabded86b7bab4e6e763e831170..05df62ddcdad6889cb1f1ba706f2cfd570fe4d01 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/IcePatchFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/IcePatchFeature.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/MonsterRoomFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/MonsterRoomFeature.java
index 923d4cf092c960f48388c8268fc0bad0e28d9993..2088ae56dba2d160f35285aa59fb4cdd1b9c3171 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/MonsterRoomFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/MonsterRoomFeature.java
@@ -1,15 +1,12 @@
 package net.minecraft.world.level.levelgen.feature;
 
 import org.apache.logging.log4j.LogManager;
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import net.minecraft.Util;
 import net.minecraft.world.level.block.entity.BlockEntity;
-import java.util.Iterator;
 import net.minecraft.world.level.material.Material;
 import net.minecraft.world.level.block.entity.SpawnerBlockEntity;
 import net.minecraft.world.level.block.entity.RandomizableContainerBlockEntity;
 import net.minecraft.world.level.storage.loot.BuiltInLootTables;
-import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.levelgen.structure.StructurePiece;
 import net.minecraft.core.Direction;
 import net.minecraft.world.level.block.Blocks;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/NetherForestVegetationFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/NetherForestVegetationFeature.java
index 5c2f707fb045e6b5edd31fe9c9e845bb50ea159e..05daaa1745e492c5d248a3939971ad0038fc6ca8 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/NetherForestVegetationFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/NetherForestVegetationFeature.java
@@ -1,10 +1,7 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.Block;
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.core.BlockPos;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/NoOpFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/NoOpFeature.java
index cebafd16597821a03143d793a3b371f44dff15ea..e228427036f911b54e4c1b8a4746fb295c6ac3dc 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/NoOpFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/NoOpFeature.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
 import net.minecraft.world.level.chunk.ChunkGenerator;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/RandomBooleanSelectorFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/RandomBooleanSelectorFeature.java
index 83c907e8b5cb250e8e7a201d76ab7a58242114d0..858a5c2d777780e59e4a200e44f5b77ee1157385 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/RandomBooleanSelectorFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/RandomBooleanSelectorFeature.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
 import net.minecraft.world.level.chunk.ChunkGenerator;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/RandomPatchFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/RandomPatchFeature.java
index 745d60bbb3246de5ee624134c7ed2749a34fd92e..1a590479ae9fb020e86de66317df1214a109939f 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/RandomPatchFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/RandomPatchFeature.java
@@ -1,13 +1,7 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.LevelAccessor;
-import net.minecraft.world.level.material.Fluid;
-import net.minecraft.tags.Tag;
 import net.minecraft.tags.FluidTags;
-import net.minecraft.world.level.LevelReader;
-import net.minecraft.core.Vec3i;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/RandomSelectorFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/RandomSelectorFeature.java
index eb77c1be09517e9d7ae236a30ac1a12cb1e4a689..be78a67b8e5708397deda873dc926c0916ffa307 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/RandomSelectorFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/RandomSelectorFeature.java
@@ -1,7 +1,5 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
-import java.util.Iterator;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
 import net.minecraft.world.level.chunk.ChunkGenerator;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/ReplaceBlobsFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/ReplaceBlobsFeature.java
index b8b5fe40062005fde0cbb499ed3e3327cf51e1de..54da8cd07f3e642260b5b0060741523264800eed 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/ReplaceBlobsFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/ReplaceBlobsFeature.java
@@ -1,12 +1,8 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import javax.annotation.Nullable;
 import net.minecraft.world.level.block.state.BlockState;
-import java.util.Iterator;
 import net.minecraft.world.level.block.Block;
-import net.minecraft.world.level.LevelWriter;
-import net.minecraft.core.Vec3i;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.core.Direction;
 import net.minecraft.core.BlockPos;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/ReplaceBlockFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/ReplaceBlockFeature.java
index e2fbd6ad718cca622f33a656a98ea0d364ddf1f6..33d0c5061741766782ade31818a244c8f3a11e54 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/ReplaceBlockFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/ReplaceBlockFeature.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
 import net.minecraft.world.level.chunk.ChunkGenerator;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/RuinedPortalFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/RuinedPortalFeature.java
index a6c8682490f8476c261bd57639562762a234a68c..9be1265901a92ba0b4b4cdfc8db42e92f09283f8 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/RuinedPortalFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/RuinedPortalFeature.java
@@ -49,27 +49,28 @@ extends StructureFeature<RuinedPortalConfiguration> {
 
     private static int findSuitableY(Random random, ChunkGenerator chunkGenerator, RuinedPortalPiece.VerticalPlacement verticalPlacement, boolean flag, int i, int i2, BoundingBox boundingBox) {
         int i12;
+        int i11; // MagmaCube - decompile error
         if (verticalPlacement == RuinedPortalPiece.VerticalPlacement.IN_NETHER) {
             if (flag) {
-                int i3 = RuinedPortalFeature.randomIntInclusive(random, 32, 100);
+                i11 = RuinedPortalFeature.randomIntInclusive(random, 32, 100); // MagmaCube - decompile error
             } else if (random.nextFloat() < 0.5f) {
-                int i4 = RuinedPortalFeature.randomIntInclusive(random, 27, 29);
+                i11 = RuinedPortalFeature.randomIntInclusive(random, 27, 29); // MagmaCube - decompile error
             } else {
-                int i5 = RuinedPortalFeature.randomIntInclusive(random, 29, 100);
+                i11 = RuinedPortalFeature.randomIntInclusive(random, 29, 100); // MagmaCube - decompile error
             }
         } else if (verticalPlacement == RuinedPortalPiece.VerticalPlacement.IN_MOUNTAIN) {
             int i6 = i - i2;
-            int i7 = RuinedPortalFeature.getRandomWithinInterval(random, 70, i6);
+            i11 = RuinedPortalFeature.getRandomWithinInterval(random, 70, i6); // MagmaCube - decompile error
         } else if (verticalPlacement == RuinedPortalPiece.VerticalPlacement.UNDERGROUND) {
             int i8 = i - i2;
-            int i9 = RuinedPortalFeature.getRandomWithinInterval(random, 15, i8);
+            i11 = RuinedPortalFeature.getRandomWithinInterval(random, 15, i8); // MagmaCube - decompile error
         } else if (verticalPlacement == RuinedPortalPiece.VerticalPlacement.PARTLY_BURIED) {
-            int i10 = i - i2 + RuinedPortalFeature.randomIntInclusive(random, 2, 8);
+            i11 = i - i2 + RuinedPortalFeature.randomIntInclusive(random, 2, 8); // MagmaCube - decompile error
         } else {
-            int i11 = i;
+            i11 = i; // MagmaCube - decompile error
         }
-        ImmutableList list = ImmutableList.of(new BlockPos(boundingBox.x0, 0, boundingBox.z0), new BlockPos(boundingBox.x1, 0, boundingBox.z0), new BlockPos(boundingBox.x0, 0, boundingBox.z1), new BlockPos(boundingBox.x1, 0, boundingBox.z1));
-        List list2 = list.stream().map(blockPos -> chunkGenerator.getBaseColumn(blockPos.getX(), blockPos.getZ())).collect(Collectors.toList());
+        ImmutableList<BlockPos> list = ImmutableList.of(new BlockPos(boundingBox.x0, 0, boundingBox.z0), new BlockPos(boundingBox.x1, 0, boundingBox.z0), new BlockPos(boundingBox.x0, 0, boundingBox.z1), new BlockPos(boundingBox.x1, 0, boundingBox.z1)); // MagmaCube - type
+        List<BlockGetter> list2 = list.stream().map(blockPos -> chunkGenerator.getBaseColumn(blockPos.getX(), blockPos.getZ())).collect(Collectors.toList()); // MagmaCube - type
         Heightmap.Types types = verticalPlacement == RuinedPortalPiece.VerticalPlacement.ON_OCEAN_FLOOR ? Heightmap.Types.OCEAN_FLOOR_WG : Heightmap.Types.WORLD_SURFACE_WG;
         BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
         block0: for (i12 = i11; i12 > 15; --i12) {
@@ -144,30 +145,30 @@ extends StructureFeature<RuinedPortalConfiguration> {
             RuinedPortalPiece.VerticalPlacement verticalPlacement7;
             RuinedPortalPiece.Properties properties = new RuinedPortalPiece.Properties();
             if (ruinedPortalConfiguration.portalType == Type.DESERT) {
-                RuinedPortalPiece.VerticalPlacement verticalPlacement = RuinedPortalPiece.VerticalPlacement.PARTLY_BURIED;
+                verticalPlacement7 = RuinedPortalPiece.VerticalPlacement.PARTLY_BURIED; // MagmaCube - decompile error
                 properties.airPocket = false;
                 properties.mossiness = 0.0f;
             } else if (ruinedPortalConfiguration.portalType == Type.JUNGLE) {
-                RuinedPortalPiece.VerticalPlacement verticalPlacement2 = RuinedPortalPiece.VerticalPlacement.ON_LAND_SURFACE;
+                verticalPlacement7 = RuinedPortalPiece.VerticalPlacement.ON_LAND_SURFACE; // MagmaCube - decompile error
                 properties.airPocket = this.random.nextFloat() < 0.5f;
                 properties.mossiness = 0.8f;
                 properties.overgrown = true;
                 properties.vines = true;
             } else if (ruinedPortalConfiguration.portalType == Type.SWAMP) {
-                RuinedPortalPiece.VerticalPlacement verticalPlacement3 = RuinedPortalPiece.VerticalPlacement.ON_OCEAN_FLOOR;
+                verticalPlacement7 = RuinedPortalPiece.VerticalPlacement.ON_OCEAN_FLOOR; // MagmaCube - decompile error
                 properties.airPocket = false;
                 properties.mossiness = 0.5f;
                 properties.vines = true;
             } else if (ruinedPortalConfiguration.portalType == Type.MOUNTAIN) {
                 boolean flag = this.random.nextFloat() < 0.5f;
-                RuinedPortalPiece.VerticalPlacement verticalPlacement4 = flag ? RuinedPortalPiece.VerticalPlacement.IN_MOUNTAIN : RuinedPortalPiece.VerticalPlacement.ON_LAND_SURFACE;
+                verticalPlacement7 = flag ? RuinedPortalPiece.VerticalPlacement.IN_MOUNTAIN : RuinedPortalPiece.VerticalPlacement.ON_LAND_SURFACE; // MagmaCube - decompile error
                 properties.airPocket = flag || this.random.nextFloat() < 0.5f;
             } else if (ruinedPortalConfiguration.portalType == Type.OCEAN) {
-                RuinedPortalPiece.VerticalPlacement verticalPlacement5 = RuinedPortalPiece.VerticalPlacement.ON_OCEAN_FLOOR;
+                verticalPlacement7 = RuinedPortalPiece.VerticalPlacement.ON_OCEAN_FLOOR; // MagmaCube - decompile error
                 properties.airPocket = false;
                 properties.mossiness = 0.8f;
             } else if (ruinedPortalConfiguration.portalType == Type.NETHER) {
-                RuinedPortalPiece.VerticalPlacement verticalPlacement6 = RuinedPortalPiece.VerticalPlacement.IN_NETHER;
+                verticalPlacement7 = RuinedPortalPiece.VerticalPlacement.IN_NETHER; // MagmaCube - decompile error
                 properties.airPocket = this.random.nextFloat() < 0.5f;
                 properties.mossiness = 0.0f;
                 properties.replaceWithBlackstone = true;
@@ -177,7 +178,7 @@ extends StructureFeature<RuinedPortalConfiguration> {
                 boolean bl = properties.airPocket = flag2 || this.random.nextFloat() < 0.5f;
             }
             if (this.random.nextFloat() < 0.05f) {
-                ResourceLocation resourceLocation = new ResourceLocation(STRUCTURE_LOCATION_GIANT_PORTALS[this.random.nextInt(STRUCTURE_LOCATION_GIANT_PORTALS.length)]);
+                resourceLocation2 = new ResourceLocation(STRUCTURE_LOCATION_GIANT_PORTALS[this.random.nextInt(STRUCTURE_LOCATION_GIANT_PORTALS.length)]); // MagmaCube - decompile error
             } else {
                 resourceLocation2 = new ResourceLocation(STRUCTURE_LOCATION_PORTALS[this.random.nextInt(STRUCTURE_LOCATION_PORTALS.length)]);
             }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/SeagrassFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/SeagrassFeature.java
index 5f9f8ad7d269704680d90ba07141c1e06f9c71f4..bcf61279b8a033f9adb60fabe1dfed67e1563a25 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/SeagrassFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/SeagrassFeature.java
@@ -34,7 +34,7 @@ public class SeagrassFeature extends Feature<ProbabilityFeatureConfiguration>
             final BlockState blockState = flag2 ? Blocks.TALL_SEAGRASS.defaultBlockState() : Blocks.SEAGRASS.defaultBlockState();
             if (blockState.canSurvive(worldGenLevel, blockPos2)) {
                 if (flag2) {
-                    final BlockState blockState2 = ((StateHolder<O, BlockState>)blockState).setValue(TallSeagrass.HALF, DoubleBlockHalf.UPPER);
+                    final BlockState blockState2 = blockState.setValue(TallSeagrass.HALF, DoubleBlockHalf.UPPER); // MagmaCube - decompile error
                     final BlockPos blockPos3 = blockPos2.above();
                     if (worldGenLevel.getBlockState(blockPos3).is(Blocks.WATER)) {
                         worldGenLevel.setBlock(blockPos2, blockState, 2);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/SimpleBlockFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/SimpleBlockFeature.java
index 8db220a99b1b12ff6b3c0abfdff075340c1cc0a5..e4fa3c93ed52c811beebc6ec52a2b52676dbfed4 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/SimpleBlockFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/SimpleBlockFeature.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
 import net.minecraft.world.level.chunk.ChunkGenerator;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/SimpleRandomSelectorFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/SimpleRandomSelectorFeature.java
index ad2ac0b9e61d24c3aa6712e2a59d51b98603d01c..0d237fca8c408d220e046554e49285e1e8c2463d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/SimpleRandomSelectorFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/SimpleRandomSelectorFeature.java
@@ -1,7 +1,5 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
-import java.util.function.Supplier;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
 import net.minecraft.world.level.chunk.ChunkGenerator;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/SpikeFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/SpikeFeature.java
index 01a841e9bb5867e315590765eea4becfb1454448..bee4a612dcd28bcdc1a78d088c69d22ad8b37842 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/SpikeFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/SpikeFeature.java
@@ -115,14 +115,11 @@ extends Feature<SpikeConfiguration> {
             }
             return list2;
         }
-
-        public /* synthetic */ Object load(Object object) throws Exception {
-            return this.load((Long)object);
-        }
     }
 
     public static class EndSpike {
-        public static final Codec<EndSpike> CODEC = RecordCodecBuilder.create(instance -> instance.group((App)Codec.INT.fieldOf("centerX").orElse(0).forGetter(endSpike -> endSpike.centerX), (App)Codec.INT.fieldOf("centerZ").orElse(0).forGetter(endSpike -> endSpike.centerZ), (App)Codec.INT.fieldOf("radius").orElse(0).forGetter(endSpike -> endSpike.radius), (App)Codec.INT.fieldOf("height").orElse(0).forGetter(endSpike -> endSpike.height), (App)Codec.BOOL.fieldOf("guarded").orElse(false).forGetter(endSpike -> endSpike.guarded)).apply((Applicative)instance, EndSpike::new));
+        // MagmaCube - decompile error
+        public static final Codec<EndSpike> CODEC = RecordCodecBuilder.create(instance -> instance.group(Codec.INT.fieldOf("centerX").orElse(0).forGetter(endSpike -> endSpike.centerX), Codec.INT.fieldOf("centerZ").orElse(0).forGetter(endSpike -> endSpike.centerZ), Codec.INT.fieldOf("radius").orElse(0).forGetter(endSpike -> endSpike.radius), Codec.INT.fieldOf("height").orElse(0).forGetter(endSpike -> endSpike.height), Codec.BOOL.fieldOf("guarded").orElse(false).forGetter(endSpike -> endSpike.guarded)).apply(instance, EndSpike::new));
         private final int centerX;
         private final int centerZ;
         private final int radius;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/SpringFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/SpringFeature.java
index 2f30ca8e9785b64374d93f2b0d8c3b5696d548ba..a0163fcdfa9fc463321fa1a417f812b6f87ad146 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/SpringFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/SpringFeature.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/VoidStartPlatformFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/VoidStartPlatformFeature.java
index 4d647c87de60378018d4889f16143a42c7f428c0..dac77f90fae991c3257cbde6b34f8bc19855ee64 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/VoidStartPlatformFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/VoidStartPlatformFeature.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import net.minecraft.world.level.block.Blocks;
 import java.util.Random;
 import net.minecraft.world.level.chunk.ChunkGenerator;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/WeightedConfiguredFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/WeightedConfiguredFeature.java
index 72f53f452a8d1399346eaf3f05972e9e9b58d9f3..a714d53ea9e688f6780068e78a386f2755d65d7e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/WeightedConfiguredFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/WeightedConfiguredFeature.java
@@ -31,6 +31,7 @@ public class WeightedConfiguredFeature
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)ConfiguredFeature.CODEC.fieldOf("feature").forGetter(weightedConfiguredFeature -> weightedConfiguredFeature.feature), (App)Codec.floatRange(0.0f, 1.0f).fieldOf("chance").forGetter(weightedConfiguredFeature -> weightedConfiguredFeature.chance)).apply(instance, (BiFunction)WeightedConfiguredFeature::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(ConfiguredFeature.CODEC.fieldOf("feature").forGetter(weightedConfiguredFeature -> weightedConfiguredFeature.feature), Codec.floatRange(0.0f, 1.0f).fieldOf("chance").forGetter(weightedConfiguredFeature -> weightedConfiguredFeature.chance)).apply(instance, WeightedConfiguredFeature::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/blockplacers/BlockPlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/blockplacers/BlockPlacer.java
index 8374d21baed2d2c1dd6844ba7501388283244898..cc9145d788cd4daadfb0de2d1fa639e65262376c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/blockplacers/BlockPlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/blockplacers/BlockPlacer.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.feature.blockplacers;
 
-import java.util.function.Function;
 import net.minecraft.core.Registry;
 import java.util.Random;
 import net.minecraft.world.level.block.state.BlockState;
@@ -17,6 +16,6 @@ public abstract class BlockPlacer
     protected abstract BlockPlacerType<?> type();
     
     static {
-        CODEC = Registry.BLOCK_PLACER_TYPES.dispatch((Function)BlockPlacer::type, (Function)BlockPlacerType::codec);
+        CODEC = Registry.BLOCK_PLACER_TYPES.dispatch(BlockPlacer::type, BlockPlacerType::codec); // MagmaCube - decompile fix
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/blockplacers/ColumnPlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/blockplacers/ColumnPlacer.java
index 4fa60c81de256c26b812462a98050c0950ff8079..847f9bc799cc0447598770a546a684b0dc4f895e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/blockplacers/ColumnPlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/blockplacers/ColumnPlacer.java
@@ -37,6 +37,7 @@ public class ColumnPlacer extends BlockPlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)Codec.INT.fieldOf("min_size").forGetter(columnPlacer -> columnPlacer.minSize), (App)Codec.INT.fieldOf("extra_size").forGetter(columnPlacer -> columnPlacer.extraSize)).apply(instance, (BiFunction)ColumnPlacer::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(Codec.INT.fieldOf("min_size").forGetter(columnPlacer -> columnPlacer.minSize), Codec.INT.fieldOf("extra_size").forGetter(columnPlacer -> columnPlacer.extraSize)).apply(instance, ColumnPlacer::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockPileConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockPileConfiguration.java
index 69e09df9e3f3a24fb6845341fa058d698dcac4f0..0eeb148c4a27295d6df115b7765f1696035443a5 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockPileConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockPileConfiguration.java
@@ -14,6 +14,7 @@ public class BlockPileConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = BlockStateProvider.CODEC.fieldOf("state_provider").xmap((Function)BlockPileConfiguration::new, blockPileConfiguration -> blockPileConfiguration.stateProvider).codec();
+        // MagmaCube - decompile error
+        CODEC = BlockStateProvider.CODEC.fieldOf("state_provider").xmap(BlockPileConfiguration::new, blockPileConfiguration -> blockPileConfiguration.stateProvider).codec();
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockStateConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockStateConfiguration.java
index 090873b300cacf3380169692d1215c7275e2fe31..466cafda463ef11595f2aeb03483d4dd06224a54 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockStateConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockStateConfiguration.java
@@ -14,6 +14,7 @@ public class BlockStateConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = BlockState.CODEC.fieldOf("state").xmap((Function)BlockStateConfiguration::new, blockStateConfiguration -> blockStateConfiguration.state).codec();
+        // MagmaCube - decompile error
+        CODEC = BlockState.CODEC.fieldOf("state").xmap(BlockStateConfiguration::new, blockStateConfiguration -> blockStateConfiguration.state).codec();
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ColumnFeatureConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ColumnFeatureConfiguration.java
index d04263fd0cef10d109532ce5386eaad766f4b5f4..0efc390667f7803e7da6f2505489a661d4b8b161 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ColumnFeatureConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ColumnFeatureConfiguration.java
@@ -27,6 +27,7 @@ public class ColumnFeatureConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)UniformInt.codec(0, 2, 1).fieldOf("reach").forGetter(columnFeatureConfiguration -> columnFeatureConfiguration.reach), (App)UniformInt.codec(1, 5, 5).fieldOf("height").forGetter(columnFeatureConfiguration -> columnFeatureConfiguration.height)).apply(instance, (BiFunction)ColumnFeatureConfiguration::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(UniformInt.codec(0, 2, 1).fieldOf("reach").forGetter(columnFeatureConfiguration -> columnFeatureConfiguration.reach), UniformInt.codec(1, 5, 5).fieldOf("height").forGetter(columnFeatureConfiguration -> columnFeatureConfiguration.height)).apply(instance, ColumnFeatureConfiguration::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/CountConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/CountConfiguration.java
index 2e5c2f773f10e2a569614f5d66ebc706f845398b..27dd0ee82630dd1de665bb1bc1a21ab5087faa27 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/CountConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/CountConfiguration.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.feature.configurations;
 
-import java.util.function.Function;
 import net.minecraft.util.UniformInt;
 import com.mojang.serialization.Codec;
 
@@ -22,6 +21,6 @@ public class CountConfiguration implements DecoratorConfiguration, FeatureConfig
     }
     
     static {
-        CODEC = UniformInt.codec(-10, 128, 128).fieldOf("count").xmap((Function)CountConfiguration::new, (Function)CountConfiguration::count).codec();
+        CODEC = UniformInt.codec(-10, 128, 128).fieldOf("count").xmap(CountConfiguration::new, CountConfiguration::count).codec(); // MagmaCube - decompile fix
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DecoratedFeatureConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DecoratedFeatureConfiguration.java
index bbf9c1e342c6c883511c69ff7a8d0c14fb348c4d..9868d90a34a867723a3b8e0737158a329e5f192b 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DecoratedFeatureConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DecoratedFeatureConfiguration.java
@@ -34,6 +34,7 @@ public class DecoratedFeatureConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)ConfiguredFeature.CODEC.fieldOf("feature").forGetter(decoratedFeatureConfiguration -> decoratedFeatureConfiguration.feature), (App)ConfiguredDecorator.CODEC.fieldOf("decorator").forGetter(decoratedFeatureConfiguration -> decoratedFeatureConfiguration.decorator)).apply(instance, (BiFunction)DecoratedFeatureConfiguration::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(ConfiguredFeature.CODEC.fieldOf("feature").forGetter(decoratedFeatureConfiguration -> decoratedFeatureConfiguration.feature), ConfiguredDecorator.CODEC.fieldOf("decorator").forGetter(decoratedFeatureConfiguration -> decoratedFeatureConfiguration.decorator)).apply(instance, DecoratedFeatureConfiguration::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DeltaFeatureConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DeltaFeatureConfiguration.java
index d781d11d0ab53680f1c751e122e22eff2eecc11d..ffa4525c0d0170a35575cf2354f374acbf5ff0b8 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DeltaFeatureConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DeltaFeatureConfiguration.java
@@ -39,6 +39,7 @@ public class DeltaFeatureConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)BlockState.CODEC.fieldOf("contents").forGetter(deltaFeatureConfiguration -> deltaFeatureConfiguration.contents), (App)BlockState.CODEC.fieldOf("rim").forGetter(deltaFeatureConfiguration -> deltaFeatureConfiguration.rim), (App)UniformInt.codec(0, 8, 8).fieldOf("size").forGetter(deltaFeatureConfiguration -> deltaFeatureConfiguration.size), (App)UniformInt.codec(0, 8, 8).fieldOf("rim_size").forGetter(deltaFeatureConfiguration -> deltaFeatureConfiguration.rimSize)).apply(instance, DeltaFeatureConfiguration::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(BlockState.CODEC.fieldOf("contents").forGetter(deltaFeatureConfiguration -> deltaFeatureConfiguration.contents), BlockState.CODEC.fieldOf("rim").forGetter(deltaFeatureConfiguration -> deltaFeatureConfiguration.rim), UniformInt.codec(0, 8, 8).fieldOf("size").forGetter(deltaFeatureConfiguration -> deltaFeatureConfiguration.size), UniformInt.codec(0, 8, 8).fieldOf("rim_size").forGetter(deltaFeatureConfiguration -> deltaFeatureConfiguration.rimSize)).apply(instance, DeltaFeatureConfiguration::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DiskConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DiskConfiguration.java
index 714d08c5cd631b364fc6a80742c3a2a84ad9fea2..693d8b001ad905825dc293b4d20e6db3b6e71d8d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DiskConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DiskConfiguration.java
@@ -24,6 +24,7 @@ public class DiskConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)BlockState.CODEC.fieldOf("state").forGetter(diskConfiguration -> diskConfiguration.state), (App)UniformInt.codec(0, 4, 4).fieldOf("radius").forGetter(diskConfiguration -> diskConfiguration.radius), (App)Codec.intRange(0, 4).fieldOf("half_height").forGetter(diskConfiguration -> diskConfiguration.halfHeight), (App)BlockState.CODEC.listOf().fieldOf("targets").forGetter(diskConfiguration -> diskConfiguration.targets)).apply(instance, DiskConfiguration::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(BlockState.CODEC.fieldOf("state").forGetter(diskConfiguration -> diskConfiguration.state), UniformInt.codec(0, 4, 4).fieldOf("radius").forGetter(diskConfiguration -> diskConfiguration.radius), Codec.intRange(0, 4).fieldOf("half_height").forGetter(diskConfiguration -> diskConfiguration.halfHeight), BlockState.CODEC.listOf().fieldOf("targets").forGetter(diskConfiguration -> diskConfiguration.targets)).apply(instance, DiskConfiguration::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/EndGatewayConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/EndGatewayConfiguration.java
index 5dfc1da45f407ad2227e339bb6be20ee23a3cc70..6d047f9933310b50094bcfafc770f2752e3f807a 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/EndGatewayConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/EndGatewayConfiguration.java
@@ -36,6 +36,7 @@ public class EndGatewayConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)BlockPos.CODEC.optionalFieldOf("exit").forGetter(endGatewayConfiguration -> endGatewayConfiguration.exit), (App)Codec.BOOL.fieldOf("exact").forGetter(endGatewayConfiguration -> endGatewayConfiguration.exact)).apply(instance, (BiFunction)EndGatewayConfiguration::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(BlockPos.CODEC.optionalFieldOf("exit").forGetter(endGatewayConfiguration -> endGatewayConfiguration.exit), Codec.BOOL.fieldOf("exact").forGetter(endGatewayConfiguration -> endGatewayConfiguration.exact)).apply(instance, EndGatewayConfiguration::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/HugeMushroomFeatureConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/HugeMushroomFeatureConfiguration.java
index fc3b7b3eaeb6dc1100db1e34315da566d16086c4..78f09c452eb1126872a74640b1492f1d4d1f6fea 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/HugeMushroomFeatureConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/HugeMushroomFeatureConfiguration.java
@@ -20,6 +20,7 @@ public class HugeMushroomFeatureConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)BlockStateProvider.CODEC.fieldOf("cap_provider").forGetter(hugeMushroomFeatureConfiguration -> hugeMushroomFeatureConfiguration.capProvider), (App)BlockStateProvider.CODEC.fieldOf("stem_provider").forGetter(hugeMushroomFeatureConfiguration -> hugeMushroomFeatureConfiguration.stemProvider), (App)Codec.INT.fieldOf("foliage_radius").orElse(2).forGetter(hugeMushroomFeatureConfiguration -> hugeMushroomFeatureConfiguration.foliageRadius)).apply(instance, HugeMushroomFeatureConfiguration::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(BlockStateProvider.CODEC.fieldOf("cap_provider").forGetter(hugeMushroomFeatureConfiguration -> hugeMushroomFeatureConfiguration.capProvider), BlockStateProvider.CODEC.fieldOf("stem_provider").forGetter(hugeMushroomFeatureConfiguration -> hugeMushroomFeatureConfiguration.stemProvider), Codec.INT.fieldOf("foliage_radius").orElse(2).forGetter(hugeMushroomFeatureConfiguration -> hugeMushroomFeatureConfiguration.foliageRadius)).apply(instance, HugeMushroomFeatureConfiguration::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/LayerConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/LayerConfiguration.java
index 950d9d492cfa014f9414fe808adbeb9607d50419..3e55851a968db48ef37e5a328c19be45f1329a94 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/LayerConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/LayerConfiguration.java
@@ -19,6 +19,7 @@ public class LayerConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)Codec.intRange(0, 255).fieldOf("height").forGetter(layerConfiguration -> layerConfiguration.height), (App)BlockState.CODEC.fieldOf("state").forGetter(layerConfiguration -> layerConfiguration.state)).apply(instance, (BiFunction)LayerConfiguration::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(Codec.intRange(0, 255).fieldOf("height").forGetter(layerConfiguration -> layerConfiguration.height), BlockState.CODEC.fieldOf("state").forGetter(layerConfiguration -> layerConfiguration.state)).apply(instance, LayerConfiguration::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/NoiseDependantDecoratorConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/NoiseDependantDecoratorConfiguration.java
index 23e5c178f27c24c29f5793097367d86a2b324e5c..ad93131a7657408fb5a350c4ee339b057c1eae8e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/NoiseDependantDecoratorConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/NoiseDependantDecoratorConfiguration.java
@@ -19,6 +19,7 @@ public class NoiseDependantDecoratorConfiguration implements DecoratorConfigurat
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)Codec.DOUBLE.fieldOf("noise_level").forGetter(noiseDependantDecoratorConfiguration -> noiseDependantDecoratorConfiguration.noiseLevel), (App)Codec.INT.fieldOf("below_noise").forGetter(noiseDependantDecoratorConfiguration -> noiseDependantDecoratorConfiguration.belowNoise), (App)Codec.INT.fieldOf("above_noise").forGetter(noiseDependantDecoratorConfiguration -> noiseDependantDecoratorConfiguration.aboveNoise)).apply(instance, NoiseDependantDecoratorConfiguration::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(Codec.DOUBLE.fieldOf("noise_level").forGetter(noiseDependantDecoratorConfiguration -> noiseDependantDecoratorConfiguration.noiseLevel), Codec.INT.fieldOf("below_noise").forGetter(noiseDependantDecoratorConfiguration -> noiseDependantDecoratorConfiguration.belowNoise), Codec.INT.fieldOf("above_noise").forGetter(noiseDependantDecoratorConfiguration -> noiseDependantDecoratorConfiguration.aboveNoise)).apply(instance, NoiseDependantDecoratorConfiguration::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/OreConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/OreConfiguration.java
index 3e57b620b8b7209156e8903c42127984e923f54e..5e5c603b7b0808f053bf53a15c879c458186204a 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/OreConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/OreConfiguration.java
@@ -27,7 +27,8 @@ public class OreConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)RuleTest.CODEC.fieldOf("target").forGetter(oreConfiguration -> oreConfiguration.target), (App)BlockState.CODEC.fieldOf("state").forGetter(oreConfiguration -> oreConfiguration.state), (App)Codec.intRange(0, 64).fieldOf("size").forGetter(oreConfiguration -> oreConfiguration.size)).apply(instance, OreConfiguration::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(RuleTest.CODEC.fieldOf("target").forGetter(oreConfiguration -> oreConfiguration.target), BlockState.CODEC.fieldOf("state").forGetter(oreConfiguration -> oreConfiguration.state), Codec.intRange(0, 64).fieldOf("size").forGetter(oreConfiguration -> oreConfiguration.size)).apply(instance, OreConfiguration::new));
     }
     
     public static final class Predicates
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomBooleanFeatureConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomBooleanFeatureConfiguration.java
index 4ff3a984cf08e215b93ffea62aea7c3518dabc52..d375cc80c2a2d7e4eba918010366a224ce27c8fb 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomBooleanFeatureConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomBooleanFeatureConfiguration.java
@@ -26,6 +26,7 @@ public class RandomBooleanFeatureConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)ConfiguredFeature.CODEC.fieldOf("feature_true").forGetter(randomBooleanFeatureConfiguration -> randomBooleanFeatureConfiguration.featureTrue), (App)ConfiguredFeature.CODEC.fieldOf("feature_false").forGetter(randomBooleanFeatureConfiguration -> randomBooleanFeatureConfiguration.featureFalse)).apply(instance, (BiFunction)RandomBooleanFeatureConfiguration::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(ConfiguredFeature.CODEC.fieldOf("feature_true").forGetter(randomBooleanFeatureConfiguration -> randomBooleanFeatureConfiguration.featureTrue), ConfiguredFeature.CODEC.fieldOf("feature_false").forGetter(randomBooleanFeatureConfiguration -> randomBooleanFeatureConfiguration.featureFalse)).apply(instance, RandomBooleanFeatureConfiguration::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomFeatureConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomFeatureConfiguration.java
index d99ee1e65efb5c2ed5c5a981be56ae070361666a..90e23fe8e875d9b82d84de6087e83c877d87e023 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomFeatureConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomFeatureConfiguration.java
@@ -31,6 +31,7 @@ public class RandomFeatureConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> instance.apply2((BiFunction)RandomFeatureConfiguration::new, (App)WeightedConfiguredFeature.CODEC.listOf().fieldOf("features").forGetter(randomFeatureConfiguration -> randomFeatureConfiguration.features), (App)ConfiguredFeature.CODEC.fieldOf("default").forGetter(randomFeatureConfiguration -> randomFeatureConfiguration.defaultFeature)));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.apply2(RandomFeatureConfiguration::new, WeightedConfiguredFeature.CODEC.listOf().fieldOf("features").forGetter(randomFeatureConfiguration -> randomFeatureConfiguration.features), ConfiguredFeature.CODEC.fieldOf("default").forGetter(randomFeatureConfiguration -> randomFeatureConfiguration.defaultFeature)));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java
index f6e07c05e8bfb7a479fd33efa3123cfaf44b6698..377c43403827181b73d685d6ea9d5110da79121d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java
@@ -18,7 +18,8 @@ import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvi
 
 public class RandomPatchConfiguration
 implements FeatureConfiguration {
-    public static final Codec<RandomPatchConfiguration> CODEC = RecordCodecBuilder.create(instance -> instance.group((App)BlockStateProvider.CODEC.fieldOf("state_provider").forGetter(randomPatchConfiguration -> randomPatchConfiguration.stateProvider), (App)BlockPlacer.CODEC.fieldOf("block_placer").forGetter(randomPatchConfiguration -> randomPatchConfiguration.blockPlacer), (App)BlockState.CODEC.listOf().fieldOf("whitelist").forGetter(randomPatchConfiguration -> randomPatchConfiguration.whitelist.stream().map(Block::defaultBlockState).collect(Collectors.toList())), (App)BlockState.CODEC.listOf().fieldOf("blacklist").forGetter(randomPatchConfiguration -> ImmutableList.copyOf(randomPatchConfiguration.blacklist)), (App)Codec.INT.fieldOf("tries").orElse(128).forGetter(randomPatchConfiguration -> randomPatchConfiguration.tries), (App)Codec.INT.fieldOf("xspread").orElse(7).forGetter(randomPatchConfiguration -> randomPatchConfiguration.xspread), (App)Codec.INT.fieldOf("yspread").orElse(3).forGetter(randomPatchConfiguration -> randomPatchConfiguration.yspread), (App)Codec.INT.fieldOf("zspread").orElse(7).forGetter(randomPatchConfiguration -> randomPatchConfiguration.zspread), (App)Codec.BOOL.fieldOf("can_replace").orElse(false).forGetter(randomPatchConfiguration -> randomPatchConfiguration.canReplace), (App)Codec.BOOL.fieldOf("project").orElse(true).forGetter(randomPatchConfiguration -> randomPatchConfiguration.project), (App)Codec.BOOL.fieldOf("need_water").orElse(false).forGetter(randomPatchConfiguration -> randomPatchConfiguration.needWater)).apply((Applicative)instance, RandomPatchConfiguration::new));
+    // MagmaCube - decompile error
+    public static final Codec<RandomPatchConfiguration> CODEC = RecordCodecBuilder.create(instance -> instance.group(BlockStateProvider.CODEC.fieldOf("state_provider").forGetter(randomPatchConfiguration -> randomPatchConfiguration.stateProvider), BlockPlacer.CODEC.fieldOf("block_placer").forGetter(randomPatchConfiguration -> randomPatchConfiguration.blockPlacer), BlockState.CODEC.listOf().fieldOf("whitelist").forGetter(randomPatchConfiguration -> randomPatchConfiguration.whitelist.stream().map(Block::defaultBlockState).collect(Collectors.toList())), BlockState.CODEC.listOf().fieldOf("blacklist").forGetter(randomPatchConfiguration -> ImmutableList.copyOf(randomPatchConfiguration.blacklist)), Codec.INT.fieldOf("tries").orElse(128).forGetter(randomPatchConfiguration -> randomPatchConfiguration.tries), Codec.INT.fieldOf("xspread").orElse(7).forGetter(randomPatchConfiguration -> randomPatchConfiguration.xspread), Codec.INT.fieldOf("yspread").orElse(3).forGetter(randomPatchConfiguration -> randomPatchConfiguration.yspread), Codec.INT.fieldOf("zspread").orElse(7).forGetter(randomPatchConfiguration -> randomPatchConfiguration.zspread), Codec.BOOL.fieldOf("can_replace").orElse(false).forGetter(randomPatchConfiguration -> randomPatchConfiguration.canReplace), Codec.BOOL.fieldOf("project").orElse(true).forGetter(randomPatchConfiguration -> randomPatchConfiguration.project), Codec.BOOL.fieldOf("need_water").orElse(false).forGetter(randomPatchConfiguration -> randomPatchConfiguration.needWater)).apply(instance, RandomPatchConfiguration::new));
     public final BlockStateProvider stateProvider;
     public final BlockPlacer blockPlacer;
     public final Set<Block> whitelist;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RangeDecoratorConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RangeDecoratorConfiguration.java
index 94472474fe87ac67c62861623e73bff53841940d..68f986d26157100603a48309934d0eff8414dd90 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RangeDecoratorConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RangeDecoratorConfiguration.java
@@ -19,6 +19,7 @@ public class RangeDecoratorConfiguration implements DecoratorConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)Codec.INT.fieldOf("bottom_offset").orElse(0).forGetter(rangeDecoratorConfiguration -> rangeDecoratorConfiguration.bottomOffset), (App)Codec.INT.fieldOf("top_offset").orElse(0).forGetter(rangeDecoratorConfiguration -> rangeDecoratorConfiguration.topOffset), (App)Codec.INT.fieldOf("maximum").orElse(0).forGetter(rangeDecoratorConfiguration -> rangeDecoratorConfiguration.maximum)).apply(instance, RangeDecoratorConfiguration::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(Codec.INT.fieldOf("bottom_offset").orElse(0).forGetter(rangeDecoratorConfiguration -> rangeDecoratorConfiguration.bottomOffset), Codec.INT.fieldOf("top_offset").orElse(0).forGetter(rangeDecoratorConfiguration -> rangeDecoratorConfiguration.topOffset), Codec.INT.fieldOf("maximum").orElse(0).forGetter(rangeDecoratorConfiguration -> rangeDecoratorConfiguration.maximum)).apply(instance, RangeDecoratorConfiguration::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ReplaceBlockConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ReplaceBlockConfiguration.java
index 484a079af46d44f12e633fe31d21baf30e6fe423..506ed4641820350121dc3c100712300b0c6d6b5c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ReplaceBlockConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ReplaceBlockConfiguration.java
@@ -19,6 +19,7 @@ public class ReplaceBlockConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)BlockState.CODEC.fieldOf("target").forGetter(replaceBlockConfiguration -> replaceBlockConfiguration.target), (App)BlockState.CODEC.fieldOf("state").forGetter(replaceBlockConfiguration -> replaceBlockConfiguration.state)).apply(instance, (BiFunction)ReplaceBlockConfiguration::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(BlockState.CODEC.fieldOf("target").forGetter(replaceBlockConfiguration -> replaceBlockConfiguration.target), BlockState.CODEC.fieldOf("state").forGetter(replaceBlockConfiguration -> replaceBlockConfiguration.state)).apply(instance, ReplaceBlockConfiguration::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ReplaceSphereConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ReplaceSphereConfiguration.java
index a4becfa302d00baf7f2e2d33a140b6ab11de38b4..9b2115f5df41eea31c58af8d5815f5333cd3640b 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ReplaceSphereConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ReplaceSphereConfiguration.java
@@ -25,6 +25,7 @@ public class ReplaceSphereConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)BlockState.CODEC.fieldOf("target").forGetter(replaceSphereConfiguration -> replaceSphereConfiguration.targetState), (App)BlockState.CODEC.fieldOf("state").forGetter(replaceSphereConfiguration -> replaceSphereConfiguration.replaceState), (App)UniformInt.CODEC.fieldOf("radius").forGetter(replaceSphereConfiguration -> replaceSphereConfiguration.radius)).apply(instance, ReplaceSphereConfiguration::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(BlockState.CODEC.fieldOf("target").forGetter(replaceSphereConfiguration -> replaceSphereConfiguration.targetState), BlockState.CODEC.fieldOf("state").forGetter(replaceSphereConfiguration -> replaceSphereConfiguration.replaceState), UniformInt.CODEC.fieldOf("radius").forGetter(replaceSphereConfiguration -> replaceSphereConfiguration.radius)).apply(instance, ReplaceSphereConfiguration::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleBlockConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleBlockConfiguration.java
index f16b49d4d23e7a7f5f9c49d84aff74908946b0a0..d4f3c7e726c85dc3354b0c3a219cccfea24b5f04 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleBlockConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleBlockConfiguration.java
@@ -23,6 +23,7 @@ public class SimpleBlockConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)BlockState.CODEC.fieldOf("to_place").forGetter(simpleBlockConfiguration -> simpleBlockConfiguration.toPlace), (App)BlockState.CODEC.listOf().fieldOf("place_on").forGetter(simpleBlockConfiguration -> simpleBlockConfiguration.placeOn), (App)BlockState.CODEC.listOf().fieldOf("place_in").forGetter(simpleBlockConfiguration -> simpleBlockConfiguration.placeIn), (App)BlockState.CODEC.listOf().fieldOf("place_under").forGetter(simpleBlockConfiguration -> simpleBlockConfiguration.placeUnder)).apply(instance, SimpleBlockConfiguration::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(BlockState.CODEC.fieldOf("to_place").forGetter(simpleBlockConfiguration -> simpleBlockConfiguration.toPlace), BlockState.CODEC.listOf().fieldOf("place_on").forGetter(simpleBlockConfiguration -> simpleBlockConfiguration.placeOn), BlockState.CODEC.listOf().fieldOf("place_in").forGetter(simpleBlockConfiguration -> simpleBlockConfiguration.placeIn), BlockState.CODEC.listOf().fieldOf("place_under").forGetter(simpleBlockConfiguration -> simpleBlockConfiguration.placeUnder)).apply(instance, SimpleBlockConfiguration::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleRandomFeatureConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleRandomFeatureConfiguration.java
index 37efe6c7c44f57ed625a99f4938e70e1629fbe3b..37405409614c55ce20705ebb58af5a711ac3a3f0 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleRandomFeatureConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleRandomFeatureConfiguration.java
@@ -22,6 +22,7 @@ public class SimpleRandomFeatureConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = ConfiguredFeature.LIST_CODEC.fieldOf("features").xmap((Function)SimpleRandomFeatureConfiguration::new, simpleRandomFeatureConfiguration -> simpleRandomFeatureConfiguration.features).codec();
+        // MagmaCube - decompile error
+        CODEC = ConfiguredFeature.LIST_CODEC.fieldOf("features").xmap(SimpleRandomFeatureConfiguration::new, simpleRandomFeatureConfiguration -> simpleRandomFeatureConfiguration.features).codec();
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpikeConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpikeConfiguration.java
index 5940aad68612f4e910c18eb05f011ff764568310..d24bd96f8947cbeb02d0db2f69e30247b9fb7b58 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpikeConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpikeConfiguration.java
@@ -42,6 +42,7 @@ public class SpikeConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)Codec.BOOL.fieldOf("crystal_invulnerable").orElse(false).forGetter(spikeConfiguration -> spikeConfiguration.crystalInvulnerable), (App)SpikeFeature.EndSpike.CODEC.listOf().fieldOf("spikes").forGetter(spikeConfiguration -> spikeConfiguration.spikes), (App)BlockPos.CODEC.optionalFieldOf("crystal_beam_target").forGetter(spikeConfiguration -> Optional.ofNullable(spikeConfiguration.crystalBeamTarget))).apply(instance, SpikeConfiguration::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(Codec.BOOL.fieldOf("crystal_invulnerable").orElse(false).forGetter(spikeConfiguration -> spikeConfiguration.crystalInvulnerable), SpikeFeature.EndSpike.CODEC.listOf().fieldOf("spikes").forGetter(spikeConfiguration -> spikeConfiguration.spikes), BlockPos.CODEC.optionalFieldOf("crystal_beam_target").forGetter(spikeConfiguration -> Optional.ofNullable(spikeConfiguration.crystalBeamTarget))).apply(instance, SpikeConfiguration::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java
index cfb23e3ec9bf51dab17d8fde05762341fab544d7..dc9cad1501093bf2b21dcb95b404863b7e8874cc 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java
@@ -30,6 +30,7 @@ public class SpringConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)FluidState.CODEC.fieldOf("state").forGetter(springConfiguration -> springConfiguration.state), (App)Codec.BOOL.fieldOf("requires_block_below").orElse(true).forGetter(springConfiguration -> springConfiguration.requiresBlockBelow), (App)Codec.INT.fieldOf("rock_count").orElse(4).forGetter(springConfiguration -> springConfiguration.rockCount), (App)Codec.INT.fieldOf("hole_count").orElse(1).forGetter(springConfiguration -> springConfiguration.holeCount), (App)Registry.BLOCK.listOf().fieldOf("valid_blocks").xmap((Function)ImmutableSet::copyOf, (Function)ImmutableList::copyOf).forGetter(springConfiguration -> springConfiguration.validBlocks)).apply(instance, SpringConfiguration::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(FluidState.CODEC.fieldOf("state").forGetter(springConfiguration -> springConfiguration.state), Codec.BOOL.fieldOf("requires_block_below").orElse(true).forGetter(springConfiguration -> springConfiguration.requiresBlockBelow), Codec.INT.fieldOf("rock_count").orElse(4).forGetter(springConfiguration -> springConfiguration.rockCount), Codec.INT.fieldOf("hole_count").orElse(1).forGetter(springConfiguration -> springConfiguration.holeCount), Registry.BLOCK.listOf().fieldOf("valid_blocks").xmap(ImmutableSet::copyOf, ImmutableList::copyOf).forGetter(springConfiguration -> (ImmutableSet<Block>) springConfiguration.validBlocks)).apply(instance, SpringConfiguration::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/StrongholdConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/StrongholdConfiguration.java
index daa0846264a224129731cf746c90c2cf10a871b1..89b086931294374d9b348e0ca984833b504581f9 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/StrongholdConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/StrongholdConfiguration.java
@@ -32,6 +32,7 @@ public class StrongholdConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)Codec.intRange(0, 1023).fieldOf("distance").forGetter((Function)StrongholdConfiguration::distance), (App)Codec.intRange(0, 1023).fieldOf("spread").forGetter((Function)StrongholdConfiguration::spread), (App)Codec.intRange(1, 4095).fieldOf("count").forGetter((Function)StrongholdConfiguration::count)).apply(instance, StrongholdConfiguration::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(Codec.intRange(0, 1023).fieldOf("distance").forGetter(StrongholdConfiguration::distance), Codec.intRange(0, 1023).fieldOf("spread").forGetter(StrongholdConfiguration::spread), Codec.intRange(1, 4095).fieldOf("count").forGetter(StrongholdConfiguration::count)).apply(instance, StrongholdConfiguration::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration.java
index 1f30d30fbe5f8ed9912fbe52d7a36ad7213474ff..03971570bd4a12872b6558f85602b5c5c046fda4 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration.java
@@ -48,7 +48,8 @@ public class TreeConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)BlockStateProvider.CODEC.fieldOf("trunk_provider").forGetter(treeConfiguration -> treeConfiguration.trunkProvider), (App)BlockStateProvider.CODEC.fieldOf("leaves_provider").forGetter(treeConfiguration -> treeConfiguration.leavesProvider), (App)FoliagePlacer.CODEC.fieldOf("foliage_placer").forGetter(treeConfiguration -> treeConfiguration.foliagePlacer), (App)TrunkPlacer.CODEC.fieldOf("trunk_placer").forGetter(treeConfiguration -> treeConfiguration.trunkPlacer), (App)FeatureSize.CODEC.fieldOf("minimum_size").forGetter(treeConfiguration -> treeConfiguration.minimumSize), (App)TreeDecorator.CODEC.listOf().fieldOf("decorators").forGetter(treeConfiguration -> treeConfiguration.decorators), (App)Codec.INT.fieldOf("max_water_depth").orElse(0).forGetter(treeConfiguration -> treeConfiguration.maxWaterDepth), (App)Codec.BOOL.fieldOf("ignore_vines").orElse(false).forGetter(treeConfiguration -> treeConfiguration.ignoreVines), (App)Heightmap.Types.CODEC.fieldOf("heightmap").forGetter(treeConfiguration -> treeConfiguration.heightmap)).apply(instance, TreeConfiguration::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(BlockStateProvider.CODEC.fieldOf("trunk_provider").forGetter(treeConfiguration -> treeConfiguration.trunkProvider), BlockStateProvider.CODEC.fieldOf("leaves_provider").forGetter(treeConfiguration -> treeConfiguration.leavesProvider), FoliagePlacer.CODEC.fieldOf("foliage_placer").forGetter(treeConfiguration -> treeConfiguration.foliagePlacer), TrunkPlacer.CODEC.fieldOf("trunk_placer").forGetter(treeConfiguration -> treeConfiguration.trunkPlacer), FeatureSize.CODEC.fieldOf("minimum_size").forGetter(treeConfiguration -> treeConfiguration.minimumSize), TreeDecorator.CODEC.listOf().fieldOf("decorators").forGetter(treeConfiguration -> treeConfiguration.decorators), Codec.INT.fieldOf("max_water_depth").orElse(0).forGetter(treeConfiguration -> treeConfiguration.maxWaterDepth), Codec.BOOL.fieldOf("ignore_vines").orElse(false).forGetter(treeConfiguration -> treeConfiguration.ignoreVines), Heightmap.Types.CODEC.fieldOf("heightmap").forGetter(treeConfiguration -> treeConfiguration.heightmap)).apply(instance, TreeConfiguration::new));
     }
     
     public static class TreeConfigurationBuilder
@@ -64,7 +65,7 @@ public class TreeConfiguration implements FeatureConfiguration
         private Heightmap.Types heightmap;
         
         public TreeConfigurationBuilder(final BlockStateProvider blockStateProvider, final BlockStateProvider blockStateProvider2, final FoliagePlacer foliagePlacer, final TrunkPlacer trunkPlacer, final FeatureSize featureSize) {
-            this.decorators = (List<TreeDecorator>)ImmutableList.of();
+            this.decorators = ImmutableList.of(); // MagmaCube - decompile error
             this.heightmap = Heightmap.Types.OCEAN_FLOOR;
             this.trunkProvider = blockStateProvider;
             this.leavesProvider = blockStateProvider2;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/featuresize/ThreeLayersFeatureSize.java b/src/main/java/net/minecraft/world/level/levelgen/feature/featuresize/ThreeLayersFeatureSize.java
index 6bdad1ff9ed0b9baac9c944202babcc78fa6f6ff..d42dad85d1bd0fa5556aa209da70bf9b1af9072e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/featuresize/ThreeLayersFeatureSize.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/featuresize/ThreeLayersFeatureSize.java
@@ -41,6 +41,7 @@ public class ThreeLayersFeatureSize extends FeatureSize
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)Codec.intRange(0, 80).fieldOf("limit").orElse(1).forGetter(threeLayersFeatureSize -> threeLayersFeatureSize.limit), (App)Codec.intRange(0, 80).fieldOf("upper_limit").orElse(1).forGetter(threeLayersFeatureSize -> threeLayersFeatureSize.upperLimit), (App)Codec.intRange(0, 16).fieldOf("lower_size").orElse(0).forGetter(threeLayersFeatureSize -> threeLayersFeatureSize.lowerSize), (App)Codec.intRange(0, 16).fieldOf("middle_size").orElse(1).forGetter(threeLayersFeatureSize -> threeLayersFeatureSize.middleSize), (App)Codec.intRange(0, 16).fieldOf("upper_size").orElse(1).forGetter(threeLayersFeatureSize -> threeLayersFeatureSize.upperSize), (App)FeatureSize.minClippedHeightCodec()).apply(instance, ThreeLayersFeatureSize::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(Codec.intRange(0, 80).fieldOf("limit").orElse(1).forGetter(threeLayersFeatureSize -> threeLayersFeatureSize.limit), Codec.intRange(0, 80).fieldOf("upper_limit").orElse(1).forGetter(threeLayersFeatureSize -> threeLayersFeatureSize.upperLimit), Codec.intRange(0, 16).fieldOf("lower_size").orElse(0).forGetter(threeLayersFeatureSize -> threeLayersFeatureSize.lowerSize), Codec.intRange(0, 16).fieldOf("middle_size").orElse(1).forGetter(threeLayersFeatureSize -> threeLayersFeatureSize.middleSize), Codec.intRange(0, 16).fieldOf("upper_size").orElse(1).forGetter(threeLayersFeatureSize -> threeLayersFeatureSize.upperSize), FeatureSize.minClippedHeightCodec()).apply(instance, ThreeLayersFeatureSize::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/featuresize/TwoLayersFeatureSize.java b/src/main/java/net/minecraft/world/level/levelgen/feature/featuresize/TwoLayersFeatureSize.java
index 520f7cc1083224c09b6d48e8c288bf46d524d16d..709bd39868e53d414d46f068974a0c74fd5014db 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/featuresize/TwoLayersFeatureSize.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/featuresize/TwoLayersFeatureSize.java
@@ -35,6 +35,7 @@ public class TwoLayersFeatureSize extends FeatureSize
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)Codec.intRange(0, 81).fieldOf("limit").orElse(1).forGetter(twoLayersFeatureSize -> twoLayersFeatureSize.limit), (App)Codec.intRange(0, 16).fieldOf("lower_size").orElse(0).forGetter(twoLayersFeatureSize -> twoLayersFeatureSize.lowerSize), (App)Codec.intRange(0, 16).fieldOf("upper_size").orElse(1).forGetter(twoLayersFeatureSize -> twoLayersFeatureSize.upperSize), (App)FeatureSize.minClippedHeightCodec()).apply(instance, TwoLayersFeatureSize::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(Codec.intRange(0, 81).fieldOf("limit").orElse(1).forGetter(twoLayersFeatureSize -> twoLayersFeatureSize.limit), Codec.intRange(0, 16).fieldOf("lower_size").orElse(0).forGetter(twoLayersFeatureSize -> twoLayersFeatureSize.lowerSize), Codec.intRange(0, 16).fieldOf("upper_size").orElse(1).forGetter(twoLayersFeatureSize -> twoLayersFeatureSize.upperSize), FeatureSize.minClippedHeightCodec()).apply(instance, TwoLayersFeatureSize::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/AcaciaFoliagePlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/AcaciaFoliagePlacer.java
index 9810fa76be24d2369087d1ab61c03e8e8f353a9b..95150d1f3d051747459c6785ac7501c5f8ac5b5e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/AcaciaFoliagePlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/AcaciaFoliagePlacer.java
@@ -49,6 +49,7 @@ public class AcaciaFoliagePlacer extends FoliagePlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> FoliagePlacer.foliagePlacerParts((RecordCodecBuilder.Instance<FoliagePlacer>)instance).apply(instance, (BiFunction)AcaciaFoliagePlacer::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> FoliagePlacer.foliagePlacerParts(instance).apply(instance, AcaciaFoliagePlacer::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/BlobFoliagePlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/BlobFoliagePlacer.java
index 64c387e655be0bf9b40290d3a2354ddcb27648b3..05c9527e52cb2db5f967038fc861e179a7a351fb 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/BlobFoliagePlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/BlobFoliagePlacer.java
@@ -19,7 +19,8 @@ public class BlobFoliagePlacer extends FoliagePlacer
     protected final int height;
     
     protected static <P extends BlobFoliagePlacer> Products.P3<RecordCodecBuilder.Mu<P>, UniformInt, UniformInt, Integer> blobParts(final RecordCodecBuilder.Instance<P> instance) {
-        return (Products.P3<RecordCodecBuilder.Mu<P>, UniformInt, UniformInt, Integer>)FoliagePlacer.foliagePlacerParts(instance).and((App)Codec.intRange(0, 16).fieldOf("height").forGetter(blobFoliagePlacer -> blobFoliagePlacer.height));
+        // MagmaCube - decompile error
+        return (Products.P3<RecordCodecBuilder.Mu<P>, UniformInt, UniformInt, Integer>)FoliagePlacer.foliagePlacerParts(instance).and(Codec.intRange(0, 16).fieldOf("height").forGetter(blobFoliagePlacer -> blobFoliagePlacer.height));
     }
     
     public BlobFoliagePlacer(final UniformInt uniformInt, final UniformInt uniformInt2, final int i) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/BushFoliagePlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/BushFoliagePlacer.java
index 2d9eb63eaa86884994affce24deca8d7d9a0c3d8..2aba46aeff85d67336fbae3b547b4df90e266e06 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/BushFoliagePlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/BushFoliagePlacer.java
@@ -39,6 +39,7 @@ public class BushFoliagePlacer extends BlobFoliagePlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> BlobFoliagePlacer.blobParts((RecordCodecBuilder.Instance<BlobFoliagePlacer>)instance).apply(instance, BushFoliagePlacer::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> BlobFoliagePlacer.blobParts(instance).apply(instance, BushFoliagePlacer::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/DarkOakFoliagePlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/DarkOakFoliagePlacer.java
index 1bdabc38d19c169d2efe366d71eef00eef9045fd..a17eb7b964ac3bece9833197996644127003fe5c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/DarkOakFoliagePlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/DarkOakFoliagePlacer.java
@@ -63,6 +63,7 @@ public class DarkOakFoliagePlacer extends FoliagePlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> FoliagePlacer.foliagePlacerParts((RecordCodecBuilder.Instance<FoliagePlacer>)instance).apply(instance, (BiFunction)DarkOakFoliagePlacer::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> FoliagePlacer.foliagePlacerParts(instance).apply(instance, DarkOakFoliagePlacer::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/FancyFoliagePlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/FancyFoliagePlacer.java
index 11f90da6720d2f7a6017a4d729f179ff6e72ec16..4fd22b472b5db2c8d51dfc58aa56a0a3b94ada46 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/FancyFoliagePlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/FancyFoliagePlacer.java
@@ -40,6 +40,7 @@ public class FancyFoliagePlacer extends BlobFoliagePlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> BlobFoliagePlacer.blobParts((RecordCodecBuilder.Instance<BlobFoliagePlacer>)instance).apply(instance, FancyFoliagePlacer::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> BlobFoliagePlacer.blobParts(instance).apply(instance, FancyFoliagePlacer::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/MegaJungleFoliagePlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/MegaJungleFoliagePlacer.java
index 396087fbf8668a7dee07ec006df8604be216003e..bf65a7aa3dc63d97bfe11d5a37ca467d79278807 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/MegaJungleFoliagePlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/MegaJungleFoliagePlacer.java
@@ -46,6 +46,7 @@ public class MegaJungleFoliagePlacer extends FoliagePlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> FoliagePlacer.foliagePlacerParts((RecordCodecBuilder.Instance<FoliagePlacer>)instance).and((App)Codec.intRange(0, 16).fieldOf("height").forGetter(megaJungleFoliagePlacer -> megaJungleFoliagePlacer.height)).apply(instance, MegaJungleFoliagePlacer::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> FoliagePlacer.foliagePlacerParts(instance).and(Codec.intRange(0, 16).fieldOf("height").forGetter(megaJungleFoliagePlacer -> megaJungleFoliagePlacer.height)).apply(instance, MegaJungleFoliagePlacer::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/MegaPineFoliagePlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/MegaPineFoliagePlacer.java
index fb6afb424fff336f8fba4e225132663f8489c648..aa41230d5d63b66d0152b70e3d6f62e97c499a8c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/MegaPineFoliagePlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/MegaPineFoliagePlacer.java
@@ -34,10 +34,10 @@ public class MegaPineFoliagePlacer extends FoliagePlacer
         int i5 = 0;
         for (int i6 = blockPos.getY() - i2 + i4; i6 <= blockPos.getY() + i4; ++i6) {
             final int i7 = blockPos.getY() - i6;
-            final int i8 = i3 + foliageAttachment.radiusOffset() + Mth.floor(i7 / i2 * 3.5f);
+            final int i8 = i3 + foliageAttachment.radiusOffset() + Mth.floor((float)(i7 / i2 * 3.5f)); // MagmaCube - math
             final int i10;
             if (i7 > 0 && i8 == i5 && (i6 & 0x1) == 0x0) {
-                final int i9 = i8 + 1;
+                i10 = i8 + 1; // MagmaCube - decompile error
             }
             else {
                 i10 = i8;
@@ -58,6 +58,7 @@ public class MegaPineFoliagePlacer extends FoliagePlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> FoliagePlacer.foliagePlacerParts((RecordCodecBuilder.Instance<FoliagePlacer>)instance).and((App)UniformInt.codec(0, 16, 8).fieldOf("crown_height").forGetter(megaPineFoliagePlacer -> megaPineFoliagePlacer.crownHeight)).apply(instance, MegaPineFoliagePlacer::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> FoliagePlacer.foliagePlacerParts(instance).and(UniformInt.codec(0, 16, 8).fieldOf("crown_height").forGetter(megaPineFoliagePlacer -> megaPineFoliagePlacer.crownHeight)).apply(instance, MegaPineFoliagePlacer::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/PineFoliagePlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/PineFoliagePlacer.java
index d369c8165b5cc1f7242f09dabe070936f85aba1d..3178e9faeca9da6cc95b821138d24d9f6ba5acf3 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/PineFoliagePlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/PineFoliagePlacer.java
@@ -57,6 +57,7 @@ public class PineFoliagePlacer extends FoliagePlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> FoliagePlacer.foliagePlacerParts((RecordCodecBuilder.Instance<FoliagePlacer>)instance).and((App)UniformInt.codec(0, 16, 8).fieldOf("height").forGetter(pineFoliagePlacer -> pineFoliagePlacer.height)).apply(instance, PineFoliagePlacer::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> FoliagePlacer.foliagePlacerParts(instance).and(UniformInt.codec(0, 16, 8).fieldOf("height").forGetter(pineFoliagePlacer -> pineFoliagePlacer.height)).apply(instance, PineFoliagePlacer::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/SpruceFoliagePlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/SpruceFoliagePlacer.java
index 6d572c17f9dccd26b403535ecdddb1f96ef182c6..946c72384808fdc8bdd7d9c5f3de604eab9d3272 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/SpruceFoliagePlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/SpruceFoliagePlacer.java
@@ -57,6 +57,7 @@ public class SpruceFoliagePlacer extends FoliagePlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> FoliagePlacer.foliagePlacerParts((RecordCodecBuilder.Instance<FoliagePlacer>)instance).and((App)UniformInt.codec(0, 16, 8).fieldOf("trunk_height").forGetter(spruceFoliagePlacer -> spruceFoliagePlacer.trunkHeight)).apply(instance, SpruceFoliagePlacer::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> FoliagePlacer.foliagePlacerParts(instance).and(UniformInt.codec(0, 16, 8).fieldOf("trunk_height").forGetter(spruceFoliagePlacer -> spruceFoliagePlacer.trunkHeight)).apply(instance, SpruceFoliagePlacer::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider.java b/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider.java
index edff62827d652eeb212bf0b52d66315f6fba49d2..30fc7562556aace22ccb0c14773de0a175686572 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.feature.stateproviders;
 
-import java.util.function.Function;
 import net.minecraft.core.Registry;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.core.BlockPos;
@@ -16,6 +15,6 @@ public abstract class BlockStateProvider
     public abstract BlockState getState(final Random p0, final BlockPos p1);
     
     static {
-        CODEC = Registry.BLOCKSTATE_PROVIDER_TYPES.dispatch((Function)BlockStateProvider::type, (Function)BlockStateProviderType::codec);
+        CODEC = Registry.BLOCKSTATE_PROVIDER_TYPES.dispatch(BlockStateProvider::type, BlockStateProviderType::codec); // MagmaCube - decompile fix
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/RotatedBlockProvider.java b/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/RotatedBlockProvider.java
index 7a9f94c0ce8fea43b8000ba59de436ce9e56a8ec..80f97eb23fb867067a47dae3ba99a527191dc88c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/RotatedBlockProvider.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/RotatedBlockProvider.java
@@ -29,10 +29,11 @@ public class RotatedBlockProvider extends BlockStateProvider
     @Override
     public BlockState getState(final Random random, final BlockPos blockPos) {
         final Direction.Axis axis = Direction.Axis.getRandom(random);
-        return ((StateHolder<O, BlockState>)this.block.defaultBlockState()).setValue(RotatedPillarBlock.AXIS, axis);
+        return this.block.defaultBlockState().setValue(RotatedPillarBlock.AXIS, axis);
     }
     
     static {
-        CODEC = BlockState.CODEC.fieldOf("state").xmap((Function)BlockBehaviour.BlockStateBase::getBlock, (Function)Block::defaultBlockState).xmap((Function)RotatedBlockProvider::new, rotatedBlockProvider -> rotatedBlockProvider.block).codec();
+        // MagmaCube - decompile error
+        CODEC = BlockState.CODEC.fieldOf("state").xmap(BlockBehaviour.BlockStateBase::getBlock, Block::defaultBlockState).xmap(RotatedBlockProvider::new, rotatedBlockProvider -> rotatedBlockProvider.block).codec();
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/SimpleStateProvider.java b/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/SimpleStateProvider.java
index 039443219bcc70f85911e606ecceea7dac001ecb..2648e8b460deb883abe7541683fba513eded3e80 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/SimpleStateProvider.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/SimpleStateProvider.java
@@ -26,6 +26,7 @@ public class SimpleStateProvider extends BlockStateProvider
     }
     
     static {
-        CODEC = BlockState.CODEC.fieldOf("state").xmap((Function)SimpleStateProvider::new, simpleStateProvider -> simpleStateProvider.state).codec();
+        // MagmaCube - decompile error
+        CODEC = BlockState.CODEC.fieldOf("state").xmap(SimpleStateProvider::new, simpleStateProvider -> simpleStateProvider.state).codec();
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/WeightedStateProvider.java b/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/WeightedStateProvider.java
index a03b8e5a23cf711ef9ea5e5f78612a99bab9c1d4..d30078408fb45fd70f3eddfbaa0e237e7eeff64e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/WeightedStateProvider.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/WeightedStateProvider.java
@@ -15,7 +15,7 @@ public class WeightedStateProvider extends BlockStateProvider
     
     private static DataResult<WeightedStateProvider> create(final WeightedList<BlockState> weightedList) {
         if (weightedList.isEmpty()) {
-            return (DataResult<WeightedStateProvider>)DataResult.error("WeightedStateProvider with no states");
+            return DataResult.error("WeightedStateProvider with no states"); // MagmaCube - decompile error
         }
         return (DataResult<WeightedStateProvider>)DataResult.success(new WeightedStateProvider(weightedList));
     }
@@ -44,6 +44,7 @@ public class WeightedStateProvider extends BlockStateProvider
     }
     
     static {
-        CODEC = WeightedList.codec(BlockState.CODEC).comapFlatMap((Function)WeightedStateProvider::create, weightedStateProvider -> weightedStateProvider.weightedList).fieldOf("entries").codec();
+        // MagmaCube - decompile error
+        CODEC = WeightedList.codec(BlockState.CODEC).comapFlatMap(WeightedStateProvider::create, weightedStateProvider -> weightedStateProvider.weightedList).fieldOf("entries").codec();
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/FeaturePoolElement.java b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/FeaturePoolElement.java
index 331bde1ca69b86f224ea833f1e9052dc63416d37..48570d6e7fbd0f15ba1c43fe330145a5f76bd278 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/FeaturePoolElement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/FeaturePoolElement.java
@@ -58,8 +58,10 @@ public class FeaturePoolElement extends StructurePoolElement
     
     @Override
     public List<StructureTemplate.StructureBlockInfo> getShuffledJigsawBlocks(final StructureManager structureManager, final BlockPos blockPos, final Rotation rotation, final Random random) {
-        final List<StructureTemplate.StructureBlockInfo> list = (List<StructureTemplate.StructureBlockInfo>)Lists.newArrayList();
-        list.add(new StructureTemplate.StructureBlockInfo(blockPos, ((StateHolder<O, BlockState>)Blocks.JIGSAW.defaultBlockState()).setValue(JigsawBlock.ORIENTATION, FrontAndTop.fromFrontAndTop(Direction.DOWN, Direction.SOUTH)), this.defaultJigsawNBT));
+        // MagmaCube start - decompile error
+        final List<StructureTemplate.StructureBlockInfo> list = Lists.newArrayList();
+        list.add(new StructureTemplate.StructureBlockInfo(blockPos, (Blocks.JIGSAW.defaultBlockState()).setValue(JigsawBlock.ORIENTATION, FrontAndTop.fromFrontAndTop(Direction.DOWN, Direction.SOUTH)), this.defaultJigsawNBT));
+        // MagmaCube end - decompile error
         return list;
     }
     
@@ -85,6 +87,7 @@ public class FeaturePoolElement extends StructurePoolElement
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)ConfiguredFeature.CODEC.fieldOf("feature").forGetter(featurePoolElement -> featurePoolElement.feature), (App)StructurePoolElement.projectionCodec()).apply(instance, (BiFunction)FeaturePoolElement::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(ConfiguredFeature.CODEC.fieldOf("feature").forGetter(featurePoolElement -> featurePoolElement.feature), StructurePoolElement.projectionCodec()).apply(instance, FeaturePoolElement::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/LegacySinglePoolElement.java b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/LegacySinglePoolElement.java
index 012888a2e654d65331f1cae0a333ce0fa09c1db7..190fc22defbfcc52e21c0961f9135ff00de59079 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/LegacySinglePoolElement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/LegacySinglePoolElement.java
@@ -42,6 +42,7 @@ public class LegacySinglePoolElement extends SinglePoolElement
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)SinglePoolElement.templateCodec(), (App)SinglePoolElement.processorsCodec(), (App)StructurePoolElement.projectionCodec()).apply(instance, LegacySinglePoolElement::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(SinglePoolElement.templateCodec(), SinglePoolElement.processorsCodec(), StructurePoolElement.projectionCodec()).apply(instance, LegacySinglePoolElement::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/ListPoolElement.java b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/ListPoolElement.java
index 6be6b51fddf721fd055ed238e32bdd69419dc498..58f4d3d9badb4c1a85c6b466ea57874da5c0c761 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/ListPoolElement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/ListPoolElement.java
@@ -21,7 +21,8 @@ import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemp
 
 public class ListPoolElement
 extends StructurePoolElement {
-    public static final Codec<ListPoolElement> CODEC = RecordCodecBuilder.create(instance -> instance.group((App)StructurePoolElement.CODEC.listOf().fieldOf("elements").forGetter(listPoolElement -> listPoolElement.elements), ListPoolElement.projectionCodec()).apply((Applicative)instance, ListPoolElement::new));
+    // MagmaCube - decompile error
+    public static final Codec<ListPoolElement> CODEC = RecordCodecBuilder.create(instance -> instance.group(StructurePoolElement.CODEC.listOf().fieldOf("elements").forGetter(listPoolElement -> listPoolElement.elements), ListPoolElement.projectionCodec()).apply(instance, ListPoolElement::new));
     private final List<StructurePoolElement> elements;
 
     public ListPoolElement(List<StructurePoolElement> list, StructureTemplatePool.Projection projection) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/SinglePoolElement.java b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/SinglePoolElement.java
index c5db023c756723c93ceeb9052f6d96f248854d35..443f56cd9e25e39901b4b6b969448afb3316642e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/SinglePoolElement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/SinglePoolElement.java
@@ -53,11 +53,11 @@ public class SinglePoolElement extends StructurePoolElement
     }
     
     protected static <E extends SinglePoolElement> RecordCodecBuilder<E, Supplier<StructureProcessorList>> processorsCodec() {
-        return (RecordCodecBuilder<E, Supplier<StructureProcessorList>>)StructureProcessorType.LIST_CODEC.fieldOf("processors").forGetter(singlePoolElement -> singlePoolElement.processors);
+        return StructureProcessorType.LIST_CODEC.fieldOf("processors").forGetter(singlePoolElement -> singlePoolElement.processors); // MagmaCube - decompile error
     }
     
     protected static <E extends SinglePoolElement> RecordCodecBuilder<E, Either<ResourceLocation, StructureTemplate>> templateCodec() {
-        return (RecordCodecBuilder<E, Either<ResourceLocation, StructureTemplate>>)SinglePoolElement.TEMPLATE_CODEC.fieldOf("location").forGetter(singlePoolElement -> singlePoolElement.template);
+        return SinglePoolElement.TEMPLATE_CODEC.fieldOf("location").forGetter(singlePoolElement -> singlePoolElement.template); // MagmaCube - decompile error
     }
     
     protected SinglePoolElement(final Either<ResourceLocation, StructureTemplate> either, final Supplier<StructureProcessorList> supplier, final StructureTemplatePool.Projection projection) {
@@ -67,17 +67,17 @@ public class SinglePoolElement extends StructurePoolElement
     }
     
     public SinglePoolElement(final StructureTemplate structureTemplate) {
-        this((Either<ResourceLocation, StructureTemplate>)Either.right(structureTemplate), () -> ProcessorLists.EMPTY, StructureTemplatePool.Projection.RIGID);
+        this(Either.right(structureTemplate), () -> ProcessorLists.EMPTY, StructureTemplatePool.Projection.RIGID); // MagmaCube - decompile error
     }
     
     private StructureTemplate getTemplate(final StructureManager structureManager) {
-        return (StructureTemplate)this.template.map((Function)structureManager::getOrCreate, (Function)Function.identity());
+        return (StructureTemplate)this.template.map(structureManager::getOrCreate, Function.identity()); // MagmaCube - decompile error
     }
     
     public List<StructureTemplate.StructureBlockInfo> getDataMarkers(final StructureManager structureManager, final BlockPos blockPos, final Rotation rotation, final boolean flag) {
         final StructureTemplate structureTemplate = this.getTemplate(structureManager);
         final List<StructureTemplate.StructureBlockInfo> list = structureTemplate.filterBlocks(blockPos, new StructurePlaceSettings().setRotation(rotation), Blocks.STRUCTURE_BLOCK, flag);
-        final List<StructureTemplate.StructureBlockInfo> list2 = (List<StructureTemplate.StructureBlockInfo>)Lists.newArrayList();
+        final List<StructureTemplate.StructureBlockInfo> list2 = Lists.newArrayList(); // MagmaCube - decompile error
         for (final StructureTemplate.StructureBlockInfo structureBlockInfo : list) {
             if (structureBlockInfo.nbt == null) {
                 continue;
@@ -131,7 +131,7 @@ public class SinglePoolElement extends StructurePoolElement
             structurePlaceSettings.addProcessor(JigsawReplacementProcessor.INSTANCE);
         }
         this.processors.get().list().forEach(structurePlaceSettings::addProcessor);
-        this.getProjection().getProcessors().forEach((Consumer)structurePlaceSettings::addProcessor);
+        this.getProjection().getProcessors().forEach(structurePlaceSettings::addProcessor); // MagmaCube - decompile error
         return structurePlaceSettings;
     }
     
@@ -146,7 +146,9 @@ public class SinglePoolElement extends StructurePoolElement
     }
     
     static {
-        TEMPLATE_CODEC = Codec.of(SinglePoolElement::encodeTemplate, ResourceLocation.CODEC.map((Function)Either::left));
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)templateCodec(), (App)processorsCodec(), (App)StructurePoolElement.projectionCodec()).apply(instance, SinglePoolElement::new));
+        // MagmaCube start - decompile error
+        TEMPLATE_CODEC = Codec.of(SinglePoolElement::encodeTemplate, ResourceLocation.CODEC.map(Either::left));
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(templateCodec(), processorsCodec(), StructurePoolElement.projectionCodec()).apply(instance, SinglePoolElement::new));
+        // MagmaCube end - decompile error
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
index 60211877c5583ee05bbabba1ebde2ae3d0c7a5cb..d496764475ec1dba70e5ac8a1fdc2c9756724115 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
@@ -30,19 +30,17 @@ public class AlterGroundDecorator extends TreeDecorator
     @Override
     public void place(final WorldGenLevel worldGenLevel, final Random random, final List<BlockPos> list, final List<BlockPos> list2, final Set<BlockPos> set, final BoundingBox boundingBox) {
         final int i = list.get(0).getY();
-        int j;
-        int i2;
-        int i3;
-        int i4;
         list.stream().filter(blockPos -> blockPos.getY() == i).forEach(blockPos -> {
             this.placeCircle(worldGenLevel, random, blockPos.west().north());
             this.placeCircle(worldGenLevel, random, blockPos.east(2).north());
             this.placeCircle(worldGenLevel, random, blockPos.west().south(2));
             this.placeCircle(worldGenLevel, random, blockPos.east(2).south(2));
-            for (j = 0; j < 5; ++j) {
-                i2 = random.nextInt(64);
-                i3 = i2 % 8;
-                i4 = i2 / 8;
+            // MagmaCube start - decompile error
+            for (int j = 0; j < 5; ++j) {
+                int i2 = random.nextInt(64);
+                int i3 = i2 % 8;
+                int i4 = i2 / 8;
+            // MagmaCube end - decompile error
                 if (i3 == 0 || i3 == 7 || i4 == 0 || i4 == 7) {
                     this.placeCircle(worldGenLevel, random, blockPos.offset(-3 + i3, 0, -3 + i4));
                 }
@@ -74,6 +72,7 @@ public class AlterGroundDecorator extends TreeDecorator
     }
     
     static {
-        CODEC = BlockStateProvider.CODEC.fieldOf("provider").xmap((Function)AlterGroundDecorator::new, alterGroundDecorator -> alterGroundDecorator.provider).codec();
+        // MagmaCube - decompile error
+        CODEC = BlockStateProvider.CODEC.fieldOf("provider").xmap(AlterGroundDecorator::new, alterGroundDecorator -> alterGroundDecorator.provider).codec();
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/CocoaDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/CocoaDecorator.java
index 3f61f3e5d28f117726e013c05c373c20f425f26c..2b75cfaabc9d913472e50ea82a97a3e1675820bc 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/CocoaDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/CocoaDecorator.java
@@ -39,20 +39,17 @@ public class CocoaDecorator extends TreeDecorator
             return;
         }
         final int i = list.get(0).getY();
-        final Iterator<Direction> iterator;
-        Direction direction;
-        Direction direction2;
-        BlockPos blockPos2;
-        BlockState blockState;
+        // MagmaCube start - decompile error
         list.stream().filter(blockPos -> blockPos.getY() - i <= 2).forEach(blockPos -> {
-            Direction.Plane.HORIZONTAL.iterator();
+            Iterator<Direction> iterator = Direction.Plane.HORIZONTAL.iterator();
             while (iterator.hasNext()) {
-                direction = iterator.next();
+                Direction direction = iterator.next();
                 if (random.nextFloat() <= 0.25f) {
-                    direction2 = direction.getOpposite();
-                    blockPos2 = blockPos.offset(direction2.getStepX(), 0, direction2.getStepZ());
+                    Direction direction2 = direction.getOpposite();
+                    BlockPos blockPos2 = blockPos.offset(direction2.getStepX(), 0, direction2.getStepZ());
                     if (Feature.isAir(worldGenLevel, blockPos2)) {
-                        blockState = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.COCOA.defaultBlockState()).setValue((Property<Comparable>)CocoaBlock.AGE, random.nextInt(3))).setValue((Property<Comparable>)CocoaBlock.FACING, direction);
+                        BlockState blockState = ((Blocks.COCOA.defaultBlockState()).setValue(CocoaBlock.AGE, random.nextInt(3))).setValue(CocoaBlock.FACING, direction);
+        // MagmaCube end - decompile error
                         this.setBlock(worldGenLevel, blockPos2, blockState, set, boundingBox);
                     }
                     else {
@@ -64,6 +61,7 @@ public class CocoaDecorator extends TreeDecorator
     }
     
     static {
-        CODEC = Codec.floatRange(0.0f, 1.0f).fieldOf("probability").xmap((Function)CocoaDecorator::new, cocoaDecorator -> cocoaDecorator.probability).codec();
+        // MagmaCube - decompile error
+        CODEC = Codec.floatRange(0.0f, 1.0f).fieldOf("probability").xmap(CocoaDecorator::new, cocoaDecorator -> cocoaDecorator.probability).codec();
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/DarkOakTrunkPlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/DarkOakTrunkPlacer.java
index 80eeb9794f13328496e24c673e37ac2f8166c728..9509f89029c82f785f211b36614773172a2cc92e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/DarkOakTrunkPlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/DarkOakTrunkPlacer.java
@@ -32,7 +32,7 @@ public class DarkOakTrunkPlacer extends TrunkPlacer
     
     @Override
     public List<FoliagePlacer.FoliageAttachment> placeTrunk(final LevelSimulatedRW levelSimulatedRW, final Random random, final int i, final BlockPos blockPos, final Set<BlockPos> set, final BoundingBox boundingBox, final TreeConfiguration treeConfiguration) {
-        final List<FoliagePlacer.FoliageAttachment> list = (List<FoliagePlacer.FoliageAttachment>)Lists.newArrayList();
+        final List<FoliagePlacer.FoliageAttachment> list = Lists.newArrayList(); // MagmaCube - decompile error
         final BlockPos blockPos2 = blockPos.below();
         TrunkPlacer.setDirtAt(levelSimulatedRW, blockPos2);
         TrunkPlacer.setDirtAt(levelSimulatedRW, blockPos2.east());
@@ -79,6 +79,7 @@ public class DarkOakTrunkPlacer extends TrunkPlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> TrunkPlacer.trunkPlacerParts((RecordCodecBuilder.Instance<TrunkPlacer>)instance).apply(instance, DarkOakTrunkPlacer::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> TrunkPlacer.trunkPlacerParts(instance).apply(instance, DarkOakTrunkPlacer::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/FancyTrunkPlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/FancyTrunkPlacer.java
index 4b51e1e9918016604c50487c7ee226c9e55d601b..94fd980e39ad68f12a49ac50e1ec8faf2f823ebf 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/FancyTrunkPlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/FancyTrunkPlacer.java
@@ -50,7 +50,7 @@ public class FancyTrunkPlacer extends TrunkPlacer
         final int i5 = Math.min(1, Mth.floor(1.382 + Math.pow(1.0 * i3 / 13.0, 2.0)));
         final int i6 = blockPos.getY() + i4;
         int i7 = i3 - 5;
-        final List<FoliageCoords> list = (List<FoliageCoords>)Lists.newArrayList();
+        final List<FoliageCoords> list = Lists.newArrayList(); // MagmaCube - decompile error
         list.add(new FoliageCoords(blockPos.above(i7), i6));
         while (i7 >= 0) {
             final float f = this.treeShape(i3, i7);
@@ -79,7 +79,7 @@ public class FancyTrunkPlacer extends TrunkPlacer
         }
         this.makeLimb(levelSimulatedRW, random, blockPos, blockPos.above(i4), true, set, boundingBox, treeConfiguration);
         this.makeBranches(levelSimulatedRW, random, i3, blockPos, list, set, boundingBox, treeConfiguration);
-        final List<FoliagePlacer.FoliageAttachment> list2 = (List<FoliagePlacer.FoliageAttachment>)Lists.newArrayList();
+        final List<FoliagePlacer.FoliageAttachment> list2 = Lists.newArrayList(); // MagmaCube - decompile error
         for (final FoliageCoords foliageCoords : list) {
             if (this.trimBranches(i3, foliageCoords.getBranchBase() - blockPos.getY())) {
                 list2.add(foliageCoords.attachment);
@@ -94,13 +94,15 @@ public class FancyTrunkPlacer extends TrunkPlacer
         }
         final BlockPos blockPos3 = blockPos2.offset(-blockPos.getX(), -blockPos.getY(), -blockPos.getZ());
         final int i = this.getSteps(blockPos3);
-        final float f = blockPos3.getX() / i;
-        final float f2 = blockPos3.getY() / i;
-        final float f3 = blockPos3.getZ() / i;
+        // MagmaCube start - math
+        final float f = (float) blockPos3.getX() / i;
+        final float f2 = (float) blockPos3.getY() / i;
+        final float f3 = (float) blockPos3.getZ() / i;
+        // MagmaCube end - math
         for (int i2 = 0; i2 <= i; ++i2) {
             final BlockPos blockPos4 = blockPos.offset(0.5f + i2 * f, 0.5f + i2 * f2, 0.5f + i2 * f3);
             if (flag) {
-                TrunkPlacer.setBlock(levelSimulatedRW, blockPos4, ((StateHolder<O, BlockState>)treeConfiguration.trunkProvider.getState(random, blockPos4)).setValue(RotatedPillarBlock.AXIS, this.getLogAxis(blockPos, blockPos4)), boundingBox);
+                TrunkPlacer.setBlock(levelSimulatedRW, blockPos4, (treeConfiguration.trunkProvider.getState(random, blockPos4)).setValue(RotatedPillarBlock.AXIS, this.getLogAxis(blockPos, blockPos4)), boundingBox); // MagmaCube - decompile error
                 set.add(blockPos4.immutable());
             }
             else if (!TreeFeature.isFree(levelSimulatedRW, blockPos4)) {
@@ -164,7 +166,8 @@ public class FancyTrunkPlacer extends TrunkPlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> TrunkPlacer.trunkPlacerParts((RecordCodecBuilder.Instance<TrunkPlacer>)instance).apply(instance, FancyTrunkPlacer::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> TrunkPlacer.trunkPlacerParts(instance).apply(instance, FancyTrunkPlacer::new));
     }
     
     static class FoliageCoords
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/ForkingTrunkPlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/ForkingTrunkPlacer.java
index 319e20c4f229f794606bbe3da4f3003adf6780f3..3e732439f8b3be2c5a6fcd26fdb09c0c460693ac 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/ForkingTrunkPlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/ForkingTrunkPlacer.java
@@ -31,7 +31,7 @@ public class ForkingTrunkPlacer extends TrunkPlacer
     @Override
     public List<FoliagePlacer.FoliageAttachment> placeTrunk(final LevelSimulatedRW levelSimulatedRW, final Random random, final int i, final BlockPos blockPos, final Set<BlockPos> set, final BoundingBox boundingBox, final TreeConfiguration treeConfiguration) {
         TrunkPlacer.setDirtAt(levelSimulatedRW, blockPos.below());
-        final List<FoliagePlacer.FoliageAttachment> list = (List<FoliagePlacer.FoliageAttachment>)Lists.newArrayList();
+        final List<FoliagePlacer.FoliageAttachment> list = Lists.newArrayList(); // MagmaCube - decompile error
         final Direction direction = Direction.Plane.HORIZONTAL.getRandomDirection(random);
         final int i2 = i - random.nextInt(4) - 1;
         int i3 = 3 - random.nextInt(3);
@@ -76,6 +76,7 @@ public class ForkingTrunkPlacer extends TrunkPlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> TrunkPlacer.trunkPlacerParts((RecordCodecBuilder.Instance<TrunkPlacer>)instance).apply(instance, ForkingTrunkPlacer::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> TrunkPlacer.trunkPlacerParts(instance).apply(instance, ForkingTrunkPlacer::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/GiantTrunkPlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/GiantTrunkPlacer.java
index a2a9a974d655f687ac4655574fb368177f3f30ce..a8deb32e9c686a8d8e3edaf3cc7ea858a88b1ff8 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/GiantTrunkPlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/GiantTrunkPlacer.java
@@ -53,6 +53,7 @@ public class GiantTrunkPlacer extends TrunkPlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> TrunkPlacer.trunkPlacerParts((RecordCodecBuilder.Instance<TrunkPlacer>)instance).apply(instance, GiantTrunkPlacer::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> TrunkPlacer.trunkPlacerParts(instance).apply(instance, GiantTrunkPlacer::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/MegaJungleTrunkPlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/MegaJungleTrunkPlacer.java
index 71d9ef5d2cbf2b88d31c7897f4f8b8712328a467..6a7075cb021a457122322244930055cfe289b98d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/MegaJungleTrunkPlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/MegaJungleTrunkPlacer.java
@@ -31,7 +31,7 @@ public class MegaJungleTrunkPlacer extends GiantTrunkPlacer
     
     @Override
     public List<FoliagePlacer.FoliageAttachment> placeTrunk(final LevelSimulatedRW levelSimulatedRW, final Random random, final int i, final BlockPos blockPos, final Set<BlockPos> set, final BoundingBox boundingBox, final TreeConfiguration treeConfiguration) {
-        final List<FoliagePlacer.FoliageAttachment> list = (List<FoliagePlacer.FoliageAttachment>)Lists.newArrayList();
+        final List<FoliagePlacer.FoliageAttachment> list = Lists.newArrayList(); // MagmaCube - decompile error
         list.addAll(super.placeTrunk(levelSimulatedRW, random, i, blockPos, set, boundingBox, treeConfiguration));
         for (int i2 = i - 2 - random.nextInt(4); i2 > i / 2; i2 -= 2 + random.nextInt(4)) {
             final float f = random.nextFloat() * 6.2831855f;
@@ -49,6 +49,7 @@ public class MegaJungleTrunkPlacer extends GiantTrunkPlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> TrunkPlacer.trunkPlacerParts((RecordCodecBuilder.Instance<TrunkPlacer>)instance).apply(instance, MegaJungleTrunkPlacer::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> TrunkPlacer.trunkPlacerParts(instance).apply(instance, MegaJungleTrunkPlacer::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/StraightTrunkPlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/StraightTrunkPlacer.java
index 51dc375da6593df10f87e7632ed49525ffa75ff0..9db2a7d402180c84c42919985ab1fe3e427160f2 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/StraightTrunkPlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/StraightTrunkPlacer.java
@@ -37,6 +37,7 @@ public class StraightTrunkPlacer extends TrunkPlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> TrunkPlacer.trunkPlacerParts((RecordCodecBuilder.Instance<TrunkPlacer>)instance).apply(instance, StraightTrunkPlacer::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> TrunkPlacer.trunkPlacerParts(instance).apply(instance, StraightTrunkPlacer::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java b/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
index b757eabcadd1f9bc3bc32abe9ca03fdea7b7d925..7ea59c50b846bb5322ef4ebdf3ae3ffa2fd2aae9 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
@@ -74,7 +74,7 @@ public class FlatLevelGeneratorSettings
     }
     
     public FlatLevelGeneratorSettings(final StructureSettings structureSettings, final Registry<Biome> registry) {
-        this.layersInfo = (List<FlatLayerInfo>)Lists.newArrayList();
+        this.layersInfo = Lists.newArrayList(); // MagmaCube - decompile error
         this.layers = new BlockState[256];
         this.decoration = false;
         this.addLakes = false;
@@ -199,24 +199,26 @@ public class FlatLevelGeneratorSettings
     
     static {
         LOGGER = LogManager.getLogger();
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)RegistryLookupCodec.create((ResourceKey<? extends Registry<Object>>)Registry.BIOME_REGISTRY).forGetter(flatLevelGeneratorSettings -> flatLevelGeneratorSettings.biomes), (App)StructureSettings.CODEC.fieldOf("structures").forGetter((Function)FlatLevelGeneratorSettings::structureSettings), (App)FlatLayerInfo.CODEC.listOf().fieldOf("layers").forGetter((Function)FlatLevelGeneratorSettings::getLayersInfo), (App)Codec.BOOL.fieldOf("lakes").orElse(false).forGetter(flatLevelGeneratorSettings -> flatLevelGeneratorSettings.addLakes), (App)Codec.BOOL.fieldOf("features").orElse(false).forGetter(flatLevelGeneratorSettings -> flatLevelGeneratorSettings.decoration), (App)Biome.CODEC.optionalFieldOf("biome").orElseGet((Supplier)Optional::empty).forGetter(flatLevelGeneratorSettings -> Optional.of(flatLevelGeneratorSettings.biome))).apply(instance, FlatLevelGeneratorSettings::new)).stable();
-        STRUCTURE_FEATURES = Util.make((Map<StructureFeature<?>, ConfiguredStructureFeature<?, ?>>)Maps.newHashMap(), hashMap -> {
+        // MagmaCube start - decompile error
+        CODEC = RecordCodecBuilder.<FlatLevelGeneratorSettings>create(instance -> instance.group(RegistryLookupCodec.create(Registry.BIOME_REGISTRY).forGetter(flatLevelGeneratorSettings -> flatLevelGeneratorSettings.biomes), StructureSettings.CODEC.fieldOf("structures").forGetter(FlatLevelGeneratorSettings::structureSettings), FlatLayerInfo.CODEC.listOf().fieldOf("layers").forGetter(FlatLevelGeneratorSettings::getLayersInfo), Codec.BOOL.fieldOf("lakes").orElse(false).forGetter(flatLevelGeneratorSettings -> flatLevelGeneratorSettings.addLakes), Codec.BOOL.fieldOf("features").orElse(false).forGetter(flatLevelGeneratorSettings -> flatLevelGeneratorSettings.decoration), Biome.CODEC.optionalFieldOf("biome").orElseGet(Optional::empty).forGetter(flatLevelGeneratorSettings -> Optional.of(flatLevelGeneratorSettings.biome))).apply(instance, FlatLevelGeneratorSettings::new)).stable();
+        STRUCTURE_FEATURES = Util.make(Maps.newHashMap(), hashMap -> {
             hashMap.put(StructureFeature.MINESHAFT, StructureFeatures.MINESHAFT);
-            hashMap.put((StructureFeature<MineshaftConfiguration>)StructureFeature.VILLAGE, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.VILLAGE_PLAINS);
-            hashMap.put((StructureFeature<MineshaftConfiguration>)StructureFeature.STRONGHOLD, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.STRONGHOLD);
-            hashMap.put((StructureFeature<MineshaftConfiguration>)StructureFeature.SWAMP_HUT, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.SWAMP_HUT);
-            hashMap.put((StructureFeature<MineshaftConfiguration>)StructureFeature.DESERT_PYRAMID, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.DESERT_PYRAMID);
-            hashMap.put((StructureFeature<MineshaftConfiguration>)StructureFeature.JUNGLE_TEMPLE, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.JUNGLE_TEMPLE);
-            hashMap.put((StructureFeature<MineshaftConfiguration>)StructureFeature.IGLOO, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.IGLOO);
-            hashMap.put((StructureFeature<MineshaftConfiguration>)StructureFeature.OCEAN_RUIN, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.OCEAN_RUIN_COLD);
-            hashMap.put((StructureFeature<MineshaftConfiguration>)StructureFeature.SHIPWRECK, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.SHIPWRECK);
-            hashMap.put((StructureFeature<MineshaftConfiguration>)StructureFeature.OCEAN_MONUMENT, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.OCEAN_MONUMENT);
-            hashMap.put((StructureFeature<MineshaftConfiguration>)StructureFeature.END_CITY, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.END_CITY);
-            hashMap.put((StructureFeature<MineshaftConfiguration>)StructureFeature.WOODLAND_MANSION, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.WOODLAND_MANSION);
-            hashMap.put((StructureFeature<MineshaftConfiguration>)StructureFeature.NETHER_BRIDGE, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.NETHER_BRIDGE);
-            hashMap.put((StructureFeature<MineshaftConfiguration>)StructureFeature.PILLAGER_OUTPOST, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.PILLAGER_OUTPOST);
-            hashMap.put((StructureFeature<MineshaftConfiguration>)StructureFeature.RUINED_PORTAL, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.RUINED_PORTAL_STANDARD);
-            hashMap.put((StructureFeature<MineshaftConfiguration>)StructureFeature.BASTION_REMNANT, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.BASTION_REMNANT);
+            hashMap.put(StructureFeature.VILLAGE, StructureFeatures.VILLAGE_PLAINS);
+            hashMap.put(StructureFeature.STRONGHOLD, StructureFeatures.STRONGHOLD);
+            hashMap.put(StructureFeature.SWAMP_HUT, StructureFeatures.SWAMP_HUT);
+            hashMap.put(StructureFeature.DESERT_PYRAMID, StructureFeatures.DESERT_PYRAMID);
+            hashMap.put(StructureFeature.JUNGLE_TEMPLE, StructureFeatures.JUNGLE_TEMPLE);
+            hashMap.put(StructureFeature.IGLOO, StructureFeatures.IGLOO);
+            hashMap.put(StructureFeature.OCEAN_RUIN, StructureFeatures.OCEAN_RUIN_COLD);
+            hashMap.put(StructureFeature.SHIPWRECK, StructureFeatures.SHIPWRECK);
+            hashMap.put(StructureFeature.OCEAN_MONUMENT, StructureFeatures.OCEAN_MONUMENT);
+            hashMap.put(StructureFeature.END_CITY, StructureFeatures.END_CITY);
+            hashMap.put(StructureFeature.WOODLAND_MANSION, StructureFeatures.WOODLAND_MANSION);
+            hashMap.put(StructureFeature.NETHER_BRIDGE, StructureFeatures.NETHER_BRIDGE);
+            hashMap.put(StructureFeature.PILLAGER_OUTPOST, StructureFeatures.PILLAGER_OUTPOST);
+            hashMap.put(StructureFeature.RUINED_PORTAL, StructureFeatures.RUINED_PORTAL_STANDARD);
+            hashMap.put(StructureFeature.BASTION_REMNANT, StructureFeatures.BASTION_REMNANT);
         });
+        // MagmaCube end - decompile error
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/BiasedRangeDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/placement/BiasedRangeDecorator.java
index 440b3fc95a4fc865d9abf8a23ca454e35b7d7558..0ec1ff97f947f8bafc0928720d31ca21388586d1 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/BiasedRangeDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/BiasedRangeDecorator.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.placement;
 
-import net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration;
 import java.util.stream.Stream;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/CarvingMaskDecoratorConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/placement/CarvingMaskDecoratorConfiguration.java
index 085e2917b89be396eb39ff54b7783591150da9b3..b57c4f66a28b8f0b97a8c1312292afc6aea7e29e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/CarvingMaskDecoratorConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/CarvingMaskDecoratorConfiguration.java
@@ -20,6 +20,7 @@ public class CarvingMaskDecoratorConfiguration implements DecoratorConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)GenerationStep.Carving.CODEC.fieldOf("step").forGetter(carvingMaskDecoratorConfiguration -> carvingMaskDecoratorConfiguration.step), (App)Codec.FLOAT.fieldOf("probability").forGetter(carvingMaskDecoratorConfiguration -> carvingMaskDecoratorConfiguration.probability)).apply(instance, (BiFunction)CarvingMaskDecoratorConfiguration::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(GenerationStep.Carving.CODEC.fieldOf("step").forGetter(carvingMaskDecoratorConfiguration -> carvingMaskDecoratorConfiguration.step), Codec.FLOAT.fieldOf("probability").forGetter(carvingMaskDecoratorConfiguration -> carvingMaskDecoratorConfiguration.probability)).apply(instance, CarvingMaskDecoratorConfiguration::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/ChanceDecoratorConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/placement/ChanceDecoratorConfiguration.java
index 5466aadd9917f47c8fea3c82f4fa4728eeb9e362..6cbbb61cbd0bc021e27e6f911f1e0d8297db6c58 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/ChanceDecoratorConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/ChanceDecoratorConfiguration.java
@@ -14,6 +14,7 @@ public class ChanceDecoratorConfiguration implements DecoratorConfiguration
     }
     
     static {
-        CODEC = Codec.INT.fieldOf("chance").xmap((Function)ChanceDecoratorConfiguration::new, chanceDecoratorConfiguration -> chanceDecoratorConfiguration.chance).codec();
+        // MagmaCube - decompile error
+        CODEC = Codec.INT.fieldOf("chance").xmap(ChanceDecoratorConfiguration::new, chanceDecoratorConfiguration -> chanceDecoratorConfiguration.chance).codec();
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/ConfiguredDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/placement/ConfiguredDecorator.java
index a0b6551849a2fc148c6b4b2130e764ee50c71a59..51bfa13e5c547846649965146fdda61e9758aa7b 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/ConfiguredDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/ConfiguredDecorator.java
@@ -31,7 +31,7 @@ public class ConfiguredDecorator<DC extends DecoratorConfiguration> implements D
     
     @Override
     public ConfiguredDecorator<?> decorated(final ConfiguredDecorator<?> configuredDecorator) {
-        return new ConfiguredDecorator<Object>(FeatureDecorator.DECORATED, new DecoratedDecoratorConfiguration(configuredDecorator, this));
+        return new ConfiguredDecorator<>(FeatureDecorator.DECORATED, new DecoratedDecoratorConfiguration(configuredDecorator, this)); // MagmaCube - decompile error
     }
     
     public DC config() {
@@ -39,6 +39,6 @@ public class ConfiguredDecorator<DC extends DecoratorConfiguration> implements D
     }
     
     static {
-        CODEC = Registry.DECORATOR.dispatch("type", configuredDecorator -> configuredDecorator.decorator, (Function)FeatureDecorator::configuredCodec);
+        CODEC = Registry.DECORATOR.dispatch("type", configuredDecorator -> configuredDecorator.decorator, FeatureDecorator::configuredCodec); // MagmaCube - decompile error
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/DecoratedDecoratorConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/placement/DecoratedDecoratorConfiguration.java
index 7dd54093b6a4bdc64ccd9fead8d73b8f4ebebc7a..c6587b0e38a9c5d8fcd5729198c7cee800aa5d31 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/DecoratedDecoratorConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/DecoratedDecoratorConfiguration.java
@@ -28,6 +28,7 @@ public class DecoratedDecoratorConfiguration implements DecoratorConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)ConfiguredDecorator.CODEC.fieldOf("outer").forGetter((Function)DecoratedDecoratorConfiguration::outer), (App)ConfiguredDecorator.CODEC.fieldOf("inner").forGetter((Function)DecoratedDecoratorConfiguration::inner)).apply(instance, (BiFunction)DecoratedDecoratorConfiguration::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(ConfiguredDecorator.CODEC.fieldOf("outer").forGetter(DecoratedDecoratorConfiguration::outer), ConfiguredDecorator.CODEC.fieldOf("inner").forGetter(DecoratedDecoratorConfiguration::inner)).apply(instance, DecoratedDecoratorConfiguration::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/DepthAverageConfigation.java b/src/main/java/net/minecraft/world/level/levelgen/placement/DepthAverageConfigation.java
index ad0e10ef8269d62b953577bd346dbafbae943bda..141e1acb7836a5b9d9be25dcbd893dbad5d60895 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/DepthAverageConfigation.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/DepthAverageConfigation.java
@@ -19,6 +19,7 @@ public class DepthAverageConfigation implements DecoratorConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)Codec.INT.fieldOf("baseline").forGetter(depthAverageConfigation -> depthAverageConfigation.baseline), (App)Codec.INT.fieldOf("spread").forGetter(depthAverageConfigation -> depthAverageConfigation.spread)).apply(instance, (BiFunction)DepthAverageConfigation::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(Codec.INT.fieldOf("baseline").forGetter(depthAverageConfigation -> depthAverageConfigation.baseline), Codec.INT.fieldOf("spread").forGetter(depthAverageConfigation -> depthAverageConfigation.spread)).apply(instance, DepthAverageConfigation::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/DepthAverageDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/placement/DepthAverageDecorator.java
index a50c8b6fb38b513a971b7779edfb5945c900e117..a23716ea73cd5c0f2ed275e77d8a7de623cc2c9c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/DepthAverageDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/DepthAverageDecorator.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.placement;
 
-import net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration;
 import java.util.stream.Stream;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/EndGatewayPlacementDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/placement/EndGatewayPlacementDecorator.java
index 75c8dff3bae3acbbf304fdbb1ab88b42904d08cc..ac61b3748e9c6ff6852397cb5c82f8e273de4fde 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/EndGatewayPlacementDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/EndGatewayPlacementDecorator.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.placement;
 
-import net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration;
 import net.minecraft.world.level.levelgen.Heightmap;
 import java.util.stream.Stream;
 import net.minecraft.core.BlockPos;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/FrequencyWithExtraChanceDecoratorConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/placement/FrequencyWithExtraChanceDecoratorConfiguration.java
index 85aca6b16369b627e7dc61115b4e69819d1ba06a..5cc49a9cca659a6ee9ac6b5c32f60ffc2cbe001f 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/FrequencyWithExtraChanceDecoratorConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/FrequencyWithExtraChanceDecoratorConfiguration.java
@@ -20,6 +20,7 @@ public class FrequencyWithExtraChanceDecoratorConfiguration implements Decorator
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)Codec.INT.fieldOf("count").forGetter(frequencyWithExtraChanceDecoratorConfiguration -> frequencyWithExtraChanceDecoratorConfiguration.count), (App)Codec.FLOAT.fieldOf("extra_chance").forGetter(frequencyWithExtraChanceDecoratorConfiguration -> frequencyWithExtraChanceDecoratorConfiguration.extraChance), (App)Codec.INT.fieldOf("extra_count").forGetter(frequencyWithExtraChanceDecoratorConfiguration -> frequencyWithExtraChanceDecoratorConfiguration.extraCount)).apply(instance, FrequencyWithExtraChanceDecoratorConfiguration::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(Codec.INT.fieldOf("count").forGetter(frequencyWithExtraChanceDecoratorConfiguration -> frequencyWithExtraChanceDecoratorConfiguration.count), Codec.FLOAT.fieldOf("extra_chance").forGetter(frequencyWithExtraChanceDecoratorConfiguration -> frequencyWithExtraChanceDecoratorConfiguration.extraChance), Codec.INT.fieldOf("extra_count").forGetter(frequencyWithExtraChanceDecoratorConfiguration -> frequencyWithExtraChanceDecoratorConfiguration.extraCount)).apply(instance, FrequencyWithExtraChanceDecoratorConfiguration::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/HeightMapWorldSurfaceDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/placement/HeightMapWorldSurfaceDecorator.java
index 572c956d2cb89c98082f4de147c78fa2a442f492..1817a2717495b30bb84939882b732dd1f65c6dd2 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/HeightMapWorldSurfaceDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/HeightMapWorldSurfaceDecorator.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.placement;
 
-import net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration;
 import net.minecraft.world.level.levelgen.Heightmap;
 import com.mojang.serialization.Codec;
 import net.minecraft.world.level.levelgen.feature.configurations.NoneDecoratorConfiguration;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/IcebergPlacementDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/placement/IcebergPlacementDecorator.java
index 70a73cd4d72ec31ee0be5f2a5620c9923d83d8a8..d29435ca5820c1e78f9be2d505d28d3fd47c9509 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/IcebergPlacementDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/IcebergPlacementDecorator.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.placement;
 
-import net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration;
 import java.util.stream.Stream;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/LakeLavaPlacementDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/placement/LakeLavaPlacementDecorator.java
index 3414ca83b7b69e0fb9be4d72b964f3841463c731..ba5578e10895ce9646b572c759986817b51367be 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/LakeLavaPlacementDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/LakeLavaPlacementDecorator.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.placement;
 
-import net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration;
 import java.util.stream.Stream;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/LakeWaterPlacementDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/placement/LakeWaterPlacementDecorator.java
index 605daeae9db688a0c272af606f2440fedaf21205..a9610273f258f6fa8572685d96167bb1bc959a45 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/LakeWaterPlacementDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/LakeWaterPlacementDecorator.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.placement;
 
-import net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration;
 import java.util.stream.Stream;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/NoiseCountFactorDecoratorConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/placement/NoiseCountFactorDecoratorConfiguration.java
index 21ff05861f6b25d26c7ba5679eb0b044201e4520..d9135772778bc3a997c133adda9b35cf69747eff 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/NoiseCountFactorDecoratorConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/NoiseCountFactorDecoratorConfiguration.java
@@ -20,6 +20,7 @@ public class NoiseCountFactorDecoratorConfiguration implements DecoratorConfigur
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)Codec.INT.fieldOf("noise_to_count_ratio").forGetter(noiseCountFactorDecoratorConfiguration -> noiseCountFactorDecoratorConfiguration.noiseToCountRatio), (App)Codec.DOUBLE.fieldOf("noise_factor").forGetter(noiseCountFactorDecoratorConfiguration -> noiseCountFactorDecoratorConfiguration.noiseFactor), (App)Codec.DOUBLE.fieldOf("noise_offset").orElse(0.0).forGetter(noiseCountFactorDecoratorConfiguration -> noiseCountFactorDecoratorConfiguration.noiseOffset)).apply(instance, NoiseCountFactorDecoratorConfiguration::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(Codec.INT.fieldOf("noise_to_count_ratio").forGetter(noiseCountFactorDecoratorConfiguration -> noiseCountFactorDecoratorConfiguration.noiseToCountRatio), Codec.DOUBLE.fieldOf("noise_factor").forGetter(noiseCountFactorDecoratorConfiguration -> noiseCountFactorDecoratorConfiguration.noiseFactor), Codec.DOUBLE.fieldOf("noise_offset").orElse(0.0).forGetter(noiseCountFactorDecoratorConfiguration -> noiseCountFactorDecoratorConfiguration.noiseOffset)).apply(instance, NoiseCountFactorDecoratorConfiguration::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/NopePlacementDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/placement/NopePlacementDecorator.java
index cd384e7dd87c0d662014070e22f819ac23e08a82..7cd308de2c8115a27ca8ef6fe00e4a9ae7eba6a4 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/NopePlacementDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/NopePlacementDecorator.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.placement;
 
-import net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration;
 import java.util.stream.Stream;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/RangeDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/placement/RangeDecorator.java
index 50f31c404b69fd445feac44fcc807e4a8235bc5d..6d5b8ef1163ac8b4bed1f295fded576acae5f38e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/RangeDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/RangeDecorator.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.placement;
 
-import net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration;
 import java.util.stream.Stream;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/Spread32Decorator.java b/src/main/java/net/minecraft/world/level/levelgen/placement/Spread32Decorator.java
index b46b1877362a26d6eeeba35ed827f25285495157..634afca28b14aac755c74c6543ddf1f636d39c9a 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/Spread32Decorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/Spread32Decorator.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.placement;
 
-import net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration;
 import java.util.stream.Stream;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/SquareDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/placement/SquareDecorator.java
index b0429eeaa2a2bf0fb4588fc349e86610315056be..37fdd086ad6ac3150d074c4f6e373b176bcc7b51 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/SquareDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/SquareDecorator.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.placement;
 
-import net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration;
 import java.util.stream.Stream;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/TopSolidHeightMapDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/placement/TopSolidHeightMapDecorator.java
index d93c30243a5236ec3f3db2065cd7a14c3c08d14b..9d0fea3cf5cb7932b9d746bde9b61d70519ebe66 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/TopSolidHeightMapDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/TopSolidHeightMapDecorator.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.placement;
 
-import net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration;
 import net.minecraft.world.level.levelgen.Heightmap;
 import com.mojang.serialization.Codec;
 import net.minecraft.world.level.levelgen.feature.configurations.NoneDecoratorConfiguration;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/VeryBiasedRangeDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/placement/VeryBiasedRangeDecorator.java
index e50f89f8a45d5eb07351a2b364700e88ff5c6807..3ad6f9e95fd954ac3dfc04b37062f120dcf0962c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/VeryBiasedRangeDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/VeryBiasedRangeDecorator.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.placement;
 
-import net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration;
 import java.util.stream.Stream;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/nether/MagmaDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/placement/nether/MagmaDecorator.java
index 54798c96d3ab9210fa47317cdfc610012934d49e..e3614836e8aabdfa9c78d2805f82485cc339f702 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/nether/MagmaDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/nether/MagmaDecorator.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.placement.nether;
 
-import net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration;
 import java.util.stream.Stream;
 import net.minecraft.core.BlockPos;
 import java.util.Random;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/BuriedTreasurePieces.java b/src/main/java/net/minecraft/world/level/levelgen/structure/BuriedTreasurePieces.java
index d2b436f7d476dde2f6d0f0950e838e8b60e9fb60..05e614973871f53b5e93129c9d912353f5e54155 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/BuriedTreasurePieces.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/BuriedTreasurePieces.java
@@ -1,7 +1,6 @@
 package net.minecraft.world.level.levelgen.structure;
 
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.storage.loot.BuiltInLootTables;
 import net.minecraft.core.Direction;
 import net.minecraft.world.level.block.Blocks;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/IglooPieces.java b/src/main/java/net/minecraft/world/level/levelgen/structure/IglooPieces.java
index 81ff96bb9e1bc5c7846402f38cf98c8e9041209d..4fd8e9fa1e728ab31742c22b8a0d8cdb61e67b5f 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/IglooPieces.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/IglooPieces.java
@@ -2,7 +2,6 @@ package net.minecraft.world.level.levelgen.structure;
 
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.Heightmap;
-import net.minecraft.core.Vec3i;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.StructureFeatureManager;
@@ -13,7 +12,6 @@ import net.minecraft.world.level.block.entity.ChestBlockEntity;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate;
-import net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessor;
 import net.minecraft.world.level.levelgen.structure.templatesystem.BlockIgnoreProcessor;
 import net.minecraft.world.level.block.Mirror;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/LegacyStructureDataHandler.java b/src/main/java/net/minecraft/world/level/levelgen/structure/LegacyStructureDataHandler.java
index 7ca80b8e346cac4d5535c2c13450fb21197dd9ba..9d3f742999401d0d375c65413e6a192def72137a 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/LegacyStructureDataHandler.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/LegacyStructureDataHandler.java
@@ -34,8 +34,10 @@ public class LegacyStructureDataHandler
     private final List<String> currentKeys;
     
     public LegacyStructureDataHandler(@Nullable final DimensionDataStorage dimensionDataStorage, final List<String> list, final List<String> list2) {
-        this.dataMap = (Map<String, Long2ObjectMap<CompoundTag>>)Maps.newHashMap();
-        this.indexMap = (Map<String, StructureFeatureIndexSavedData>)Maps.newHashMap();
+        // MagmaCube start - decompile error
+        this.dataMap = Maps.newHashMap();
+        this.indexMap = Maps.newHashMap();
+        // MagmaCube end - decompile error
         this.legacyKeys = list;
         this.currentKeys = list2;
         this.populateCaches(dimensionDataStorage);
@@ -154,7 +156,7 @@ public class LegacyStructureDataHandler
                     }
                 }
                 final String s5 = compoundTag2.getString("id");
-                this.dataMap.computeIfAbsent(s5, s -> new Long2ObjectOpenHashMap()).put(l, compoundTag2);
+                this.dataMap.computeIfAbsent(s5, s1 -> new Long2ObjectOpenHashMap()).put(l, compoundTag2); // MagmaCube - decompile error
             }
             final String s6 = s + "_index";
             final StructureFeatureIndexSavedData structureFeatureIndexSavedData = dimensionDataStorage.computeIfAbsent(() -> new StructureFeatureIndexSavedData(s6), s6);
@@ -189,7 +191,7 @@ public class LegacyStructureDataHandler
     }
     
     static {
-        CURRENT_TO_LEGACY_MAP = Util.make((Map<String, String>)Maps.newHashMap(), hashMap -> {
+        CURRENT_TO_LEGACY_MAP = Util.make(Maps.newHashMap(), hashMap -> { // MagmaCube - decompile error
             hashMap.put("Village", "Village");
             hashMap.put("Mineshaft", "Mineshaft");
             hashMap.put("Mansion", "Mansion");
@@ -203,7 +205,7 @@ public class LegacyStructureDataHandler
             hashMap.put("EndCity", "EndCity");
             return;
         });
-        LEGACY_TO_CURRENT_MAP = Util.make((Map<String, String>)Maps.newHashMap(), hashMap -> {
+        LEGACY_TO_CURRENT_MAP = Util.make(Maps.newHashMap(), hashMap -> { // MagmaCube - decompile error
             hashMap.put("Iglu", "Igloo");
             hashMap.put("TeDP", "Desert_Pyramid");
             hashMap.put("TeJP", "Jungle_Pyramid");
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/NetherFossilPieces.java b/src/main/java/net/minecraft/world/level/levelgen/structure/NetherFossilPieces.java
index 0b0f523b89bd3d681a631ef603570e48146acc07..fe62e13c0c76c4c80745f25d3e552482f866f2f6 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/NetherFossilPieces.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/NetherFossilPieces.java
@@ -6,7 +6,6 @@ import net.minecraft.world.level.StructureFeatureManager;
 import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate;
-import net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessor;
 import net.minecraft.world.level.levelgen.structure.templatesystem.BlockIgnoreProcessor;
 import net.minecraft.world.level.block.Mirror;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/RuinedPortalPiece.java b/src/main/java/net/minecraft/world/level/levelgen/structure/RuinedPortalPiece.java
index 60e2966b0b5c0c955cb50a8c138ac622d43d4642..b01e77dec759daf150bbce1bb711d035a6764294 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/RuinedPortalPiece.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/RuinedPortalPiece.java
@@ -276,7 +276,8 @@ extends TemplateStructurePiece {
     }
 
     public static class Properties {
-        public static final Codec<Properties> CODEC = RecordCodecBuilder.create(instance -> instance.group((App)Codec.BOOL.fieldOf("cold").forGetter(properties -> properties.cold), (App)Codec.FLOAT.fieldOf("mossiness").forGetter(properties -> Float.valueOf(properties.mossiness)), (App)Codec.BOOL.fieldOf("air_pocket").forGetter(properties -> properties.airPocket), (App)Codec.BOOL.fieldOf("overgrown").forGetter(properties -> properties.overgrown), (App)Codec.BOOL.fieldOf("vines").forGetter(properties -> properties.vines), (App)Codec.BOOL.fieldOf("replace_with_blackstone").forGetter(properties -> properties.replaceWithBlackstone)).apply((Applicative)instance, Properties::new));
+        // MagmaCube - decompile error
+        public static final Codec<Properties> CODEC = RecordCodecBuilder.create(instance -> instance.group(Codec.BOOL.fieldOf("cold").forGetter(properties -> properties.cold), Codec.FLOAT.fieldOf("mossiness").forGetter(properties -> Float.valueOf(properties.mossiness)), Codec.BOOL.fieldOf("air_pocket").forGetter(properties -> properties.airPocket), Codec.BOOL.fieldOf("overgrown").forGetter(properties -> properties.overgrown), Codec.BOOL.fieldOf("vines").forGetter(properties -> properties.vines), Codec.BOOL.fieldOf("replace_with_blackstone").forGetter(properties -> properties.replaceWithBlackstone)).apply(instance, Properties::new));
         public boolean cold;
         public float mossiness = 0.2f;
         public boolean airPocket;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/ScatteredFeaturePiece.java b/src/main/java/net/minecraft/world/level/levelgen/structure/ScatteredFeaturePiece.java
index c60a464a74df6e8d0d09ce113992b32c6d9c84f6..ea8c3aa7393373dfa665eb4af2c5c070bfc48064 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/ScatteredFeaturePiece.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/ScatteredFeaturePiece.java
@@ -1,7 +1,6 @@
 package net.minecraft.world.level.levelgen.structure;
 
 import net.minecraft.world.level.levelgen.Heightmap;
-import net.minecraft.core.Vec3i;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.nbt.CompoundTag;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/ShipwreckPieces.java b/src/main/java/net/minecraft/world/level/levelgen/structure/ShipwreckPieces.java
index fe9914e4f4e8912bda442ec52a7f2ffdd0607327..4e752904f9c6c1e6fd35fa43606fbb74e2d314db 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/ShipwreckPieces.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/ShipwreckPieces.java
@@ -1,17 +1,14 @@
 package net.minecraft.world.level.levelgen.structure;
 
-import java.util.Iterator;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.StructureFeatureManager;
 import net.minecraft.world.level.WorldGenLevel;
-import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.entity.RandomizableContainerBlockEntity;
 import net.minecraft.world.level.storage.loot.BuiltInLootTables;
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate;
-import net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessor;
 import net.minecraft.world.level.levelgen.structure.templatesystem.BlockIgnoreProcessor;
 import net.minecraft.world.level.block.Mirror;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/TemplateStructurePiece.java b/src/main/java/net/minecraft/world/level/levelgen/structure/TemplateStructurePiece.java
index c0ca579757735052cf3a23448a9602cabc3d570e..48242f83612d1eb650348e3d04d3b7adb01c50f0 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/TemplateStructurePiece.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/TemplateStructurePiece.java
@@ -3,7 +3,7 @@ package net.minecraft.world.level.levelgen.structure;
 import org.apache.logging.log4j.LogManager;
 import net.minecraft.world.level.block.Rotation;
 import net.minecraft.world.level.block.state.BlockState;
-import java.util.Iterator;
+
 import java.util.List;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import net.minecraft.commands.arguments.blocks.BlockStateParser;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/AxisAlignedLinearPosTest.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/AxisAlignedLinearPosTest.java
index d03b505583ba721a1419285d7f5329ee0d25c343..b3ea7549f21a4c7477f1c92f6c8d7c2e389168e9 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/AxisAlignedLinearPosTest.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/AxisAlignedLinearPosTest.java
@@ -46,6 +46,7 @@ public class AxisAlignedLinearPosTest extends PosRuleTest
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)Codec.FLOAT.fieldOf("min_chance").orElse(0.0f).forGetter(axisAlignedLinearPosTest -> axisAlignedLinearPosTest.minChance), (App)Codec.FLOAT.fieldOf("max_chance").orElse(0.0f).forGetter(axisAlignedLinearPosTest -> axisAlignedLinearPosTest.maxChance), (App)Codec.INT.fieldOf("min_dist").orElse(0).forGetter(axisAlignedLinearPosTest -> axisAlignedLinearPosTest.minDist), (App)Codec.INT.fieldOf("max_dist").orElse(0).forGetter(axisAlignedLinearPosTest -> axisAlignedLinearPosTest.maxDist), (App)Direction.Axis.CODEC.fieldOf("axis").orElse(Direction.Axis.Y).forGetter(axisAlignedLinearPosTest -> axisAlignedLinearPosTest.axis)).apply(instance, AxisAlignedLinearPosTest::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(Codec.FLOAT.fieldOf("min_chance").orElse(0.0f).forGetter(axisAlignedLinearPosTest -> axisAlignedLinearPosTest.minChance), Codec.FLOAT.fieldOf("max_chance").orElse(0.0f).forGetter(axisAlignedLinearPosTest -> axisAlignedLinearPosTest.maxChance), Codec.INT.fieldOf("min_dist").orElse(0).forGetter(axisAlignedLinearPosTest -> axisAlignedLinearPosTest.minDist), Codec.INT.fieldOf("max_dist").orElse(0).forGetter(axisAlignedLinearPosTest -> axisAlignedLinearPosTest.maxDist), Direction.Axis.CODEC.fieldOf("axis").orElse(Direction.Axis.Y).forGetter(axisAlignedLinearPosTest -> axisAlignedLinearPosTest.axis)).apply(instance, AxisAlignedLinearPosTest::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlackstoneReplaceProcessor.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlackstoneReplaceProcessor.java
index 0880b95254c251ee9463cdcd47fac393d11fbf23..00eb1ba126cfcac8ad4aa9c379caba47c260ec69 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlackstoneReplaceProcessor.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlackstoneReplaceProcessor.java
@@ -24,7 +24,7 @@ public class BlackstoneReplaceProcessor extends StructureProcessor
     private final Map<Block, Block> replacements;
     
     private BlackstoneReplaceProcessor() {
-        this.replacements = Util.make((Map<Block, Block>)Maps.newHashMap(), hashMap -> {
+        this.replacements = Util.make(Maps.newHashMap(), hashMap -> { // MagmaCube - decompile error
             hashMap.put(Blocks.COBBLESTONE, Blocks.BLACKSTONE);
             hashMap.put(Blocks.MOSSY_COBBLESTONE, Blocks.BLACKSTONE);
             hashMap.put(Blocks.STONE, Blocks.POLISHED_BLACKSTONE);
@@ -59,14 +59,16 @@ public class BlackstoneReplaceProcessor extends StructureProcessor
         }
         final BlockState blockState = structureBlockInfo2.state;
         BlockState blockState2 = block.defaultBlockState();
-        if (blockState.hasProperty((Property<Comparable>)StairBlock.FACING)) {
-            blockState2 = ((StateHolder<O, BlockState>)blockState2).setValue((Property<Comparable>)StairBlock.FACING, (Comparable)blockState.getValue((Property<V>)StairBlock.FACING));
+        // MagmaCube start - decompile error
+        if (blockState.hasProperty(StairBlock.FACING)) {
+            blockState2 = (blockState2).setValue(StairBlock.FACING, (Comparable)blockState.getValue(StairBlock.FACING));
         }
+        // MagmaCube end - decompile error
         if (blockState.hasProperty(StairBlock.HALF)) {
-            blockState2 = ((StateHolder<O, BlockState>)blockState2).setValue(StairBlock.HALF, (Comparable)blockState.getValue((Property<V>)StairBlock.HALF));
+            blockState2 = (blockState2).setValue(StairBlock.HALF, (Comparable)blockState.getValue(StairBlock.HALF)); // MagmaCube - decompile error
         }
         if (blockState.hasProperty(SlabBlock.TYPE)) {
-            blockState2 = ((StateHolder<O, BlockState>)blockState2).setValue(SlabBlock.TYPE, (Comparable)blockState.getValue((Property<V>)SlabBlock.TYPE));
+            blockState2 = (blockState2).setValue(SlabBlock.TYPE, (Comparable)blockState.getValue(SlabBlock.TYPE)); // MagmaCube - decompile error
         }
         return new StructureTemplate.StructureBlockInfo(structureBlockInfo2.pos, blockState2, structureBlockInfo2.nbt);
     }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockAgeProcessor.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockAgeProcessor.java
index fd01a0ed1e9a26cda0a1b7b78c1c327cb380fbef..83112a163601c7e896d32486bf175f1b1fa68081 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockAgeProcessor.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockAgeProcessor.java
@@ -72,7 +72,7 @@ public class BlockAgeProcessor extends StructureProcessor
             return null;
         }
         final BlockState[] blockStates = { Blocks.STONE_SLAB.defaultBlockState(), Blocks.STONE_BRICK_SLAB.defaultBlockState() };
-        final BlockState[] blockStates2 = { ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.MOSSY_STONE_BRICK_STAIRS.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, direction)).setValue(StairBlock.HALF, half), Blocks.MOSSY_STONE_BRICK_SLAB.defaultBlockState() };
+        final BlockState[] blockStates2 = { ((Blocks.MOSSY_STONE_BRICK_STAIRS.defaultBlockState()).setValue(StairBlock.FACING, direction)).setValue(StairBlock.HALF, half), Blocks.MOSSY_STONE_BRICK_SLAB.defaultBlockState() }; // MagmaCube - decompile error
         return this.getRandomBlock(random, blockStates, blockStates2);
     }
     
@@ -101,7 +101,8 @@ public class BlockAgeProcessor extends StructureProcessor
     }
     
     private static BlockState getRandomFacingStairs(final Random random, final Block block) {
-        return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)block.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, Direction.Plane.HORIZONTAL.getRandomDirection(random))).setValue(StairBlock.HALF, Half.values()[random.nextInt(Half.values().length)]);
+        // MagmaCube - decompile error
+        return ((block.defaultBlockState()).setValue(StairBlock.FACING, Direction.Plane.HORIZONTAL.getRandomDirection(random))).setValue(StairBlock.HALF, Half.values()[random.nextInt(Half.values().length)]);
     }
     
     private BlockState getRandomBlock(final Random random, final BlockState[] blockStates, final BlockState[] blockStates2) {
@@ -121,6 +122,7 @@ public class BlockAgeProcessor extends StructureProcessor
     }
     
     static {
-        CODEC = Codec.FLOAT.fieldOf("mossiness").xmap((Function)BlockAgeProcessor::new, blockAgeProcessor -> blockAgeProcessor.mossiness).codec();
+        // MagmaCube - decompile error
+        CODEC = Codec.FLOAT.fieldOf("mossiness").xmap(BlockAgeProcessor::new, blockAgeProcessor -> blockAgeProcessor.mossiness).codec();
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockIgnoreProcessor.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockIgnoreProcessor.java
index 89a6ec7596921bdf3a3639f17a74a5fd0fe2b85d..cbfd63d5cb434874a4038530ae30360d6440cf34 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockIgnoreProcessor.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockIgnoreProcessor.java
@@ -40,7 +40,8 @@ public class BlockIgnoreProcessor extends StructureProcessor
     }
     
     static {
-        CODEC = BlockState.CODEC.xmap((Function)BlockBehaviour.BlockStateBase::getBlock, (Function)Block::defaultBlockState).listOf().fieldOf("blocks").xmap((Function)BlockIgnoreProcessor::new, blockIgnoreProcessor -> blockIgnoreProcessor.toIgnore).codec();
+        // MagmaCube - decompile error
+        CODEC = BlockState.CODEC.xmap(BlockBehaviour.BlockStateBase::getBlock, Block::defaultBlockState).listOf().fieldOf("blocks").xmap(BlockIgnoreProcessor::new, blockIgnoreProcessor -> blockIgnoreProcessor.toIgnore).codec();
         STRUCTURE_BLOCK = new BlockIgnoreProcessor((List<Block>)ImmutableList.of(Blocks.STRUCTURE_BLOCK));
         AIR = new BlockIgnoreProcessor((List<Block>)ImmutableList.of(Blocks.AIR));
         STRUCTURE_AND_AIR = new BlockIgnoreProcessor((List<Block>)ImmutableList.of(Blocks.AIR, Blocks.STRUCTURE_BLOCK));
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockRotProcessor.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockRotProcessor.java
index ef84971b7e1f434bdeaf47708a1d1e79dadeed0b..a4b80d27bb121820e55898ad31fe7ce0b1f5459d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockRotProcessor.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockRotProcessor.java
@@ -32,6 +32,7 @@ public class BlockRotProcessor extends StructureProcessor
     }
     
     static {
-        CODEC = Codec.FLOAT.fieldOf("integrity").orElse(1.0f).xmap((Function)BlockRotProcessor::new, blockRotProcessor -> blockRotProcessor.integrity).codec();
+        // MagmaCube - decompile error
+        CODEC = Codec.FLOAT.fieldOf("integrity").orElse(1.0f).xmap(BlockRotProcessor::new, blockRotProcessor -> blockRotProcessor.integrity).codec();
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/GravityProcessor.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/GravityProcessor.java
index f8f6d2d3ff97725ed1cf77732d268afd5a42c489..531002d819d7eda036e20b8d1f3bd323bb156fb4 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/GravityProcessor.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/GravityProcessor.java
@@ -28,13 +28,13 @@ public class GravityProcessor extends StructureProcessor
         final Heightmap.Types types4;
         if (levelReader instanceof ServerLevel) {
             if (this.heightmap == Heightmap.Types.WORLD_SURFACE_WG) {
-                final Heightmap.Types types = Heightmap.Types.WORLD_SURFACE;
+                types4 = Heightmap.Types.WORLD_SURFACE; // MagmaCube - decompile error
             }
             else if (this.heightmap == Heightmap.Types.OCEAN_FLOOR_WG) {
-                final Heightmap.Types types2 = Heightmap.Types.OCEAN_FLOOR;
+                types4 = Heightmap.Types.OCEAN_FLOOR; // MagmaCube - decompile error
             }
             else {
-                final Heightmap.Types types3 = this.heightmap;
+                types4 = this.heightmap; // MagmaCube - decompile error
             }
         }
         else {
@@ -51,6 +51,7 @@ public class GravityProcessor extends StructureProcessor
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)Heightmap.Types.CODEC.fieldOf("heightmap").orElse(Heightmap.Types.WORLD_SURFACE_WG).forGetter(gravityProcessor -> gravityProcessor.heightmap), (App)Codec.INT.fieldOf("offset").orElse(0).forGetter(gravityProcessor -> gravityProcessor.offset)).apply(instance, (BiFunction)GravityProcessor::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(Heightmap.Types.CODEC.fieldOf("heightmap").orElse(Heightmap.Types.WORLD_SURFACE_WG).forGetter(gravityProcessor -> gravityProcessor.heightmap), Codec.INT.fieldOf("offset").orElse(0).forGetter(gravityProcessor -> gravityProcessor.offset)).apply(instance, GravityProcessor::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/JigsawReplacementProcessor.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/JigsawReplacementProcessor.java
index 39488e1258b7f37b08fa53fa7df513f6d9f7ed48..48d94202014b4426680880b15bb7bf0144716c9d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/JigsawReplacementProcessor.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/JigsawReplacementProcessor.java
@@ -2,7 +2,6 @@ package net.minecraft.world.level.levelgen.structure.templatesystem;
 
 import javax.annotation.Nullable;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.nbt.CompoundTag;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import net.minecraft.commands.arguments.blocks.BlockStateParser;
 import com.mojang.brigadier.StringReader;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/LavaSubmergedBlockProcessor.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/LavaSubmergedBlockProcessor.java
index 497ef4ae344fd7bdf2c2454d21bc14702cd63c61..bf2a3da3695f381954c051d99dfefe34dbff3bd4 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/LavaSubmergedBlockProcessor.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/LavaSubmergedBlockProcessor.java
@@ -2,7 +2,6 @@ package net.minecraft.world.level.levelgen.structure.templatesystem;
 
 import javax.annotation.Nullable;
 import net.minecraft.world.level.block.Block;
-import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.LevelReader;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/LinearPosTest.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/LinearPosTest.java
index 770e21f752e4353d047d93a75c12ff911693e881..a401972e5e6a9a5ef0831453475d3df0b2ba1835 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/LinearPosTest.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/LinearPosTest.java
@@ -40,6 +40,7 @@ public class LinearPosTest extends PosRuleTest
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)Codec.FLOAT.fieldOf("min_chance").orElse(0.0f).forGetter(linearPosTest -> linearPosTest.minChance), (App)Codec.FLOAT.fieldOf("max_chance").orElse(0.0f).forGetter(linearPosTest -> linearPosTest.maxChance), (App)Codec.INT.fieldOf("min_dist").orElse(0).forGetter(linearPosTest -> linearPosTest.minDist), (App)Codec.INT.fieldOf("max_dist").orElse(0).forGetter(linearPosTest -> linearPosTest.maxDist)).apply(instance, LinearPosTest::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(Codec.FLOAT.fieldOf("min_chance").orElse(0.0f).forGetter(linearPosTest -> linearPosTest.minChance), Codec.FLOAT.fieldOf("max_chance").orElse(0.0f).forGetter(linearPosTest -> linearPosTest.maxChance), Codec.INT.fieldOf("min_dist").orElse(0).forGetter(linearPosTest -> linearPosTest.minDist), Codec.INT.fieldOf("max_dist").orElse(0).forGetter(linearPosTest -> linearPosTest.maxDist)).apply(instance, LinearPosTest::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTest.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTest.java
index 1a84493329fd9a87405c9125c7b2fc07c2fb3c44..a92f8dc1453c32137ffc6e24a2dffdaffa24eea3 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTest.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTest.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.structure.templatesystem;
 
-import java.util.function.Function;
 import net.minecraft.core.Registry;
 import java.util.Random;
 import net.minecraft.core.BlockPos;
@@ -15,6 +14,6 @@ public abstract class PosRuleTest
     protected abstract PosRuleTestType<?> getType();
     
     static {
-        CODEC = Registry.POS_RULE_TEST.dispatch("predicate_type", (Function)PosRuleTest::getType, (Function)PosRuleTestType::codec);
+        CODEC = Registry.POS_RULE_TEST.dispatch("predicate_type", PosRuleTest::getType, PosRuleTestType::codec); // MagmaCube - decompile fix
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/ProcessorRule.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/ProcessorRule.java
index f400f9bae80a7cf4c564abe3e6923c7872fdeec8..e769ed7145c11d7478453ac8c5d2302eef289b0c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/ProcessorRule.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/ProcessorRule.java
@@ -51,6 +51,7 @@ public class ProcessorRule
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)RuleTest.CODEC.fieldOf("input_predicate").forGetter(processorRule -> processorRule.inputPredicate), (App)RuleTest.CODEC.fieldOf("location_predicate").forGetter(processorRule -> processorRule.locPredicate), (App)PosRuleTest.CODEC.optionalFieldOf("position_predicate", PosAlwaysTrueTest.INSTANCE).forGetter(processorRule -> processorRule.posPredicate), (App)BlockState.CODEC.fieldOf("output_state").forGetter(processorRule -> processorRule.outputState), (App)CompoundTag.CODEC.optionalFieldOf("output_nbt").forGetter(processorRule -> Optional.ofNullable(processorRule.outputTag))).apply(instance, ProcessorRule::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(RuleTest.CODEC.fieldOf("input_predicate").forGetter(processorRule -> processorRule.inputPredicate), RuleTest.CODEC.fieldOf("location_predicate").forGetter(processorRule -> processorRule.locPredicate), PosRuleTest.CODEC.optionalFieldOf("position_predicate", PosAlwaysTrueTest.INSTANCE).forGetter(processorRule -> processorRule.posPredicate), BlockState.CODEC.fieldOf("output_state").forGetter(processorRule -> processorRule.outputState), CompoundTag.CODEC.optionalFieldOf("output_nbt").forGetter(processorRule -> Optional.ofNullable(processorRule.outputTag))).apply(instance, ProcessorRule::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RuleProcessor.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RuleProcessor.java
index 31051b68eafc942ec4eef948872aa6ee04a853cd..82bd3de47ce3e91f08c0f739797300b888e984f5 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RuleProcessor.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RuleProcessor.java
@@ -42,6 +42,7 @@ public class RuleProcessor extends StructureProcessor
     }
     
     static {
-        CODEC = ProcessorRule.CODEC.listOf().fieldOf("rules").xmap((Function)RuleProcessor::new, ruleProcessor -> ruleProcessor.rules).codec();
+        // MagmaCube - decompile error
+        CODEC = ProcessorRule.CODEC.listOf().fieldOf("rules").xmap(RuleProcessor::new, ruleProcessor -> ruleProcessor.rules).codec();
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RuleTest.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RuleTest.java
index a0baf2a871529dc95a8b888882ddb1101469d343..af1e011db4babf66ce43b02d9025d1b5e094659d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RuleTest.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RuleTest.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.levelgen.structure.templatesystem;
 
-import java.util.function.Function;
 import net.minecraft.core.Registry;
 import java.util.Random;
 import net.minecraft.world.level.block.state.BlockState;
@@ -15,6 +14,6 @@ public abstract class RuleTest
     protected abstract RuleTestType<?> getType();
     
     static {
-        CODEC = Registry.RULE_TEST.dispatch("predicate_type", (Function)RuleTest::getType, (Function)RuleTestType::codec);
+        CODEC = Registry.RULE_TEST.dispatch("predicate_type", RuleTest::getType, RuleTestType::codec); // MagmaCube - decompile fix
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureManager.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureManager.java
index 759cf608b7beab1bd690d8102002896a3cc6aab8..17f29ffcb14626df34acbc210fadbfc47dfe2f73 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureManager.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureManager.java
@@ -38,7 +38,7 @@ public class StructureManager
     private final Path generatedDir;
     
     public StructureManager(final ResourceManager resourceManager, final LevelStorageSource.LevelStorageAccess levelStorageAccess, final DataFixer dataFixer) {
-        this.structureRepository = (Map<ResourceLocation, StructureTemplate>)Maps.newHashMap();
+        this.structureRepository = Maps.newHashMap(); // MagmaCube - decompile error
         this.resourceManager = resourceManager;
         this.fixerUpper = dataFixer;
         this.generatedDir = levelStorageAccess.getLevelPath(LevelResource.GENERATED_DIR).normalize();
@@ -55,11 +55,12 @@ public class StructureManager
     
     @Nullable
     public StructureTemplate get(final ResourceLocation resourceLocation) {
-        final StructureTemplate structureTemplate;
-        return this.structureRepository.computeIfAbsent(resourceLocation, resourceLocation -> {
-            structureTemplate = this.loadFromGenerated(resourceLocation);
-            return (structureTemplate != null) ? structureTemplate : this.loadFromResource(resourceLocation);
+        // MagmaCube start - decompile error
+        return this.structureRepository.computeIfAbsent(resourceLocation, resourceLocation1 -> {
+            StructureTemplate structureTemplate = this.loadFromGenerated(resourceLocation1);
+            return (structureTemplate != null) ? structureTemplate : this.loadFromResource(resourceLocation1);
         });
+        // MagmaCube end - decompile error
     }
     
     public void onResourceManagerReload(final ResourceManager resourceManager) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings.java
index 349c1fb524f97543caf98b3ec746894e5ef75f14..bef7418c0c701abe6806df037fed1e726b466bef 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings.java
@@ -1,9 +1,7 @@
 package net.minecraft.world.level.levelgen.structure.templatesystem;
 
-import net.minecraft.core.Vec3i;
 import net.minecraft.util.Mth;
 import net.minecraft.Util;
-import java.util.Collection;
 import com.google.common.collect.Lists;
 import java.util.List;
 import java.util.Random;
@@ -38,7 +36,7 @@ public class StructurePlaceSettings
         this.rotation = Rotation.NONE;
         this.rotationPivot = BlockPos.ZERO;
         this.keepLiquids = true;
-        this.processors = (List<StructureProcessor>)Lists.newArrayList();
+        this.processors = Lists.newArrayList(); // MagmaCube - decompile fix
     }
     
     public StructurePlaceSettings copy() {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/SurfaceBuilderBaseConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/SurfaceBuilderBaseConfiguration.java
index b4b107614e8ab993f1fb12002b14c6738818a53f..b4970cf3e7a852a07e694c8aba67e915a72c7ceb 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/SurfaceBuilderBaseConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/SurfaceBuilderBaseConfiguration.java
@@ -34,6 +34,7 @@ public class SurfaceBuilderBaseConfiguration implements SurfaceBuilderConfigurat
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(instance -> ((RecordCodecBuilder.Instance)instance).group((App)BlockState.CODEC.fieldOf("top_material").forGetter(surfaceBuilderBaseConfiguration -> surfaceBuilderBaseConfiguration.topMaterial), (App)BlockState.CODEC.fieldOf("under_material").forGetter(surfaceBuilderBaseConfiguration -> surfaceBuilderBaseConfiguration.underMaterial), (App)BlockState.CODEC.fieldOf("underwater_material").forGetter(surfaceBuilderBaseConfiguration -> surfaceBuilderBaseConfiguration.underwaterMaterial)).apply(instance, SurfaceBuilderBaseConfiguration::new));
+        // MagmaCube - decompile error
+        CODEC = RecordCodecBuilder.create(instance -> instance.group(BlockState.CODEC.fieldOf("top_material").forGetter(surfaceBuilderBaseConfiguration -> surfaceBuilderBaseConfiguration.topMaterial), BlockState.CODEC.fieldOf("under_material").forGetter(surfaceBuilderBaseConfiguration -> surfaceBuilderBaseConfiguration.underMaterial), BlockState.CODEC.fieldOf("underwater_material").forGetter(surfaceBuilderBaseConfiguration -> surfaceBuilderBaseConfiguration.underwaterMaterial)).apply(instance, SurfaceBuilderBaseConfiguration::new));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/lighting/BlockLightSectionStorage.java b/src/main/java/net/minecraft/world/level/lighting/BlockLightSectionStorage.java
index 02f56ef3a93717c26e546e4264d67182781b5077..ddd0c1faaf99f9fc9f9d5ae98affde7cf23db49c 100644
--- a/src/main/java/net/minecraft/world/level/lighting/BlockLightSectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/lighting/BlockLightSectionStorage.java
@@ -7,7 +7,7 @@ import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.chunk.LightChunkGetter;
 
-public class BlockLightSectionStorage extends LayerLightSectionStorage<BlockDataLayerStorageMap>
+public class BlockLightSectionStorage extends LayerLightSectionStorage<BlockLightSectionStorage.BlockDataLayerStorageMap> // MagmaCube - decompile fix
 {
     protected BlockLightSectionStorage(final LightChunkGetter lightChunkGetter) {
         super(LightLayer.BLOCK, lightChunkGetter, new BlockDataLayerStorageMap((Long2ObjectOpenHashMap<DataLayer>)new Long2ObjectOpenHashMap()));
diff --git a/src/main/java/net/minecraft/world/level/lighting/SkyLightSectionStorage.java b/src/main/java/net/minecraft/world/level/lighting/SkyLightSectionStorage.java
index 8f2a445093c22255d4f321e820f7c98859ea6138..136bb1917617d0316c733764861d808804587a18 100644
--- a/src/main/java/net/minecraft/world/level/lighting/SkyLightSectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/lighting/SkyLightSectionStorage.java
@@ -13,7 +13,7 @@ import net.minecraft.world.level.chunk.LightChunkGetter;
 import it.unimi.dsi.fastutil.longs.LongSet;
 import net.minecraft.core.Direction;
 
-public class SkyLightSectionStorage extends LayerLightSectionStorage<SkyDataLayerStorageMap>
+public class SkyLightSectionStorage extends LayerLightSectionStorage<SkyLightSectionStorage.SkyDataLayerStorageMap> // MagmaCube - decompile error
 {
     private static final Direction[] HORIZONTALS;
     private final LongSet sectionsWithSources;
@@ -189,18 +189,24 @@ public class SkyLightSectionStorage extends LayerLightSectionStorage<SkyDataLaye
                                         final long l10;
                                         switch (direction) {
                                             case NORTH: {
-                                                final long l3 = BlockPos.asLong(i2 + i5, i3 + i6, i4);
-                                                final long l4 = BlockPos.asLong(i2 + i5, i3 + i6, i4 - 1);
+                                                // MagmaCube start - decompile error
+                                                l9 = BlockPos.asLong(i2 + i5, i3 + i6, i4);
+                                                l10 = BlockPos.asLong(i2 + i5, i3 + i6, i4 - 1);
+                                                // MagmaCube end - decompile error
                                                 break;
                                             }
                                             case SOUTH: {
-                                                final long l5 = BlockPos.asLong(i2 + i5, i3 + i6, i4 + 16 - 1);
-                                                final long l6 = BlockPos.asLong(i2 + i5, i3 + i6, i4 + 16);
+                                                // MagmaCube start - decompile error
+                                                l9 = BlockPos.asLong(i2 + i5, i3 + i6, i4 + 16 - 1);
+                                                l10 = BlockPos.asLong(i2 + i5, i3 + i6, i4 + 16);
+                                                // MagmaCube end - decompile error
                                                 break;
                                             }
                                             case WEST: {
-                                                final long l7 = BlockPos.asLong(i2, i3 + i5, i4 + i6);
-                                                final long l8 = BlockPos.asLong(i2 - 1, i3 + i5, i4 + i6);
+                                                // MagmaCube start - decompile error
+                                                l9 = BlockPos.asLong(i2, i3 + i5, i4 + i6);
+                                                l10 = BlockPos.asLong(i2 - 1, i3 + i5, i4 + i6);
+                                                // MagmaCube end - decompile error
                                                 break;
                                             }
                                             default: {
diff --git a/src/main/java/net/minecraft/world/level/material/FluidState.java b/src/main/java/net/minecraft/world/level/material/FluidState.java
index ef8909c593832b589921941f6da45f8be29696a1..801bca657f2ededf68fd1c93b0a43d4d2b58a88d 100644
--- a/src/main/java/net/minecraft/world/level/material/FluidState.java
+++ b/src/main/java/net/minecraft/world/level/material/FluidState.java
@@ -109,6 +109,6 @@ public final class FluidState extends StateHolder<Fluid, FluidState>
     }
     
     static {
-        CODEC = StateHolder.codec((com.mojang.serialization.Codec<Object>)Registry.FLUID, Fluid::defaultFluidState).stable();
+        CODEC = StateHolder.codec(Registry.FLUID, Fluid::defaultFluidState).stable(); // MagmaCube - decompile fix
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/newbiome/layer/traits/AreaTransformer1.java b/src/main/java/net/minecraft/world/level/newbiome/layer/traits/AreaTransformer1.java
index c16948cb6b1834a07b6e5657919a9d7f49cb9e4a..2ff59d32a57b14b3715137839c9eb107e6771760 100644
--- a/src/main/java/net/minecraft/world/level/newbiome/layer/traits/AreaTransformer1.java
+++ b/src/main/java/net/minecraft/world/level/newbiome/layer/traits/AreaTransformer1.java
@@ -9,7 +9,7 @@ public interface AreaTransformer1
 extends DimensionTransformer {
     default public <R extends Area> AreaFactory<R> run(BigContext<R> bigContext, AreaFactory<R> areaFactory) {
         return () -> {
-            Object area = areaFactory.make();
+            R area = areaFactory.make(); // MagmaCube - type
             return bigContext.createResult((i, i2) -> {
                 bigContext.initRandom(i, i2);
                 return this.applyPixel(bigContext, (Area)area, i, i2);
diff --git a/src/main/java/net/minecraft/world/level/newbiome/layer/traits/AreaTransformer2.java b/src/main/java/net/minecraft/world/level/newbiome/layer/traits/AreaTransformer2.java
index 0e46b7f5b8a876924208ed305ce580f04a0b1a5d..d49fbfd99b9ce295873e1a02e52171f16f76fd31 100644
--- a/src/main/java/net/minecraft/world/level/newbiome/layer/traits/AreaTransformer2.java
+++ b/src/main/java/net/minecraft/world/level/newbiome/layer/traits/AreaTransformer2.java
@@ -10,8 +10,8 @@ public interface AreaTransformer2
 extends DimensionTransformer {
     default public <R extends Area> AreaFactory<R> run(BigContext<R> bigContext, AreaFactory<R> areaFactory, AreaFactory<R> areaFactory2) {
         return () -> {
-            Object area = areaFactory.make();
-            Object area2 = areaFactory2.make();
+            R area = areaFactory.make(); // MagmaCube - type
+            R area2 = areaFactory2.make(); // MagmaCube - type
             return bigContext.createResult((i, i2) -> {
                 bigContext.initRandom(i, i2);
                 return this.applyPixel(bigContext, (Area)area, (Area)area2, i, i2);
diff --git a/src/main/java/net/minecraft/world/level/saveddata/SavedData.java b/src/main/java/net/minecraft/world/level/saveddata/SavedData.java
index 3ee3a3925afa69252b3dcf2c4e2e3155fb1568c5..6d9d17726df2b02a740024635ed1775099bdd1b2 100644
--- a/src/main/java/net/minecraft/world/level/saveddata/SavedData.java
+++ b/src/main/java/net/minecraft/world/level/saveddata/SavedData.java
@@ -4,7 +4,7 @@ import org.apache.logging.log4j.LogManager;
 import java.io.IOException;
 import net.minecraft.nbt.NbtIo;
 import net.minecraft.SharedConstants;
-import net.minecraft.nbt.Tag;
+
 import java.io.File;
 import net.minecraft.nbt.CompoundTag;
 import org.apache.logging.log4j.Logger;
diff --git a/src/main/java/net/minecraft/world/level/saveddata/maps/MapBanner.java b/src/main/java/net/minecraft/world/level/saveddata/maps/MapBanner.java
index 43986407fc54889dc8d7196ff7647678175bdadd..506ccb771f88d147c4689a5285d2c527581893f1 100644
--- a/src/main/java/net/minecraft/world/level/saveddata/maps/MapBanner.java
+++ b/src/main/java/net/minecraft/world/level/saveddata/maps/MapBanner.java
@@ -1,7 +1,5 @@
 package net.minecraft.world.level.saveddata.maps;
 
-import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.nbt.Tag;
 import java.util.Objects;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.BannerBlockEntity;
diff --git a/src/main/java/net/minecraft/world/level/saveddata/maps/MapFrame.java b/src/main/java/net/minecraft/world/level/saveddata/maps/MapFrame.java
index 1277c0022ce86cc271b9bbba9c04a702defea0dd..3df74f8700830f1c8c603f15fc21929dece1830c 100644
--- a/src/main/java/net/minecraft/world/level/saveddata/maps/MapFrame.java
+++ b/src/main/java/net/minecraft/world/level/saveddata/maps/MapFrame.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.saveddata.maps;
 
-import net.minecraft.nbt.Tag;
 import net.minecraft.nbt.NbtUtils;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.core.BlockPos;
diff --git a/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java b/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
index 616b016850bc4477eb16b8ef5e4cb4da86b97674..36ad107e7bc220086e3321b8750dac515c9412cf 100644
--- a/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
+++ b/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
@@ -178,7 +178,7 @@ extends SavedData {
     public static void addTargetDecoration(ItemStack itemStack, BlockPos blockPos, String s, MapDecoration.Type type) {
         ListTag listTag2;
         if (itemStack.hasTag() && itemStack.getTag().contains("Decorations", 9)) {
-            ListTag listTag = itemStack.getTag().getList("Decorations", 10);
+            listTag2 = itemStack.getTag().getList("Decorations", 10); // MagmaCube - decompile error
         } else {
             listTag2 = new ListTag();
             itemStack.addTagElement("Decorations", listTag2);
@@ -200,7 +200,7 @@ extends SavedData {
      * WARNING - void declaration
      */
     private void addDecoration(MapDecoration.Type type, @Nullable LevelAccessor levelAccessor, String s, double d, double d2, double d3, @Nullable Component component) {
-        void b5;
+        byte b4; // MagmaCube - decompile error
         int i = 1 << this.scale;
         float f = (float)(d - (double)this.x) / (float)i;
         float f2 = (float)(d2 - (double)this.z) / (float)i;
@@ -208,10 +208,10 @@ extends SavedData {
         byte b2 = (byte)((double)(f2 * 2.0f) + 0.5);
         int i2 = 63;
         if (f >= -63.0f && f2 >= -63.0f && f <= 63.0f && f2 <= 63.0f) {
-            byte b3 = (byte)((d3 += d3 < 0.0 ? -8.0 : 8.0) * 16.0 / 360.0);
+            b4 = (byte)((d3 += d3 < 0.0 ? -8.0 : 8.0) * 16.0 / 360.0); // MagmaCube - decompile error
             if (this.dimension == Level.NETHER && levelAccessor != null) {
                 int i3 = (int)(levelAccessor.getLevelData().getDayTime() / 10L);
-                b3 = (byte)(i3 * i3 * 34187121 + i3 * 121 >> 15 & 0xF);
+                b4 = (byte)(i3 * i3 * 34187121 + i3 * 121 >> 15 & 0xF); // MagmaCube - decompile error
             }
         } else if (type == MapDecoration.Type.PLAYER) {
             int i4 = 320;
@@ -223,7 +223,7 @@ extends SavedData {
                 this.decorations.remove(s);
                 return;
             }
-            boolean b4 = false;
+            b4 = 0; // MagmaCube - decompile error
             if (f <= -63.0f) {
                 b = -128;
             }
@@ -240,7 +240,7 @@ extends SavedData {
             this.decorations.remove(s);
             return;
         }
-        this.decorations.put(s, new MapDecoration(type, b, b2, (byte)b5, component));
+        this.decorations.put(s, new MapDecoration(type, b, b2, (byte)b4, component)); // MagmaCube - decompile error
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/storage/CommandStorage.java b/src/main/java/net/minecraft/world/level/storage/CommandStorage.java
index 4bdafde2619dc2dbc8e2b238b9e521b5f13bf78d..a02a465e41aeaa0fd76c73a20478d8a606213cc4 100644
--- a/src/main/java/net/minecraft/world/level/storage/CommandStorage.java
+++ b/src/main/java/net/minecraft/world/level/storage/CommandStorage.java
@@ -15,7 +15,7 @@ public class CommandStorage
     private final DimensionDataStorage storage;
     
     public CommandStorage(final DimensionDataStorage dimensionDataStorage) {
-        this.namespaces = (Map<String, Container>)Maps.newHashMap();
+        this.namespaces = Maps.newHashMap(); // MagmaCube - decompile error
         this.storage = dimensionDataStorage;
     }
     
@@ -52,7 +52,7 @@ public class CommandStorage
         
         public Container(final String s) {
             super(s);
-            this.storage = (Map<String, CompoundTag>)Maps.newHashMap();
+            this.storage = Maps.newHashMap(); // MagmaCube - decompile error
         }
         
         @Override
diff --git a/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java b/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java
index f7b26505b51c95f3e9f369255c8a376c3b803051..8e5227741af1300d6af6d8e61a8a36ee01e6810f 100644
--- a/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java
+++ b/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java
@@ -30,7 +30,7 @@ public class DimensionDataStorage
     private final File dataFolder;
     
     public DimensionDataStorage(final File file, final DataFixer dataFixer) {
-        this.cache = (Map<String, SavedData>)Maps.newHashMap();
+        this.cache = Maps.newHashMap(); // MagmaCube - decompile error
         this.fixerUpper = dataFixer;
         this.dataFolder = file;
     }
@@ -84,17 +84,19 @@ public class DimensionDataStorage
         final File file = this.getDataFile(s);
         try (final FileInputStream fileInputStream = new FileInputStream(file);
              final PushbackInputStream pushbackInputStream = new PushbackInputStream(fileInputStream, 2)) {
+            CompoundTag compoundTag; // MagmaCube - decompile error
             if (this.isGzip(pushbackInputStream)) {
-                final CompoundTag compoundTag = NbtIo.readCompressed(pushbackInputStream);
+                compoundTag = NbtIo.readCompressed(pushbackInputStream); // MagmaCube - decompile error
             }
             else {
                 try (final DataInputStream dataInputStream = new DataInputStream(pushbackInputStream)) {
-                    final CompoundTag compoundTag2 = NbtIo.read(dataInputStream);
+                    compoundTag = NbtIo.read(dataInputStream); // MagmaCube - decompile error
                 }
             }
-            final CompoundTag compoundTag3;
-            final int i2 = compoundTag3.contains("DataVersion", 99) ? compoundTag3.getInt("DataVersion") : 1343;
-            return NbtUtils.update(this.fixerUpper, DataFixTypes.SAVED_DATA, compoundTag3, i2, i);
+            // MagmaCube start - decompile error
+            final int i2 = compoundTag.contains("DataVersion", 99) ? compoundTag.getInt("DataVersion") : 1343;
+            return NbtUtils.update(this.fixerUpper, DataFixTypes.SAVED_DATA, compoundTag, i2, i);
+            // MagmaCube end - decompile error
         }
     }
     
diff --git a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
index 22d4be66831bbc6c4548e0224080e755228c7970..49bee44480e896ea846f1d8301a19152f48f5ee3 100644
--- a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -94,14 +94,16 @@ public class LevelStorageSource {
     }
 
     private static <T> Pair<WorldGenSettings, Lifecycle> readWorldGenSettings(Dynamic<T> dynamic, DataFixer dataFixer, int i) {
-        Dynamic dynamic2 = dynamic.get("WorldGenSettings").orElseEmptyMap();
+        Dynamic<WorldGenSettings> dynamic2 = (Dynamic<WorldGenSettings>) dynamic.get("WorldGenSettings").orElseEmptyMap(); // MagmaCube - type
         for (String s : OLD_SETTINGS_KEYS) {
             Optional optional = dynamic.get(s).result();
             if (!optional.isPresent()) continue;
             dynamic2 = dynamic2.set(s, (Dynamic)optional.get());
         }
-        Dynamic dynamic3 = dataFixer.update(References.WORLD_GEN_SETTINGS, dynamic2, i, SharedConstants.getCurrentVersion().getWorldVersion());
-        DataResult dataResult = WorldGenSettings.CODEC.parse(dynamic3);
+        // MagmaCube start - type
+        Dynamic<WorldGenSettings> dynamic3 = dataFixer.update(References.WORLD_GEN_SETTINGS, dynamic2, i, SharedConstants.getCurrentVersion().getWorldVersion());
+        DataResult<WorldGenSettings> dataResult = WorldGenSettings.CODEC.parse(dynamic3);
+        // MagmaCube end - type
         return Pair.of(dataResult.resultOrPartial(Util.prefix("WorldGenSettings: ", ((Logger)LOGGER)::error)).orElseGet(() -> {
             Registry registry = (Registry)RegistryLookupCodec.create(Registry.DIMENSION_TYPE_REGISTRY).codec().parse(dynamic3).resultOrPartial(Util.prefix("Dimension type registry: ", ((Logger)LOGGER)::error)).orElseThrow(() -> new IllegalStateException("Failed to get dimension registry"));
             Registry registry2 = (Registry)RegistryLookupCodec.create(Registry.BIOME_REGISTRY).codec().parse(dynamic3).resultOrPartial(Util.prefix("Biome registry: ", ((Logger)LOGGER)::error)).orElseThrow(() -> new IllegalStateException("Failed to get biome registry"));
@@ -124,10 +126,10 @@ public class LevelStorageSource {
         }
         ArrayList list = Lists.newArrayList();
         for (File file : files = this.baseDir.toFile().listFiles()) {
-            void flag2;
+            boolean flag2; // MagmaCube - decompile error
             if (!file.isDirectory()) continue;
             try {
-                boolean flag = DirectoryLock.isLocked(file.toPath());
+                flag2 = DirectoryLock.isLocked(file.toPath()); // MagmaCube - decompile error
             }
             catch (Exception exception) {
                 LOGGER.warn("Failed to read {} lock", file, exception);
@@ -168,7 +170,8 @@ public class LevelStorageSource {
             CompoundTag compoundTag2 = compoundTag.getCompound("Data");
             compoundTag2.remove("Player");
             int i = compoundTag2.contains("DataVersion", 99) ? compoundTag2.getInt("DataVersion") : -1;
-            Dynamic dynamic = dataFixer.update(DataFixTypes.LEVEL.getType(), new Dynamic((DynamicOps)NbtOps.INSTANCE, compoundTag2), i, SharedConstants.getCurrentVersion().getWorldVersion());
+            // MagmaCube - type
+            Dynamic<Level> dynamic = dataFixer.update(DataFixTypes.LEVEL.getType(), new Dynamic((DynamicOps)NbtOps.INSTANCE, compoundTag2), i, SharedConstants.getCurrentVersion().getWorldVersion());
             return dynamic.get("DataPacks").result().map(LevelStorageSource::readDataPackConfig).orElse(DataPackConfig.DEFAULT);
         }
         catch (Exception exception) {
@@ -205,7 +208,8 @@ public class LevelStorageSource {
                 CompoundTag compoundTag2 = compoundTag.getCompound("Data");
                 compoundTag2.remove("Player");
                 int i = compoundTag2.contains("DataVersion", 99) ? compoundTag2.getInt("DataVersion") : -1;
-                Dynamic dynamic = dataFixer.update(DataFixTypes.LEVEL.getType(), new Dynamic((DynamicOps)NbtOps.INSTANCE, compoundTag2), i, SharedConstants.getCurrentVersion().getWorldVersion());
+                // MagmaCube - type
+                Dynamic<Level> dynamic = dataFixer.update(DataFixTypes.LEVEL.getType(), new Dynamic((DynamicOps)NbtOps.INSTANCE, compoundTag2), i, SharedConstants.getCurrentVersion().getWorldVersion());
                 LevelVersion levelVersion = LevelVersion.parse(dynamic);
                 int i2 = levelVersion.levelDataVersion();
                 if (i2 == 19132 || i2 == 19133) {
@@ -371,16 +375,6 @@ public class LevelStorageSource {
                             Files.delete(path2);
                             return FileVisitResult.CONTINUE;
                         }
-
-                        @Override
-                        public /* synthetic */ FileVisitResult postVisitDirectory(Object object, IOException iOException) throws IOException {
-                            return this.postVisitDirectory((Path)object, iOException);
-                        }
-
-                        @Override
-                        public /* synthetic */ FileVisitResult visitFile(Object object, BasicFileAttributes basicFileAttributes) throws IOException {
-                            return this.visitFile((Path)object, basicFileAttributes);
-                        }
                     });
                     break;
                 }
@@ -440,11 +434,6 @@ public class LevelStorageSource {
                         zipOutputStream.closeEntry();
                         return FileVisitResult.CONTINUE;
                     }
-
-                    @Override
-                    public /* synthetic */ FileVisitResult visitFile(Object object, BasicFileAttributes basicFileAttributes) throws IOException {
-                        return this.visitFile((Path)object, basicFileAttributes);
-                    }
                 });
             }
             return Files.size(path2);
diff --git a/src/main/java/net/minecraft/world/level/storage/McRegionUpgrader.java b/src/main/java/net/minecraft/world/level/storage/McRegionUpgrader.java
index 7bc1b78fa52468657dfc0963a424db5cb45d9f31..9c319a850acdeef963df0581a34333cd1ca13aee 100644
--- a/src/main/java/net/minecraft/world/level/storage/McRegionUpgrader.java
+++ b/src/main/java/net/minecraft/world/level/storage/McRegionUpgrader.java
@@ -38,7 +38,7 @@ public class McRegionUpgrader {
     private static final Logger LOGGER = LogManager.getLogger();
 
     static boolean convertLevel(LevelStorageSource.LevelStorageAccess levelStorageAccess, ProgressListener progressListener) {
-        OverworldBiomeSource biomeSource2;
+        BiomeSource biomeSource2; // MagmaCube - decompile error
         progressListener.progressStagePercentage(0);
         ArrayList list = Lists.newArrayList();
         ArrayList list2 = Lists.newArrayList();
@@ -62,7 +62,7 @@ public class McRegionUpgrader {
         long l = worldData != null ? worldData.worldGenSettings().seed() : 0L;
         WritableRegistry<Biome> registry = registryHolder.registryOrThrow(Registry.BIOME_REGISTRY);
         if (worldData != null && worldData.worldGenSettings().isFlatWorld()) {
-            FixedBiomeSource biomeSource = new FixedBiomeSource(registry.getOrThrow(Biomes.PLAINS));
+            biomeSource2 = new FixedBiomeSource(registry.getOrThrow(Biomes.PLAINS)); // MagmaCube - decompile error
         } else {
             biomeSource2 = new OverworldBiomeSource(l, false, false, registry);
         }
@@ -103,7 +103,7 @@ public class McRegionUpgrader {
              RegionFile regionFile2 = new RegionFile(new File(file, s.substring(0, s.length() - ".mcr".length()) + ".mca"), file, true);){
             for (int i3 = 0; i3 < 32; ++i3) {
                 for (int i4 = 0; i4 < 32; ++i4) {
-                    void compoundTag3;
+                    CompoundTag compoundTag3; // MagmaCube - decompile error
                     ChunkPos chunkPos = new ChunkPos(i3, i4);
                     if (!regionFile.hasChunk(chunkPos) || regionFile2.hasChunk(chunkPos)) continue;
                     try (DataInputStream dataInputStream = regionFile.getChunkDataInputStream(chunkPos);){
@@ -111,7 +111,7 @@ public class McRegionUpgrader {
                             LOGGER.warn("Failed to fetch input stream for chunk {}", chunkPos);
                             continue;
                         }
-                        CompoundTag compoundTag = NbtIo.read(dataInputStream);
+                        compoundTag3 = NbtIo.read(dataInputStream); // MagmaCube - decompile error
                     }
                     catch (IOException iOException) {
                         LOGGER.warn("Failed to read data for chunk {}", chunkPos, iOException);
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/GsonAdapterFactory.java b/src/main/java/net/minecraft/world/level/storage/loot/GsonAdapterFactory.java
index b3b51a95aff98f75c4fe6d669122b75292f44d10..2bdbd444e57d323b804d89b3e51e5e296de56a45 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/GsonAdapterFactory.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/GsonAdapterFactory.java
@@ -74,7 +74,7 @@ public class GsonAdapterFactory
                 if (this.defaultType == null) {
                     throw new UnsupportedOperationException("Object " + jsonElement + " can't be deserialized");
                 }
-                return ((DefaultSerializer)this.defaultType.getSecond()).deserialize(jsonElement, jsonDeserializationContext);
+                return (this.defaultType.getSecond()).deserialize(jsonElement, jsonDeserializationContext); // MagmaCube - decompile error
             }
         }
         
@@ -88,7 +88,7 @@ public class GsonAdapterFactory
             }
             final JsonObject jsonObject = new JsonObject();
             jsonObject.addProperty(this.typeKey, this.registry.getKey(serializerType).toString());
-            serializerType.getSerializer().serialize(jsonObject, (E)object, jsonSerializationContext);
+            serializerType.getSerializer().serializeObject(jsonObject, (Object)object, jsonSerializationContext); // MagmaCube - decompile error
             return (JsonElement)jsonObject;
         }
     }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/LootContext.java b/src/main/java/net/minecraft/world/level/storage/loot/LootContext.java
index 10d2822f23065d090d920ef4d1747576340ce537..a0852bf3c7d2d859ef64fd678770ceb28163b2ac 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/LootContext.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/LootContext.java
@@ -132,14 +132,6 @@ public class LootContext {
             public EntityTarget read(JsonReader jsonReader) throws IOException {
                 return EntityTarget.getByName(jsonReader.nextString());
             }
-
-            public /* synthetic */ Object read(JsonReader jsonReader) throws IOException {
-                return this.read(jsonReader);
-            }
-
-            public /* synthetic */ void write(JsonWriter jsonWriter, Object object) throws IOException {
-                this.write(jsonWriter, (EntityTarget)(object));
-            }
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/LootContextUser.java b/src/main/java/net/minecraft/world/level/storage/loot/LootContextUser.java
index 0d272ad889520fbc34e2c5b02b35bc2280352b30..10e4ab59b31b2d4edbb9b2fdd6ea015c252a2549 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/LootContextUser.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/LootContextUser.java
@@ -7,7 +7,7 @@ import java.util.Set;
 public interface LootContextUser
 {
     default Set<LootContextParam<?>> getReferencedContextParams() {
-        return (Set<LootContextParam<?>>)ImmutableSet.of();
+        return ImmutableSet.of(); // MagmaCube - decompile fix
     }
     
     default void validate(final ValidationContext validationContext) {
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/LootPool.java b/src/main/java/net/minecraft/world/level/storage/loot/LootPool.java
index d6749038c3bf93d0e0500835a8db086f9ad2a44e..7d1d1045566f7f435d8361839af65800f189270a 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/LootPool.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/LootPool.java
@@ -55,7 +55,7 @@ public class LootPool {
 
     private void addRandomItem(Consumer<ItemStack> consumer, LootContext lootContext) {
         Random random = lootContext.getRandom();
-        ArrayList list = Lists.newArrayList();
+        ArrayList<LootPoolEntry> list = Lists.newArrayList(); // MagmaCube - type
         MutableInt mutableInt = new MutableInt();
         for (LootPoolEntryContainer lootPoolEntryContainer : this.entries) {
             lootPoolEntryContainer.expand(lootContext, lootPoolEntry -> {
@@ -138,14 +138,6 @@ public class LootPool {
             }
             return jsonObject;
         }
-
-        public /* synthetic */ JsonElement serialize(Object object, Type type, JsonSerializationContext jsonSerializationContext) {
-            return this.serialize((LootPool)object, type, jsonSerializationContext);
-        }
-
-        public /* synthetic */ Object deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
-            return this.deserialize(jsonElement, type, jsonDeserializationContext);
-        }
     }
 
     public static class Builder
@@ -190,20 +182,5 @@ public class LootPool {
             }
             return new LootPool(this.entries.toArray(new LootPoolEntryContainer[0]), this.conditions.toArray(new LootItemCondition[0]), this.functions.toArray(new LootItemFunction[0]), this.rolls, this.bonusRolls);
         }
-
-        @Override
-        public /* synthetic */ Object unwrap() {
-            return this.unwrap();
-        }
-
-        @Override
-        public /* synthetic */ Object apply(LootItemFunction.Builder builder) {
-            return this.apply(builder);
-        }
-
-        @Override
-        public /* synthetic */ Object when(LootItemCondition.Builder builder) {
-            return this.when(builder);
-        }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java b/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java
index 5dae25500dbe9275e6652648a0a05ab78a587067..e110c00ffc516a5eedf3499b6dec94b191f533c9 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java
@@ -196,14 +196,6 @@ public class LootTable {
             }
             return jsonObject;
         }
-
-        public /* synthetic */ JsonElement serialize(Object object, Type type, JsonSerializationContext jsonSerializationContext) {
-            return this.serialize((LootTable)object, type, jsonSerializationContext);
-        }
-
-        public /* synthetic */ Object deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
-            return this.deserialize(jsonElement, type, jsonDeserializationContext);
-        }
     }
 
     public static class Builder
@@ -236,15 +228,5 @@ public class LootTable {
         public LootTable build() {
             return new LootTable(this.paramSet, this.pools.toArray(new LootPool[0]), this.functions.toArray(new LootItemFunction[0]));
         }
-
-        @Override
-        public /* synthetic */ Object unwrap() {
-            return this.unwrap();
-        }
-
-        @Override
-        public /* synthetic */ Object apply(LootItemFunction.Builder builder) {
-            return this.apply(builder);
-        }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/LootTables.java b/src/main/java/net/minecraft/world/level/storage/loot/LootTables.java
index 41353779b09ca5aa0e2c318e6d72bce40193d49f..d6e14ceea4458b266e1f734b0c4b0cd983cce90f 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/LootTables.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/LootTables.java
@@ -22,7 +22,7 @@ public class LootTables extends SimpleJsonResourceReloadListener
     
     public LootTables(final PredicateManager predicateManager) {
         super(LootTables.GSON, "loot_tables");
-        this.tables = (Map<ResourceLocation, LootTable>)ImmutableMap.of();
+        this.tables = ImmutableMap.of(); // MagmaCube - decompile error
         this.predicateManager = predicateManager;
     }
     
@@ -32,17 +32,17 @@ public class LootTables extends SimpleJsonResourceReloadListener
     
     @Override
     protected void apply(final Map<ResourceLocation, JsonElement> map, final ResourceManager resourceManager, final ProfilerFiller profilerFiller) {
-        final ImmutableMap.Builder<ResourceLocation, LootTable> builder = (ImmutableMap.Builder<ResourceLocation, LootTable>)ImmutableMap.builder();
+        final ImmutableMap.Builder<ResourceLocation, LootTable> builder = ImmutableMap.builder(); // MagmaCube - decompile error
         final JsonElement jsonElement2 = map.remove(BuiltInLootTables.EMPTY);
         if (jsonElement2 != null) {
             LootTables.LOGGER.warn("Datapack tried to redefine {} loot table, ignoring", BuiltInLootTables.EMPTY);
         }
-        LootTable lootTable2;
-        final ImmutableMap.Builder builder2;
         map.forEach((resourceLocation, jsonElement) -> {
             try {
-                lootTable2 = (LootTable)LootTables.GSON.fromJson(jsonElement, (Class)LootTable.class);
-                builder2.put(resourceLocation, lootTable2);
+                // MagmaCube start - decompile error
+                LootTable lootTable2 = (LootTable)LootTables.GSON.fromJson(jsonElement, (Class)LootTable.class);
+                builder.put(resourceLocation, lootTable2);
+                // MagmaCube end - decompile error
             }
             catch (Exception exception) {
                 LootTables.LOGGER.error("Couldn't parse loot table {}", resourceLocation, exception);
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/PredicateManager.java b/src/main/java/net/minecraft/world/level/storage/loot/PredicateManager.java
index 8fbff4bde0f4bb0673fd69902922dead1bca4e64..f502911a9f87b0b4fc4a302ad59c9f6c285512bb 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/PredicateManager.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/PredicateManager.java
@@ -27,7 +27,7 @@ public class PredicateManager extends SimpleJsonResourceReloadListener
     
     public PredicateManager() {
         super(PredicateManager.GSON, "predicates");
-        this.conditions = (Map<ResourceLocation, LootItemCondition>)ImmutableMap.of();
+        this.conditions = ImmutableMap.of(); // MagmaCube - decompile error
     }
     
     @Nullable
@@ -37,19 +37,20 @@ public class PredicateManager extends SimpleJsonResourceReloadListener
     
     @Override
     protected void apply(final Map<ResourceLocation, JsonElement> map, final ResourceManager resourceManager, final ProfilerFiller profilerFiller) {
-        final ImmutableMap.Builder<ResourceLocation, LootItemCondition> builder = (ImmutableMap.Builder<ResourceLocation, LootItemCondition>)ImmutableMap.builder();
-        LootItemCondition[] lootItemConditions;
-        final ImmutableMap.Builder builder2;
-        LootItemCondition lootItemCondition2;
+        final ImmutableMap.Builder<ResourceLocation, LootItemCondition> builder = ImmutableMap.builder(); // MagmaCube - decompile error
         map.forEach((resourceLocation, jsonElement) -> {
             try {
                 if (jsonElement.isJsonArray()) {
-                    lootItemConditions = (LootItemCondition[])PredicateManager.GSON.fromJson(jsonElement, (Class)LootItemCondition[].class);
-                    builder2.put(resourceLocation, new CompositePredicate(lootItemConditions));
+                    // MagmaCube start - decompile error
+                    LootItemCondition[] lootItemConditions = (LootItemCondition[])PredicateManager.GSON.fromJson(jsonElement, (Class)LootItemCondition[].class);
+                    builder.put(resourceLocation, new CompositePredicate(lootItemConditions));
+                    // MagmaCube end - decompile error
                 }
                 else {
-                    lootItemCondition2 = (LootItemCondition)PredicateManager.GSON.fromJson(jsonElement, (Class)LootItemCondition.class);
-                    builder2.put(resourceLocation, lootItemCondition2);
+                    // MagmaCube start - decompile error
+                    LootItemCondition lootItemCondition = (LootItemCondition)PredicateManager.GSON.fromJson(jsonElement, (Class)LootItemCondition.class);
+                    builder.put(resourceLocation, lootItemCondition);
+                    // MagmaCube end - decompile error
                 }
             }
             catch (Exception exception) {
@@ -90,7 +91,7 @@ public class PredicateManager extends SimpleJsonResourceReloadListener
         
         @Override
         public void validate(final ValidationContext validationContext) {
-            super.validate(validationContext);
+            LootItemCondition.super.validate(validationContext); // MagmaCube - decompile error
             for (int i = 0; i < this.terms.length; ++i) {
                 this.terms[i].validate(validationContext.forChild(".term[" + i + "]"));
             }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/Serializer.java b/src/main/java/net/minecraft/world/level/storage/loot/Serializer.java
index 2074702b2ebdc184fb1bd51ec7b22d069414aa72..a9652d3a7fdab5e4f3964c1404eee2ef15230398 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/Serializer.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/Serializer.java
@@ -7,6 +7,7 @@ import com.google.gson.JsonObject;
 public interface Serializer<T>
 {
     void serialize(final JsonObject p0, final T p1, final JsonSerializationContext p2);
+    default void serializeObject(JsonObject p0, Object p1, JsonSerializationContext p2) { serialize(p0, (T) p1, p2); } // MagmaCube - add method
     
     T deserialize(final JsonObject p0, final JsonDeserializationContext p1);
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/AlternativesEntry.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/AlternativesEntry.java
index 0fc92ca8403a41fd4c4fd0edaf445d357bc59d38..c35812e79cdb672b57abe1ef4797ade0b06258b9 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/AlternativesEntry.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/AlternativesEntry.java
@@ -32,13 +32,13 @@ public class AlternativesEntry extends CompositeEntryBase
                 return composableEntryContainers[0].or(composableEntryContainers[1]);
             }
             default: {
-                final int length;
-                int i;
-                ComposableEntryContainer composableEntryContainer;
                 return (lootContext, consumer) -> {
-                    length = composableEntryContainers.length;
+                    // MagmaCube start - decompile error
+                    int length = composableEntryContainers.length;
+                    int i = 0;
+                    // MagmaCube end - decompile error
                     while (i < length) {
-                        composableEntryContainer = composableEntryContainers[i];
+                        ComposableEntryContainer composableEntryContainer = composableEntryContainers[i]; // MagmaCube - decompile error
                         if (composableEntryContainer.expand(lootContext, consumer)) {
                             return true;
                         }
@@ -71,7 +71,7 @@ public class AlternativesEntry extends CompositeEntryBase
         private final List<LootPoolEntryContainer> entries;
         
         public Builder(final LootPoolEntryContainer.Builder<?>... builders) {
-            this.entries = (List<LootPoolEntryContainer>)Lists.newArrayList();
+            this.entries = Lists.newArrayList(); // MagmaCube - decompile error
             for (final LootPoolEntryContainer.Builder<?> builder : builders) {
                 this.entries.add(builder.build());
             }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer.java
index 0cc14074c6055435d35d3530cf2a35e29fa1813a..2833c0c84b6ce4a7bc2189ef7a7053fff4835b7a 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer.java
@@ -5,7 +5,6 @@ import com.google.gson.JsonDeserializationContext;
 import org.apache.commons.lang3.ArrayUtils;
 import com.google.gson.JsonSerializationContext;
 import com.google.gson.JsonObject;
-import net.minecraft.world.level.storage.loot.Serializer;
 import com.google.common.collect.Lists;
 import java.util.List;
 import net.minecraft.world.level.storage.loot.predicates.ConditionUserBuilder;
@@ -42,7 +41,7 @@ public abstract class LootPoolEntryContainer implements ComposableEntryContainer
         private final List<LootItemCondition> conditions;
         
         public Builder() {
-            this.conditions = (List<LootItemCondition>)Lists.newArrayList();
+            this.conditions = Lists.newArrayList(); // MagmaCube - decompile fix
         }
         
         protected abstract T getThis();
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
index 1629146b37851b6169bd7ed380c60a32c6bfe917..0211ebd47b80a57c56facbaa3dae0224a9d644f1 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
@@ -89,11 +89,6 @@ extends LootPoolEntryContainer {
         }
 
         protected abstract T deserialize(JsonObject var1, JsonDeserializationContext var2, int var3, int var4, LootItemCondition[] var5, LootItemFunction[] var6);
-
-        @Override
-        public /* synthetic */ LootPoolEntryContainer deserializeCustom(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] arrlootItemCondition) {
-            return this.deserializeCustom(jsonObject, jsonDeserializationContext, arrlootItemCondition);
-        }
     }
 
     static class DummyBuilder
@@ -113,11 +108,6 @@ extends LootPoolEntryContainer {
         public LootPoolEntryContainer build() {
             return this.constructor.build(this.weight, this.quality, this.getConditions(), this.getFunctions());
         }
-
-        @Override
-        protected /* synthetic */ LootPoolEntryContainer.Builder getThis() {
-            return this.getThis();
-        }
     }
 
     @FunctionalInterface
@@ -151,11 +141,6 @@ extends LootPoolEntryContainer {
             this.quality = i;
             return (T)((Builder)this.getThis());
         }
-
-        @Override
-        public /* synthetic */ Object apply(LootItemFunction.Builder builder) {
-            return this.apply(builder);
-        }
     }
 
     public abstract class EntryBase
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyBonusCount.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyBonusCount.java
index add0c6546f5ddef082c093832acf9a2d8be11880..f1e07258f30dd94bae1611317739ce1fd29dbd95 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyBonusCount.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyBonusCount.java
@@ -110,11 +110,6 @@ extends LootItemConditionalFunction {
             }
             return new ApplyBonusCount(lootItemConditions, enchantment, formula2);
         }
-
-        @Override
-        public /* synthetic */ LootItemConditionalFunction deserialize(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] arrlootItemCondition) {
-            return this.deserialize(jsonObject, jsonDeserializationContext, arrlootItemCondition);
-        }
     }
 
     static final class OreDrops
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyExplosionDecay.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyExplosionDecay.java
index 5ea2a61c65cdf5084ae916b905541864ab8e97e9..c146eb5780ff1b7f472bc7cb2bef1bcb737a6da6 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyExplosionDecay.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyExplosionDecay.java
@@ -49,10 +49,5 @@ extends LootItemConditionalFunction {
         public ApplyExplosionDecay deserialize(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] lootItemConditions) {
             return new ApplyExplosionDecay(lootItemConditions);
         }
-
-        @Override
-        public /* synthetic */ LootItemConditionalFunction deserialize(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] arrlootItemCondition) {
-            return this.deserialize(jsonObject, jsonDeserializationContext, arrlootItemCondition);
-        }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyBlockState.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyBlockState.java
index 0f987865674c8c64c8592f5f7d265e1c88ba74ab..145350359809553306a67413961fe0495ce976e0 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyBlockState.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyBlockState.java
@@ -97,11 +97,6 @@ extends LootItemConditionalFunction {
             }
             return new CopyBlockState(lootItemConditions, block, set);
         }
-
-        @Override
-        public /* synthetic */ LootItemConditionalFunction deserialize(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] arrlootItemCondition) {
-            return this.deserialize(jsonObject, jsonDeserializationContext, arrlootItemCondition);
-        }
     }
 
     public static class Builder
@@ -130,10 +125,5 @@ extends LootItemConditionalFunction {
         public LootItemFunction build() {
             return new CopyBlockState(this.getConditions(), this.block, this.properties);
         }
-
-        @Override
-        protected /* synthetic */ LootItemConditionalFunction.Builder getThis() {
-            return this.getThis();
-        }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNameFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNameFunction.java
index a48f63ea60b7e313a9d6cd3a7f5acf40ed66a9e8..cb3cff7d8310aee73ca4c555e085fb2ae0bddf58 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNameFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNameFunction.java
@@ -62,11 +62,6 @@ extends LootItemConditionalFunction {
             NameSource nameSource = NameSource.getByName(GsonHelper.getAsString(jsonObject, "source"));
             return new CopyNameFunction(lootItemConditions, nameSource);
         }
-
-        @Override
-        public /* synthetic */ LootItemConditionalFunction deserialize(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] arrlootItemCondition) {
-            return this.deserialize(jsonObject, jsonDeserializationContext, arrlootItemCondition);
-        }
     }
 
     public static enum NameSource {
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNbtFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNbtFunction.java
index 31bfc0a720881e36657d8e33492dc7eba5d9457c..335918f12b7ce9c8af4fc47487710261e9404092 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNbtFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNbtFunction.java
@@ -24,6 +24,7 @@ import com.mojang.brigadier.StringReader;
 import net.minecraft.commands.arguments.NbtPathArgument;
 import java.util.Collection;
 import com.google.common.collect.ImmutableList;
+import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.nbt.Tag;
@@ -60,7 +61,7 @@ public class CopyNbtFunction extends LootItemConditionalFunction
     
     @Override
     public Set<LootContextParam<?>> getReferencedContextParams() {
-        return (Set<LootContextParam<?>>)ImmutableSet.of(this.source.param);
+        return ImmutableSet.of(this.source.param); // MagmaCube - decompile error
     }
     
     public ItemStack run(final ItemStack itemStack, final LootContext lootContext) {
@@ -128,7 +129,7 @@ public class CopyNbtFunction extends LootItemConditionalFunction
         private final List<CopyOperation> ops;
         
         private Builder(final DataSource dataSource) {
-            this.ops = (List<CopyOperation>)Lists.newArrayList();
+            this.ops = Lists.newArrayList(); // MagmaCube - decompile error
             this.source = dataSource;
         }
         
@@ -148,7 +149,7 @@ public class CopyNbtFunction extends LootItemConditionalFunction
         
         @Override
         public LootItemFunction build() {
-            return new CopyNbtFunction(this.getConditions(), this.source, this.ops, null);
+            return new CopyNbtFunction(this.getConditions(), this.source, this.ops); // MagmaCube - decompile error
         }
     }
     
@@ -157,29 +158,33 @@ public class CopyNbtFunction extends LootItemConditionalFunction
         REPLACE("replace") {
             @Override
             public void merge(final Tag tag, final NbtPathArgument.NbtPath nbtPath, final List<Tag> list) throws CommandSyntaxException {
-                nbtPath.set(tag, (Tag)Iterables.getLast((Iterable)list)::copy);
+                nbtPath.set(tag, Iterables.getLast(list)::copy); // MagmaCube - decompile error
             }
         }, 
         APPEND("append") {
             @Override
             public void merge(final Tag tag, final NbtPathArgument.NbtPath nbtPath, final List<Tag> list) throws CommandSyntaxException {
                 final List<Tag> list2 = nbtPath.getOrCreate(tag, (Supplier<Tag>)ListTag::new);
-                list2.forEach(tag -> {
-                    if (tag instanceof ListTag) {
-                        list.forEach(tag2 -> tag.add(tag2.copy()));
+                // MagmaCube start - decompile error
+                list2.forEach(theTag -> {
+                    if (theTag instanceof ListTag) {
+                        list.forEach(tag2 -> ((ListTag) theTag).add(tag2.copy()));
                     }
                 });
+                // MagmaCube end - decompile error
             }
         }, 
         MERGE("merge") {
             @Override
             public void merge(final Tag tag, final NbtPathArgument.NbtPath nbtPath, final List<Tag> list) throws CommandSyntaxException {
                 final List<Tag> list2 = nbtPath.getOrCreate(tag, (Supplier<Tag>)CompoundTag::new);
-                list2.forEach(tag -> {
-                    if (tag instanceof CompoundTag) {
+                // MagmaCube start - decompile error
+                list2.forEach(theTag -> {
+                    if (theTag instanceof CompoundTag) {
+                // MagmaCube end - decompile error
                         list.forEach(tag2 -> {
                             if (tag2 instanceof CompoundTag) {
-                                tag.merge(tag2);
+                                ((CompoundTag) theTag).merge((CompoundTag) tag2); // MagmaCube - decompile error
                             }
                         });
                     }
@@ -205,20 +210,37 @@ public class CopyNbtFunction extends LootItemConditionalFunction
         }
     }
     
+    // MagmaCube start - whole enum class
     public enum DataSource
     {
-        public static final DataSource THIS;
-        public static final DataSource KILLER;
-        public static final DataSource KILLER_PLAYER;
-        public static final DataSource BLOCK_ENTITY;
+        THIS("this", LootContextParams.THIS_ENTITY, CopyNbtFunction.ENTITY_GETTER),
+        KILLER("killer", LootContextParams.KILLER_ENTITY, CopyNbtFunction.ENTITY_GETTER),
+        KILLER_PLAYER("killer_player", LootContextParams.LAST_DAMAGE_PLAYER, CopyNbtFunction.ENTITY_GETTER),
+        BLOCK_ENTITY("block_entity", LootContextParams.BLOCK_ENTITY, CopyNbtFunction.BLOCK_ENTITY_GETTER);
+
         public final String name;
         public final LootContextParam<?> param;
         public final Function<LootContext, Tag> getter;
-        
-        private DataSource(final String s, final LootContextParam<T> lootContextParam, final Function<? super T, Tag> function);
-        
-        public static DataSource getByName(final String s);
+
+        <T> DataSource(String name, LootContextParam<T> param, Function<? super T, Tag> getter) {
+            this.name = name;
+            this.param = param;
+            this.getter = (context) -> {
+                T t = context.getParamOrNull(param);
+                return t != null ? getter.apply(t) : null;
+            };
+        }
+
+        public static DataSource getByName(String name) {
+            for(DataSource dataSource : values()) {
+                if (dataSource.name.equals(name)) {
+                    return dataSource;
+                }
+            }
+            throw new IllegalArgumentException("Invalid tag source " + name);
+        }
     }
+    // MagmaCube end - whole enum class
     
     public static class Serializer extends LootItemConditionalFunction.Serializer<CopyNbtFunction>
     {
@@ -234,13 +256,13 @@ public class CopyNbtFunction extends LootItemConditionalFunction
         @Override
         public CopyNbtFunction deserialize(final JsonObject jsonObject, final JsonDeserializationContext jsonDeserializationContext, final LootItemCondition[] lootItemConditions) {
             final DataSource dataSource = DataSource.getByName(GsonHelper.getAsString(jsonObject, "source"));
-            final List<CopyOperation> list = (List<CopyOperation>)Lists.newArrayList();
+            final List<CopyOperation> list = Lists.newArrayList(); // MagmaCube - decompile error
             final JsonArray jsonArray = GsonHelper.getAsJsonArray(jsonObject, "ops");
             for (final JsonElement jsonElement : jsonArray) {
                 final JsonObject jsonObject2 = GsonHelper.convertToJsonObject(jsonElement, "op");
                 list.add(CopyOperation.fromJson(jsonObject2));
             }
-            return new CopyNbtFunction(lootItemConditions, dataSource, list, null);
+            return new CopyNbtFunction(lootItemConditions, dataSource, list); // MagmaCube - decompile error
         }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
index 8cf1b70f8daacba2cef18109bdfc92d6d22463c8..48e861da319697d9e52fca16e0f3e2f22e890cf7 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
@@ -60,7 +60,7 @@ extends LootItemConditionalFunction {
                 LOGGER.warn("Couldn't find a compatible enchantment for {}", itemStack);
                 return itemStack;
             }
-            Enchantment enchantment3 = (Enchantment)list.get(random.nextInt(list.size()));
+            enchantment2 = (Enchantment)list.get(random.nextInt(list.size())); // MagmaCube - decompile error
         } else {
             enchantment2 = this.enchantments.get(random.nextInt(this.enchantments.size()));
         }
@@ -79,7 +79,7 @@ extends LootItemConditionalFunction {
     }
 
     public static LootItemConditionalFunction.Builder<?> randomApplicableEnchantment() {
-        return EnchantRandomlyFunction.simpleBuilder(lootItemConditions -> new EnchantRandomlyFunction((LootItemCondition[])lootItemConditions, (Collection<Enchantment>)ImmutableList.of()));
+        return EnchantRandomlyFunction.simpleBuilder(lootItemConditions -> new EnchantRandomlyFunction((LootItemCondition[])lootItemConditions, ImmutableList.of())); // MagmaCube - decompile error
     }
 
     public static class Serializer
@@ -113,11 +113,6 @@ extends LootItemConditionalFunction {
             }
             return new EnchantRandomlyFunction(lootItemConditions, list);
         }
-
-        @Override
-        public /* synthetic */ LootItemConditionalFunction deserialize(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] arrlootItemCondition) {
-            return this.deserialize(jsonObject, jsonDeserializationContext, arrlootItemCondition);
-        }
     }
 
     public static class Builder
@@ -138,10 +133,5 @@ extends LootItemConditionalFunction {
         public LootItemFunction build() {
             return new EnchantRandomlyFunction(this.getConditions(), this.enchantments);
         }
-
-        @Override
-        protected /* synthetic */ LootItemConditionalFunction.Builder getThis() {
-            return this.getThis();
-        }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunction.java
index bda2d14b9d88aaa551fa35263573a73ec811049b..af8684e229b950fc07635a13849c0ec86ec0cc5c 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunction.java
@@ -10,7 +10,7 @@ public interface LootItemFunction extends LootContextUser, BiFunction<ItemStack,
 {
     LootItemFunctionType getType();
     
-    default Consumer<ItemStack> decorate(final BiFunction<ItemStack, LootContext, ItemStack> biFunction, final Consumer<ItemStack> consumer, final LootContext lootContext) {
+    static Consumer<ItemStack> decorate(final BiFunction<ItemStack, LootContext, ItemStack> biFunction, final Consumer<ItemStack> consumer, final LootContext lootContext) { // MagmaCube - default -> static
         return itemStack -> consumer.accept(biFunction.apply(itemStack, lootContext));
     }
     
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetLoreFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetLoreFunction.java
index 3275803de4ba62e2285e658fc5403da949f801ae..1ea0fe9e76b633537ff747ffd1342b97ed489131 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetLoreFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetLoreFunction.java
@@ -68,21 +68,26 @@ extends LootItemConditionalFunction {
      */
     @Nullable
     private ListTag getLoreTag(ItemStack itemStack, boolean flag) {
-        void compoundTag6;
-        void compoundTag3;
+        // MagmaCube start - decompile error
+        CompoundTag compoundTag6;
+        CompoundTag compoundTag3;
+        // MagmaCube end - decompile error
         if (itemStack.hasTag()) {
-            CompoundTag compoundTag = itemStack.getTag();
+            compoundTag3 = itemStack.getTag();
         } else if (flag) {
-            CompoundTag compoundTag2 = new CompoundTag();
-            itemStack.setTag(compoundTag2);
+            compoundTag3 = new CompoundTag();
+            itemStack.setTag(compoundTag3);
+        // MagmaCube end - decompile error
         } else {
             return null;
         }
+        // MagmaCube start - decompile error
         if (compoundTag3.contains("display", 10)) {
-            CompoundTag compoundTag4 = compoundTag3.getCompound("display");
+            compoundTag6 = compoundTag3.getCompound("display");
         } else if (flag) {
-            CompoundTag compoundTag5 = new CompoundTag();
-            compoundTag3.put("display", compoundTag5);
+            compoundTag6 = new CompoundTag();
+            compoundTag3.put("display", compoundTag6);
+        // MagmaCube end - decompile error
         } else {
             return null;
         }
@@ -116,14 +121,9 @@ extends LootItemConditionalFunction {
         @Override
         public SetLoreFunction deserialize(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] lootItemConditions) {
             boolean flag = GsonHelper.getAsBoolean(jsonObject, "replace", false);
-            List list = (List)Streams.stream((Iterable)GsonHelper.getAsJsonArray(jsonObject, "lore")).map(Component.Serializer::fromJson).collect(ImmutableList.toImmutableList());
+            List<Component> list = (List)Streams.stream(GsonHelper.getAsJsonArray(jsonObject, "lore")).map(Component.Serializer::fromJson).collect(ImmutableList.toImmutableList()); // MagmaCube - decompile error
             LootContext.EntityTarget entityTarget = GsonHelper.getAsObject(jsonObject, "entity", null, jsonDeserializationContext, LootContext.EntityTarget.class);
             return new SetLoreFunction(lootItemConditions, flag, list, entityTarget);
         }
-
-        @Override
-        public /* synthetic */ LootItemConditionalFunction deserialize(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] arrlootItemCondition) {
-            return this.deserialize(jsonObject, jsonDeserializationContext, arrlootItemCondition);
-        }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/SmeltItemFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/SmeltItemFunction.java
index 547094bd982873152f961b64d8e81f863a8e8e2d..22477bae4de0d263f8ddf7b18cb227c316de0f3a 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/SmeltItemFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/SmeltItemFunction.java
@@ -54,10 +54,5 @@ extends LootItemConditionalFunction {
         public SmeltItemFunction deserialize(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] lootItemConditions) {
             return new SmeltItemFunction(lootItemConditions);
         }
-
-        @Override
-        public /* synthetic */ LootItemConditionalFunction deserialize(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] arrlootItemCondition) {
-            return this.deserialize(jsonObject, jsonDeserializationContext, arrlootItemCondition);
-        }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/parameters/LootContextParamSet.java b/src/main/java/net/minecraft/world/level/storage/loot/parameters/LootContextParamSet.java
index d87ef76f6960c2cc98b7c2ecc7826ba95a02a4ea..fc02f519311d52a4c64d01623c05f13e78425e46 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/parameters/LootContextParamSet.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/parameters/LootContextParamSet.java
@@ -46,8 +46,8 @@ public class LootContextParamSet
         private final Set<LootContextParam<?>> optional;
         
         public Builder() {
-            this.required = (Set<LootContextParam<?>>)Sets.newIdentityHashSet();
-            this.optional = (Set<LootContextParam<?>>)Sets.newIdentityHashSet();
+            this.required = Sets.newIdentityHashSet(); // MagmaCube - decompile fix
+            this.optional = Sets.newIdentityHashSet(); // MagmaCube - decompile fix
         }
         
         public Builder required(final LootContextParam<?> lootContextParam) {
@@ -67,7 +67,7 @@ public class LootContextParamSet
         }
         
         public LootContextParamSet build() {
-            return new LootContextParamSet(this.required, this.optional, null);
+            return new LootContextParamSet(this.required, this.optional); // MagmaCube - decompile fix
         }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/AlternativeLootItemCondition.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/AlternativeLootItemCondition.java
index 219b814e74d7a813930cc2cd5cdabf0fe1c233bf..62b4860cc1fc5041ecf9f63702436f85eb98400c 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/AlternativeLootItemCondition.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/AlternativeLootItemCondition.java
@@ -33,7 +33,7 @@ public class AlternativeLootItemCondition implements LootItemCondition
     
     @Override
     public void validate(final ValidationContext validationContext) {
-        super.validate(validationContext);
+        LootItemCondition.super.validate(validationContext); // MagmaCube - decompile error
         for (int i = 0; i < this.terms.length; ++i) {
             this.terms[i].validate(validationContext.forChild(".term[" + i + "]"));
         }
@@ -48,7 +48,7 @@ public class AlternativeLootItemCondition implements LootItemCondition
         private final List<LootItemCondition> terms;
         
         public Builder(final LootItemCondition.Builder... builders) {
-            this.terms = (List<LootItemCondition>)Lists.newArrayList();
+            this.terms = Lists.newArrayList(); // MagmaCube - decompile error
             for (final LootItemCondition.Builder builder : builders) {
                 this.terms.add(builder.build());
             }
@@ -62,7 +62,7 @@ public class AlternativeLootItemCondition implements LootItemCondition
         
         @Override
         public LootItemCondition build() {
-            return new AlternativeLootItemCondition(this.terms.toArray(new LootItemCondition[0]), null);
+            return new AlternativeLootItemCondition(this.terms.toArray(new LootItemCondition[0])); // MagmaCube - decompile error
         }
     }
     
@@ -76,7 +76,7 @@ public class AlternativeLootItemCondition implements LootItemCondition
         @Override
         public AlternativeLootItemCondition deserialize(final JsonObject jsonObject, final JsonDeserializationContext jsonDeserializationContext) {
             final LootItemCondition[] lootItemConditions = GsonHelper.getAsObject(jsonObject, "terms", jsonDeserializationContext, (Class<? extends LootItemCondition[]>)LootItemCondition[].class);
-            return new AlternativeLootItemCondition(lootItemConditions, null);
+            return new AlternativeLootItemCondition(lootItemConditions); // MagmaCube - decompile error
         }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemEntityPropertyCondition.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemEntityPropertyCondition.java
index aa5e6e120cd48641c6203aff039e572049cbc6f0..c4bdfeac8961a64af6de4549d9c609ff3afdf836 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemEntityPropertyCondition.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemEntityPropertyCondition.java
@@ -64,7 +64,7 @@ public class LootItemEntityPropertyCondition implements LootItemCondition
         @Override
         public LootItemEntityPropertyCondition deserialize(final JsonObject jsonObject, final JsonDeserializationContext jsonDeserializationContext) {
             final EntityPredicate entityPredicate = EntityPredicate.fromJson(jsonObject.get("predicate"));
-            return new LootItemEntityPropertyCondition(entityPredicate, GsonHelper.getAsObject(jsonObject, "entity", jsonDeserializationContext, (Class<? extends LootContext.EntityTarget>)LootContext.EntityTarget.class), null);
+            return new LootItemEntityPropertyCondition(entityPredicate, GsonHelper.getAsObject(jsonObject, "entity", jsonDeserializationContext, LootContext.EntityTarget.class)); // MagmaCube - decompile error
         }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/timers/FunctionCallback.java b/src/main/java/net/minecraft/world/level/timers/FunctionCallback.java
index 9d9781b644d489f0e65847cf64fa4b060fe879f0..a11aa06a6f0b282b5450e0280e859ff89463c5c1 100644
--- a/src/main/java/net/minecraft/world/level/timers/FunctionCallback.java
+++ b/src/main/java/net/minecraft/world/level/timers/FunctionCallback.java
@@ -38,10 +38,5 @@ implements TimerCallback<MinecraftServer> {
             ResourceLocation resourceLocation = new ResourceLocation(compoundTag.getString("Name"));
             return new FunctionCallback(resourceLocation);
         }
-
-        @Override
-        public /* synthetic */ TimerCallback deserialize(CompoundTag compoundTag) {
-            return this.deserialize(compoundTag);
-        }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/timers/FunctionTagCallback.java b/src/main/java/net/minecraft/world/level/timers/FunctionTagCallback.java
index ab477b8f5946187d6448d3ec3ca046dd78050735..372771035cf221e9be34c651f18395b899b441f9 100644
--- a/src/main/java/net/minecraft/world/level/timers/FunctionTagCallback.java
+++ b/src/main/java/net/minecraft/world/level/timers/FunctionTagCallback.java
@@ -42,10 +42,5 @@ implements TimerCallback<MinecraftServer> {
             ResourceLocation resourceLocation = new ResourceLocation(compoundTag.getString("Name"));
             return new FunctionTagCallback(resourceLocation);
         }
-
-        @Override
-        public /* synthetic */ TimerCallback deserialize(CompoundTag compoundTag) {
-            return this.deserialize(compoundTag);
-        }
     }
 }
diff --git a/src/main/java/net/minecraft/world/phys/HitResult.java b/src/main/java/net/minecraft/world/phys/HitResult.java
index 5cd64b1b1d73ed36eb0603dd21401795f7596c84..f145b3a9ca3a7570954bb3e0f594a5db1cab8ec3 100644
--- a/src/main/java/net/minecraft/world/phys/HitResult.java
+++ b/src/main/java/net/minecraft/world/phys/HitResult.java
@@ -27,6 +27,6 @@ public abstract class HitResult
     {
         MISS, 
         BLOCK, 
-        ENTITY;
+        ENTITY
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/phys/shapes/CollisionContext.java b/src/main/java/net/minecraft/world/phys/shapes/CollisionContext.java
index 2103ce3828fb43c2d3661a4c9aba2695f18eb84c..8cd40a19de8b1fbce1a7b1d8761e377cc15fa401 100644
--- a/src/main/java/net/minecraft/world/phys/shapes/CollisionContext.java
+++ b/src/main/java/net/minecraft/world/phys/shapes/CollisionContext.java
@@ -8,11 +8,13 @@ import net.minecraft.world.entity.Entity;
 
 public interface CollisionContext
 {
-    default CollisionContext empty() {
+    // MagmaCube - default -> static
+    static CollisionContext empty() {
         return EntityCollisionContext.EMPTY;
     }
     
-    default CollisionContext of(final Entity entity) {
+    // MagmaCube - default -> static
+    static CollisionContext of(final Entity entity) {
         return new EntityCollisionContext(entity);
     }
     
diff --git a/src/main/java/net/minecraft/world/phys/shapes/VoxelShape.java b/src/main/java/net/minecraft/world/phys/shapes/VoxelShape.java
index 67e72c97b5cabd136020cf64fad9cc152eeca7a4..e0b1b3e2d62612dc09864e063f9d443f272dc173 100644
--- a/src/main/java/net/minecraft/world/phys/shapes/VoxelShape.java
+++ b/src/main/java/net/minecraft/world/phys/shapes/VoxelShape.java
@@ -66,8 +66,7 @@ public abstract class VoxelShape
     
     public VoxelShape optimize() {
         final VoxelShape[] voxelShapes = { Shapes.empty() };
-        final Object o;
-        this.forAllBoxes((d, d2, d3, d4, d5, d6) -> o[0] = Shapes.joinUnoptimized(o[0], Shapes.box(d, d2, d3, d4, d5, d6), BooleanOp.OR));
+        this.forAllBoxes((d, d2, d3, d4, d5, d6) -> voxelShapes[0] = Shapes.joinUnoptimized(voxelShapes[0], Shapes.box(d, d2, d3, d4, d5, d6), BooleanOp.OR)); // MagmaCube - decompile error
         return voxelShapes[0];
     }
     
@@ -79,14 +78,12 @@ public abstract class VoxelShape
         final DoubleList doubleList = this.getCoords(Direction.Axis.X);
         final DoubleList doubleList2 = this.getCoords(Direction.Axis.Y);
         final DoubleList doubleList3 = this.getCoords(Direction.Axis.Z);
-        final DoubleList list;
-        final DoubleList list2;
-        final DoubleList list3;
-        this.shape.forAllBoxes((i, i2, i3, i4, i5, i6) -> doubleLineConsumer.consume(list.getDouble(i), list2.getDouble(i2), list3.getDouble(i3), list.getDouble(i4), list2.getDouble(i5), list3.getDouble(i6)), true);
+        // MagmaCube - decompile error
+        this.shape.forAllBoxes((i, i2, i3, i4, i5, i6) -> doubleLineConsumer.consume(doubleList.getDouble(i), doubleList2.getDouble(i2), doubleList3.getDouble(i3), doubleList.getDouble(i4), doubleList2.getDouble(i5), doubleList3.getDouble(i6)), true);
     }
     
     public List<AABB> toAabbs() {
-        final List<AABB> list = (List<AABB>)Lists.newArrayList();
+        final List<AABB> list = Lists.newArrayList(); // MagmaCube - decompile error
         this.forAllBoxes((d, d2, d3, d4, d5, d6) -> list.add(new AABB(d, d2, d3, d4, d5, d6)));
         return list;
     }
diff --git a/src/main/java/net/minecraft/world/scores/Objective.java b/src/main/java/net/minecraft/world/scores/Objective.java
index fa3c3739072f449ff523578ed28bcccfccb692a6..09db9c2d32124db0847cf69e1096de73d0c0f9bb 100644
--- a/src/main/java/net/minecraft/world/scores/Objective.java
+++ b/src/main/java/net/minecraft/world/scores/Objective.java
@@ -42,9 +42,8 @@ public class Objective
     }
     
     private Component createFormattedDisplayName() {
-        final HoverEvent hoverEvent;
         return ComponentUtils.wrapInSquareBrackets(this.displayName.copy().withStyle(style -> {
-            new HoverEvent((HoverEvent.Action<TextComponent>)HoverEvent.Action.SHOW_TEXT, new TextComponent(this.name));
+            HoverEvent hoverEvent = new HoverEvent(HoverEvent.Action.SHOW_TEXT, new TextComponent(this.name)); // MagmaCube - decompile error
             return style.withHoverEvent(hoverEvent);
         }));
     }
diff --git a/src/main/java/net/minecraft/world/scores/Scoreboard.java b/src/main/java/net/minecraft/world/scores/Scoreboard.java
index c37264537b0f144a0e7082401195ba551af02dc1..3be00c93d67840cab9b0d1847af622202745c860 100644
--- a/src/main/java/net/minecraft/world/scores/Scoreboard.java
+++ b/src/main/java/net/minecraft/world/scores/Scoreboard.java
@@ -31,12 +31,14 @@ public class Scoreboard
     private static String[] displaySlotNames;
     
     public Scoreboard() {
-        this.objectivesByName = (Map<String, Objective>)Maps.newHashMap();
-        this.objectivesByCriteria = (Map<ObjectiveCriteria, List<Objective>>)Maps.newHashMap();
-        this.playerScores = (Map<String, Map<Objective, Score>>)Maps.newHashMap();
+        // MagmaCube start - decompile error
+        this.objectivesByName = Maps.newHashMap();
+        this.objectivesByCriteria = Maps.newHashMap();
+        this.playerScores = Maps.newHashMap();
         this.displayObjectives = new Objective[19];
-        this.teamsByName = (Map<String, PlayerTeam>)Maps.newHashMap();
-        this.teamsByPlayer = (Map<String, PlayerTeam>)Maps.newHashMap();
+        this.teamsByName = Maps.newHashMap();
+        this.teamsByPlayer = Maps.newHashMap();
+        // MagmaCube end - decompile error
     }
     
     public boolean hasObjective(final String s) {
@@ -60,7 +62,7 @@ public class Scoreboard
             throw new IllegalArgumentException("An objective with the name '" + s + "' already exists!");
         }
         final Objective objective = new Objective(this, s, objectiveCriteria, component, renderType);
-        this.objectivesByCriteria.computeIfAbsent(objectiveCriteria, objectiveCriteria -> Lists.newArrayList()).add(objective);
+        this.objectivesByCriteria.computeIfAbsent(objectiveCriteria, objectiveCriteria1 -> Lists.newArrayList()).add(objective); // MagmaCube - decompile error
         this.objectivesByName.put(s, objective);
         this.onObjectiveAdded(objective);
         return objective;
@@ -83,17 +85,18 @@ public class Scoreboard
         if (s.length() > 40) {
             throw new IllegalArgumentException("The player name '" + s + "' is too long!");
         }
-        final Map<Objective, Score> map = this.playerScores.computeIfAbsent(s, s -> Maps.newHashMap());
-        final Score score;
-        return map.computeIfAbsent(objective, objective -> {
-            score = new Score(this, objective, s);
+        // MagmaCube start - decompile error
+        final Map<Objective, Score> map = this.playerScores.computeIfAbsent(s, s1 -> Maps.newHashMap());
+        return map.computeIfAbsent(objective, obj -> {
+            Score score = new Score(this, obj, s);
+            // MagmaCube end - decompile error
             score.setScore(0);
             return score;
         });
     }
     
     public Collection<Score> getPlayerScores(final Objective objective) {
-        final List<Score> list = (List<Score>)Lists.newArrayList();
+        final List<Score> list = Lists.newArrayList(); // MagmaCube - decompile error
         for (final Map<Objective, Score> map : this.playerScores.values()) {
             final Score score = map.get(objective);
             if (score != null) {
@@ -143,7 +146,7 @@ public class Scoreboard
     public Map<Objective, Score> getPlayerScores(final String s) {
         Map<Objective, Score> map = this.playerScores.get(s);
         if (map == null) {
-            map = (Map<Objective, Score>)Maps.newHashMap();
+            map = Maps.newHashMap(); // MagmaCube - decompile error
         }
         return map;
     }
@@ -332,15 +335,13 @@ public class Scoreboard
     
     protected ListTag savePlayerScores() {
         final ListTag listTag = new ListTag();
-        final CompoundTag compoundTag;
-        final AbstractList<CompoundTag> list;
-        this.playerScores.values().stream().map((Function<? super Map<Objective, Score>, ?>)Map::values).forEach(collection -> collection.stream().filter(score -> score.getObjective() != null).forEach(score -> {
-            compoundTag = new CompoundTag();
+        this.playerScores.values().stream().map(Map::values).forEach(collection -> collection.stream().filter(score -> score.getObjective() != null).forEach(score -> { // MagmaCube - decompile error
+            CompoundTag compoundTag = new CompoundTag(); // MagmaCube - decompile error
             compoundTag.putString("Name", score.getOwner());
             compoundTag.putString("Objective", score.getObjective().getName());
             compoundTag.putInt("Score", score.getScore());
             compoundTag.putBoolean("Locked", score.isLocked());
-            list.add(compoundTag);
+            listTag.add(compoundTag); // MagmaCube - decompile error
         }));
         return listTag;
     }
diff --git a/src/main/java/net/minecraft/world/scores/criteria/ObjectiveCriteria.java b/src/main/java/net/minecraft/world/scores/criteria/ObjectiveCriteria.java
index 58b54776000be09eb106cd691a8a70b450dfce19..9a6b8b73e7c92ba1b82c0ad5e0e4985bab1f3b02 100644
--- a/src/main/java/net/minecraft/world/scores/criteria/ObjectiveCriteria.java
+++ b/src/main/java/net/minecraft/world/scores/criteria/ObjectiveCriteria.java
@@ -106,7 +106,7 @@ public class ObjectiveCriteria
         }
         
         static {
-            final ImmutableMap.Builder<String, RenderType> builder = (ImmutableMap.Builder<String, RenderType>)ImmutableMap.builder();
+            final ImmutableMap.Builder<String, RenderType> builder = ImmutableMap.builder(); // MagmaCube - decompile error
             for (final RenderType renderType : values()) {
                 builder.put(renderType.id, renderType);
             }
diff --git a/src/main/resources/META-INF/MANIFEST.MF b/src/main/resources/META-INF/MANIFEST.MF
index 54f165d5b7667fdf8dc7d999ef532ab39eda546f..473dae586d5d60b1bccaa0908c1f2f47e2b8ffd4 100644
--- a/src/main/resources/META-INF/MANIFEST.MF
+++ b/src/main/resources/META-INF/MANIFEST.MF
@@ -1,3 +1,4 @@
 Manifest-Version: 1.0
 Main-Class: net.minecraft.client.main.Main
+Implementation-Version: 1.16.4
 
diff --git a/src/main/resources/log4j2-debug.xml b/src/main/resources/log4j2-debug.xml
new file mode 100644
index 0000000000000000000000000000000000000000..aea01980678d1a4f74982b0c08f42456d557b124
--- /dev/null
+++ b/src/main/resources/log4j2-debug.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Configuration status="WARN" packages="com.mojang.util">
+    <Appenders>
+        <Console name="SysOut" target="SYSTEM_OUT">
+            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level]: %msg%n" />
+        </Console>
+        <Queue name="ServerGuiConsole">
+            <PatternLayout pattern="[%d{HH:mm:ss} %level]: %msg%n" />
+        </Queue>
+        <RollingRandomAccessFile name="File" fileName="logs/latest.log" filePattern="logs/%d{yyyy-MM-dd}-%i.log.gz">
+            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level]: %msg%n" />
+            <Policies>
+                <TimeBasedTriggeringPolicy />
+                <OnStartupTriggeringPolicy />
+            </Policies>
+        </RollingRandomAccessFile>
+    </Appenders>
+    <Loggers>
+        <Root level="debug">
+            <filters>
+                <MarkerFilter marker="NETWORK_PACKETS" onMatch="DENY" onMismatch="NEUTRAL" />
+            </filters>
+            <AppenderRef ref="SysOut"/>
+            <AppenderRef ref="File"/>
+            <AppenderRef ref="ServerGuiConsole"/>
+        </Root>
+    </Loggers>
+</Configuration>
\ No newline at end of file
